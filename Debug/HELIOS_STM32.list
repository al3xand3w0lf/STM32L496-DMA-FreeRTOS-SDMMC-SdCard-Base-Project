
HELIOS_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cf8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08010ea8  08010ea8  00020ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011418  08011418  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08011418  08011418  00021418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011420  08011420  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011420  08011420  00021420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011424  08011424  00021424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08011428  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b6c  20000074  0801149c  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20008be0  0801149c  00038be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029fc9  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000594a  00000000  00000000  0005a06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  0005f9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f00  00000000  00000000  00061b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030778  00000000  00000000  00063a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eaf2  00000000  00000000  000941c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001198b8  00000000  00000000  000c2cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dc572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dac  00000000  00000000  001dc5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010e90 	.word	0x08010e90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08010e90 	.word	0x08010e90

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20008160 	.word	0x20008160

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_DMA_Init+0x38>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <MX_DMA_Init+0x38>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6493      	str	r3, [r2, #72]	; 0x48
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_DMA_Init+0x38>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2105      	movs	r1, #5
 80005aa:	203b      	movs	r0, #59	; 0x3b
 80005ac:	f000 ff80 	bl	80014b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80005b0:	203b      	movs	r0, #59	; 0x3b
 80005b2:	f000 ffa9 	bl	8001508 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	20000150 	.word	0x20000150

080005f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of startTask */
  osThreadDef(startTask, StartDefaultTask, osPriorityNormal, 0, 1000);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_FREERTOS_Init+0x30>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  startTaskHandle = osThreadCreate(osThread(startTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f00b fd85 	bl	800c124 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <MX_FREERTOS_Init+0x34>)
 800061e:	6013      	str	r3, [r2, #0]
  // Create main app task


  /* USER CODE END RTOS_THREADS */

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	08010eb4 	.word	0x08010eb4
 800062c:	20000090 	.word	0x20000090

08000630 <StartDefaultTask>:

uint8_t SD_FileOperationsTest();

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//static int cnt = 0;
  volatile uint8_t result = 10;
 8000638:	230a      	movs	r3, #10
 800063a:	72fb      	strb	r3, [r7, #11]

  result = SD_FileOperationsTest();
 800063c:	f000 f83e 	bl	80006bc <SD_FileOperationsTest>
 8000640:	4603      	mov	r3, r0
 8000642:	72fb      	strb	r3, [r7, #11]


  if(result == FR_OK){
 8000644:	7afb      	ldrb	r3, [r7, #11]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d121      	bne.n	8000690 <StartDefaultTask+0x60>


	  BaseType_t ret;
	  ret = xTaskCreate( LedBlueTask, "Led Blue task", MAINAPP_STACK_SIZE, NULL, 1, &LedBlueTaskHandle );
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <StartDefaultTask+0x74>)
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2301      	movs	r3, #1
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065a:	4913      	ldr	r1, [pc, #76]	; (80006a8 <StartDefaultTask+0x78>)
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <StartDefaultTask+0x7c>)
 800065e:	f00d f896 	bl	800d78e <xTaskCreate>
 8000662:	60f8      	str	r0, [r7, #12]
	  if ( ret != pdPASS ) for ( ;; ) {
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d000      	beq.n	800066c <StartDefaultTask+0x3c>
 800066a:	e7fe      	b.n	800066a <StartDefaultTask+0x3a>
	  }

	  // Create RTC synchronization task
	  ret = xTaskCreate( LedGreenTask, "Led Green task", SYNCRTC_STACK_SIZE, NULL, 1, &LedGreenTaskHandle );
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <StartDefaultTask+0x80>)
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2301      	movs	r3, #1
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	490e      	ldr	r1, [pc, #56]	; (80006b4 <StartDefaultTask+0x84>)
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <StartDefaultTask+0x88>)
 800067c:	f00d f887 	bl	800d78e <xTaskCreate>
 8000680:	60f8      	str	r0, [r7, #12]
	  if ( ret != pdPASS ) for ( ;; ) {
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d000      	beq.n	800068a <StartDefaultTask+0x5a>
 8000688:	e7fe      	b.n	8000688 <StartDefaultTask+0x58>
	  }

	  vTaskDelete( NULL );
 800068a:	2000      	movs	r0, #0
 800068c:	f00d f9ea 	bl	800da64 <vTaskDelete>
  }

  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f001 fea1 	bl	80023dc <HAL_GPIO_TogglePin>
    osDelay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f00b fd8e 	bl	800c1bc <osDelay>
    HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 80006a0:	e7f6      	b.n	8000690 <StartDefaultTask+0x60>
 80006a2:	bf00      	nop
 80006a4:	20000098 	.word	0x20000098
 80006a8:	08010ed0 	.word	0x08010ed0
 80006ac:	080007c9 	.word	0x080007c9
 80006b0:	20000094 	.word	0x20000094
 80006b4:	08010ee0 	.word	0x08010ee0
 80006b8:	080007e5 	.word	0x080007e5

080006bc <SD_FileOperationsTest>:
  * @retval 0 == all fine
  * 		1+ == errors
  */

uint8_t SD_FileOperationsTest()
{
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b0b8      	sub	sp, #224	; 0xe0
 80006c0:	af00      	add	r7, sp, #0
  FRESULT res;
  uint32_t byteswritten, bytesread;                     // File write/read counts
  uint8_t wtext[] = "STM32L496 AW: This is AW working with FatFs uSD + DMA + FreeRTOS + USB"; // File write buffer
 80006c2:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <SD_FileOperationsTest+0xf8>)
 80006c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006c8:	4611      	mov	r1, r2
 80006ca:	2247      	movs	r2, #71	; 0x47
 80006cc:	4618      	mov	r0, r3
 80006ce:	f010 fb07 	bl	8010ce0 <memcpy>
  uint8_t rtext[100];                                   // File read buffer
  char fileNameIntern[40] = "STM32_AW_extendendFilename.TXT";
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <SD_FileOperationsTest+0xfc>)
 80006d4:	463c      	mov	r4, r7
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e0:	c407      	stmia	r4!, {r0, r1, r2}
 80006e2:	8023      	strh	r3, [r4, #0]
 80006e4:	3402      	adds	r4, #2
 80006e6:	0c1b      	lsrs	r3, r3, #16
 80006e8:	7023      	strb	r3, [r4, #0]
 80006ea:	f107 031f 	add.w	r3, r7, #31
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	721a      	strb	r2, [r3, #8]


  // Register the file system object to the FatFs module /
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) == FR_OK)
 80006f6:	2200      	movs	r2, #0
 80006f8:	4930      	ldr	r1, [pc, #192]	; (80007bc <SD_FileOperationsTest+0x100>)
 80006fa:	4831      	ldr	r0, [pc, #196]	; (80007c0 <SD_FileOperationsTest+0x104>)
 80006fc:	f00a fe2a 	bl	800b354 <f_mount>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d150      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
  {
    // Create and Open a new text file object with write access
    //if(f_open(&SDFile, "STM32_AW.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
    if(f_open(&SDFile, fileNameIntern, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	220a      	movs	r2, #10
 800070a:	4619      	mov	r1, r3
 800070c:	482d      	ldr	r0, [pc, #180]	; (80007c4 <SD_FileOperationsTest+0x108>)
 800070e:	f00a fe85 	bl	800b41c <f_open>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d147      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
    {
      // Write data to the text file
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8000718:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800071c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000720:	2247      	movs	r2, #71	; 0x47
 8000722:	4828      	ldr	r0, [pc, #160]	; (80007c4 <SD_FileOperationsTest+0x108>)
 8000724:	f00b f9ad 	bl	800ba82 <f_write>
 8000728:	4603      	mov	r3, r0
 800072a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

      if((byteswritten > 0) && (res == FR_OK))
 800072e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000732:	2b00      	cmp	r3, #0
 8000734:	d038      	beq.n	80007a8 <SD_FileOperationsTest+0xec>
 8000736:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800073a:	2b00      	cmp	r3, #0
 800073c:	d134      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
      {
        // Close the open text file
        f_close(&SDFile);
 800073e:	4821      	ldr	r0, [pc, #132]	; (80007c4 <SD_FileOperationsTest+0x108>)
 8000740:	f00b fbcc 	bl	800bedc <f_close>

        // Open the text file object with read access
        if(f_open(&SDFile, fileNameIntern, FA_READ) == FR_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	2201      	movs	r2, #1
 8000748:	4619      	mov	r1, r3
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <SD_FileOperationsTest+0x108>)
 800074c:	f00a fe66 	bl	800b41c <f_open>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d128      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
        {
          // Read data from the text file
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800075a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800075e:	2264      	movs	r2, #100	; 0x64
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <SD_FileOperationsTest+0x108>)
 8000762:	f00b f820 	bl	800b7a6 <f_read>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

          if((bytesread > 0) && (res == FR_OK))
 800076c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000770:	2b00      	cmp	r3, #0
 8000772:	d019      	beq.n	80007a8 <SD_FileOperationsTest+0xec>
 8000774:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000778:	2b00      	cmp	r3, #0
 800077a:	d115      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
          {
            // Close the open text file
           res = f_close(&SDFile);
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <SD_FileOperationsTest+0x108>)
 800077e:	f00b fbad 	bl	800bedc <f_close>
 8000782:	4603      	mov	r3, r0
 8000784:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
           if(res == FR_OK)
 8000788:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10b      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
        	 // res = f_unlink( fileNameIntern);	// deleting File

            // Compare read data with the expected data
            if((bytesread == byteswritten)  && (res == FR_OK) )
 8000790:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000798:	429a      	cmp	r2, r3
 800079a:	d105      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
 800079c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
            {
              // Success of the demo: no error occurrence
              return FR_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e001      	b.n	80007ac <SD_FileOperationsTest+0xf0>
      }
    }
  }
  // Error
  // FATFS_UnLinkDriver(USERPath);
  return res;
 80007a8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	37e0      	adds	r7, #224	; 0xe0
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bdb0      	pop	{r4, r5, r7, pc}
 80007b4:	08010ef0 	.word	0x08010ef0
 80007b8:	08010f38 	.word	0x08010f38
 80007bc:	200005fc 	.word	0x200005fc
 80007c0:	20000600 	.word	0x20000600
 80007c4:	20000834 	.word	0x20000834

080007c8 <LedBlueTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedBlueTask( void * pvParameters )
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
 80007d0:	2101      	movs	r1, #1
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <LedBlueTask+0x18>)
 80007d4:	f001 fe02 	bl	80023dc <HAL_GPIO_TogglePin>

	  osDelay(3);
 80007d8:	2003      	movs	r0, #3
 80007da:	f00b fcef 	bl	800c1bc <osDelay>
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
 80007de:	e7f7      	b.n	80007d0 <LedBlueTask+0x8>
 80007e0:	48000400 	.word	0x48000400

080007e4 <LedGreenTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedGreenTask( void * pvParameters )
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {

	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f001 fdf3 	bl	80023dc <HAL_GPIO_TogglePin>
	  osDelay(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f00b fce0 	bl	800c1bc <osDelay>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
 80007fc:	e7f6      	b.n	80007ec <LedGreenTask+0x8>
	...

08000800 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	4b67      	ldr	r3, [pc, #412]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a66      	ldr	r2, [pc, #408]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b64      	ldr	r3, [pc, #400]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a60      	ldr	r2, [pc, #384]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b5e      	ldr	r3, [pc, #376]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b5b      	ldr	r3, [pc, #364]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a5a      	ldr	r2, [pc, #360]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a54      	ldr	r2, [pc, #336]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a4e      	ldr	r2, [pc, #312]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a48      	ldr	r2, [pc, #288]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <MX_GPIO_Init+0x1b4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	21c0      	movs	r1, #192	; 0xc0
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f001 fd65 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2101      	movs	r1, #1
 80008b6:	4840      	ldr	r0, [pc, #256]	; (80009b8 <MX_GPIO_Init+0x1b8>)
 80008b8:	f001 fd60 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	2303      	movs	r3, #3
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	483a      	ldr	r0, [pc, #232]	; (80009bc <MX_GPIO_Init+0x1bc>)
 80008d2:	f001 faaf 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80008d6:	f24e 03cf 	movw	r3, #57551	; 0xe0cf
 80008da:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4835      	ldr	r0, [pc, #212]	; (80009c0 <MX_GPIO_Init+0x1c0>)
 80008ec:	f001 faa2 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80008f0:	230b      	movs	r3, #11
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4830      	ldr	r0, [pc, #192]	; (80009c4 <MX_GPIO_Init+0x1c4>)
 8000904:	f001 fa96 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA5 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000908:	f649 7337 	movw	r3, #40759	; 0x9f37
 800090c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f001 fa88 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8000924:	23c0      	movs	r3, #192	; 0xc0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f001 fa79 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4817      	ldr	r0, [pc, #92]	; (80009b8 <MX_GPIO_Init+0x1b8>)
 800095a:	f001 fa6b 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800095e:	f64f 7336 	movw	r3, #65334	; 0xff36
 8000962:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x1b8>)
 8000974:	f001 fa5e 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD3 PD4 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000978:	f64f 73d9 	movw	r3, #65497	; 0xffd9
 800097c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <MX_GPIO_Init+0x1c8>)
 800098e:	f001 fa51 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <MX_GPIO_Init+0x1c8>)
 80009a6:	f001 fa45 	bl	8001e34 <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000400 	.word	0x48000400
 80009bc:	48001000 	.word	0x48001000
 80009c0:	48000800 	.word	0x48000800
 80009c4:	48001c00 	.word	0x48001c00
 80009c8:	48000c00 	.word	0x48000c00

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d0:	f000 fc43 	bl	800125a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f815 	bl	8000a02 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SEGGER_SYSVIEW_Conf();
 80009d8:	f00f ff64 	bl	80108a4 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f7ff ff10 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e0:	f7ff fdd2 	bl	8000588 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80009e4:	f000 f882 	bl	8000aec <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 80009e8:	f000 fa5c 	bl	8000ea4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009ec:	f000 fa8a 	bl	8000f04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80009f0:	f000 fab8 	bl	8000f64 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80009f4:	f008 fc6a 	bl	80092cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009f8:	f7ff fdfe 	bl	80005f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009fc:	f00b fb6f 	bl	800c0de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x34>

08000a02 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b096      	sub	sp, #88	; 0x58
 8000a06:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2244      	movs	r2, #68	; 0x44
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f010 f973 	bl	8010cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a28:	f001 fd0e 	bl	8002448 <HAL_PWREx_ControlVoltageScaling>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a32:	f000 f84b 	bl	8000acc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a36:	2322      	movs	r3, #34	; 0x22
 8000a38:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a54:	230a      	movs	r3, #10
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 fd4f 	bl	800250c <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a74:	f000 f82a 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fa8d 	bl	8002fb0 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9c:	f000 f816 	bl	8000acc <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3758      	adds	r7, #88	; 0x58
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 fbe7 	bl	800128c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40012c00 	.word	0x40012c00

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>

08000ad6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_SDMMC1_SD_Init+0x38>)
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000af4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_SDMMC1_SD_Init+0x38>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_SDMMC1_SD_Init+0x38>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_SDMMC1_SD_Init+0x38>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_SDMMC1_SD_Init+0x38>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <MX_SDMMC1_SD_Init+0x38>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <MX_SDMMC1_SD_Init+0x38>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	20000350 	.word	0x20000350
 8000b28:	40012800 	.word	0x40012800

08000b2c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0ae      	sub	sp, #184	; 0xb8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b44:	f107 0318 	add.w	r3, r7, #24
 8000b48:	228c      	movs	r2, #140	; 0x8c
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f010 f8d5 	bl	8010cfc <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a50      	ldr	r2, [pc, #320]	; (8000c98 <HAL_SD_MspInit+0x16c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	f040 8098 	bne.w	8000c8e <HAL_SD_MspInit+0x162>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000b5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 fd24 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000b7a:	f7ff ffa7 	bl	8000acc <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b7e:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a46      	ldr	r2, [pc, #280]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000b84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a40      	ldr	r2, [pc, #256]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b3e      	ldr	r3, [pc, #248]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <HAL_SD_MspInit+0x170>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bc6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be0:	230c      	movs	r3, #12
 8000be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bea:	4619      	mov	r1, r3
 8000bec:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <HAL_SD_MspInit+0x174>)
 8000bee:	f001 f921 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <HAL_SD_MspInit+0x178>)
 8000c18:	f001 f90c 	bl	8001e34 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <HAL_SD_MspInit+0x180>)
 8000c20:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c40:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c58:	f000 fc6e 	bl	8001538 <HAL_DMA_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8000c62:	f7ff ff33 	bl	8000acc <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a0f      	ldr	r2, [pc, #60]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <HAL_SD_MspInit+0x17c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	2031      	movs	r0, #49	; 0x31
 8000c84:	f000 fc14 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000c88:	2031      	movs	r0, #49	; 0x31
 8000c8a:	f000 fc3d 	bl	8001508 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000c8e:	bf00      	nop
 8000c90:	37b8      	adds	r7, #184	; 0xb8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40012800 	.word	0x40012800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	48000c00 	.word	0x48000c00
 8000ca8:	200003d4 	.word	0x200003d4
 8000cac:	40020444 	.word	0x40020444

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	210f      	movs	r1, #15
 8000cea:	f06f 0001 	mvn.w	r0, #1
 8000cee:	f000 fbdf 	bl	80014b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d18:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <HAL_InitTick+0xc8>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d26:	f107 020c 	add.w	r2, r7, #12
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4611      	mov	r1, r2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f002 fba1 	bl	8003478 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d36:	f002 fb89 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8000d3a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_InitTick+0xcc>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0c9b      	lsrs	r3, r3, #18
 8000d46:	3b01      	subs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_InitTick+0xd4>)
 8000d4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d58:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d70:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d72:	f005 fe3b 	bl	80069ec <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d11b      	bne.n	8000dbc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <HAL_InitTick+0xd0>)
 8000d86:	f005 ff45 	bl	8006c14 <HAL_TIM_Base_Start_IT>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d111      	bne.n	8000dbc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d98:	2019      	movs	r0, #25
 8000d9a:	f000 fbb5 	bl	8001508 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d808      	bhi.n	8000db6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	2019      	movs	r0, #25
 8000daa:	f000 fb81 	bl	80014b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_InitTick+0xd8>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	e002      	b.n	8000dbc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	2000041c 	.word	0x2000041c
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	20000004 	.word	0x20000004

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e0e:	f005 ffb5 	bl	8006d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000041c 	.word	0x2000041c

08000e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <USART1_IRQHandler+0x10>)
 8000e22:	f006 fa53 	bl	80072cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000468 	.word	0x20000468

08000e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <USART2_IRQHandler+0x10>)
 8000e36:	f006 fa49 	bl	80072cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200004ec 	.word	0x200004ec

08000e44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <USART3_IRQHandler+0x10>)
 8000e4a:	f006 fa3f 	bl	80072cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000570 	.word	0x20000570

08000e58 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */
  //__HAL_SD_GET_FLAG(&hsd1, SDMMC_FLAG_RXFIFOHF);
  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <SDMMC1_IRQHandler+0x10>)
 8000e5e:	f004 fcf5 	bl	800584c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000350 	.word	0x20000350

08000e6c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <DMA2_Channel4_IRQHandler+0x10>)
 8000e72:	f000 ff00 	bl	8001c76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200003d4 	.word	0x200003d4

08000e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eaa:	4a15      	ldr	r2, [pc, #84]	; (8000f00 <MX_USART1_UART_Init+0x5c>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_USART1_UART_Init+0x58>)
 8000ee8:	f006 f948 	bl	800717c <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ef2:	f7ff fdeb 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000468 	.word	0x20000468
 8000f00:	40013800 	.word	0x40013800

08000f04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <MX_USART2_UART_Init+0x5c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_USART2_UART_Init+0x58>)
 8000f48:	f006 f918 	bl	800717c <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f52:	f7ff fdbb 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200004ec 	.word	0x200004ec
 8000f60:	40004400 	.word	0x40004400

08000f64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_USART3_UART_Init+0x5c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART3_UART_Init+0x58>)
 8000fa8:	f006 f8e8 	bl	800717c <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fb2:	f7ff fd8b 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000570 	.word	0x20000570
 8000fc0:	40004800 	.word	0x40004800

08000fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0b2      	sub	sp, #200	; 0xc8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe0:	228c      	movs	r2, #140	; 0x8c
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00f fe89 	bl	8010cfc <memset>
  if(uartHandle->Instance==USART1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7f      	ldr	r2, [pc, #508]	; (80011ec <HAL_UART_MspInit+0x228>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d143      	bne.n	800107c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fadb 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800100c:	f7ff fd5e 	bl	8000acc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001010:	4b77      	ldr	r3, [pc, #476]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a76      	ldr	r2, [pc, #472]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b74      	ldr	r3, [pc, #464]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b71      	ldr	r3, [pc, #452]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a70      	ldr	r2, [pc, #448]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	623b      	str	r3, [r7, #32]
 800103e:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001040:	23c0      	movs	r3, #192	; 0xc0
 8001042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001062:	4619      	mov	r1, r3
 8001064:	4863      	ldr	r0, [pc, #396]	; (80011f4 <HAL_UART_MspInit+0x230>)
 8001066:	f000 fee5 	bl	8001e34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2105      	movs	r1, #5
 800106e:	2025      	movs	r0, #37	; 0x25
 8001070:	f000 fa1e 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001074:	2025      	movs	r0, #37	; 0x25
 8001076:	f000 fa47 	bl	8001508 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800107a:	e0b2      	b.n	80011e2 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a5d      	ldr	r2, [pc, #372]	; (80011f8 <HAL_UART_MspInit+0x234>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d165      	bne.n	8001152 <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001086:	2302      	movs	r3, #2
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108a:	2300      	movs	r3, #0
 800108c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fa92 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800109e:	f7ff fd15 	bl	8000acc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010ea:	2308      	movs	r3, #8
 80010ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001102:	2307      	movs	r3, #7
 8001104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f000 fe8f 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001116:	2320      	movs	r3, #32
 8001118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112e:	2307      	movs	r3, #7
 8001130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001134:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001138:	4619      	mov	r1, r3
 800113a:	4830      	ldr	r0, [pc, #192]	; (80011fc <HAL_UART_MspInit+0x238>)
 800113c:	f000 fe7a 	bl	8001e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2105      	movs	r1, #5
 8001144:	2026      	movs	r0, #38	; 0x26
 8001146:	f000 f9b3 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800114a:	2026      	movs	r0, #38	; 0x26
 800114c:	f000 f9dc 	bl	8001508 <HAL_NVIC_EnableIRQ>
}
 8001150:	e047      	b.n	80011e2 <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a2a      	ldr	r2, [pc, #168]	; (8001200 <HAL_UART_MspInit+0x23c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d142      	bne.n	80011e2 <HAL_UART_MspInit+0x21e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800115c:	2304      	movs	r3, #4
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fa27 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8001174:	f7ff fcaa 	bl	8000acc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	6593      	str	r3, [r2, #88]	; 0x58
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 8001186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_UART_MspInit+0x22c>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011a8:	2330      	movs	r3, #48	; 0x30
 80011aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c0:	2307      	movs	r3, #7
 80011c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011ca:	4619      	mov	r1, r3
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <HAL_UART_MspInit+0x240>)
 80011ce:	f000 fe31 	bl	8001e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2105      	movs	r1, #5
 80011d6:	2027      	movs	r0, #39	; 0x27
 80011d8:	f000 f96a 	bl	80014b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011dc:	2027      	movs	r0, #39	; 0x27
 80011de:	f000 f993 	bl	8001508 <HAL_NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	37c8      	adds	r7, #200	; 0xc8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48000400 	.word	0x48000400
 80011f8:	40004400 	.word	0x40004400
 80011fc:	48000c00 	.word	0x48000c00
 8001200:	40004800 	.word	0x40004800
 8001204:	48000800 	.word	0x48000800

08001208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800120c:	f7ff fe38 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	; (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	; (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f00f fd1d 	bl	8010c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123a:	f7ff fbc7 	bl	80009cc <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001240:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800124c:	08011428 	.word	0x08011428
  ldr r2, =_sbss
 8001250:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001254:	20008be0 	.word	0x20008be0

08001258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_2_IRQHandler>

0800125a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f903 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126a:	200f      	movs	r0, #15
 800126c:	f7ff fd48 	bl	8000d00 <HAL_InitTick>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e001      	b.n	8001280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127c:	f7ff fd18 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001280:	79fb      	ldrb	r3, [r7, #7]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200005f4 	.word	0x200005f4

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200005f4 	.word	0x200005f4

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d00f      	beq.n	800149e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d00c      	beq.n	800149e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d009      	beq.n	800149e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d006      	beq.n	800149e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d003      	beq.n	800149e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001496:	21a6      	movs	r1, #166	; 0xa6
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800149a:	f7ff fb1c 	bl	8000ad6 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff38 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	08010f60 	.word	0x08010f60

080014b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d903      	bls.n	80014d0 <HAL_NVIC_SetPriority+0x20>
 80014c8:	21be      	movs	r1, #190	; 0xbe
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <HAL_NVIC_SetPriority+0x54>)
 80014cc:	f7ff fb03 	bl	8000ad6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d903      	bls.n	80014de <HAL_NVIC_SetPriority+0x2e>
 80014d6:	21bf      	movs	r1, #191	; 0xbf
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <HAL_NVIC_SetPriority+0x54>)
 80014da:	f7ff fafc 	bl	8000ad6 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80014de:	f7ff ff3d 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	6978      	ldr	r0, [r7, #20]
 80014ea:	f7ff ff8d 	bl	8001408 <NVIC_EncodePriority>
 80014ee:	4602      	mov	r2, r0
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff5c 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fc:	bf00      	nop
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	08010f60 	.word	0x08010f60

08001508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	da03      	bge.n	8001522 <HAL_NVIC_EnableIRQ+0x1a>
 800151a:	21d2      	movs	r1, #210	; 0xd2
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <HAL_NVIC_EnableIRQ+0x2c>)
 800151e:	f7ff fada 	bl	8000ad6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff26 	bl	8001378 <__NVIC_EnableIRQ>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	08010f60 	.word	0x08010f60

08001538 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e19d      	b.n	8001886 <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a79      	ldr	r2, [pc, #484]	; (8001734 <HAL_DMA_Init+0x1fc>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d044      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a77      	ldr	r2, [pc, #476]	; (8001738 <HAL_DMA_Init+0x200>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d03f      	beq.n	80015de <HAL_DMA_Init+0xa6>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a76      	ldr	r2, [pc, #472]	; (800173c <HAL_DMA_Init+0x204>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d03a      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a74      	ldr	r2, [pc, #464]	; (8001740 <HAL_DMA_Init+0x208>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d035      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a73      	ldr	r2, [pc, #460]	; (8001744 <HAL_DMA_Init+0x20c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d030      	beq.n	80015de <HAL_DMA_Init+0xa6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a71      	ldr	r2, [pc, #452]	; (8001748 <HAL_DMA_Init+0x210>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a70      	ldr	r2, [pc, #448]	; (800174c <HAL_DMA_Init+0x214>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d026      	beq.n	80015de <HAL_DMA_Init+0xa6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a6e      	ldr	r2, [pc, #440]	; (8001750 <HAL_DMA_Init+0x218>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d021      	beq.n	80015de <HAL_DMA_Init+0xa6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6d      	ldr	r2, [pc, #436]	; (8001754 <HAL_DMA_Init+0x21c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d01c      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6b      	ldr	r2, [pc, #428]	; (8001758 <HAL_DMA_Init+0x220>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d017      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6a      	ldr	r2, [pc, #424]	; (800175c <HAL_DMA_Init+0x224>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d012      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a68      	ldr	r2, [pc, #416]	; (8001760 <HAL_DMA_Init+0x228>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a67      	ldr	r2, [pc, #412]	; (8001764 <HAL_DMA_Init+0x22c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a65      	ldr	r2, [pc, #404]	; (8001768 <HAL_DMA_Init+0x230>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d003      	beq.n	80015de <HAL_DMA_Init+0xa6>
 80015d6:	21a5      	movs	r1, #165	; 0xa5
 80015d8:	4864      	ldr	r0, [pc, #400]	; (800176c <HAL_DMA_Init+0x234>)
 80015da:	f7ff fa7c 	bl	8000ad6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00c      	beq.n	8001600 <HAL_DMA_Init+0xc8>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d008      	beq.n	8001600 <HAL_DMA_Init+0xc8>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f6:	d003      	beq.n	8001600 <HAL_DMA_Init+0xc8>
 80015f8:	21a6      	movs	r1, #166	; 0xa6
 80015fa:	485c      	ldr	r0, [pc, #368]	; (800176c <HAL_DMA_Init+0x234>)
 80015fc:	f7ff fa6b 	bl	8000ad6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b40      	cmp	r3, #64	; 0x40
 8001606:	d007      	beq.n	8001618 <HAL_DMA_Init+0xe0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_DMA_Init+0xe0>
 8001610:	21a7      	movs	r1, #167	; 0xa7
 8001612:	4856      	ldr	r0, [pc, #344]	; (800176c <HAL_DMA_Init+0x234>)
 8001614:	f7ff fa5f 	bl	8000ad6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	2b80      	cmp	r3, #128	; 0x80
 800161e:	d007      	beq.n	8001630 <HAL_DMA_Init+0xf8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_DMA_Init+0xf8>
 8001628:	21a8      	movs	r1, #168	; 0xa8
 800162a:	4850      	ldr	r0, [pc, #320]	; (800176c <HAL_DMA_Init+0x234>)
 800162c:	f7ff fa53 	bl	8000ad6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00d      	beq.n	8001654 <HAL_DMA_Init+0x11c>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001640:	d008      	beq.n	8001654 <HAL_DMA_Init+0x11c>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164a:	d003      	beq.n	8001654 <HAL_DMA_Init+0x11c>
 800164c:	21a9      	movs	r1, #169	; 0xa9
 800164e:	4847      	ldr	r0, [pc, #284]	; (800176c <HAL_DMA_Init+0x234>)
 8001650:	f7ff fa41 	bl	8000ad6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00d      	beq.n	8001678 <HAL_DMA_Init+0x140>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Init+0x140>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800166e:	d003      	beq.n	8001678 <HAL_DMA_Init+0x140>
 8001670:	21aa      	movs	r1, #170	; 0xaa
 8001672:	483e      	ldr	r0, [pc, #248]	; (800176c <HAL_DMA_Init+0x234>)
 8001674:	f7ff fa2f 	bl	8000ad6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_DMA_Init+0x158>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b20      	cmp	r3, #32
 8001686:	d003      	beq.n	8001690 <HAL_DMA_Init+0x158>
 8001688:	21ab      	movs	r1, #171	; 0xab
 800168a:	4838      	ldr	r0, [pc, #224]	; (800176c <HAL_DMA_Init+0x234>)
 800168c:	f7ff fa23 	bl	8000ad6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <HAL_DMA_Init+0x186>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a0:	d00d      	beq.n	80016be <HAL_DMA_Init+0x186>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016aa:	d008      	beq.n	80016be <HAL_DMA_Init+0x186>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016b4:	d003      	beq.n	80016be <HAL_DMA_Init+0x186>
 80016b6:	21ac      	movs	r1, #172	; 0xac
 80016b8:	482c      	ldr	r0, [pc, #176]	; (800176c <HAL_DMA_Init+0x234>)
 80016ba:	f7ff fa0c 	bl	8000ad6 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01f      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d01b      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d017      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d013      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d00f      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d00b      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d007      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d003      	beq.n	8001706 <HAL_DMA_Init+0x1ce>
 80016fe:	21ae      	movs	r1, #174	; 0xae
 8001700:	481a      	ldr	r0, [pc, #104]	; (800176c <HAL_DMA_Init+0x234>)
 8001702:	f7ff f9e8 	bl	8000ad6 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_DMA_Init+0x238>)
 800170e:	429a      	cmp	r2, r3
 8001710:	d836      	bhi.n	8001780 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_DMA_Init+0x23c>)
 800171a:	4413      	add	r3, r2
 800171c:	4a16      	ldr	r2, [pc, #88]	; (8001778 <HAL_DMA_Init+0x240>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	009a      	lsls	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a13      	ldr	r2, [pc, #76]	; (800177c <HAL_DMA_Init+0x244>)
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
 8001730:	e035      	b.n	800179e <HAL_DMA_Init+0x266>
 8001732:	bf00      	nop
 8001734:	40020008 	.word	0x40020008
 8001738:	4002001c 	.word	0x4002001c
 800173c:	40020030 	.word	0x40020030
 8001740:	40020044 	.word	0x40020044
 8001744:	40020058 	.word	0x40020058
 8001748:	4002006c 	.word	0x4002006c
 800174c:	40020080 	.word	0x40020080
 8001750:	40020408 	.word	0x40020408
 8001754:	4002041c 	.word	0x4002041c
 8001758:	40020430 	.word	0x40020430
 800175c:	40020444 	.word	0x40020444
 8001760:	40020458 	.word	0x40020458
 8001764:	4002046c 	.word	0x4002046c
 8001768:	40020480 	.word	0x40020480
 800176c:	08010f9c 	.word	0x08010f9c
 8001770:	40020407 	.word	0x40020407
 8001774:	bffdfff8 	.word	0xbffdfff8
 8001778:	cccccccd 	.word	0xcccccccd
 800177c:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b42      	ldr	r3, [pc, #264]	; (8001890 <HAL_DMA_Init+0x358>)
 8001788:	4413      	add	r3, r2
 800178a:	4a42      	ldr	r2, [pc, #264]	; (8001894 <HAL_DMA_Init+0x35c>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	009a      	lsls	r2, r3, #2
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3f      	ldr	r2, [pc, #252]	; (8001898 <HAL_DMA_Init+0x360>)
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017f8:	d039      	beq.n	800186e <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a27      	ldr	r2, [pc, #156]	; (800189c <HAL_DMA_Init+0x364>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d11a      	bne.n	800183a <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_DMA_Init+0x368>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f003 031c 	and.w	r3, r3, #28
 8001810:	210f      	movs	r1, #15
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	4921      	ldr	r1, [pc, #132]	; (80018a0 <HAL_DMA_Init+0x368>)
 800181a:	4013      	ands	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_DMA_Init+0x368>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f003 031c 	and.w	r3, r3, #28
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	491b      	ldr	r1, [pc, #108]	; (80018a0 <HAL_DMA_Init+0x368>)
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]
 8001838:	e019      	b.n	800186e <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_DMA_Init+0x36c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f003 031c 	and.w	r3, r3, #28
 8001846:	210f      	movs	r1, #15
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4915      	ldr	r1, [pc, #84]	; (80018a4 <HAL_DMA_Init+0x36c>)
 8001850:	4013      	ands	r3, r2
 8001852:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_DMA_Init+0x36c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	f003 031c 	and.w	r3, r3, #28
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	490e      	ldr	r1, [pc, #56]	; (80018a4 <HAL_DMA_Init+0x36c>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	bffdfbf8 	.word	0xbffdfbf8
 8001894:	cccccccd 	.word	0xcccccccd
 8001898:	40020400 	.word	0x40020400
 800189c:	40020000 	.word	0x40020000
 80018a0:	400200a8 	.word	0x400200a8
 80018a4:	400204a8 	.word	0x400204a8

080018a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0bd      	b.n	8001a36 <HAL_DMA_DeInit+0x18e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a60      	ldr	r2, [pc, #384]	; (8001a40 <HAL_DMA_DeInit+0x198>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d045      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_DMA_DeInit+0x19c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d040      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5d      	ldr	r2, [pc, #372]	; (8001a48 <HAL_DMA_DeInit+0x1a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d03b      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5b      	ldr	r2, [pc, #364]	; (8001a4c <HAL_DMA_DeInit+0x1a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d036      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5a      	ldr	r2, [pc, #360]	; (8001a50 <HAL_DMA_DeInit+0x1a8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d031      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_DMA_DeInit+0x1ac>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d02c      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a57      	ldr	r2, [pc, #348]	; (8001a58 <HAL_DMA_DeInit+0x1b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d027      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a55      	ldr	r2, [pc, #340]	; (8001a5c <HAL_DMA_DeInit+0x1b4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d022      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a54      	ldr	r2, [pc, #336]	; (8001a60 <HAL_DMA_DeInit+0x1b8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d01d      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_DMA_DeInit+0x1bc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d018      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_DMA_DeInit+0x1c0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d013      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4f      	ldr	r2, [pc, #316]	; (8001a6c <HAL_DMA_DeInit+0x1c4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00e      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a4e      	ldr	r2, [pc, #312]	; (8001a70 <HAL_DMA_DeInit+0x1c8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d009      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_DMA_DeInit+0x1cc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d004      	beq.n	8001950 <HAL_DMA_DeInit+0xa8>
 8001946:	f240 1131 	movw	r1, #305	; 0x131
 800194a:	484b      	ldr	r0, [pc, #300]	; (8001a78 <HAL_DMA_DeInit+0x1d0>)
 800194c:	f7ff f8c3 	bl	8000ad6 <assert_failed>

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <HAL_DMA_DeInit+0x1d4>)
 8001968:	429a      	cmp	r2, r3
 800196a:	d80f      	bhi.n	800198c <HAL_DMA_DeInit+0xe4>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <HAL_DMA_DeInit+0x1d8>)
 8001974:	4413      	add	r3, r2
 8001976:	4a43      	ldr	r2, [pc, #268]	; (8001a84 <HAL_DMA_DeInit+0x1dc>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	009a      	lsls	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <HAL_DMA_DeInit+0x1e0>)
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
 800198a:	e00e      	b.n	80019aa <HAL_DMA_DeInit+0x102>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b3e      	ldr	r3, [pc, #248]	; (8001a8c <HAL_DMA_DeInit+0x1e4>)
 8001994:	4413      	add	r3, r2
 8001996:	4a3b      	ldr	r2, [pc, #236]	; (8001a84 <HAL_DMA_DeInit+0x1dc>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	009a      	lsls	r2, r3, #2
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3a      	ldr	r2, [pc, #232]	; (8001a90 <HAL_DMA_DeInit+0x1e8>)
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 021c 	and.w	r2, r3, #28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_DMA_DeInit+0x1e0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d10d      	bne.n	80019ec <HAL_DMA_DeInit+0x144>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_DMA_DeInit+0x1ec>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f003 031c 	and.w	r3, r3, #28
 80019dc:	210f      	movs	r1, #15
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	492b      	ldr	r1, [pc, #172]	; (8001a94 <HAL_DMA_DeInit+0x1ec>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
 80019ea:	e00c      	b.n	8001a06 <HAL_DMA_DeInit+0x15e>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_DMA_DeInit+0x1f0>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f003 031c 	and.w	r3, r3, #28
 80019f8:	210f      	movs	r1, #15
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	4925      	ldr	r1, [pc, #148]	; (8001a98 <HAL_DMA_DeInit+0x1f0>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40020008 	.word	0x40020008
 8001a44:	4002001c 	.word	0x4002001c
 8001a48:	40020030 	.word	0x40020030
 8001a4c:	40020044 	.word	0x40020044
 8001a50:	40020058 	.word	0x40020058
 8001a54:	4002006c 	.word	0x4002006c
 8001a58:	40020080 	.word	0x40020080
 8001a5c:	40020408 	.word	0x40020408
 8001a60:	4002041c 	.word	0x4002041c
 8001a64:	40020430 	.word	0x40020430
 8001a68:	40020444 	.word	0x40020444
 8001a6c:	40020458 	.word	0x40020458
 8001a70:	4002046c 	.word	0x4002046c
 8001a74:	40020480 	.word	0x40020480
 8001a78:	08010f9c 	.word	0x08010f9c
 8001a7c:	40020407 	.word	0x40020407
 8001a80:	bffdfff8 	.word	0xbffdfff8
 8001a84:	cccccccd 	.word	0xcccccccd
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	bffdfbf8 	.word	0xbffdfbf8
 8001a90:	40020400 	.word	0x40020400
 8001a94:	400200a8 	.word	0x400200a8
 8001a98:	400204a8 	.word	0x400204a8

08001a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_DMA_Start_IT+0x20>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d304      	bcc.n	8001ac6 <HAL_DMA_Start_IT+0x2a>
 8001abc:	f240 11df 	movw	r1, #479	; 0x1df
 8001ac0:	482c      	ldr	r0, [pc, #176]	; (8001b74 <HAL_DMA_Start_IT+0xd8>)
 8001ac2:	f7ff f808 	bl	8000ad6 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Start_IT+0x38>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e04b      	b.n	8001b6c <HAL_DMA_Start_IT+0xd0>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d13a      	bne.n	8001b5e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0201 	bic.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f961 	bl	8001dd4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 020e 	orr.w	r2, r2, #14
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00f      	b.n	8001b4c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0204 	bic.w	r2, r2, #4
 8001b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 020a 	orr.w	r2, r2, #10
 8001b4a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e005      	b.n	8001b6a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	08010f9c 	.word	0x08010f9c

08001b78 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d008      	beq.n	8001ba2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2204      	movs	r2, #4
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e022      	b.n	8001be8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 020e 	bic.w	r2, r2, #14
 8001bb0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f003 021c 	and.w	r2, r3, #28
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d005      	beq.n	8001c18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e029      	b.n	8001c6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 020e 	bic.w	r2, r2, #14
 8001c26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f003 021c 	and.w	r2, r3, #28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
    }
  }
  return status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f003 031c 	and.w	r3, r3, #28
 8001c96:	2204      	movs	r2, #4
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d026      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x7a>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d021      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d107      	bne.n	8001cca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0204 	bic.w	r2, r2, #4
 8001cc8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f003 021c 	and.w	r2, r3, #28
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d071      	beq.n	8001dca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001cee:	e06c      	b.n	8001dca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f003 031c 	and.w	r3, r3, #28
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d02e      	beq.n	8001d62 <HAL_DMA_IRQHandler+0xec>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d029      	beq.n	8001d62 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10b      	bne.n	8001d34 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020a 	bic.w	r2, r2, #10
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	f003 021c 	and.w	r2, r3, #28
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2102      	movs	r1, #2
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d038      	beq.n	8001dca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d60:	e033      	b.n	8001dca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 031c 	and.w	r3, r3, #28
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d02a      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x156>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d025      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 020e 	bic.w	r2, r2, #14
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f003 021c 	and.w	r2, r3, #28
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
}
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f003 021c 	and.w	r2, r3, #28
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d108      	bne.n	8001e18 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e16:	e007      	b.n	8001e28 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e48:	d023      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a3e      	ldr	r2, [pc, #248]	; (8001f48 <HAL_GPIO_Init+0x114>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a3d      	ldr	r2, [pc, #244]	; (8001f4c <HAL_GPIO_Init+0x118>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01b      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a3c      	ldr	r2, [pc, #240]	; (8001f50 <HAL_GPIO_Init+0x11c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d017      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a3b      	ldr	r2, [pc, #236]	; (8001f54 <HAL_GPIO_Init+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a3a      	ldr	r2, [pc, #232]	; (8001f58 <HAL_GPIO_Init+0x124>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00f      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a39      	ldr	r2, [pc, #228]	; (8001f5c <HAL_GPIO_Init+0x128>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00b      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a38      	ldr	r2, [pc, #224]	; (8001f60 <HAL_GPIO_Init+0x12c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <HAL_GPIO_Init+0x130>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x5e>
 8001e8a:	21aa      	movs	r1, #170	; 0xaa
 8001e8c:	4836      	ldr	r0, [pc, #216]	; (8001f68 <HAL_GPIO_Init+0x134>)
 8001e8e:	f7fe fe22 	bl	8000ad6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_GPIO_Init+0x74>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	041b      	lsls	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x7c>
 8001ea8:	21ab      	movs	r1, #171	; 0xab
 8001eaa:	482f      	ldr	r0, [pc, #188]	; (8001f68 <HAL_GPIO_Init+0x134>)
 8001eac:	f7fe fe13 	bl	8000ad6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 822a 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	f000 8225 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b11      	cmp	r3, #17
 8001eca:	f000 8220 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	f000 821b 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	f000 8216 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001eea:	f000 8210 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001ef6:	f000 820a 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001f02:	f000 8204 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001f0e:	f000 81fe 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001f1a:	f000 81f8 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001f26:	f000 81f2 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	f000 81ed 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b0b      	cmp	r3, #11
 8001f3a:	f000 81e8 	beq.w	800230e <HAL_GPIO_Init+0x4da>
 8001f3e:	21ac      	movs	r1, #172	; 0xac
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <HAL_GPIO_Init+0x134>)
 8001f42:	f7fe fdc8 	bl	8000ad6 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f46:	e1e2      	b.n	800230e <HAL_GPIO_Init+0x4da>
 8001f48:	48000400 	.word	0x48000400
 8001f4c:	48000800 	.word	0x48000800
 8001f50:	48000c00 	.word	0x48000c00
 8001f54:	48001000 	.word	0x48001000
 8001f58:	48001400 	.word	0x48001400
 8001f5c:	48001800 	.word	0x48001800
 8001f60:	48001c00 	.word	0x48001c00
 8001f64:	48002000 	.word	0x48002000
 8001f68:	08010fd4 	.word	0x08010fd4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 81c2 	beq.w	8002308 <HAL_GPIO_Init+0x4d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d005      	beq.n	8001f9c <HAL_GPIO_Init+0x168>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d144      	bne.n	8002026 <HAL_GPIO_Init+0x1f2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00f      	beq.n	8001fc4 <HAL_GPIO_Init+0x190>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d00b      	beq.n	8001fc4 <HAL_GPIO_Init+0x190>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x190>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x190>
 8001fbc:	21bb      	movs	r1, #187	; 0xbb
 8001fbe:	4895      	ldr	r0, [pc, #596]	; (8002214 <HAL_GPIO_Init+0x3e0>)
 8001fc0:	f7fe fd89 	bl	8000ad6 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f003 0201 	and.w	r2, r3, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d027      	beq.n	8002082 <HAL_GPIO_Init+0x24e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00b      	beq.n	8002052 <HAL_GPIO_Init+0x21e>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x21e>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x21e>
 800204a:	21dc      	movs	r1, #220	; 0xdc
 800204c:	4871      	ldr	r0, [pc, #452]	; (8002214 <HAL_GPIO_Init+0x3e0>)
 800204e:	f7fe fd42 	bl	8000ad6 <assert_failed>

        temp = GPIOx->PUPDR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d153      	bne.n	8002136 <HAL_GPIO_Init+0x302>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002094:	d023      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a5f      	ldr	r2, [pc, #380]	; (8002218 <HAL_GPIO_Init+0x3e4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a5e      	ldr	r2, [pc, #376]	; (800221c <HAL_GPIO_Init+0x3e8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01b      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a5d      	ldr	r2, [pc, #372]	; (8002220 <HAL_GPIO_Init+0x3ec>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d017      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a5c      	ldr	r2, [pc, #368]	; (8002224 <HAL_GPIO_Init+0x3f0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a5b      	ldr	r2, [pc, #364]	; (8002228 <HAL_GPIO_Init+0x3f4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a5a      	ldr	r2, [pc, #360]	; (800222c <HAL_GPIO_Init+0x3f8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a59      	ldr	r2, [pc, #356]	; (8002230 <HAL_GPIO_Init+0x3fc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_GPIO_Init+0x400>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x2aa>
 80020d6:	21e8      	movs	r1, #232	; 0xe8
 80020d8:	484e      	ldr	r0, [pc, #312]	; (8002214 <HAL_GPIO_Init+0x3e0>)
 80020da:	f7fe fcfc 	bl	8000ad6 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	d903      	bls.n	80020ee <HAL_GPIO_Init+0x2ba>
 80020e6:	21e9      	movs	r1, #233	; 0xe9
 80020e8:	484a      	ldr	r0, [pc, #296]	; (8002214 <HAL_GPIO_Init+0x3e0>)
 80020ea:	f7fe fcf4 	bl	8000ad6 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	6939      	ldr	r1, [r7, #16]
 8002132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0203 	and.w	r2, r3, #3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80c8 	beq.w	8002308 <HAL_GPIO_Init+0x4d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_GPIO_Init+0x404>)
 800217a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217c:	4a2e      	ldr	r2, [pc, #184]	; (8002238 <HAL_GPIO_Init+0x404>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6613      	str	r3, [r2, #96]	; 0x60
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <HAL_GPIO_Init+0x404>)
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002190:	4a2a      	ldr	r2, [pc, #168]	; (800223c <HAL_GPIO_Init+0x408>)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ba:	d041      	beq.n	8002240 <HAL_GPIO_Init+0x40c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a16      	ldr	r2, [pc, #88]	; (8002218 <HAL_GPIO_Init+0x3e4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d025      	beq.n	8002210 <HAL_GPIO_Init+0x3dc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <HAL_GPIO_Init+0x3e8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d01f      	beq.n	800220c <HAL_GPIO_Init+0x3d8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_GPIO_Init+0x3ec>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d019      	beq.n	8002208 <HAL_GPIO_Init+0x3d4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_GPIO_Init+0x3f0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x3d0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_GPIO_Init+0x3f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x3cc>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_GPIO_Init+0x3f8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x3c8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_GPIO_Init+0x3fc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x3c4>
 80021f4:	2307      	movs	r3, #7
 80021f6:	e024      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 80021f8:	2308      	movs	r3, #8
 80021fa:	e022      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 80021fc:	2306      	movs	r3, #6
 80021fe:	e020      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 8002200:	2305      	movs	r3, #5
 8002202:	e01e      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 8002204:	2304      	movs	r3, #4
 8002206:	e01c      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 8002208:	2303      	movs	r3, #3
 800220a:	e01a      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 800220c:	2302      	movs	r3, #2
 800220e:	e018      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 8002210:	2301      	movs	r3, #1
 8002212:	e016      	b.n	8002242 <HAL_GPIO_Init+0x40e>
 8002214:	08010fd4 	.word	0x08010fd4
 8002218:	48000400 	.word	0x48000400
 800221c:	48000800 	.word	0x48000800
 8002220:	48000c00 	.word	0x48000c00
 8002224:	48001000 	.word	0x48001000
 8002228:	48001400 	.word	0x48001400
 800222c:	48001800 	.word	0x48001800
 8002230:	48001c00 	.word	0x48001c00
 8002234:	48002000 	.word	0x48002000
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	2300      	movs	r3, #0
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002252:	4935      	ldr	r1, [pc, #212]	; (8002328 <HAL_GPIO_Init+0x4f4>)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002260:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_GPIO_Init+0x4f8>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_GPIO_Init+0x4f8>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <HAL_GPIO_Init+0x4f8>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ae:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_GPIO_Init+0x4f8>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_GPIO_Init+0x4f8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x4a4>
        {
          temp |= iocurrent;
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <HAL_GPIO_Init+0x4f8>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_GPIO_Init+0x4f8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x4ce>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_GPIO_Init+0x4f8>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3301      	adds	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	f47f ae27 	bne.w	8001f6c <HAL_GPIO_Init+0x138>
  }
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40010000 	.word	0x40010000
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <HAL_GPIO_ReadPin+0x1c>
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <HAL_GPIO_ReadPin+0x26>
 800234c:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8002350:	4809      	ldr	r0, [pc, #36]	; (8002378 <HAL_GPIO_ReadPin+0x48>)
 8002352:	f7fe fbc0 	bl	8000ad6 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e001      	b.n	800236c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	08010fd4 	.word	0x08010fd4

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800238c:	887b      	ldrh	r3, [r7, #2]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <HAL_GPIO_WritePin+0x20>
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <HAL_GPIO_WritePin+0x2a>
 800239c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80023a0:	480d      	ldr	r0, [pc, #52]	; (80023d8 <HAL_GPIO_WritePin+0x5c>)
 80023a2:	f7fe fb98 	bl	8000ad6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80023a6:	787b      	ldrb	r3, [r7, #1]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_WritePin+0x40>
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d004      	beq.n	80023bc <HAL_GPIO_WritePin+0x40>
 80023b2:	f240 11af 	movw	r1, #431	; 0x1af
 80023b6:	4808      	ldr	r0, [pc, #32]	; (80023d8 <HAL_GPIO_WritePin+0x5c>)
 80023b8:	f7fe fb8d 	bl	8000ad6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	08010fd4 	.word	0x08010fd4

080023dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_GPIO_TogglePin+0x1c>
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_GPIO_TogglePin+0x26>
 80023f8:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80023fc:	480a      	ldr	r0, [pc, #40]	; (8002428 <HAL_GPIO_TogglePin+0x4c>)
 80023fe:	f7fe fb6a 	bl	8000ad6 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002408:	887a      	ldrh	r2, [r7, #2]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	041a      	lsls	r2, r3, #16
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43d9      	mvns	r1, r3
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	400b      	ands	r3, r1
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	08010fd4 	.word	0x08010fd4

0800242c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_PWREx_GetVoltageRange+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002456:	d007      	beq.n	8002468 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245e:	d003      	beq.n	8002468 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002460:	21a7      	movs	r1, #167	; 0xa7
 8002462:	4826      	ldr	r0, [pc, #152]	; (80024fc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002464:	f7fe fb37 	bl	8000ad6 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246e:	d130      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247c:	d038      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2232      	movs	r2, #50	; 0x32
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0c9b      	lsrs	r3, r3, #18
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a4:	e002      	b.n	80024ac <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ac:	4b14      	ldr	r3, [pc, #80]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d102      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x78>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f2      	bne.n	80024a6 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024cc:	d110      	bne.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e00f      	b.n	80024f2 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024de:	d007      	beq.n	80024f0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	08011010 	.word	0x08011010
 8002500:	40007000 	.word	0x40007000
 8002504:	20000000 	.word	0x20000000
 8002508:	431bde83 	.word	0x431bde83

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	f000 bd40 	b.w	8002fa0 <HAL_RCC_OscConfig+0xa94>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCC_OscConfig+0x32>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_RCC_OscConfig+0x32>
 8002534:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002538:	489b      	ldr	r0, [pc, #620]	; (80027a8 <HAL_RCC_OscConfig+0x29c>)
 800253a:	f7fe facc 	bl	8000ad6 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4b9b      	ldr	r3, [pc, #620]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	4b98      	ldr	r3, [pc, #608]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 813f 	beq.w	80027de <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCC_OscConfig+0x6e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d004      	beq.n	800257a <HAL_RCC_OscConfig+0x6e>
 8002570:	f240 11a9 	movw	r1, #425	; 0x1a9
 8002574:	488c      	ldr	r0, [pc, #560]	; (80027a8 <HAL_RCC_OscConfig+0x29c>)
 8002576:	f7fe faae 	bl	8000ad6 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d904      	bls.n	800258c <HAL_RCC_OscConfig+0x80>
 8002582:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002586:	4888      	ldr	r0, [pc, #544]	; (80027a8 <HAL_RCC_OscConfig+0x29c>)
 8002588:	f7fe faa5 	bl	8000ad6 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d030      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	2b10      	cmp	r3, #16
 800259a:	d02c      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d028      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d024      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	2b50      	cmp	r3, #80	; 0x50
 80025ba:	d01c      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	2b60      	cmp	r3, #96	; 0x60
 80025c2:	d018      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	2b70      	cmp	r3, #112	; 0x70
 80025ca:	d014      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d010      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	2b90      	cmp	r3, #144	; 0x90
 80025da:	d00c      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	2ba0      	cmp	r3, #160	; 0xa0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	2bb0      	cmp	r3, #176	; 0xb0
 80025ea:	d004      	beq.n	80025f6 <HAL_RCC_OscConfig+0xea>
 80025ec:	f240 11ab 	movw	r1, #427	; 0x1ab
 80025f0:	486d      	ldr	r0, [pc, #436]	; (80027a8 <HAL_RCC_OscConfig+0x29c>)
 80025f2:	f7fe fa70 	bl	8000ad6 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_RCC_OscConfig+0x100>
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	f040 808f 	bne.w	8002722 <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 808b 	bne.w	8002722 <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800260c:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_RCC_OscConfig+0x11a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	f000 bcbd 	b.w	8002fa0 <HAL_RCC_OscConfig+0xa94>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1a      	ldr	r2, [r3, #32]
 800262a:	4b60      	ldr	r3, [pc, #384]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_RCC_OscConfig+0x134>
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263e:	e005      	b.n	800264c <HAL_RCC_OscConfig+0x140>
 8002640:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264c:	4293      	cmp	r3, r2
 800264e:	d224      	bcs.n	800269a <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 ff51 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f000 bc9d 	b.w	8002fa0 <HAL_RCC_OscConfig+0xa94>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002666:	4b51      	ldr	r3, [pc, #324]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a50      	ldr	r2, [pc, #320]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b4e      	ldr	r3, [pc, #312]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	494b      	ldr	r1, [pc, #300]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002684:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	4946      	ldr	r1, [pc, #280]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	e026      	b.n	80026e8 <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269a:	4b44      	ldr	r3, [pc, #272]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a43      	ldr	r2, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	493e      	ldr	r1, [pc, #248]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b8:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	4939      	ldr	r1, [pc, #228]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 ff10 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f000 bc5c 	b.w	8002fa0 <HAL_RCC_OscConfig+0xa94>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026e8:	f000 fe02 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b2f      	ldr	r3, [pc, #188]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	492d      	ldr	r1, [pc, #180]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <HAL_RCC_OscConfig+0x2a8>)
 8002706:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe faf7 	bl	8000d00 <HAL_InitTick>
 8002712:	4603      	mov	r3, r0
 8002714:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05f      	beq.n	80027dc <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	f000 bc3f 	b.w	8002fa0 <HAL_RCC_OscConfig+0xa94>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d033      	beq.n	8002792 <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002736:	f7fe fdbd 	bl	80012b4 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273c:	e009      	b.n	8002752 <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800273e:	f7fe fdb9 	bl	80012b4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d902      	bls.n	8002752 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	f000 bc27 	b.w	8002fa0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0ef      	beq.n	800273e <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002764:	f043 0308 	orr.w	r3, r3, #8
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	490d      	ldr	r1, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e025      	b.n	80027de <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_RCC_OscConfig+0x2a0>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279e:	f7fe fd89 	bl	80012b4 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a4:	e013      	b.n	80027ce <HAL_RCC_OscConfig+0x2c2>
 80027a6:	bf00      	nop
 80027a8:	0801104c 	.word	0x0801104c
 80027ac:	40021000 	.word	0x40021000
 80027b0:	080112b4 	.word	0x080112b4
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027bc:	f7fe fd7a 	bl	80012b4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e3e8      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ce:	4b97      	ldr	r3, [pc, #604]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x2b0>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d07e      	beq.n	80028e8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <HAL_RCC_OscConfig+0x304>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d009      	beq.n	8002810 <HAL_RCC_OscConfig+0x304>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002804:	d004      	beq.n	8002810 <HAL_RCC_OscConfig+0x304>
 8002806:	f240 2117 	movw	r1, #535	; 0x217
 800280a:	4889      	ldr	r0, [pc, #548]	; (8002a30 <HAL_RCC_OscConfig+0x524>)
 800280c:	f7fe f963 	bl	8000ad6 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b08      	cmp	r3, #8
 8002814:	d005      	beq.n	8002822 <HAL_RCC_OscConfig+0x316>
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d10e      	bne.n	800283a <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d10b      	bne.n	800283a <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d05b      	beq.n	80028e6 <HAL_RCC_OscConfig+0x3da>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d157      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e3b2      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x346>
 8002844:	4b79      	ldr	r3, [pc, #484]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a78      	ldr	r2, [pc, #480]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	e01d      	b.n	800288e <HAL_RCC_OscConfig+0x382>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0x36a>
 800285c:	4b73      	ldr	r3, [pc, #460]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a72      	ldr	r2, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e00b      	b.n	800288e <HAL_RCC_OscConfig+0x382>
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6c      	ldr	r2, [pc, #432]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a69      	ldr	r2, [pc, #420]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d013      	beq.n	80028be <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fd0d 	bl	80012b4 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289e:	f7fe fd09 	bl	80012b4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e377      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b0:	4b5e      	ldr	r3, [pc, #376]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x392>
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fcf9 	bl	80012b4 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c6:	f7fe fcf5 	bl	80012b4 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	; 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e363      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d8:	4b54      	ldr	r3, [pc, #336]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3ba>
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d077      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_RCC_OscConfig+0x404>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002904:	d004      	beq.n	8002910 <HAL_RCC_OscConfig+0x404>
 8002906:	f240 214a 	movw	r1, #586	; 0x24a
 800290a:	4849      	ldr	r0, [pc, #292]	; (8002a30 <HAL_RCC_OscConfig+0x524>)
 800290c:	f7fe f8e3 	bl	8000ad6 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b7f      	cmp	r3, #127	; 0x7f
 8002916:	d904      	bls.n	8002922 <HAL_RCC_OscConfig+0x416>
 8002918:	f240 214b 	movw	r1, #587	; 0x24b
 800291c:	4844      	ldr	r0, [pc, #272]	; (8002a30 <HAL_RCC_OscConfig+0x524>)
 800291e:	f7fe f8da 	bl	8000ad6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b04      	cmp	r3, #4
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x428>
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d119      	bne.n	8002962 <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d116      	bne.n	8002962 <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x440>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e329      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	4934      	ldr	r1, [pc, #208]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002960:	e040      	b.n	80029e4 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d023      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fc9d 	bl	80012b4 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fc99 	bl	80012b4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e307      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	061b      	lsls	r3, r3, #24
 80029aa:	4920      	ldr	r1, [pc, #128]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
 80029b0:	e018      	b.n	80029e4 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 80029b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7fe fc79 	bl	80012b4 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7fe fc75 	bl	80012b4 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e2e3      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1f0      	bne.n	80029c6 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d04e      	beq.n	8002a8e <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4fe>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d004      	beq.n	8002a0a <HAL_RCC_OscConfig+0x4fe>
 8002a00:	f240 218b 	movw	r1, #651	; 0x28b
 8002a04:	480a      	ldr	r0, [pc, #40]	; (8002a30 <HAL_RCC_OscConfig+0x524>)
 8002a06:	f7fe f866 	bl	8000ad6 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d021      	beq.n	8002a56 <HAL_RCC_OscConfig+0x54a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_RCC_OscConfig+0x520>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe fc47 	bl	80012b4 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a28:	e00d      	b.n	8002a46 <HAL_RCC_OscConfig+0x53a>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	0801104c 	.word	0x0801104c
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fe fc3e 	bl	80012b4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e2ac      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a46:	4b93      	ldr	r3, [pc, #588]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCC_OscConfig+0x528>
 8002a54:	e01b      	b.n	8002a8e <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	4b8f      	ldr	r3, [pc, #572]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	4a8d      	ldr	r2, [pc, #564]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe fc25 	bl	80012b4 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fc21 	bl	80012b4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e28f      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a80:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ef      	bne.n	8002a6e <HAL_RCC_OscConfig+0x562>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80b2 	beq.w	8002c00 <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x5b6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x5b6>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d004      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x5b6>
 8002ab8:	f240 21de 	movw	r1, #734	; 0x2de
 8002abc:	4876      	ldr	r0, [pc, #472]	; (8002c98 <HAL_RCC_OscConfig+0x78c>)
 8002abe:	f7fe f80a 	bl	8000ad6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ac2:	4b74      	ldr	r3, [pc, #464]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	4a70      	ldr	r2, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8002ada:	4b6e      	ldr	r3, [pc, #440]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aea:	4b6c      	ldr	r3, [pc, #432]	; (8002c9c <HAL_RCC_OscConfig+0x790>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d118      	bne.n	8002b28 <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af6:	4b69      	ldr	r3, [pc, #420]	; (8002c9c <HAL_RCC_OscConfig+0x790>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a68      	ldr	r2, [pc, #416]	; (8002c9c <HAL_RCC_OscConfig+0x790>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b02:	f7fe fbd7 	bl	80012b4 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fe fbd3 	bl	80012b4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e241      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1c:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <HAL_RCC_OscConfig+0x790>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_RCC_OscConfig+0x636>
 8002b30:	4b58      	ldr	r3, [pc, #352]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b40:	e024      	b.n	8002b8c <HAL_RCC_OscConfig+0x680>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d110      	bne.n	8002b6c <HAL_RCC_OscConfig+0x660>
 8002b4a:	4b52      	ldr	r3, [pc, #328]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	4a50      	ldr	r2, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5a:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b6a:	e00f      	b.n	8002b8c <HAL_RCC_OscConfig+0x680>
 8002b6c:	4b49      	ldr	r3, [pc, #292]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	4a48      	ldr	r2, [pc, #288]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b7c:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	4a44      	ldr	r2, [pc, #272]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d016      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b94:	f7fe fb8e 	bl	80012b4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9a:	e00a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fb8a 	bl	80012b4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1f6      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ed      	beq.n	8002b9c <HAL_RCC_OscConfig+0x690>
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fb77 	bl	80012b4 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fe fb73 	bl	80012b4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1df      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be0:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1ed      	bne.n	8002bca <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bee:	7ffb      	ldrb	r3, [r7, #31]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d105      	bne.n	8002c00 <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d050      	beq.n	8002cae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_OscConfig+0x71a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d004      	beq.n	8002c26 <HAL_RCC_OscConfig+0x71a>
 8002c1c:	f240 3143 	movw	r1, #835	; 0x343
 8002c20:	481d      	ldr	r0, [pc, #116]	; (8002c98 <HAL_RCC_OscConfig+0x78c>)
 8002c22:	f7fd ff58 	bl	8000ad6 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c34:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fb39 	bl	80012b4 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c46:	f7fe fb35 	bl	80012b4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1a3      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ef      	beq.n	8002c46 <HAL_RCC_OscConfig+0x73a>
 8002c66:	e022      	b.n	8002cae <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c68:	4b0a      	ldr	r3, [pc, #40]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x788>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fb1c 	bl	80012b4 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c7e:	e00f      	b.n	8002ca0 <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c80:	f7fe fb18 	bl	80012b4 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d908      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e186      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	0801104c 	.word	0x0801104c
 8002c9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ca0:	4b96      	ldr	r3, [pc, #600]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e8      	bne.n	8002c80 <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x7c4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x7c4>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x7c4>
 8002cc6:	f44f 715b 	mov.w	r1, #876	; 0x36c
 8002cca:	488d      	ldr	r0, [pc, #564]	; (8002f00 <HAL_RCC_OscConfig+0x9f4>)
 8002ccc:	f7fd ff03 	bl	8000ad6 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8162 	beq.w	8002f9e <HAL_RCC_OscConfig+0xa92>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	f040 8138 	bne.w	8002f54 <HAL_RCC_OscConfig+0xa48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_RCC_OscConfig+0x802>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d00c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x802>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_OscConfig+0x802>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d004      	beq.n	8002d0e <HAL_RCC_OscConfig+0x802>
 8002d04:	f44f 715d 	mov.w	r1, #884	; 0x374
 8002d08:	487d      	ldr	r0, [pc, #500]	; (8002f00 <HAL_RCC_OscConfig+0x9f4>)
 8002d0a:	f7fd fee4 	bl	8000ad6 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_OscConfig+0x812>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d904      	bls.n	8002d28 <HAL_RCC_OscConfig+0x81c>
 8002d1e:	f240 3175 	movw	r1, #885	; 0x375
 8002d22:	4877      	ldr	r0, [pc, #476]	; (8002f00 <HAL_RCC_OscConfig+0x9f4>)
 8002d24:	f7fd fed7 	bl	8000ad6 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	2b07      	cmp	r3, #7
 8002d2e:	d903      	bls.n	8002d38 <HAL_RCC_OscConfig+0x82c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	2b56      	cmp	r3, #86	; 0x56
 8002d36:	d904      	bls.n	8002d42 <HAL_RCC_OscConfig+0x836>
 8002d38:	f240 3176 	movw	r1, #886	; 0x376
 8002d3c:	4870      	ldr	r0, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x9f4>)
 8002d3e:	f7fd feca 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d903      	bls.n	8002d52 <HAL_RCC_OscConfig+0x846>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	2b1f      	cmp	r3, #31
 8002d50:	d904      	bls.n	8002d5c <HAL_RCC_OscConfig+0x850>
 8002d52:	f44f 715e 	mov.w	r1, #888	; 0x378
 8002d56:	486a      	ldr	r0, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x9f4>)
 8002d58:	f7fd febd 	bl	8000ad6 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_OscConfig+0x87a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d00c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x87a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_OscConfig+0x87a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d004      	beq.n	8002d86 <HAL_RCC_OscConfig+0x87a>
 8002d7c:	f240 317a 	movw	r1, #890	; 0x37a
 8002d80:	485f      	ldr	r0, [pc, #380]	; (8002f00 <HAL_RCC_OscConfig+0x9f4>)
 8002d82:	f7fd fea8 	bl	8000ad6 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_OscConfig+0x8a4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x8a4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCC_OscConfig+0x8a4>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d004      	beq.n	8002db0 <HAL_RCC_OscConfig+0x8a4>
 8002da6:	f240 317b 	movw	r1, #891	; 0x37b
 8002daa:	4855      	ldr	r0, [pc, #340]	; (8002f00 <HAL_RCC_OscConfig+0x9f4>)
 8002dac:	f7fd fe93 	bl	8000ad6 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002db0:	4b52      	ldr	r3, [pc, #328]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0203 	and.w	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d12c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d123      	bne.n	8002e1e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d11b      	bne.n	8002e1e <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d113      	bne.n	8002e1e <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d109      	bne.n	8002e1e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d074      	beq.n	8002f08 <HAL_RCC_OscConfig+0x9fc>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d068      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x9ea>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCC_OscConfig+0x930>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x934>
#endif
            )
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0af      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e40:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e4c:	f7fe fa32 	bl	80012b4 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x95a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fa2e 	bl	80012b4 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x95a>
              {
                return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e09c      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x948>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_RCC_OscConfig+0x9f8>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e82:	3a01      	subs	r2, #1
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e8c:	0212      	lsls	r2, r2, #8
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e94:	0852      	lsrs	r2, r2, #1
 8002e96:	3a01      	subs	r2, #1
 8002e98:	0552      	lsls	r2, r2, #21
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ea0:	0852      	lsrs	r2, r2, #1
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0652      	lsls	r2, r2, #25
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eac:	06d2      	lsls	r2, r2, #27
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	4912      	ldr	r1, [pc, #72]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002ebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a0d      	ldr	r2, [pc, #52]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ecc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ece:	f7fe f9f1 	bl	80012b4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x9dc>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe f9ed 	bl	80012b4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x9dc>
              {
                return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e05b      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <HAL_RCC_OscConfig+0x9f0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x9ca>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef4:	e053      	b.n	8002f9e <HAL_RCC_OscConfig+0xa92>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e052      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	0801104c 	.word	0x0801104c
 8002f04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d144      	bne.n	8002f9e <HAL_RCC_OscConfig+0xa92>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a20      	ldr	r2, [pc, #128]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f2c:	f7fe f9c2 	bl	80012b4 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xa3a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f34:	f7fe f9be 	bl	80012b4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xa3a>
            {
              return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e02c      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xa28>
 8002f52:	e024      	b.n	8002f9e <HAL_RCC_OscConfig+0xa92>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b0c      	cmp	r3, #12
 8002f58:	d01f      	beq.n	8002f9a <HAL_RCC_OscConfig+0xa8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe f9a5 	bl	80012b4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0xa74>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7fe f9a1 	bl	80012b4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0xa74>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e00f      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f0      	bne.n	8002f6e <HAL_RCC_OscConfig+0xa62>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4905      	ldr	r1, [pc, #20]	; (8002fa8 <HAL_RCC_OscConfig+0xa9c>)
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_OscConfig+0xaa0>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
 8002f98:	e001      	b.n	8002f9e <HAL_RCC_OscConfig+0xa92>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa94>
      }
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	feeefffc 	.word	0xfeeefffc

08002fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e186      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x24>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d904      	bls.n	8002fde <HAL_RCC_ClockConfig+0x2e>
 8002fd4:	f240 4157 	movw	r1, #1111	; 0x457
 8002fd8:	4882      	ldr	r0, [pc, #520]	; (80031e4 <HAL_RCC_ClockConfig+0x234>)
 8002fda:	f7fd fd7c 	bl	8000ad6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d010      	beq.n	8003006 <HAL_RCC_ClockConfig+0x56>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d00d      	beq.n	8003006 <HAL_RCC_ClockConfig+0x56>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d00a      	beq.n	8003006 <HAL_RCC_ClockConfig+0x56>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d007      	beq.n	8003006 <HAL_RCC_ClockConfig+0x56>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d004      	beq.n	8003006 <HAL_RCC_ClockConfig+0x56>
 8002ffc:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8003000:	4878      	ldr	r0, [pc, #480]	; (80031e4 <HAL_RCC_ClockConfig+0x234>)
 8003002:	f7fd fd68 	bl	8000ad6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003006:	4b78      	ldr	r3, [pc, #480]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d910      	bls.n	8003036 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003014:	4b74      	ldr	r3, [pc, #464]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 0207 	bic.w	r2, r3, #7
 800301c:	4972      	ldr	r1, [pc, #456]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003024:	4b70      	ldr	r3, [pc, #448]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d001      	beq.n	8003036 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e14d      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d039      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d024      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d020      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b90      	cmp	r3, #144	; 0x90
 8003058:	d01c      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2ba0      	cmp	r3, #160	; 0xa0
 8003060:	d018      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2bb0      	cmp	r3, #176	; 0xb0
 8003068:	d014      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2bc0      	cmp	r3, #192	; 0xc0
 8003070:	d010      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2bd0      	cmp	r3, #208	; 0xd0
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2be0      	cmp	r3, #224	; 0xe0
 8003080:	d008      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2bf0      	cmp	r3, #240	; 0xf0
 8003088:	d004      	beq.n	8003094 <HAL_RCC_ClockConfig+0xe4>
 800308a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800308e:	4855      	ldr	r0, [pc, #340]	; (80031e4 <HAL_RCC_ClockConfig+0x234>)
 8003090:	f7fd fd21 	bl	8000ad6 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4b54      	ldr	r3, [pc, #336]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d908      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494e      	ldr	r1, [pc, #312]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d061      	beq.n	8003186 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_ClockConfig+0x13c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d00c      	beq.n	80030ec <HAL_RCC_ClockConfig+0x13c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d008      	beq.n	80030ec <HAL_RCC_ClockConfig+0x13c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d004      	beq.n	80030ec <HAL_RCC_ClockConfig+0x13c>
 80030e2:	f240 417b 	movw	r1, #1147	; 0x47b
 80030e6:	483f      	ldr	r0, [pc, #252]	; (80031e4 <HAL_RCC_ClockConfig+0x234>)
 80030e8:	f7fd fcf5 	bl	8000ad6 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f4:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d121      	bne.n	8003144 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0e6      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d107      	bne.n	800311c <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310c:	4b37      	ldr	r3, [pc, #220]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d115      	bne.n	8003144 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0da      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003124:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d109      	bne.n	8003144 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0ce      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0c6      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 0203 	bic.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4926      	ldr	r1, [pc, #152]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003156:	f7fe f8ad 	bl	80012b4 <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315c:	e00a      	b.n	8003174 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315e:	f7fe f8a9 	bl	80012b4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	; 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0ae      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 020c 	and.w	r2, r3, #12
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	429a      	cmp	r2, r3
 8003184:	d1eb      	bne.n	800315e <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319e:	429a      	cmp	r2, r3
 80031a0:	d208      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a2:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	490f      	ldr	r1, [pc, #60]	; (80031ec <HAL_RCC_ClockConfig+0x23c>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d216      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	4907      	ldr	r1, [pc, #28]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_ClockConfig+0x238>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d007      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e076      	b.n	80032d2 <HAL_RCC_ClockConfig+0x322>
 80031e4:	0801104c 	.word	0x0801104c
 80031e8:	40022000 	.word	0x40022000
 80031ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d025      	beq.n	8003248 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d018      	beq.n	8003236 <HAL_RCC_ClockConfig+0x286>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d013      	beq.n	8003236 <HAL_RCC_ClockConfig+0x286>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003216:	d00e      	beq.n	8003236 <HAL_RCC_ClockConfig+0x286>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003220:	d009      	beq.n	8003236 <HAL_RCC_ClockConfig+0x286>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800322a:	d004      	beq.n	8003236 <HAL_RCC_ClockConfig+0x286>
 800322c:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8003230:	482a      	ldr	r0, [pc, #168]	; (80032dc <HAL_RCC_ClockConfig+0x32c>)
 8003232:	f7fd fc50 	bl	8000ad6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <HAL_RCC_ClockConfig+0x330>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	4927      	ldr	r1, [pc, #156]	; (80032e0 <HAL_RCC_ClockConfig+0x330>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d026      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d018      	beq.n	800328e <HAL_RCC_ClockConfig+0x2de>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003264:	d013      	beq.n	800328e <HAL_RCC_ClockConfig+0x2de>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800326e:	d00e      	beq.n	800328e <HAL_RCC_ClockConfig+0x2de>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003278:	d009      	beq.n	800328e <HAL_RCC_ClockConfig+0x2de>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003282:	d004      	beq.n	800328e <HAL_RCC_ClockConfig+0x2de>
 8003284:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8003288:	4814      	ldr	r0, [pc, #80]	; (80032dc <HAL_RCC_ClockConfig+0x32c>)
 800328a:	f7fd fc24 	bl	8000ad6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_RCC_ClockConfig+0x330>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4910      	ldr	r1, [pc, #64]	; (80032e0 <HAL_RCC_ClockConfig+0x330>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a2:	f000 f825 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_ClockConfig+0x330>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	490c      	ldr	r1, [pc, #48]	; (80032e4 <HAL_RCC_ClockConfig+0x334>)
 80032b4:	5ccb      	ldrb	r3, [r1, r3]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x338>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x33c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fd1a 	bl	8000d00 <HAL_InitTick>
 80032cc:	4603      	mov	r3, r0
 80032ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	0801104c 	.word	0x0801104c
 80032e0:	40021000 	.word	0x40021000
 80032e4:	080112b4 	.word	0x080112b4
 80032e8:	20000000 	.word	0x20000000
 80032ec:	20000004 	.word	0x20000004

080032f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fe:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x34>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d121      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d11e      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e005      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800334c:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d102      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003368:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_RCC_GetSysClockFreq+0x110>)
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e004      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d101      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003374:	4b23      	ldr	r3, [pc, #140]	; (8003404 <HAL_RCC_GetSysClockFreq+0x114>)
 8003376:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d134      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d003      	beq.n	8003396 <HAL_RCC_GetSysClockFreq+0xa6>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d003      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0xac>
 8003394:	e005      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_GetSysClockFreq+0x110>)
 8003398:	617b      	str	r3, [r7, #20]
      break;
 800339a:	e005      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800339c:	4b19      	ldr	r3, [pc, #100]	; (8003404 <HAL_RCC_GetSysClockFreq+0x114>)
 800339e:	617b      	str	r3, [r7, #20]
      break;
 80033a0:	e002      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	617b      	str	r3, [r7, #20]
      break;
 80033a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	3301      	adds	r3, #1
 80033b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	0a1b      	lsrs	r3, r3, #8
 80033bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	fb03 f202 	mul.w	r2, r3, r2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	0e5b      	lsrs	r3, r3, #25
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	3301      	adds	r3, #1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033e8:	69bb      	ldr	r3, [r7, #24]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	080112cc 	.word	0x080112cc
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCC_GetHCLKFreq+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003424:	f7ff fff0 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	080112c4 	.word	0x080112c4

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003450:	f7ff ffda 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0adb      	lsrs	r3, r3, #11
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4904      	ldr	r1, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	080112c4 	.word	0x080112c4

08003478 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <HAL_RCC_GetClockConfig+0x1a>
 8003488:	f240 6192 	movw	r1, #1682	; 0x692
 800348c:	4818      	ldr	r0, [pc, #96]	; (80034f0 <HAL_RCC_GetClockConfig+0x78>)
 800348e:	f7fd fb22 	bl	8000ad6 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_RCC_GetClockConfig+0x2a>
 8003498:	f240 6193 	movw	r1, #1683	; 0x693
 800349c:	4814      	ldr	r0, [pc, #80]	; (80034f0 <HAL_RCC_GetClockConfig+0x78>)
 800349e:	f7fd fb1a 	bl	8000ad6 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	220f      	movs	r2, #15
 80034a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_GetClockConfig+0x7c>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <HAL_RCC_GetClockConfig+0x7c>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCC_GetClockConfig+0x7c>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80034cc:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_GetClockConfig+0x7c>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	08db      	lsrs	r3, r3, #3
 80034d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_RCC_GetClockConfig+0x80>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0207 	and.w	r2, r3, #7
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	601a      	str	r2, [r3, #0]
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	0801104c 	.word	0x0801104c
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40022000 	.word	0x40022000

080034fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003514:	f7fe ff8a 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003518:	6178      	str	r0, [r7, #20]
 800351a:	e014      	b.n	8003546 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003526:	6593      	str	r3, [r2, #88]	; 0x58
 8003528:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003534:	f7fe ff7a 	bl	800242c <HAL_PWREx_GetVoltageRange>
 8003538:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d10b      	bne.n	8003566 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d919      	bls.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2ba0      	cmp	r3, #160	; 0xa0
 8003558:	d902      	bls.n	8003560 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355a:	2302      	movs	r3, #2
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	e013      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003560:	2301      	movs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e010      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b80      	cmp	r3, #128	; 0x80
 800356a:	d902      	bls.n	8003572 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800356c:	2303      	movs	r3, #3
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e00a      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d102      	bne.n	800357e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003578:	2302      	movs	r3, #2
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e004      	b.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b70      	cmp	r3, #112	; 0x70
 8003582:	d101      	bne.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003584:	2301      	movs	r3, #1
 8003586:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 0207 	bic.w	r2, r3, #7
 8003590:	4909      	ldr	r1, [pc, #36]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d001      	beq.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40022000 	.word	0x40022000

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c4:	2300      	movs	r3, #0
 80035c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0d5b      	lsrs	r3, r3, #21
 80035de:	055b      	lsls	r3, r3, #21
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x30>
 80035e4:	21c9      	movs	r1, #201	; 0xc9
 80035e6:	488a      	ldr	r0, [pc, #552]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035e8:	f7fd fa75 	bl	8000ad6 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d058      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d00d      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800360e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003612:	d008      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003618:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800361c:	d003      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800361e:	21d1      	movs	r1, #209	; 0xd1
 8003620:	487b      	ldr	r0, [pc, #492]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003622:	f7fd fa58 	bl	8000ad6 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800362e:	d02a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003630:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003634:	d824      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8003636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800363a:	d008      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x92>
 800363c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003640:	d81e      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364a:	d010      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 800364c:	e018      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800364e:	4b71      	ldr	r3, [pc, #452]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4a70      	ldr	r2, [pc, #448]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800365a:	e015      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xcc>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fa5a 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366c:	e00c      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xcc>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3320      	adds	r3, #32
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fbd1 	bl	8004e1c <RCCEx_PLLSAI2_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xcc>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	74fb      	strb	r3, [r7, #19]
      break;
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      break;
 8003686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368e:	4b61      	ldr	r3, [pc, #388]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369c:	495d      	ldr	r1, [pc, #372]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036a4:	e001      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d059      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c6:	d00e      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d0:	d009      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036da:	d004      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80036dc:	f240 110f 	movw	r1, #271	; 0x10f
 80036e0:	484b      	ldr	r0, [pc, #300]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036e2:	f7fd f9f8 	bl	8000ad6 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ee:	d02a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80036f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036f4:	d824      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>
 80036f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003700:	d81e      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370a:	d010      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800370c:	e018      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x184>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800371a:	e015      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f001 f9fa 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800372c:	e00c      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3320      	adds	r3, #32
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fb71 	bl	8004e1c <RCCEx_PLLSAI2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x18c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	74fb      	strb	r3, [r7, #19]
      break;
 8003744:	e000      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800374e:	4b31      	ldr	r3, [pc, #196]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375c:	492d      	ldr	r1, [pc, #180]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003764:	e001      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	7cfb      	ldrb	r3, [r7, #19]
 8003768:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80c3 	beq.w	80038fe <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003778:	2300      	movs	r3, #0
 800377a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003790:	d010      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037a8:	d004      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037aa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80037ae:	4818      	ldr	r0, [pc, #96]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80037b0:	f7fd f991 	bl	8000ad6 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037f2:	f7fd fd5f 	bl	80012b4 <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037f8:	e010      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fd fd5b 	bl	80012b4 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d909      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x260>
      {
        ret = HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	74fb      	strb	r3, [r7, #19]
        break;
 800380c:	e00c      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800380e:	bf00      	nop
 8003810:	08011084 	.word	0x08011084
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800381c:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0e8      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x23e>
      }
    }

    if(ret == HAL_OK)
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d15c      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800382e:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003838:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01f      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	429a      	cmp	r2, r3
 800384a:	d019      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003858:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003878:	4a1a      	ldr	r2, [pc, #104]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fd fd13 	bl	80012b4 <HAL_GetTick>
 800388e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003890:	e00b      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fd fd0f 	bl	80012b4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d902      	bls.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
          {
            ret = HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	74fb      	strb	r3, [r7, #19]
            break;
 80038a8:	e006      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ec      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }

      if(ret == HAL_OK)
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	4905      	ldr	r1, [pc, #20]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80038d6:	e009      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x330>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	74bb      	strb	r3, [r7, #18]
 80038dc:	e006      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80038de:	bf00      	nop
 80038e0:	40007000 	.word	0x40007000
 80038e4:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ec:	7c7b      	ldrb	r3, [r7, #17]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f2:	4b8d      	ldr	r3, [pc, #564]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	4a8c      	ldr	r2, [pc, #560]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80038f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01f      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d010      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	2b01      	cmp	r3, #1
 8003918:	d00c      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	2b03      	cmp	r3, #3
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	2b02      	cmp	r3, #2
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800392a:	f240 1199 	movw	r1, #409	; 0x199
 800392e:	487f      	ldr	r0, [pc, #508]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003930:	f7fd f8d1 	bl	8000ad6 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003934:	4b7c      	ldr	r3, [pc, #496]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	4979      	ldr	r1, [pc, #484]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01f      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d010      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	2b04      	cmp	r3, #4
 8003964:	d00c      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d008      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	2b08      	cmp	r3, #8
 8003974:	d004      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003976:	f240 11a3 	movw	r1, #419	; 0x1a3
 800397a:	486c      	ldr	r0, [pc, #432]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800397c:	f7fd f8ab 	bl	8000ad6 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003980:	4b69      	ldr	r3, [pc, #420]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f023 020c 	bic.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	4966      	ldr	r1, [pc, #408]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01f      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d00c      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b30      	cmp	r3, #48	; 0x30
 80039b8:	d008      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d004      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039c2:	f240 11af 	movw	r1, #431	; 0x1af
 80039c6:	4859      	ldr	r0, [pc, #356]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 80039c8:	f7fd f885 	bl	8000ad6 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039cc:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80039ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4953      	ldr	r1, [pc, #332]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01f      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d00c      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	2bc0      	cmp	r3, #192	; 0xc0
 8003a04:	d008      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	2b80      	cmp	r3, #128	; 0x80
 8003a0c:	d004      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003a0e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003a12:	4846      	ldr	r0, [pc, #280]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003a14:	f7fd f85f 	bl	8000ad6 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a18:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4940      	ldr	r1, [pc, #256]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d022      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d013      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d00e      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a54:	d009      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a5e:	d004      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a60:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003a64:	4831      	ldr	r0, [pc, #196]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003a66:	f7fd f836 	bl	8000ad6 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	492b      	ldr	r1, [pc, #172]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d022      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9c:	d00e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa6:	d009      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab0:	d004      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003ab2:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003ab6:	481d      	ldr	r0, [pc, #116]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003ab8:	f7fd f80d 	bl	8000ad6 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aca:	4917      	ldr	r1, [pc, #92]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d028      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d013      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aee:	d00e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b02:	d004      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003b04:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003b08:	4808      	ldr	r0, [pc, #32]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003b0a:	f7fc ffe4 	bl	8000ad6 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1c:	4902      	ldr	r1, [pc, #8]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b24:	e004      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08011084 	.word	0x08011084
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d022      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4c:	d00e      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b56:	d009      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b60:	d004      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003b62:	f240 11e7 	movw	r1, #487	; 0x1e7
 8003b66:	488c      	ldr	r0, [pc, #560]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b68:	f7fc ffb5 	bl	8000ad6 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b6c:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7a:	4988      	ldr	r1, [pc, #544]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01d      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00e      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d009      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba8:	d004      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003baa:	f240 11ef 	movw	r1, #495	; 0x1ef
 8003bae:	487a      	ldr	r0, [pc, #488]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb0:	f7fc ff91 	bl	8000ad6 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb4:	4b79      	ldr	r3, [pc, #484]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	4976      	ldr	r1, [pc, #472]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01d      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be6:	d009      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d004      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003bf2:	f240 11fb 	movw	r1, #507	; 0x1fb
 8003bf6:	4868      	ldr	r0, [pc, #416]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf8:	f7fc ff6d 	bl	8000ad6 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bfc:	4b67      	ldr	r3, [pc, #412]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	4964      	ldr	r1, [pc, #400]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01d      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2e:	d009      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c38:	d004      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003c3a:	f240 2107 	movw	r1, #519	; 0x207
 8003c3e:	4856      	ldr	r0, [pc, #344]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c40:	f7fc ff49 	bl	8000ad6 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c44:	4b55      	ldr	r3, [pc, #340]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	4952      	ldr	r1, [pc, #328]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01b      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00c      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d004      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003c7e:	f240 2113 	movw	r1, #531	; 0x213
 8003c82:	4845      	ldr	r0, [pc, #276]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c84:	f7fc ff27 	bl	8000ad6 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c88:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	4941      	ldr	r1, [pc, #260]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d040      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d013      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cba:	d00e      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc4:	d009      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003cce:	d004      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8003cd0:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003cd4:	4830      	ldr	r0, [pc, #192]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd6:	f7fc fefe 	bl	8000ad6 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	492c      	ldr	r1, [pc, #176]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d04:	60d3      	str	r3, [r2, #12]
 8003d06:	e011      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x770>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x770>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2101      	movs	r1, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 feff 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x770>
        {
          /* set overall return value */
          status = ret;
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d045      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x808>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d48:	d00e      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d52:	d009      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d5c:	d004      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8003d5e:	f240 2141 	movw	r1, #577	; 0x241
 8003d62:	480d      	ldr	r0, [pc, #52]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d64:	f7fc feb7 	bl	8000ad6 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d76:	4909      	ldr	r1, [pc, #36]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d86:	d10b      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d92:	60d3      	str	r3, [r2, #12]
 8003d94:	e016      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8003d96:	bf00      	nop
 8003d98:	08011084 	.word	0x08011084
 8003d9c:	40021000 	.word	0x40021000
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2101      	movs	r1, #1
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 feb3 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* set overall return value */
        status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d040      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d013      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de0:	d00e      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dea:	d009      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003df4:	d004      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003df6:	f240 2166 	movw	r1, #614	; 0x266
 8003dfa:	4861      	ldr	r0, [pc, #388]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8003dfc:	f7fc fe6b 	bl	8000ad6 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e00:	4b60      	ldr	r3, [pc, #384]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0e:	495d      	ldr	r1, [pc, #372]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e20:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a57      	ldr	r2, [pc, #348]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e2a:	60d3      	str	r3, [r2, #12]
 8003e2c:	e011      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x896>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e36:	d10c      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fe6c 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x896>
      {
        /* set overall return value */
        status = ret;
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d047      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d013      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e6e:	d00e      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e78:	d009      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e82:	d004      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8003e84:	f240 2186 	movw	r1, #646	; 0x286
 8003e88:	483d      	ldr	r0, [pc, #244]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8003e8a:	f7fc fe24 	bl	8000ad6 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e9c:	4939      	ldr	r1, [pc, #228]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eac:	d10d      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x90e>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fe31 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d014      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x932>
      {
        /* set overall return value */
        status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
 8003ec8:	e011      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x932>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3320      	adds	r3, #32
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 ff9e 	bl	8004e1c <RCCEx_PLLSAI2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x932>
      {
        /* set overall return value */
        status = ret;
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01b      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x976>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8003f10:	f240 21b2 	movw	r1, #690	; 0x2b2
 8003f14:	481a      	ldr	r0, [pc, #104]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8003f16:	f7fc fdde 	bl	8000ad6 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2a:	4916      	ldr	r1, [pc, #88]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01b      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f52:	d004      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8003f54:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8003f58:	4809      	ldr	r0, [pc, #36]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8003f5a:	f7fc fdbc 	bl	8000ad6 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6e:	4905      	ldr	r1, [pc, #20]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	08011084 	.word	0x08011084
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
#if defined(SDMMC1) && defined(RCC_CCIPR2_SDMMCSEL)
  uint32_t pllp;  /* no init needed */
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0d5b      	lsrs	r3, r3, #21
 8003fa2:	055b      	lsls	r3, r3, #21
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 8003fa8:	f240 4187 	movw	r1, #1159	; 0x487
 8003fac:	48b4      	ldr	r0, [pc, #720]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003fae:	f7fc fd92 	bl	8000ad6 <assert_failed>

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fb8:	d13e      	bne.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003fba:	4bb2      	ldr	r3, [pc, #712]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc4:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fcc:	d028      	beq.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd4:	f200 858f 	bhi.w	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fde:	d005      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe6:	d00e      	beq.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003fe8:	f000 bd85 	b.w	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fec:	4ba5      	ldr	r3, [pc, #660]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	f040 857f 	bne.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xb72>
        frequency = LSE_VALUE;
 8003ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004000:	61fb      	str	r3, [r7, #28]
      break;
 8004002:	f000 bd7a 	b.w	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0xb72>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004006:	4b9f      	ldr	r3, [pc, #636]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	f040 8574 	bne.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
          frequency = LSI_VALUE;
 8004016:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800401a:	61fb      	str	r3, [r7, #28]
      break;
 800401c:	f000 bd6f 	b.w	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004020:	4b98      	ldr	r3, [pc, #608]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800402c:	f040 8569 	bne.w	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
        frequency = HSE_VALUE / 32U;
 8004030:	4b95      	ldr	r3, [pc, #596]	; (8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004032:	61fb      	str	r3, [r7, #28]
      break;
 8004034:	f000 bd65 	b.w	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004038:	4b92      	ldr	r3, [pc, #584]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d036      	beq.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d840      	bhi.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d003      	beq.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d020      	beq.n	800409c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800405a:	e039      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800405c:	4b89      	ldr	r3, [pc, #548]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d116      	bne.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004068:	4b86      	ldr	r3, [pc, #536]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8004074:	4b83      	ldr	r3, [pc, #524]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	e005      	b.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004080:	4b80      	ldr	r3, [pc, #512]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	4a7f      	ldr	r2, [pc, #508]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004092:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004094:	e01f      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        pllvco = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
      break;
 800409a:	e01c      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800409c:	4b79      	ldr	r3, [pc, #484]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a8:	d102      	bne.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      {
        pllvco = HSI_VALUE;
 80040aa:	4b79      	ldr	r3, [pc, #484]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80040ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80040ae:	e012      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        pllvco = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
      break;
 80040b4:	e00f      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040b6:	4b73      	ldr	r3, [pc, #460]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c2:	d102      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        pllvco = HSE_VALUE;
 80040c4:	4b73      	ldr	r3, [pc, #460]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80040c6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80040c8:	e005      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        pllvco = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    default:
      /* No source */
      pllvco = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]
      break;
 80040d4:	bf00      	nop
    }

    switch(PeriphClk)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040dc:	f000 842d 	beq.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e6:	f200 850e 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040f0:	f000 80e2 	beq.w	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040fa:	f200 8504 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004104:	f000 80d8 	beq.w	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800410e:	f200 84fa 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	f000 837a 	beq.w	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	f200 84f0 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800412c:	f000 84c6 	beq.w	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004136:	f200 84e6 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004140:	f000 82e9 	beq.w	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800414a:	f200 84dc 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004154:	f000 80b0 	beq.w	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800415e:	f200 84d2 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004168:	f000 809e 	beq.w	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	f200 84c8 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417c:	f000 808c 	beq.w	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004186:	f200 84be 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	f000 844a 	beq.w	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	f200 84b4 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	f000 83f2 	beq.w	800498c <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ae:	f200 84aa 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b8:	f000 8393 	beq.w	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c2:	f200 84a0 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b80      	cmp	r3, #128	; 0x80
 80041ca:	f000 835e 	beq.w	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x902>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	f200 8498 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d84b      	bhi.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8491 	beq.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	2b1f      	cmp	r3, #31
 80041ea:	f200 848c 	bhi.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	0800440f 	.word	0x0800440f
 80041f8:	0800447f 	.word	0x0800447f
 80041fc:	08004b07 	.word	0x08004b07
 8004200:	08004513 	.word	0x08004513
 8004204:	08004b07 	.word	0x08004b07
 8004208:	08004b07 	.word	0x08004b07
 800420c:	08004b07 	.word	0x08004b07
 8004210:	0800459b 	.word	0x0800459b
 8004214:	08004b07 	.word	0x08004b07
 8004218:	08004b07 	.word	0x08004b07
 800421c:	08004b07 	.word	0x08004b07
 8004220:	08004b07 	.word	0x08004b07
 8004224:	08004b07 	.word	0x08004b07
 8004228:	08004b07 	.word	0x08004b07
 800422c:	08004b07 	.word	0x08004b07
 8004230:	08004613 	.word	0x08004613
 8004234:	08004b07 	.word	0x08004b07
 8004238:	08004b07 	.word	0x08004b07
 800423c:	08004b07 	.word	0x08004b07
 8004240:	08004b07 	.word	0x08004b07
 8004244:	08004b07 	.word	0x08004b07
 8004248:	08004b07 	.word	0x08004b07
 800424c:	08004b07 	.word	0x08004b07
 8004250:	08004b07 	.word	0x08004b07
 8004254:	08004b07 	.word	0x08004b07
 8004258:	08004b07 	.word	0x08004b07
 800425c:	08004b07 	.word	0x08004b07
 8004260:	08004b07 	.word	0x08004b07
 8004264:	08004b07 	.word	0x08004b07
 8004268:	08004b07 	.word	0x08004b07
 800426c:	08004b07 	.word	0x08004b07
 8004270:	08004695 	.word	0x08004695
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	f000 82db 	beq.w	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800427c:	f000 bc43 	b.w	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004280:	08011084 	.word	0x08011084
 8004284:	40021000 	.word	0x40021000
 8004288:	0003d090 	.word	0x0003d090
 800428c:	080112cc 	.word	0x080112cc
 8004290:	00f42400 	.word	0x00f42400
 8004294:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800429e:	f000 ff07 	bl	80050b0 <RCCEx_GetSAIxPeriphCLKFreq>
 80042a2:	61f8      	str	r0, [r7, #28]
      break;
 80042a4:	f000 bc30 	b.w	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80042ae:	f000 feff 	bl	80050b0 <RCCEx_GetSAIxPeriphCLKFreq>
 80042b2:	61f8      	str	r0, [r7, #28]
      break;
 80042b4:	f000 bc28 	b.w	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80042b8:	4ba6      	ldr	r3, [pc, #664]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042ca:	d015      	beq.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80042d2:	f200 8092 	bhi.w	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042dc:	d029      	beq.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e4:	f200 8089 	bhi.w	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d07b      	beq.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f4:	d04a      	beq.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x404>
          break;
 80042f6:	e080      	b.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80042f8:	4b96      	ldr	r3, [pc, #600]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d17c      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004304:	4b93      	ldr	r3, [pc, #588]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004310:	4b90      	ldr	r3, [pc, #576]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	e005      	b.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
 800431c:	4b8d      	ldr	r3, [pc, #564]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	4a8b      	ldr	r2, [pc, #556]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800432a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432e:	61fb      	str	r3, [r7, #28]
          break;
 8004330:	e065      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004332:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800433e:	d160      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004340:	4b84      	ldr	r3, [pc, #528]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434c:	d159      	bne.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800434e:	4b81      	ldr	r3, [pc, #516]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004358:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	fb03 f202 	mul.w	r2, r3, r2
 8004362:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	3301      	adds	r3, #1
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004374:	4b77      	ldr	r3, [pc, #476]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0d5b      	lsrs	r3, r3, #21
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	61fb      	str	r3, [r7, #28]
          break;
 800438a:	e03a      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800438c:	4b71      	ldr	r3, [pc, #452]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004398:	d135      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800439a:	4b6e      	ldr	r3, [pc, #440]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a6:	d12e      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80043a8:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	fb03 f202 	mul.w	r2, r3, r2
 80043bc:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	3301      	adds	r3, #1
 80043c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043cc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80043ce:	4b61      	ldr	r3, [pc, #388]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	0d5b      	lsrs	r3, r3, #21
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	3301      	adds	r3, #1
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	61fb      	str	r3, [r7, #28]
          break;
 80043e4:	e00f      	b.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80043e6:	4b5b      	ldr	r3, [pc, #364]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80043e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d10a      	bne.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            frequency = HSI48_VALUE;
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80043f6:	61fb      	str	r3, [r7, #28]
          break;
 80043f8:	e007      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
          break;
 80043fa:	bf00      	nop
 80043fc:	e384      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 80043fe:	bf00      	nop
 8004400:	e382      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004402:	bf00      	nop
 8004404:	e380      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004406:	bf00      	nop
 8004408:	e37e      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800440a:	bf00      	nop
        break;
 800440c:	e37c      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800440e:	4b51      	ldr	r3, [pc, #324]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d828      	bhi.n	8004472 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004420:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	08004439 	.word	0x08004439
 800442c:	08004441 	.word	0x08004441
 8004430:	08004449 	.word	0x08004449
 8004434:	0800445d 	.word	0x0800445d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004438:	f7ff f808 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 800443c:	61f8      	str	r0, [r7, #28]
          break;
 800443e:	e01d      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004440:	f7fe ff56 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8004444:	61f8      	str	r0, [r7, #28]
          break;
 8004446:	e019      	b.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004448:	4b42      	ldr	r3, [pc, #264]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004454:	d10f      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
            frequency = HSI_VALUE;
 8004456:	4b42      	ldr	r3, [pc, #264]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004458:	61fb      	str	r3, [r7, #28]
          break;
 800445a:	e00c      	b.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800445c:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b02      	cmp	r3, #2
 8004468:	d107      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
            frequency = LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	61fb      	str	r3, [r7, #28]
          break;
 8004470:	e003      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          break;
 8004472:	bf00      	nop
 8004474:	e348      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004476:	bf00      	nop
 8004478:	e346      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800447a:	bf00      	nop
        break;
 800447c:	e344      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d83a      	bhi.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004490:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044cd 	.word	0x080044cd
 800449c:	08004507 	.word	0x08004507
 80044a0:	08004507 	.word	0x08004507
 80044a4:	08004507 	.word	0x08004507
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	08004507 	.word	0x08004507
 80044b0:	08004507 	.word	0x08004507
 80044b4:	08004507 	.word	0x08004507
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	08004507 	.word	0x08004507
 80044c0:	08004507 	.word	0x08004507
 80044c4:	08004507 	.word	0x08004507
 80044c8:	080044f1 	.word	0x080044f1
          frequency = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe ffa8 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80044d0:	61f8      	str	r0, [r7, #28]
          break;
 80044d2:	e01d      	b.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          frequency = HAL_RCC_GetSysClockFreq();
 80044d4:	f7fe ff0c 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80044d8:	61f8      	str	r0, [r7, #28]
          break;
 80044da:	e019      	b.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d10f      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x582>
            frequency = HSI_VALUE;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80044ec:	61fb      	str	r3, [r7, #28]
          break;
 80044ee:	e00c      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x582>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d107      	bne.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
            frequency = LSE_VALUE;
 80044fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004502:	61fb      	str	r3, [r7, #28]
          break;
 8004504:	e003      	b.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          break;
 8004506:	bf00      	nop
 8004508:	e2fe      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800450a:	bf00      	nop
 800450c:	e2fc      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800450e:	bf00      	nop
        break;
 8004510:	e2fa      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b30      	cmp	r3, #48	; 0x30
 8004522:	d029      	beq.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b30      	cmp	r3, #48	; 0x30
 8004528:	d831      	bhi.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b20      	cmp	r3, #32
 800452e:	d019      	beq.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b20      	cmp	r3, #32
 8004534:	d82b      	bhi.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b10      	cmp	r3, #16
 8004540:	d004      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
          break;
 8004542:	e024      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fe ff6c 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004548:	61f8      	str	r0, [r7, #28]
          break;
 800454a:	e025      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetSysClockFreq();
 800454c:	f7fe fed0 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8004550:	61f8      	str	r0, [r7, #28]
          break;
 8004552:	e021      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8004554:	40021000 	.word	0x40021000
 8004558:	080112cc 	.word	0x080112cc
 800455c:	02dc6c00 	.word	0x02dc6c00
 8004560:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004564:	4b8f      	ldr	r3, [pc, #572]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004570:	d10f      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = HSI_VALUE;
 8004572:	4b8d      	ldr	r3, [pc, #564]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004574:	61fb      	str	r3, [r7, #28]
          break;
 8004576:	e00c      	b.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004578:	4b8a      	ldr	r3, [pc, #552]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d107      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            frequency = LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458a:	61fb      	str	r3, [r7, #28]
          break;
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          break;
 800458e:	bf00      	nop
 8004590:	e2ba      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004592:	bf00      	nop
 8004594:	e2b8      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004596:	bf00      	nop
        break;
 8004598:	e2b6      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800459a:	4b82      	ldr	r3, [pc, #520]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2bc0      	cmp	r3, #192	; 0xc0
 80045aa:	d021      	beq.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2bc0      	cmp	r3, #192	; 0xc0
 80045b0:	d829      	bhi.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d011      	beq.n	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d823      	bhi.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d004      	beq.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          break;
 80045ca:	e01c      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7fe ff28 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80045d0:	61f8      	str	r0, [r7, #28]
          break;
 80045d2:	e01d      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
          frequency = HAL_RCC_GetSysClockFreq();
 80045d4:	f7fe fe8c 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80045d8:	61f8      	str	r0, [r7, #28]
          break;
 80045da:	e019      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045dc:	4b71      	ldr	r3, [pc, #452]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e8:	d10f      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
            frequency = HSI_VALUE;
 80045ea:	4b6f      	ldr	r3, [pc, #444]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80045ec:	61fb      	str	r3, [r7, #28]
          break;
 80045ee:	e00c      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045f0:	4b6c      	ldr	r3, [pc, #432]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x686>
            frequency = LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	61fb      	str	r3, [r7, #28]
          break;
 8004604:	e003      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x686>
          break;
 8004606:	bf00      	nop
 8004608:	e27e      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800460a:	bf00      	nop
 800460c:	e27c      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800460e:	bf00      	nop
        break;
 8004610:	e27a      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004612:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004624:	d025      	beq.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462c:	d82c      	bhi.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004634:	d013      	beq.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d824      	bhi.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464a:	d004      	beq.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
          break;
 800464c:	e01c      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 800464e:	f7fe fee7 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004652:	61f8      	str	r0, [r7, #28]
          break;
 8004654:	e01d      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fe4b 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800465a:	61f8      	str	r0, [r7, #28]
          break;
 800465c:	e019      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800465e:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466a:	d10f      	bne.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            frequency = HSI_VALUE;
 800466c:	4b4e      	ldr	r3, [pc, #312]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800466e:	61fb      	str	r3, [r7, #28]
          break;
 8004670:	e00c      	b.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004672:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b02      	cmp	r3, #2
 800467e:	d107      	bne.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
            frequency = LSE_VALUE;
 8004680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004684:	61fb      	str	r3, [r7, #28]
          break;
 8004686:	e003      	b.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          break;
 8004688:	bf00      	nop
 800468a:	e23d      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800468c:	bf00      	nop
 800468e:	e23b      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004690:	bf00      	nop
        break;
 8004692:	e239      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004694:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a6:	d025      	beq.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ae:	d82c      	bhi.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b6:	d013      	beq.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046be:	d824      	bhi.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046cc:	d004      	beq.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
          break;
 80046ce:	e01c      	b.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046d0:	f7fe fea6 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80046d4:	61f8      	str	r0, [r7, #28]
          break;
 80046d6:	e01d      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 80046d8:	f7fe fe0a 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80046dc:	61f8      	str	r0, [r7, #28]
          break;
 80046de:	e019      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046e0:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ec:	d10f      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HSI_VALUE;
 80046ee:	4b2e      	ldr	r3, [pc, #184]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80046f0:	61fb      	str	r3, [r7, #28]
          break;
 80046f2:	e00c      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d107      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	61fb      	str	r3, [r7, #28]
          break;
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
          break;
 800470a:	bf00      	nop
 800470c:	e1fc      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800470e:	bf00      	nop
 8004710:	e1fa      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004712:	bf00      	nop
        break;
 8004714:	e1f8      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004716:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004728:	d00c      	beq.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004730:	d868      	bhi.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004738:	d008      	beq.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004740:	d034      	beq.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 8004742:	e05f      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004744:	f7fe fdd4 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8004748:	61f8      	str	r0, [r7, #28]
          break;
 800474a:	e060      	b.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800474c:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004758:	d156      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d050      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004770:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	fb03 f202 	mul.w	r2, r3, r2
 800477a:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	3301      	adds	r3, #1
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	0e5b      	lsrs	r3, r3, #25
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	3301      	adds	r3, #1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	61fb      	str	r3, [r7, #28]
          break;
 80047a2:	e031      	b.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 80047a4:	40021000 	.word	0x40021000
 80047a8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80047ac:	4b9c      	ldr	r3, [pc, #624]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b8:	d128      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 80047ba:	4b99      	ldr	r3, [pc, #612]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d022      	beq.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80047c6:	4b96      	ldr	r3, [pc, #600]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	fb03 f202 	mul.w	r2, r3, r2
 80047da:	4b91      	ldr	r3, [pc, #580]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	3301      	adds	r3, #1
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80047ec:	4b8c      	ldr	r3, [pc, #560]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	0e5b      	lsrs	r3, r3, #25
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	3301      	adds	r3, #1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	61fb      	str	r3, [r7, #28]
          break;
 8004802:	e003      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
          break;
 8004804:	bf00      	nop
 8004806:	e17f      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004808:	bf00      	nop
 800480a:	e17d      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800480c:	bf00      	nop
        break;
 800480e:	e17b      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004810:	4b83      	ldr	r3, [pc, #524]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d103      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004822:	f7fe fe13 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8004826:	61f8      	str	r0, [r7, #28]
        break;
 8004828:	e16e      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 800482a:	f7fe fd61 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800482e:	61f8      	str	r0, [r7, #28]
        break;
 8004830:	e16a      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004832:	4b7b      	ldr	r3, [pc, #492]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004844:	d013      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484c:	d819      	bhi.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485a:	d004      	beq.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 800485c:	e011      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
          frequency = HAL_RCC_GetPCLK1Freq();
 800485e:	f7fe fddf 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004862:	61f8      	str	r0, [r7, #28]
          break;
 8004864:	e010      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
          frequency = HAL_RCC_GetSysClockFreq();
 8004866:	f7fe fd43 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800486a:	61f8      	str	r0, [r7, #28]
          break;
 800486c:	e00c      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800486e:	4b6c      	ldr	r3, [pc, #432]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d104      	bne.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
            frequency = HSI_VALUE;
 800487c:	4b69      	ldr	r3, [pc, #420]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800487e:	61fb      	str	r3, [r7, #28]
          break;
 8004880:	e001      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
          break;
 8004882:	bf00      	nop
 8004884:	e140      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004886:	bf00      	nop
        break;
 8004888:	e13e      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800488a:	4b65      	ldr	r3, [pc, #404]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489c:	d013      	beq.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a4:	d819      	bhi.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b2:	d004      	beq.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 80048b4:	e011      	b.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x952>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048b6:	f7fe fdb3 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80048ba:	61f8      	str	r0, [r7, #28]
          break;
 80048bc:	e010      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          frequency = HAL_RCC_GetSysClockFreq();
 80048be:	f7fe fd17 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80048c2:	61f8      	str	r0, [r7, #28]
          break;
 80048c4:	e00c      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048c6:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d2:	d104      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            frequency = HSI_VALUE;
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80048d6:	61fb      	str	r3, [r7, #28]
          break;
 80048d8:	e001      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          break;
 80048da:	bf00      	nop
 80048dc:	e114      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 80048de:	bf00      	nop
        break;
 80048e0:	e112      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80048e2:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048f4:	d013      	beq.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048fc:	d819      	bhi.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490a:	d004      	beq.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800490c:	e011      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
          frequency = HAL_RCC_GetPCLK1Freq();
 800490e:	f7fe fd87 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004912:	61f8      	str	r0, [r7, #28]
          break;
 8004914:	e010      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fceb 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800491a:	61f8      	str	r0, [r7, #28]
          break;
 800491c:	e00c      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800491e:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492a:	d104      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
            frequency = HSI_VALUE;
 800492c:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800492e:	61fb      	str	r3, [r7, #28]
          break;
 8004930:	e001      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
          break;
 8004932:	bf00      	nop
 8004934:	e0e8      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004936:	bf00      	nop
        break;
 8004938:	e0e6      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800493a:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800493c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d011      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x9e8>
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d818      	bhi.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d004      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          break;
 800495e:	e011      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe fd5e 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004964:	61f8      	str	r0, [r7, #28]
          break;
 8004966:	e010      	b.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = HAL_RCC_GetSysClockFreq();
 8004968:	f7fe fcc2 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800496c:	61f8      	str	r0, [r7, #28]
          break;
 800496e:	e00c      	b.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497c:	d104      	bne.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
            frequency = HSI_VALUE;
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004980:	61fb      	str	r3, [r7, #28]
          break;
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
          break;
 8004984:	bf00      	nop
 8004986:	e0bf      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004988:	bf00      	nop
        break;
 800498a:	e0bd      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800498c:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800499e:	d02c      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049a6:	d833      	bhi.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049ae:	d01a      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049b6:	d82b      	bhi.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049c4:	d004      	beq.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
          break;
 80049c6:	e023      	b.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fe fd2a 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80049cc:	61f8      	str	r0, [r7, #28]
          break;
 80049ce:	e026      	b.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d11a      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
              frequency = LSI_VALUE;
 80049de:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80049e2:	61fb      	str	r3, [r7, #28]
          break;
 80049e4:	e016      	b.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f2:	d111      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
            frequency = HSI_VALUE;
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80049f6:	61fb      	str	r3, [r7, #28]
          break;
 80049f8:	e00e      	b.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d109      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
            frequency = LSE_VALUE;
 8004a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0c:	61fb      	str	r3, [r7, #28]
          break;
 8004a0e:	e005      	b.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
          break;
 8004a10:	bf00      	nop
 8004a12:	e079      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004a14:	bf00      	nop
 8004a16:	e077      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004a18:	bf00      	nop
 8004a1a:	e075      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004a1c:	bf00      	nop
        break;
 8004a1e:	e073      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
 8004a20:	40021000 	.word	0x40021000
 8004a24:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004a28:	4b3a      	ldr	r3, [pc, #232]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a3a:	d02c      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a42:	d833      	bhi.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a4a:	d01a      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a52:	d82b      	bhi.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a60:	d004      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          break;
 8004a62:	e023      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a64:	f7fe fcdc 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004a68:	61f8      	str	r0, [r7, #28]
          break;
 8004a6a:	e026      	b.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004a6c:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d11a      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>
              frequency = LSI_VALUE;
 8004a7a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004a7e:	61fb      	str	r3, [r7, #28]
          break;
 8004a80:	e016      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a82:	4b24      	ldr	r3, [pc, #144]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d111      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
            frequency = HSI_VALUE;
 8004a90:	4b21      	ldr	r3, [pc, #132]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
 8004a92:	61fb      	str	r3, [r7, #28]
          break;
 8004a94:	e00e      	b.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a96:	4b1f      	ldr	r3, [pc, #124]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d109      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
            frequency = LSE_VALUE;
 8004aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa8:	61fb      	str	r3, [r7, #28]
          break;
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
          break;
 8004aac:	bf00      	nop
 8004aae:	e02b      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ab0:	bf00      	nop
 8004ab2:	e029      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ab4:	bf00      	nop
 8004ab6:	e027      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ab8:	bf00      	nop
        break;
 8004aba:	e025      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004abc:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d004      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>
          break;
 8004ad6:	e00d      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7fe fca2 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004adc:	61f8      	str	r0, [r7, #28]
          break;
 8004ade:	e009      	b.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
            frequency = HSI_VALUE;
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
 8004af0:	61fb      	str	r3, [r7, #28]
          break;
 8004af2:	bf00      	nop
        break;
 8004af4:	e008      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004af6:	bf00      	nop
 8004af8:	e006      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004afa:	bf00      	nop
 8004afc:	e004      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004afe:	bf00      	nop
 8004b00:	e002      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004b06:	bf00      	nop
    }
  }

  return(frequency);
 8004b08:	69fb      	ldr	r3, [r7, #28]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	00f42400 	.word	0x00f42400

08004b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d010      	beq.n	8004b54 <RCCEx_PLLSAI1_Config+0x38>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d00c      	beq.n	8004b54 <RCCEx_PLLSAI1_Config+0x38>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d008      	beq.n	8004b54 <RCCEx_PLLSAI1_Config+0x38>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d004      	beq.n	8004b54 <RCCEx_PLLSAI1_Config+0x38>
 8004b4a:	f640 315e 	movw	r1, #2910	; 0xb5e
 8004b4e:	4887      	ldr	r0, [pc, #540]	; (8004d6c <RCCEx_PLLSAI1_Config+0x250>)
 8004b50:	f7fb ffc1 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <RCCEx_PLLSAI1_Config+0x48>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d904      	bls.n	8004b6e <RCCEx_PLLSAI1_Config+0x52>
 8004b64:	f640 315f 	movw	r1, #2911	; 0xb5f
 8004b68:	4880      	ldr	r0, [pc, #512]	; (8004d6c <RCCEx_PLLSAI1_Config+0x250>)
 8004b6a:	f7fb ffb4 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b07      	cmp	r3, #7
 8004b74:	d903      	bls.n	8004b7e <RCCEx_PLLSAI1_Config+0x62>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b56      	cmp	r3, #86	; 0x56
 8004b7c:	d904      	bls.n	8004b88 <RCCEx_PLLSAI1_Config+0x6c>
 8004b7e:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8004b82:	487a      	ldr	r0, [pc, #488]	; (8004d6c <RCCEx_PLLSAI1_Config+0x250>)
 8004b84:	f7fb ffa7 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <RCCEx_PLLSAI1_Config+0x90>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <RCCEx_PLLSAI1_Config+0x90>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <RCCEx_PLLSAI1_Config+0xa0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <RCCEx_PLLSAI1_Config+0xaa>
 8004bbc:	f640 3161 	movw	r1, #2913	; 0xb61
 8004bc0:	486a      	ldr	r0, [pc, #424]	; (8004d6c <RCCEx_PLLSAI1_Config+0x250>)
 8004bc2:	f7fb ff88 	bl	8000ad6 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bc6:	4b6a      	ldr	r3, [pc, #424]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d018      	beq.n	8004c04 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bd2:	4b67      	ldr	r3, [pc, #412]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0203 	and.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d10d      	bne.n	8004bfe <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
       ||
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bea:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	091b      	lsrs	r3, r3, #4
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d047      	beq.n	8004c8e <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	e044      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d018      	beq.n	8004c3e <RCCEx_PLLSAI1_Config+0x122>
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d825      	bhi.n	8004c5c <RCCEx_PLLSAI1_Config+0x140>
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d002      	beq.n	8004c1a <RCCEx_PLLSAI1_Config+0xfe>
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d009      	beq.n	8004c2c <RCCEx_PLLSAI1_Config+0x110>
 8004c18:	e020      	b.n	8004c5c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c1a:	4b55      	ldr	r3, [pc, #340]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11d      	bne.n	8004c62 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2a:	e01a      	b.n	8004c62 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c2c:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d116      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3c:	e013      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c3e:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c4a:	4b49      	ldr	r3, [pc, #292]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c5a:	e006      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	e004      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8004c6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10d      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c72:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	430b      	orrs	r3, r1
 8004c88:	4939      	ldr	r1, [pc, #228]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f040 80ba 	bne.w	8004e0a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a35      	ldr	r2, [pc, #212]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fc fb07 	bl	80012b4 <HAL_GetTick>
 8004ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ca8:	e009      	b.n	8004cbe <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004caa:	f7fc fb03 	bl	80012b4 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d902      	bls.n	8004cbe <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	73fb      	strb	r3, [r7, #15]
        break;
 8004cbc:	e005      	b.n	8004cca <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ef      	bne.n	8004caa <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 809c 	bne.w	8004e0a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11d      	bne.n	8004d14 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d903      	bls.n	8004ce8 <RCCEx_PLLSAI1_Config+0x1cc>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2b1f      	cmp	r3, #31
 8004ce6:	d904      	bls.n	8004cf2 <RCCEx_PLLSAI1_Config+0x1d6>
 8004ce8:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8004cec:	481f      	ldr	r0, [pc, #124]	; (8004d6c <RCCEx_PLLSAI1_Config+0x250>)
 8004cee:	f7fb fef2 	bl	8000ad6 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf2:	4b1f      	ldr	r3, [pc, #124]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004cfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6892      	ldr	r2, [r2, #8]
 8004d02:	0211      	lsls	r1, r2, #8
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68d2      	ldr	r2, [r2, #12]
 8004d08:	06d2      	lsls	r2, r2, #27
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	4918      	ldr	r1, [pc, #96]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	610b      	str	r3, [r1, #16]
 8004d12:	e056      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d12c      	bne.n	8004d74 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d010      	beq.n	8004d44 <RCCEx_PLLSAI1_Config+0x228>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d00c      	beq.n	8004d44 <RCCEx_PLLSAI1_Config+0x228>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b06      	cmp	r3, #6
 8004d30:	d008      	beq.n	8004d44 <RCCEx_PLLSAI1_Config+0x228>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d004      	beq.n	8004d44 <RCCEx_PLLSAI1_Config+0x228>
 8004d3a:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8004d3e:	480b      	ldr	r0, [pc, #44]	; (8004d6c <RCCEx_PLLSAI1_Config+0x250>)
 8004d40:	f7fb fec9 	bl	8000ad6 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6892      	ldr	r2, [r2, #8]
 8004d54:	0211      	lsls	r1, r2, #8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6912      	ldr	r2, [r2, #16]
 8004d5a:	0852      	lsrs	r2, r2, #1
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	0552      	lsls	r2, r2, #21
 8004d60:	430a      	orrs	r2, r1
 8004d62:	4903      	ldr	r1, [pc, #12]	; (8004d70 <RCCEx_PLLSAI1_Config+0x254>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	610b      	str	r3, [r1, #16]
 8004d68:	e02b      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0x2a6>
 8004d6a:	bf00      	nop
 8004d6c:	08011084 	.word	0x08011084
 8004d70:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d010      	beq.n	8004d9e <RCCEx_PLLSAI1_Config+0x282>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d00c      	beq.n	8004d9e <RCCEx_PLLSAI1_Config+0x282>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b06      	cmp	r3, #6
 8004d8a:	d008      	beq.n	8004d9e <RCCEx_PLLSAI1_Config+0x282>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d004      	beq.n	8004d9e <RCCEx_PLLSAI1_Config+0x282>
 8004d94:	f640 31ea 	movw	r1, #3050	; 0xbea
 8004d98:	481e      	ldr	r0, [pc, #120]	; (8004e14 <RCCEx_PLLSAI1_Config+0x2f8>)
 8004d9a:	f7fb fe9c 	bl	8000ad6 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d9e:	4b1e      	ldr	r3, [pc, #120]	; (8004e18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004da6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6892      	ldr	r2, [r2, #8]
 8004dae:	0211      	lsls	r1, r2, #8
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6952      	ldr	r2, [r2, #20]
 8004db4:	0852      	lsrs	r2, r2, #1
 8004db6:	3a01      	subs	r2, #1
 8004db8:	0652      	lsls	r2, r2, #25
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	4916      	ldr	r1, [pc, #88]	; (8004e18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004dc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dce:	f7fc fa71 	bl	80012b4 <HAL_GetTick>
 8004dd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dd4:	e009      	b.n	8004dea <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd6:	f7fc fa6d 	bl	80012b4 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d902      	bls.n	8004dea <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	73fb      	strb	r3, [r7, #15]
          break;
 8004de8:	e005      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0ef      	beq.n	8004dd6 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4904      	ldr	r1, [pc, #16]	; (8004e18 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	08011084 	.word	0x08011084
 8004e18:	40021000 	.word	0x40021000

08004e1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d010      	beq.n	8004e54 <RCCEx_PLLSAI2_Config+0x38>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d00c      	beq.n	8004e54 <RCCEx_PLLSAI2_Config+0x38>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d008      	beq.n	8004e54 <RCCEx_PLLSAI2_Config+0x38>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d004      	beq.n	8004e54 <RCCEx_PLLSAI2_Config+0x38>
 8004e4a:	f640 412b 	movw	r1, #3115	; 0xc2b
 8004e4e:	4896      	ldr	r0, [pc, #600]	; (80050a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004e50:	f7fb fe41 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <RCCEx_PLLSAI2_Config+0x48>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d904      	bls.n	8004e6e <RCCEx_PLLSAI2_Config+0x52>
 8004e64:	f640 412c 	movw	r1, #3116	; 0xc2c
 8004e68:	488f      	ldr	r0, [pc, #572]	; (80050a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004e6a:	f7fb fe34 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b07      	cmp	r3, #7
 8004e74:	d903      	bls.n	8004e7e <RCCEx_PLLSAI2_Config+0x62>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b56      	cmp	r3, #86	; 0x56
 8004e7c:	d904      	bls.n	8004e88 <RCCEx_PLLSAI2_Config+0x6c>
 8004e7e:	f640 412d 	movw	r1, #3117	; 0xc2d
 8004e82:	4889      	ldr	r0, [pc, #548]	; (80050a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004e84:	f7fb fe27 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <RCCEx_PLLSAI2_Config+0x84>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <RCCEx_PLLSAI2_Config+0x94>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d004      	beq.n	8004eba <RCCEx_PLLSAI2_Config+0x9e>
 8004eb0:	f640 412e 	movw	r1, #3118	; 0xc2e
 8004eb4:	487c      	ldr	r0, [pc, #496]	; (80050a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004eb6:	f7fb fe0e 	bl	8000ad6 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eba:	4b7c      	ldr	r3, [pc, #496]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ec6:	4b79      	ldr	r3, [pc, #484]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0203 	and.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d10d      	bne.n	8004ef2 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ede:	4b73      	ldr	r3, [pc, #460]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
       ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d047      	beq.n	8004f82 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
 8004ef6:	e044      	b.n	8004f82 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d018      	beq.n	8004f32 <RCCEx_PLLSAI2_Config+0x116>
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d825      	bhi.n	8004f50 <RCCEx_PLLSAI2_Config+0x134>
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d002      	beq.n	8004f0e <RCCEx_PLLSAI2_Config+0xf2>
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d009      	beq.n	8004f20 <RCCEx_PLLSAI2_Config+0x104>
 8004f0c:	e020      	b.n	8004f50 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f0e:	4b67      	ldr	r3, [pc, #412]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11d      	bne.n	8004f56 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1e:	e01a      	b.n	8004f56 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f20:	4b62      	ldr	r3, [pc, #392]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d116      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f30:	e013      	b.n	8004f5a <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f32:	4b5e      	ldr	r3, [pc, #376]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f3e:	4b5b      	ldr	r3, [pc, #364]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f4e:	e006      	b.n	8004f5e <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      break;
 8004f54:	e004      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004f56:	bf00      	nop
 8004f58:	e002      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e000      	b.n	8004f60 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8004f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10d      	bne.n	8004f82 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f66:	4b51      	ldr	r3, [pc, #324]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	494b      	ldr	r1, [pc, #300]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f040 8089 	bne.w	800509c <RCCEx_PLLSAI2_Config+0x280>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f8a:	4b48      	ldr	r3, [pc, #288]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a47      	ldr	r2, [pc, #284]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f96:	f7fc f98d 	bl	80012b4 <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f9c:	e009      	b.n	8004fb2 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f9e:	f7fc f989 	bl	80012b4 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d902      	bls.n	8004fb2 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	73fb      	strb	r3, [r7, #15]
        break;
 8004fb0:	e005      	b.n	8004fbe <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ef      	bne.n	8004f9e <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d16b      	bne.n	800509c <RCCEx_PLLSAI2_Config+0x280>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d11d      	bne.n	8005006 <RCCEx_PLLSAI2_Config+0x1ea>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d903      	bls.n	8004fda <RCCEx_PLLSAI2_Config+0x1be>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b1f      	cmp	r3, #31
 8004fd8:	d904      	bls.n	8004fe4 <RCCEx_PLLSAI2_Config+0x1c8>
 8004fda:	f640 4181 	movw	r1, #3201	; 0xc81
 8004fde:	4832      	ldr	r0, [pc, #200]	; (80050a8 <RCCEx_PLLSAI2_Config+0x28c>)
 8004fe0:	f7fb fd79 	bl	8000ad6 <assert_failed>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6892      	ldr	r2, [r2, #8]
 8004ff4:	0211      	lsls	r1, r2, #8
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68d2      	ldr	r2, [r2, #12]
 8004ffa:	06d2      	lsls	r2, r2, #27
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	492b      	ldr	r1, [pc, #172]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8005000:	4313      	orrs	r3, r2
 8005002:	614b      	str	r3, [r1, #20]
 8005004:	e026      	b.n	8005054 <RCCEx_PLLSAI2_Config+0x238>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d010      	beq.n	8005030 <RCCEx_PLLSAI2_Config+0x214>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b04      	cmp	r3, #4
 8005014:	d00c      	beq.n	8005030 <RCCEx_PLLSAI2_Config+0x214>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b06      	cmp	r3, #6
 800501c:	d008      	beq.n	8005030 <RCCEx_PLLSAI2_Config+0x214>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b08      	cmp	r3, #8
 8005024:	d004      	beq.n	8005030 <RCCEx_PLLSAI2_Config+0x214>
 8005026:	f640 41b9 	movw	r1, #3257	; 0xcb9
 800502a:	481f      	ldr	r0, [pc, #124]	; (80050a8 <RCCEx_PLLSAI2_Config+0x28c>)
 800502c:	f7fb fd53 	bl	8000ad6 <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005030:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005038:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6892      	ldr	r2, [r2, #8]
 8005040:	0211      	lsls	r1, r2, #8
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6912      	ldr	r2, [r2, #16]
 8005046:	0852      	lsrs	r2, r2, #1
 8005048:	3a01      	subs	r2, #1
 800504a:	0652      	lsls	r2, r2, #25
 800504c:	430a      	orrs	r2, r1
 800504e:	4917      	ldr	r1, [pc, #92]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8005050:	4313      	orrs	r3, r2
 8005052:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005054:	4b15      	ldr	r3, [pc, #84]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a14      	ldr	r2, [pc, #80]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 800505a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fc f928 	bl	80012b4 <HAL_GetTick>
 8005064:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005066:	e009      	b.n	800507c <RCCEx_PLLSAI2_Config+0x260>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005068:	f7fc f924 	bl	80012b4 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d902      	bls.n	800507c <RCCEx_PLLSAI2_Config+0x260>
        {
          status = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	73fb      	strb	r3, [r7, #15]
          break;
 800507a:	e005      	b.n	8005088 <RCCEx_PLLSAI2_Config+0x26c>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800507c:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ef      	beq.n	8005068 <RCCEx_PLLSAI2_Config+0x24c>
        }
      }

      if(status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <RCCEx_PLLSAI2_Config+0x280>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	4905      	ldr	r1, [pc, #20]	; (80050ac <RCCEx_PLLSAI2_Config+0x290>)
 8005098:	4313      	orrs	r3, r2
 800509a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	08011084 	.word	0x08011084
 80050ac:	40021000 	.word	0x40021000

080050b0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050cc:	d10c      	bne.n	80050e8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80050ce:	4b77      	ldr	r3, [pc, #476]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80050d8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e0:	d112      	bne.n	8005108 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80050e2:	4b73      	ldr	r3, [pc, #460]	; (80052b0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e00f      	b.n	8005108 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d10b      	bne.n	8005108 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80050f0:	4b6e      	ldr	r3, [pc, #440]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80050fa:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005102:	d101      	bne.n	8005108 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005104:	4b6a      	ldr	r3, [pc, #424]	; (80052b0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8005106:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 80c6 	bne.w	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800511a:	d003      	beq.n	8005124 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005122:	d13b      	bne.n	800519c <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005124:	4b61      	ldr	r3, [pc, #388]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005130:	f040 80b3 	bne.w	800529a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8005134:	4b5d      	ldr	r3, [pc, #372]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80ac 	beq.w	800529a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005142:	4b5a      	ldr	r3, [pc, #360]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	3301      	adds	r3, #1
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005156:	4b55      	ldr	r3, [pc, #340]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005160:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005162:	4b52      	ldr	r3, [pc, #328]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	0edb      	lsrs	r3, r3, #27
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005174:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8005180:	2311      	movs	r3, #17
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	e001      	b.n	800518a <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8005186:	2307      	movs	r3, #7
 8005188:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	fb03 f202 	mul.w	r2, r3, r2
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800519a:	e07e      	b.n	800529a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d139      	bne.n	8005216 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80051a2:	4b42      	ldr	r3, [pc, #264]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ae:	d175      	bne.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80051b0:	4b3e      	ldr	r3, [pc, #248]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d06f      	beq.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	3301      	adds	r3, #1
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	0a1b      	lsrs	r3, r3, #8
 80051d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051da:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80051dc:	4b33      	ldr	r3, [pc, #204]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	0edb      	lsrs	r3, r3, #27
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80051ee:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80051fa:	2311      	movs	r3, #17
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e001      	b.n	8005204 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8005200:	2307      	movs	r3, #7
 8005202:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	fb03 f202 	mul.w	r2, r3, r2
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e042      	b.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521c:	d003      	beq.n	8005226 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005224:	d13a      	bne.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005226:	4b21      	ldr	r3, [pc, #132]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005232:	d133      	bne.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d02d      	beq.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	3301      	adds	r3, #1
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005254:	4b15      	ldr	r3, [pc, #84]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005260:	4b12      	ldr	r3, [pc, #72]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	0edb      	lsrs	r3, r3, #27
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800527e:	2311      	movs	r3, #17
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e001      	b.n	8005288 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8005284:	2307      	movs	r3, #7
 8005286:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	fb03 f202 	mul.w	r2, r3, r2
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	fbb2 f3f3 	udiv	r3, r2, r3
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	e000      	b.n	800529c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800529a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800529c:	69fb      	ldr	r3, [r7, #28]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3724      	adds	r7, #36	; 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	001fff68 	.word	0x001fff68

080052b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e080      	b.n	80053c8 <HAL_SD_Init+0x114>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a41      	ldr	r2, [pc, #260]	; (80053d0 <HAL_SD_Init+0x11c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d004      	beq.n	80052da <HAL_SD_Init+0x26>
 80052d0:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80052d4:	483f      	ldr	r0, [pc, #252]	; (80053d4 <HAL_SD_Init+0x120>)
 80052d6:	f7fb fbfe 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_SD_Init+0x42>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ea:	d004      	beq.n	80052f6 <HAL_SD_Init+0x42>
 80052ec:	f240 1175 	movw	r1, #373	; 0x175
 80052f0:	4838      	ldr	r0, [pc, #224]	; (80053d4 <HAL_SD_Init+0x120>)
 80052f2:	f7fb fbf0 	bl	8000ad6 <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_SD_Init+0x5e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005306:	d004      	beq.n	8005312 <HAL_SD_Init+0x5e>
 8005308:	f240 1177 	movw	r1, #375	; 0x177
 800530c:	4831      	ldr	r0, [pc, #196]	; (80053d4 <HAL_SD_Init+0x120>)
 800530e:	f7fb fbe2 	bl	8000ad6 <assert_failed>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <HAL_SD_Init+0x7a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005322:	d004      	beq.n	800532e <HAL_SD_Init+0x7a>
 8005324:	f240 1179 	movw	r1, #377	; 0x179
 8005328:	482a      	ldr	r0, [pc, #168]	; (80053d4 <HAL_SD_Init+0x120>)
 800532a:	f7fb fbd4 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00e      	beq.n	8005354 <HAL_SD_Init+0xa0>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533e:	d009      	beq.n	8005354 <HAL_SD_Init+0xa0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005348:	d004      	beq.n	8005354 <HAL_SD_Init+0xa0>
 800534a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800534e:	4821      	ldr	r0, [pc, #132]	; (80053d4 <HAL_SD_Init+0x120>)
 8005350:	f7fb fbc1 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <HAL_SD_Init+0xbc>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005364:	d004      	beq.n	8005370 <HAL_SD_Init+0xbc>
 8005366:	f240 117b 	movw	r1, #379	; 0x17b
 800536a:	481a      	ldr	r0, [pc, #104]	; (80053d4 <HAL_SD_Init+0x120>)
 800536c:	f7fb fbb3 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2bff      	cmp	r3, #255	; 0xff
 8005376:	d904      	bls.n	8005382 <HAL_SD_Init+0xce>
 8005378:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800537c:	4815      	ldr	r0, [pc, #84]	; (80053d4 <HAL_SD_Init+0x120>)
 800537e:	f7fb fbaa 	bl	8000ad6 <assert_failed>

  if(hsd->State == HAL_SD_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <HAL_SD_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fb fbc9 	bl	8000b2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2203      	movs	r2, #3
 800539e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f818 	bl	80053d8 <HAL_SD_InitCard>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_SD_Init+0xfe>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e00a      	b.n	80053c8 <HAL_SD_Init+0x114>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40012800 	.word	0x40012800
 80053d4:	080110c0 	.word	0x080110c0

080053d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053d8:	b5b0      	push	{r4, r5, r7, lr}
 80053da:	b08e      	sub	sp, #56	; 0x38
 80053dc:	af04      	add	r7, sp, #16
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80053f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80053f8:	f7fe fdc6 	bl	8003f88 <HAL_RCCEx_GetPeriphCLKFreq>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e07b      	b.n	8005510 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	09db      	lsrs	r3, r3, #7
 800541c:	4a3e      	ldr	r2, [pc, #248]	; (8005518 <HAL_SD_InitCard+0x140>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	3b02      	subs	r3, #2
 8005426:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681d      	ldr	r5, [r3, #0]
 800542c:	466c      	mov	r4, sp
 800542e:	f107 0314 	add.w	r3, r7, #20
 8005432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800543a:	f107 0308 	add.w	r3, r7, #8
 800543e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005440:	4628      	mov	r0, r5
 8005442:	f003 f8bd 	bl	80085c0 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005454:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f003 f94a 	bl	80086f4 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3302      	adds	r3, #2
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <HAL_SD_InitCard+0x144>)
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	3301      	adds	r3, #1
 8005486:	4618      	mov	r0, r3
 8005488:	f7fb ff20 	bl	80012cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fff1 	bl	8006474 <SD_PowerON>
 8005492:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e02e      	b.n	8005510 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 ff10 	bl	80062d8 <SD_InitCard>
 80054b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e01b      	b.n	8005510 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054e0:	4618      	mov	r0, r3
 80054e2:	f003 fa5b 	bl	800899c <SDMMC_CmdBlockLength>
 80054e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00f      	beq.n	800550e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a0b      	ldr	r2, [pc, #44]	; (8005520 <HAL_SD_InitCard+0x148>)
 80054f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3728      	adds	r7, #40	; 0x28
 8005514:	46bd      	mov	sp, r7
 8005516:	bdb0      	pop	{r4, r5, r7, pc}
 8005518:	014f8b59 	.word	0x014f8b59
 800551c:	00012110 	.word	0x00012110
 8005520:	004005ff 	.word	0x004005ff

08005524 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08c      	sub	sp, #48	; 0x30
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0a9      	b.n	80056a0 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	f040 80a2 	bne.w	800569e <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	441a      	add	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556a:	429a      	cmp	r2, r3
 800556c:	d907      	bls.n	800557e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e090      	b.n	80056a0 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2203      	movs	r2, #3
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2200      	movs	r2, #0
 800558c:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a45      	ldr	r2, [pc, #276]	; (80056a8 <HAL_SD_ReadBlocks_DMA+0x184>)
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	4a44      	ldr	r2, [pc, #272]	; (80056ac <HAL_SD_ReadBlocks_DMA+0x188>)
 800559c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2200      	movs	r2, #0
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3380      	adds	r3, #128	; 0x80
 80055b0:	4619      	mov	r1, r3
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	025b      	lsls	r3, r3, #9
 80055b8:	089b      	lsrs	r3, r3, #2
 80055ba:	f7fc fa6f 	bl	8001a9c <HAL_DMA_Start_IT>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00f      	beq.n	80055e4 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a39      	ldr	r2, [pc, #228]	; (80056b0 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e05d      	b.n	80056a0 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0208 	orr.w	r2, r2, #8
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d002      	beq.n	8005602 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	025b      	lsls	r3, r3, #9
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
 8005606:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	025b      	lsls	r3, r3, #9
 800560c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800560e:	2390      	movs	r3, #144	; 0x90
 8005610:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005612:	2302      	movs	r3, #2
 8005614:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005616:	2300      	movs	r3, #0
 8005618:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800561a:	2301      	movs	r3, #1
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f107 0210 	add.w	r2, r7, #16
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f003 f919 	bl	8008860 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d90a      	bls.n	800564a <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2282      	movs	r2, #130	; 0x82
 8005638:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005640:	4618      	mov	r0, r3
 8005642:	f003 f9ef 	bl	8008a24 <SDMMC_CmdReadMultiBlock>
 8005646:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005648:	e009      	b.n	800565e <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2281      	movs	r2, #129	; 0x81
 800564e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005656:	4618      	mov	r0, r3
 8005658:	f003 f9c2 	bl	80089e0 <SDMMC_CmdReadSingleBlock>
 800565c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d012      	beq.n	800568a <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a11      	ldr	r2, [pc, #68]	; (80056b0 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800566a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	431a      	orrs	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e00a      	b.n	80056a0 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005698:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3730      	adds	r7, #48	; 0x30
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	080060f3 	.word	0x080060f3
 80056ac:	08006165 	.word	0x08006165
 80056b0:	004005ff 	.word	0x004005ff

080056b4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	; 0x30
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d107      	bne.n	80056dc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0ac      	b.n	8005836 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	f040 80a5 	bne.w	8005834 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80056f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d907      	bls.n	800570e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e093      	b.n	8005836 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005722:	4a47      	ldr	r2, [pc, #284]	; (8005840 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8005724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <HAL_SD_WriteBlocks_DMA+0x190>)
 800572c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	2200      	movs	r2, #0
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	2b01      	cmp	r3, #1
 800573c:	d002      	beq.n	8005744 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	025b      	lsls	r3, r3, #9
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d90a      	bls.n	8005760 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	22a0      	movs	r2, #160	; 0xa0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005756:	4618      	mov	r0, r3
 8005758:	f003 f9a8 	bl	8008aac <SDMMC_CmdWriteMultiBlock>
 800575c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800575e:	e009      	b.n	8005774 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2290      	movs	r2, #144	; 0x90
 8005764:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800576c:	4618      	mov	r0, r3
 800576e:	f003 f97b 	bl	8008a68 <SDMMC_CmdWriteSingleBlock>
 8005772:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d012      	beq.n	80057a0 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a32      	ldr	r2, [pc, #200]	; (8005848 <HAL_SD_WriteBlocks_DMA+0x194>)
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e04a      	b.n	8005836 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0208 	orr.w	r2, r2, #8
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3380      	adds	r3, #128	; 0x80
 80057bc:	461a      	mov	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	025b      	lsls	r3, r3, #9
 80057c2:	089b      	lsrs	r3, r3, #2
 80057c4:	f7fc f96a 	bl	8001a9c <HAL_DMA_Start_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d012      	beq.n	80057f4 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_SD_WriteBlocks_DMA+0x194>)
 80057d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e020      	b.n	8005836 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295
 80057f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	025b      	lsls	r3, r3, #9
 80057fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005800:	2390      	movs	r3, #144	; 0x90
 8005802:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005804:	2300      	movs	r3, #0
 8005806:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005808:	2300      	movs	r3, #0
 800580a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800580c:	2301      	movs	r3, #1
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f107 0210 	add.w	r2, r7, #16
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f003 f820 	bl	8008860 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 021a 	orr.w	r2, r2, #26
 800582e:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e000      	b.n	8005836 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005834:	2302      	movs	r3, #2
  }
}
 8005836:	4618      	mov	r0, r3
 8005838:	3730      	adds	r7, #48	; 0x30
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	080060c9 	.word	0x080060c9
 8005844:	08006165 	.word	0x08006165
 8005848:	004005ff 	.word	0x004005ff

0800584c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d008      	beq.n	800587a <HAL_SD_IRQHandler+0x2e>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 f814 	bl	80068a0 <SD_Read_IT>
 8005878:	e155      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 808f 	beq.w	80059a8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005892:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6812      	ldr	r2, [r2, #0]
 800589e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80058a2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80058a6:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d039      	beq.n	8005936 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <HAL_SD_IRQHandler+0x8a>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d011      	beq.n	80058fa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f003 f908 	bl	8008af0 <SDMMC_CmdStopTransfer>
 80058e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f91f 	bl	8005b38 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8005902:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_SD_IRQHandler+0xda>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f003 fdae 	bl	8009488 <HAL_SD_RxCpltCallback>
 800592c:	e0fb      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f003 fda0 	bl	8009474 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8005934:	e0f7      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80f2 	beq.w	8005b26 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f003 f8cd 	bl	8008af0 <SDMMC_CmdStopTransfer>
 8005956:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f8e4 	bl	8005b38 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 80d5 	bne.w	8005b26 <HAL_SD_IRQHandler+0x2da>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 80cf 	bne.w	8005b26 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0208 	bic.w	r2, r2, #8
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f003 fd67 	bl	8009474 <HAL_SD_TxCpltCallback>
}
 80059a6:	e0be      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_SD_IRQHandler+0x17c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 ffbe 	bl	8006942 <SD_Write_IT>
 80059c6:	e0ae      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80a7 	beq.w	8005b26 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	f043 0202 	orr.w	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f043 0208 	orr.w	r2, r3, #8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	f043 0210 	orr.w	r2, r3, #16
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005a58:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f003 f846 	bl	8008af0 <SDMMC_CmdStopTransfer>
 8005a64:	4602      	mov	r2, r0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f855 	bl	8005b38 <HAL_SD_ErrorCallback>
}
 8005a8e:	e04a      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d045      	beq.n	8005b26 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_SD_IRQHandler+0x262>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d011      	beq.n	8005ad2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <HAL_SD_IRQHandler+0x2e4>)
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fc f89a 	bl	8001bf4 <HAL_DMA_Abort_IT>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d02f      	beq.n	8005b26 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fb96 	bl	80061fc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005ad0:	e029      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_SD_IRQHandler+0x29a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d011      	beq.n	8005b0a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <HAL_SD_IRQHandler+0x2e8>)
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fc f87e 	bl	8001bf4 <HAL_DMA_Abort_IT>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fbb1 	bl	800626a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b08:	e00d      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f003 fc9e 	bl	8009460 <HAL_SD_AbortCallback>
}
 8005b24:	e7ff      	b.n	8005b26 <HAL_SD_IRQHandler+0x2da>
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	080061fd 	.word	0x080061fd
 8005b34:	0800626b 	.word	0x0800626b

08005b38 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5a:	0f9b      	lsrs	r3, r3, #30
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b66:	0e9b      	lsrs	r3, r3, #26
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bac:	0d1b      	lsrs	r3, r3, #20
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bb8:	0c1b      	lsrs	r3, r3, #16
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bca:	0bdb      	lsrs	r3, r3, #15
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bdc:	0b9b      	lsrs	r3, r3, #14
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bee:	0b5b      	lsrs	r3, r3, #13
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c00:	0b1b      	lsrs	r3, r3, #12
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2200      	movs	r2, #0
 8005c12:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d163      	bne.n	8005ce4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c20:	009a      	lsls	r2, r3, #2
 8005c22:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c26:	4013      	ands	r3, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005c2c:	0f92      	lsrs	r2, r2, #30
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c38:	0edb      	lsrs	r3, r3, #27
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4a:	0e1b      	lsrs	r3, r3, #24
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5c:	0d5b      	lsrs	r3, r3, #21
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	0c9b      	lsrs	r3, r3, #18
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c80:	0bdb      	lsrs	r3, r3, #15
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	7e1b      	ldrb	r3, [r3, #24]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005cae:	fb03 f202 	mul.w	r2, r3, r2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	7a1b      	ldrb	r3, [r3, #8]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005cd0:	0a52      	lsrs	r2, r2, #9
 8005cd2:	fb03 f202 	mul.w	r2, r3, r2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ce0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ce2:	e031      	b.n	8005d48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d11d      	bne.n	8005d28 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfa:	0c1b      	lsrs	r3, r3, #16
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	3301      	adds	r3, #1
 8005d08:	029a      	lsls	r2, r3, #10
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	661a      	str	r2, [r3, #96]	; 0x60
 8005d26:	e00f      	b.n	8005d48 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a58      	ldr	r2, [pc, #352]	; (8005e90 <HAL_SD_GetCardCSD+0x344>)
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e09d      	b.n	8005e84 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4c:	0b9b      	lsrs	r3, r3, #14
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5e:	09db      	lsrs	r3, r3, #7
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	0fdb      	lsrs	r3, r3, #31
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8c:	0f5b      	lsrs	r3, r3, #29
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	0e9b      	lsrs	r3, r3, #26
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	0d9b      	lsrs	r3, r3, #22
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	0d5b      	lsrs	r3, r3, #21
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	0c1b      	lsrs	r3, r3, #16
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	0bdb      	lsrs	r3, r3, #15
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	0b9b      	lsrs	r3, r3, #14
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	0b5b      	lsrs	r3, r3, #13
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	0b1b      	lsrs	r3, r3, #12
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	0a9b      	lsrs	r3, r3, #10
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	004005ff 	.word	0x004005ff

08005e94 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005eec:	b5b0      	push	{r4, r5, r7, lr}
 8005eee:	b090      	sub	sp, #64	; 0x40
 8005ef0:	af04      	add	r7, sp, #16
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <HAL_SD_ConfigWideBusOperation+0x30>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f08:	d008      	beq.n	8005f1c <HAL_SD_ConfigWideBusOperation+0x30>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f10:	d004      	beq.n	8005f1c <HAL_SD_ConfigWideBusOperation+0x30>
 8005f12:	f640 2146 	movw	r1, #2630	; 0xa46
 8005f16:	4858      	ldr	r0, [pc, #352]	; (8006078 <HAL_SD_ConfigWideBusOperation+0x18c>)
 8005f18:	f7fa fddd 	bl	8000ad6 <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d02e      	beq.n	8005f8a <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	d106      	bne.n	8005f42 <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8005f40:	e029      	b.n	8005f96 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f48:	d10a      	bne.n	8005f60 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fb48 	bl	80065e0 <SD_WideBus_Enable>
 8005f50:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f5e:	e01a      	b.n	8005f96 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fb85 	bl	8006676 <SD_WideBus_Disable>
 8005f6c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	639a      	str	r2, [r3, #56]	; 0x38
 8005f7a:	e00c      	b.n	8005f96 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
 8005f88:	e005      	b.n	8005f96 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_SD_ConfigWideBusOperation+0xc2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a36      	ldr	r2, [pc, #216]	; (800607c <HAL_SD_ConfigWideBusOperation+0x190>)
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005fac:	e042      	b.n	8006034 <HAL_SD_ConfigWideBusOperation+0x148>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005fae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005fb2:	f7fd ffe9 	bl	8003f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fb6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d031      	beq.n	8006022 <HAL_SD_ConfigWideBusOperation+0x136>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	3302      	adds	r3, #2
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	4a26      	ldr	r2, [pc, #152]	; (8006080 <HAL_SD_ConfigWideBusOperation+0x194>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d907      	bls.n	8005ffc <HAL_SD_ConfigWideBusOperation+0x110>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	4a25      	ldr	r2, [pc, #148]	; (8006084 <HAL_SD_ConfigWideBusOperation+0x198>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	0ddb      	lsrs	r3, r3, #23
 8005ff6:	3b02      	subs	r3, #2
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	e002      	b.n	8006002 <HAL_SD_ConfigWideBusOperation+0x116>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681d      	ldr	r5, [r3, #0]
 8006006:	466c      	mov	r4, sp
 8006008:	f107 0318 	add.w	r3, r7, #24
 800600c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006014:	f107 030c 	add.w	r3, r7, #12
 8006018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800601a:	4628      	mov	r0, r5
 800601c:	f002 fad0 	bl	80085c0 <SDMMC_Init>
 8006020:	e008      	b.n	8006034 <HAL_SD_ConfigWideBusOperation+0x148>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800603c:	4618      	mov	r0, r3
 800603e:	f002 fcad 	bl	800899c <SDMMC_CmdBlockLength>
 8006042:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00c      	beq.n	8006064 <HAL_SD_ConfigWideBusOperation+0x178>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a0b      	ldr	r2, [pc, #44]	; (800607c <HAL_SD_ConfigWideBusOperation+0x190>)
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800606c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006070:	4618      	mov	r0, r3
 8006072:	3730      	adds	r7, #48	; 0x30
 8006074:	46bd      	mov	sp, r7
 8006076:	bdb0      	pop	{r4, r5, r7, pc}
 8006078:	080110c0 	.word	0x080110c0
 800607c:	004005ff 	.word	0x004005ff
 8006080:	017d7840 	.word	0x017d7840
 8006084:	55e63b89 	.word	0x55e63b89

08006088 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006094:	f107 030c 	add.w	r3, r7, #12
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa78 	bl	8006590 <SD_SendStatus>
 80060a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d005      	beq.n	80060b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	0a5b      	lsrs	r3, r3, #9
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80060be:	693b      	ldr	r3, [r7, #16]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	2b82      	cmp	r3, #130	; 0x82
 8006106:	d111      	bne.n	800612c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f002 fcef 	bl	8008af0 <SDMMC_CmdStopTransfer>
 8006112:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d008      	beq.n	800612c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fd06 	bl	8005b38 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0208 	bic.w	r2, r2, #8
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f240 523a 	movw	r2, #1338	; 0x53a
 8006144:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f003 f997 	bl	8009488 <HAL_SD_RxCpltCallback>
#endif
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006180:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d002      	beq.n	800618e <SD_DMAError+0x2a>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d12d      	bne.n	80061ea <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a19      	ldr	r2, [pc, #100]	; (80061f8 <SD_DMAError+0x94>)
 8006194:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80061a4:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80061b2:	6978      	ldr	r0, [r7, #20]
 80061b4:	f7ff ff68 	bl	8006088 <HAL_SD_GetCardState>
 80061b8:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b06      	cmp	r3, #6
 80061be:	d002      	beq.n	80061c6 <SD_DMAError+0x62>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d10a      	bne.n	80061dc <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f002 fc90 	bl	8008af0 <SDMMC_CmdStopTransfer>
 80061d0:	4602      	mov	r2, r0
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	431a      	orrs	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2200      	movs	r2, #0
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80061ea:	6978      	ldr	r0, [r7, #20]
 80061ec:	f7ff fca4 	bl	8005b38 <HAL_SD_ErrorCallback>
#endif
}
 80061f0:	bf00      	nop
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	004005ff 	.word	0x004005ff

080061fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006212:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7ff ff37 	bl	8006088 <HAL_SD_GetCardState>
 800621a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b06      	cmp	r3, #6
 800622e:	d002      	beq.n	8006236 <SD_DMATxAbort+0x3a>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b05      	cmp	r3, #5
 8006234:	d10a      	bne.n	800624c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f002 fc58 	bl	8008af0 <SDMMC_CmdStopTransfer>
 8006240:	4602      	mov	r2, r0
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	431a      	orrs	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f003 f903 	bl	8009460 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800625a:	e002      	b.n	8006262 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f7ff fc6b 	bl	8005b38 <HAL_SD_ErrorCallback>
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006280:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7ff ff00 	bl	8006088 <HAL_SD_GetCardState>
 8006288:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b06      	cmp	r3, #6
 800629c:	d002      	beq.n	80062a4 <SD_DMARxAbort+0x3a>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	d10a      	bne.n	80062ba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f002 fc21 	bl	8008af0 <SDMMC_CmdStopTransfer>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	431a      	orrs	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f003 f8cc 	bl	8009460 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80062c8:	e002      	b.n	80062d0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fc34 	bl	8005b38 <HAL_SD_ErrorCallback>
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062d8:	b5b0      	push	{r4, r5, r7, lr}
 80062da:	b094      	sub	sp, #80	; 0x50
 80062dc:	af04      	add	r7, sp, #16
 80062de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80062e0:	2301      	movs	r3, #1
 80062e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f002 fa12 	bl	8008712 <SDMMC_GetPowerState>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062f8:	e0b8      	b.n	800646c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d02f      	beq.n	8006362 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f002 fcfc 	bl	8008d04 <SDMMC_CmdSendCID>
 800630c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <SD_InitCard+0x40>
    {
      return errorstate;
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	e0a9      	b.n	800646c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2100      	movs	r1, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f002 fa7a 	bl	8008818 <SDMMC_GetResponse>
 8006324:	4602      	mov	r2, r0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2104      	movs	r1, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f002 fa71 	bl	8008818 <SDMMC_GetResponse>
 8006336:	4602      	mov	r2, r0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2108      	movs	r1, #8
 8006342:	4618      	mov	r0, r3
 8006344:	f002 fa68 	bl	8008818 <SDMMC_GetResponse>
 8006348:	4602      	mov	r2, r0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	210c      	movs	r1, #12
 8006354:	4618      	mov	r0, r3
 8006356:	f002 fa5f 	bl	8008818 <SDMMC_GetResponse>
 800635a:	4602      	mov	r2, r0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	2b03      	cmp	r3, #3
 8006368:	d00d      	beq.n	8006386 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f107 020e 	add.w	r2, r7, #14
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f002 fd02 	bl	8008d7e <SDMMC_CmdSetRelAdd>
 800637a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <SD_InitCard+0xae>
    {
      return errorstate;
 8006382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006384:	e072      	b.n	800646c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	2b03      	cmp	r3, #3
 800638c:	d036      	beq.n	80063fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800638e:	89fb      	ldrh	r3, [r7, #14]
 8006390:	461a      	mov	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f002 fccc 	bl	8008d40 <SDMMC_CmdSendCSD>
 80063a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80063b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b2:	e05b      	b.n	800646c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f002 fa2c 	bl	8008818 <SDMMC_GetResponse>
 80063c0:	4602      	mov	r2, r0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2104      	movs	r1, #4
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 fa23 	bl	8008818 <SDMMC_GetResponse>
 80063d2:	4602      	mov	r2, r0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2108      	movs	r1, #8
 80063de:	4618      	mov	r0, r3
 80063e0:	f002 fa1a 	bl	8008818 <SDMMC_GetResponse>
 80063e4:	4602      	mov	r2, r0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	210c      	movs	r1, #12
 80063f0:	4618      	mov	r0, r3
 80063f2:	f002 fa11 	bl	8008818 <SDMMC_GetResponse>
 80063f6:	4602      	mov	r2, r0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2104      	movs	r1, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f002 fa08 	bl	8008818 <SDMMC_GetResponse>
 8006408:	4603      	mov	r3, r0
 800640a:	0d1a      	lsrs	r2, r3, #20
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fb98 	bl	8005b4c <HAL_SD_GetCardCSD>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006422:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006426:	e021      	b.n	800646c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	2200      	movs	r2, #0
 8006434:	461c      	mov	r4, r3
 8006436:	4615      	mov	r5, r2
 8006438:	4622      	mov	r2, r4
 800643a:	462b      	mov	r3, r5
 800643c:	4608      	mov	r0, r1
 800643e:	f002 fb79 	bl	8008b34 <SDMMC_CmdSelDesel>
 8006442:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <SD_InitCard+0x176>
  {
    return errorstate;
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	e00e      	b.n	800646c <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681d      	ldr	r5, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	466c      	mov	r4, sp
 8006456:	f103 0210 	add.w	r2, r3, #16
 800645a:	ca07      	ldmia	r2, {r0, r1, r2}
 800645c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006460:	3304      	adds	r3, #4
 8006462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006464:	4628      	mov	r0, r5
 8006466:	f002 f8ab 	bl	80085c0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3740      	adds	r7, #64	; 0x40
 8006470:	46bd      	mov	sp, r7
 8006472:	bdb0      	pop	{r4, r5, r7, pc}

08006474 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4618      	mov	r0, r3
 800648e:	f002 fb74 	bl	8008b7a <SDMMC_CmdGoIdleState>
 8006492:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <SD_PowerON+0x2a>
  {
    return errorstate;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	e072      	b.n	8006584 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f002 fb87 	bl	8008bb6 <SDMMC_CmdOperCond>
 80064a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00d      	beq.n	80064cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f002 fb5d 	bl	8008b7a <SDMMC_CmdGoIdleState>
 80064c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	e05b      	b.n	8006584 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d137      	bne.n	800654a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f002 fb87 	bl	8008bf4 <SDMMC_CmdAppCommand>
 80064e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d02d      	beq.n	800654a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064f2:	e047      	b.n	8006584 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f002 fb7a 	bl	8008bf4 <SDMMC_CmdAppCommand>
 8006500:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <SD_PowerON+0x98>
    {
      return errorstate;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	e03b      	b.n	8006584 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	491e      	ldr	r1, [pc, #120]	; (800658c <SD_PowerON+0x118>)
 8006512:	4618      	mov	r0, r3
 8006514:	f002 fb90 	bl	8008c38 <SDMMC_CmdAppOperCommand>
 8006518:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006524:	e02e      	b.n	8006584 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f002 f973 	bl	8008818 <SDMMC_GetResponse>
 8006532:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	0fdb      	lsrs	r3, r3, #31
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <SD_PowerON+0xcc>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <SD_PowerON+0xce>
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]

    count++;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3301      	adds	r3, #1
 8006548:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006550:	4293      	cmp	r3, r2
 8006552:	d802      	bhi.n	800655a <SD_PowerON+0xe6>
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0cc      	beq.n	80064f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006560:	4293      	cmp	r3, r2
 8006562:	d902      	bls.n	800656a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006568:	e00c      	b.n	8006584 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	645a      	str	r2, [r3, #68]	; 0x44
 800657a:	e002      	b.n	8006582 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	c1100000 	.word	0xc1100000

08006590 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80065a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065a4:	e018      	b.n	80065d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	4619      	mov	r1, r3
 80065b2:	4610      	mov	r0, r2
 80065b4:	f002 fc04 	bl	8008dc0 <SDMMC_CmdSendStatus>
 80065b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	e009      	b.n	80065d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f002 f924 	bl	8008818 <SDMMC_GetResponse>
 80065d0:	4602      	mov	r2, r0
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f002 f90e 	bl	8008818 <SDMMC_GetResponse>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006606:	d102      	bne.n	800660e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800660c:	e02f      	b.n	800666e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800660e:	f107 030c 	add.w	r3, r7, #12
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f879 	bl	800670c <SD_FindSCR>
 800661a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	e023      	b.n	800666e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01c      	beq.n	800666a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f002 fad9 	bl	8008bf4 <SDMMC_CmdAppCommand>
 8006642:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	e00f      	b.n	800666e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2102      	movs	r1, #2
 8006654:	4618      	mov	r0, r3
 8006656:	f002 fb12 	bl	8008c7e <SDMMC_CmdBusWidth>
 800665a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	e003      	b.n	800666e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006666:	2300      	movs	r3, #0
 8006668:	e001      	b.n	800666e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800666a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2100      	movs	r1, #0
 800668c:	4618      	mov	r0, r3
 800668e:	f002 f8c3 	bl	8008818 <SDMMC_GetResponse>
 8006692:	4603      	mov	r3, r0
 8006694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800669c:	d102      	bne.n	80066a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800669e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80066a2:	e02f      	b.n	8006704 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80066a4:	f107 030c 	add.w	r3, r7, #12
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f82e 	bl	800670c <SD_FindSCR>
 80066b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	e023      	b.n	8006704 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01c      	beq.n	8006700 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	041b      	lsls	r3, r3, #16
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f002 fa8e 	bl	8008bf4 <SDMMC_CmdAppCommand>
 80066d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	e00f      	b.n	8006704 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 fac7 	bl	8008c7e <SDMMC_CmdBusWidth>
 80066f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	e003      	b.n	8006704 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e001      	b.n	8006704 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006700:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800670c:	b590      	push	{r4, r7, lr}
 800670e:	b08f      	sub	sp, #60	; 0x3c
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006716:	f7fa fdcd 	bl	80012b4 <HAL_GetTick>
 800671a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006720:	2300      	movs	r3, #0
 8006722:	60bb      	str	r3, [r7, #8]
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2108      	movs	r1, #8
 8006732:	4618      	mov	r0, r3
 8006734:	f002 f932 	bl	800899c <SDMMC_CmdBlockLength>
 8006738:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	e0a9      	b.n	8006898 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674c:	041b      	lsls	r3, r3, #16
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f002 fa4f 	bl	8008bf4 <SDMMC_CmdAppCommand>
 8006756:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <SD_FindSCR+0x56>
  {
    return errorstate;
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	e09a      	b.n	8006898 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006762:	f04f 33ff 	mov.w	r3, #4294967295
 8006766:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006768:	2308      	movs	r3, #8
 800676a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800676c:	2330      	movs	r3, #48	; 0x30
 800676e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006770:	2302      	movs	r3, #2
 8006772:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006774:	2300      	movs	r3, #0
 8006776:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006778:	2301      	movs	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f107 0210 	add.w	r2, r7, #16
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f002 f86a 	bl	8008860 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f002 fa96 	bl	8008cc2 <SDMMC_CmdSendSCR>
 8006796:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	2b00      	cmp	r3, #0
 800679c:	d022      	beq.n	80067e4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	e07a      	b.n	8006898 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00e      	beq.n	80067ce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	f107 0208 	add.w	r2, r7, #8
 80067bc:	18d4      	adds	r4, r2, r3
 80067be:	4608      	mov	r0, r1
 80067c0:	f001 ff7a 	bl	80086b8 <SDMMC_ReadFIFO>
 80067c4:	4603      	mov	r3, r0
 80067c6:	6023      	str	r3, [r4, #0]
      index++;
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ca:	3301      	adds	r3, #1
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80067ce:	f7fa fd71 	bl	80012b4 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d102      	bne.n	80067e4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80067de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067e2:	e059      	b.n	8006898 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ea:	f240 432a 	movw	r3, #1066	; 0x42a
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0d6      	beq.n	80067a2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2208      	movs	r2, #8
 8006808:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800680a:	2308      	movs	r3, #8
 800680c:	e044      	b.n	8006898 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2202      	movs	r2, #2
 8006822:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006824:	2302      	movs	r3, #2
 8006826:	e037      	b.n	8006898 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2220      	movs	r2, #32
 800683c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800683e:	2320      	movs	r3, #32
 8006840:	e02a      	b.n	8006898 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f240 523a 	movw	r2, #1338	; 0x53a
 800684a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	061a      	lsls	r2, r3, #24
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006858:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	0a1b      	lsrs	r3, r3, #8
 800685e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006862:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	0e1b      	lsrs	r3, r3, #24
 8006868:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	601a      	str	r2, [r3, #0]
    scr++;
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	3304      	adds	r3, #4
 8006872:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	061a      	lsls	r2, r3, #24
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006880:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800688a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	0e1b      	lsrs	r3, r3, #24
 8006890:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	373c      	adds	r7, #60	; 0x3c
 800689c:	46bd      	mov	sp, r7
 800689e:	bd90      	pop	{r4, r7, pc}

080068a0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d03f      	beq.n	800693a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e033      	b.n	8006928 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 fef7 	bl	80086b8 <SDMMC_ReadFIFO>
 80068ca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3b01      	subs	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	3b01      	subs	r3, #1
 800690a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	0e1b      	lsrs	r3, r3, #24
 8006910:	b2da      	uxtb	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	3b01      	subs	r3, #1
 8006920:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	3301      	adds	r3, #1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b07      	cmp	r3, #7
 800692c:	d9c8      	bls.n	80068c0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800693a:	bf00      	nop
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d043      	beq.n	80069e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e037      	b.n	80069d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3301      	adds	r3, #1
 800696c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	3b01      	subs	r3, #1
 8006972:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	021a      	lsls	r2, r3, #8
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4313      	orrs	r3, r2
 800697e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3b01      	subs	r3, #1
 800698a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	041a      	lsls	r2, r3, #16
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4313      	orrs	r3, r2
 8006996:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3301      	adds	r3, #1
 800699c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	061a      	lsls	r2, r3, #24
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	3b01      	subs	r3, #1
 80069ba:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f107 0208 	add.w	r2, r7, #8
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 fe83 	bl	80086d2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3301      	adds	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b07      	cmp	r3, #7
 80069d6:	d9c4      	bls.n	8006962 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80069e4:	bf00      	nop
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e0e6      	b.n	8006bcc <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a74      	ldr	r2, [pc, #464]	; (8006bd4 <HAL_TIM_Base_Init+0x1e8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d036      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a10:	d031      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a70      	ldr	r2, [pc, #448]	; (8006bd8 <HAL_TIM_Base_Init+0x1ec>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d02c      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a6e      	ldr	r2, [pc, #440]	; (8006bdc <HAL_TIM_Base_Init+0x1f0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d027      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a6d      	ldr	r2, [pc, #436]	; (8006be0 <HAL_TIM_Base_Init+0x1f4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a6b      	ldr	r2, [pc, #428]	; (8006be4 <HAL_TIM_Base_Init+0x1f8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01d      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a6a      	ldr	r2, [pc, #424]	; (8006be8 <HAL_TIM_Base_Init+0x1fc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a68      	ldr	r2, [pc, #416]	; (8006bec <HAL_TIM_Base_Init+0x200>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a67      	ldr	r2, [pc, #412]	; (8006bf0 <HAL_TIM_Base_Init+0x204>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a65      	ldr	r2, [pc, #404]	; (8006bf4 <HAL_TIM_Base_Init+0x208>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a64      	ldr	r2, [pc, #400]	; (8006bf8 <HAL_TIM_Base_Init+0x20c>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_TIM_Base_Init+0x8a>
 8006a6c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006a70:	4862      	ldr	r0, [pc, #392]	; (8006bfc <HAL_TIM_Base_Init+0x210>)
 8006a72:	f7fa f830 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d014      	beq.n	8006aa8 <HAL_TIM_Base_Init+0xbc>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d010      	beq.n	8006aa8 <HAL_TIM_Base_Init+0xbc>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_TIM_Base_Init+0xbc>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d008      	beq.n	8006aa8 <HAL_TIM_Base_Init+0xbc>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2b60      	cmp	r3, #96	; 0x60
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIM_Base_Init+0xbc>
 8006a9e:	f240 1117 	movw	r1, #279	; 0x117
 8006aa2:	4856      	ldr	r0, [pc, #344]	; (8006bfc <HAL_TIM_Base_Init+0x210>)
 8006aa4:	f7fa f817 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00e      	beq.n	8006ace <HAL_TIM_Base_Init+0xe2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab8:	d009      	beq.n	8006ace <HAL_TIM_Base_Init+0xe2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac2:	d004      	beq.n	8006ace <HAL_TIM_Base_Init+0xe2>
 8006ac4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006ac8:	484c      	ldr	r0, [pc, #304]	; (8006bfc <HAL_TIM_Base_Init+0x210>)
 8006aca:	f7fa f804 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIM_Base_Init+0xf6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a40      	ldr	r2, [pc, #256]	; (8006be0 <HAL_TIM_Base_Init+0x1f4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d107      	bne.n	8006af2 <HAL_TIM_Base_Init+0x106>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bf14      	ite	ne
 8006aea:	2301      	movne	r3, #1
 8006aec:	2300      	moveq	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	e00e      	b.n	8006b10 <HAL_TIM_Base_Init+0x124>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d006      	beq.n	8006b08 <HAL_TIM_Base_Init+0x11c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b02:	d201      	bcs.n	8006b08 <HAL_TIM_Base_Init+0x11c>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <HAL_TIM_Base_Init+0x11e>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <HAL_TIM_Base_Init+0x132>
 8006b14:	f240 1119 	movw	r1, #281	; 0x119
 8006b18:	4838      	ldr	r0, [pc, #224]	; (8006bfc <HAL_TIM_Base_Init+0x210>)
 8006b1a:	f7f9 ffdc 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <HAL_TIM_Base_Init+0x14c>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d004      	beq.n	8006b38 <HAL_TIM_Base_Init+0x14c>
 8006b2e:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8006b32:	4832      	ldr	r0, [pc, #200]	; (8006bfc <HAL_TIM_Base_Init+0x210>)
 8006b34:	f7f9 ffcf 	bl	8000ad6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d106      	bne.n	8006b52 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f857 	bl	8006c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 fa51 	bl	800700c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40001000 	.word	0x40001000
 8006be8:	40001400 	.word	0x40001400
 8006bec:	40013400 	.word	0x40013400
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	40014800 	.word	0x40014800
 8006bfc:	080110f8 	.word	0x080110f8

08006c00 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a4a      	ldr	r2, [pc, #296]	; (8006d4c <HAL_TIM_Base_Start_IT+0x138>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d036      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d031      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a46      	ldr	r2, [pc, #280]	; (8006d50 <HAL_TIM_Base_Start_IT+0x13c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02c      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a45      	ldr	r2, [pc, #276]	; (8006d54 <HAL_TIM_Base_Start_IT+0x140>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d027      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a43      	ldr	r2, [pc, #268]	; (8006d58 <HAL_TIM_Base_Start_IT+0x144>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d022      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a42      	ldr	r2, [pc, #264]	; (8006d5c <HAL_TIM_Base_Start_IT+0x148>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d01d      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a40      	ldr	r2, [pc, #256]	; (8006d60 <HAL_TIM_Base_Start_IT+0x14c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d018      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3f      	ldr	r2, [pc, #252]	; (8006d64 <HAL_TIM_Base_Start_IT+0x150>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a3d      	ldr	r2, [pc, #244]	; (8006d68 <HAL_TIM_Base_Start_IT+0x154>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a3c      	ldr	r2, [pc, #240]	; (8006d6c <HAL_TIM_Base_Start_IT+0x158>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a3a      	ldr	r2, [pc, #232]	; (8006d70 <HAL_TIM_Base_Start_IT+0x15c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0x80>
 8006c8a:	f240 11d3 	movw	r1, #467	; 0x1d3
 8006c8e:	4839      	ldr	r0, [pc, #228]	; (8006d74 <HAL_TIM_Base_Start_IT+0x160>)
 8006c90:	f7f9 ff21 	bl	8000ad6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e04f      	b.n	8006d44 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a22      	ldr	r2, [pc, #136]	; (8006d4c <HAL_TIM_Base_Start_IT+0x138>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <HAL_TIM_Base_Start_IT+0xee>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cce:	d018      	beq.n	8006d02 <HAL_TIM_Base_Start_IT+0xee>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_TIM_Base_Start_IT+0x13c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_TIM_Base_Start_IT+0xee>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <HAL_TIM_Base_Start_IT+0x140>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_TIM_Base_Start_IT+0xee>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <HAL_TIM_Base_Start_IT+0x144>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_TIM_Base_Start_IT+0xee>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	; (8006d64 <HAL_TIM_Base_Start_IT+0x150>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_TIM_Base_Start_IT+0xee>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1a      	ldr	r2, [pc, #104]	; (8006d68 <HAL_TIM_Base_Start_IT+0x154>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d115      	bne.n	8006d2e <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <HAL_TIM_Base_Start_IT+0x164>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d015      	beq.n	8006d40 <HAL_TIM_Base_Start_IT+0x12c>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1a:	d011      	beq.n	8006d40 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	e008      	b.n	8006d40 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e000      	b.n	8006d42 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40012c00 	.word	0x40012c00
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40001000 	.word	0x40001000
 8006d60:	40001400 	.word	0x40001400
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40014400 	.word	0x40014400
 8006d70:	40014800 	.word	0x40014800
 8006d74:	080110f8 	.word	0x080110f8
 8006d78:	00010007 	.word	0x00010007

08006d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d122      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d11b      	bne.n	8006dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0202 	mvn.w	r2, #2
 8006da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f905 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006dc4:	e005      	b.n	8006dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f8f7 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f908 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	2b04      	cmp	r3, #4
 8006de4:	d122      	bne.n	8006e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d11b      	bne.n	8006e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0204 	mvn.w	r2, #4
 8006dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8db 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006e18:	e005      	b.n	8006e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f8cd 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8de 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d122      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d11b      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0208 	mvn.w	r2, #8
 8006e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2204      	movs	r2, #4
 8006e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f8b1 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8a3 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8b4 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d122      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d11b      	bne.n	8006ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0210 	mvn.w	r2, #16
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f887 	bl	8006fce <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f879 	bl	8006fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f88a 	bl	8006fe2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10e      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d107      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f06f 0201 	mvn.w	r2, #1
 8006ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7f9 fdd4 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b80      	cmp	r3, #128	; 0x80
 8006f0c:	d10e      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d107      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f914 	bl	8007154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3a:	d10e      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f46:	2b80      	cmp	r3, #128	; 0x80
 8006f48:	d107      	bne.n	8006f5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f907 	bl	8007168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d10e      	bne.n	8006f86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d107      	bne.n	8006f86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f838 	bl	8006ff6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d10e      	bne.n	8006fb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d107      	bne.n	8006fb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f06f 0220 	mvn.w	r2, #32
 8006faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8c7 	bl	8007140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
	...

0800700c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a40      	ldr	r2, [pc, #256]	; (8007120 <TIM_Base_SetConfig+0x114>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d013      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702a:	d00f      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a3d      	ldr	r2, [pc, #244]	; (8007124 <TIM_Base_SetConfig+0x118>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00b      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a3c      	ldr	r2, [pc, #240]	; (8007128 <TIM_Base_SetConfig+0x11c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a3b      	ldr	r2, [pc, #236]	; (800712c <TIM_Base_SetConfig+0x120>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a3a      	ldr	r2, [pc, #232]	; (8007130 <TIM_Base_SetConfig+0x124>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d108      	bne.n	800705e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a2f      	ldr	r2, [pc, #188]	; (8007120 <TIM_Base_SetConfig+0x114>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01f      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706c:	d01b      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2c      	ldr	r2, [pc, #176]	; (8007124 <TIM_Base_SetConfig+0x118>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d017      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2b      	ldr	r2, [pc, #172]	; (8007128 <TIM_Base_SetConfig+0x11c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2a      	ldr	r2, [pc, #168]	; (800712c <TIM_Base_SetConfig+0x120>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00f      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a29      	ldr	r2, [pc, #164]	; (8007130 <TIM_Base_SetConfig+0x124>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00b      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a28      	ldr	r2, [pc, #160]	; (8007134 <TIM_Base_SetConfig+0x128>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a27      	ldr	r2, [pc, #156]	; (8007138 <TIM_Base_SetConfig+0x12c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_Base_SetConfig+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a26      	ldr	r2, [pc, #152]	; (800713c <TIM_Base_SetConfig+0x130>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d108      	bne.n	80070b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a10      	ldr	r2, [pc, #64]	; (8007120 <TIM_Base_SetConfig+0x114>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00f      	beq.n	8007104 <TIM_Base_SetConfig+0xf8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a12      	ldr	r2, [pc, #72]	; (8007130 <TIM_Base_SetConfig+0x124>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00b      	beq.n	8007104 <TIM_Base_SetConfig+0xf8>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a11      	ldr	r2, [pc, #68]	; (8007134 <TIM_Base_SetConfig+0x128>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_Base_SetConfig+0xf8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a10      	ldr	r2, [pc, #64]	; (8007138 <TIM_Base_SetConfig+0x12c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_Base_SetConfig+0xf8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a0f      	ldr	r2, [pc, #60]	; (800713c <TIM_Base_SetConfig+0x130>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d103      	bne.n	800710c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	615a      	str	r2, [r3, #20]
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40013400 	.word	0x40013400
 8007134:	40014000 	.word	0x40014000
 8007138:	40014400 	.word	0x40014400
 800713c:	40014800 	.word	0x40014800

08007140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e08b      	b.n	80072a6 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d023      	beq.n	80071de <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a45      	ldr	r2, [pc, #276]	; (80072b0 <HAL_UART_Init+0x134>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d041      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a43      	ldr	r2, [pc, #268]	; (80072b4 <HAL_UART_Init+0x138>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d03c      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a42      	ldr	r2, [pc, #264]	; (80072b8 <HAL_UART_Init+0x13c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d037      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a40      	ldr	r2, [pc, #256]	; (80072bc <HAL_UART_Init+0x140>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d032      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a3f      	ldr	r2, [pc, #252]	; (80072c0 <HAL_UART_Init+0x144>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02d      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a3d      	ldr	r2, [pc, #244]	; (80072c4 <HAL_UART_Init+0x148>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d028      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071d2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80071d6:	483c      	ldr	r0, [pc, #240]	; (80072c8 <HAL_UART_Init+0x14c>)
 80071d8:	f7f9 fc7d 	bl	8000ad6 <assert_failed>
 80071dc:	e022      	b.n	8007224 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a33      	ldr	r2, [pc, #204]	; (80072b0 <HAL_UART_Init+0x134>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d01d      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a31      	ldr	r2, [pc, #196]	; (80072b4 <HAL_UART_Init+0x138>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d018      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a30      	ldr	r2, [pc, #192]	; (80072b8 <HAL_UART_Init+0x13c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d013      	beq.n	8007224 <HAL_UART_Init+0xa8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a2e      	ldr	r2, [pc, #184]	; (80072bc <HAL_UART_Init+0x140>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00e      	beq.n	8007224 <HAL_UART_Init+0xa8>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a2d      	ldr	r2, [pc, #180]	; (80072c0 <HAL_UART_Init+0x144>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d009      	beq.n	8007224 <HAL_UART_Init+0xa8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a2b      	ldr	r2, [pc, #172]	; (80072c4 <HAL_UART_Init+0x148>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d004      	beq.n	8007224 <HAL_UART_Init+0xa8>
 800721a:	f240 1157 	movw	r1, #343	; 0x157
 800721e:	482a      	ldr	r0, [pc, #168]	; (80072c8 <HAL_UART_Init+0x14c>)
 8007220:	f7f9 fc59 	bl	8000ad6 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7f9 fec5 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2224      	movs	r2, #36	; 0x24
 800723e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0201 	bic.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fb3d 	bl	80078d0 <UART_SetConfig>
 8007256:	4603      	mov	r3, r0
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_UART_Init+0xe4>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e022      	b.n	80072a6 <HAL_UART_Init+0x12a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <HAL_UART_Init+0xf2>
  {
    UART_AdvFeatureConfig(huart);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fe8f 	bl	8007f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800727c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800728c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 ffd4 	bl	800824c <UART_CheckIdleState>
 80072a4:	4603      	mov	r3, r0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40013800 	.word	0x40013800
 80072b4:	40004400 	.word	0x40004400
 80072b8:	40004800 	.word	0x40004800
 80072bc:	40004c00 	.word	0x40004c00
 80072c0:	40005000 	.word	0x40005000
 80072c4:	40008000 	.word	0x40008000
 80072c8:	08011130 	.word	0x08011130

080072cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b0ba      	sub	sp, #232	; 0xe8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80072fa:	4013      	ands	r3, r2
 80072fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d115      	bne.n	8007334 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730c:	f003 0320 	and.w	r3, r3, #32
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00f      	beq.n	8007334 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d009      	beq.n	8007334 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 82a6 	beq.w	8007876 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
      }
      return;
 8007332:	e2a0      	b.n	8007876 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8117 	beq.w	800756c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800733e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800734a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800734e:	4b85      	ldr	r3, [pc, #532]	; (8007564 <HAL_UART_IRQHandler+0x298>)
 8007350:	4013      	ands	r3, r2
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 810a 	beq.w	800756c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d011      	beq.n	8007388 <HAL_UART_IRQHandler+0xbc>
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2201      	movs	r2, #1
 8007376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800737e:	f043 0201 	orr.w	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d011      	beq.n	80073b8 <HAL_UART_IRQHandler+0xec>
 8007394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2202      	movs	r2, #2
 80073a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ae:	f043 0204 	orr.w	r2, r3, #4
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d011      	beq.n	80073e8 <HAL_UART_IRQHandler+0x11c>
 80073c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2204      	movs	r2, #4
 80073d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073de:	f043 0202 	orr.w	r2, r3, #2
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d017      	beq.n	8007424 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007404:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800741a:	f043 0208 	orr.w	r2, r3, #8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800742c:	2b00      	cmp	r3, #0
 800742e:	d012      	beq.n	8007456 <HAL_UART_IRQHandler+0x18a>
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00c      	beq.n	8007456 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 820c 	beq.w	800787a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00d      	beq.n	800748a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800746e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800747e:	2b00      	cmp	r3, #0
 8007480:	d003      	beq.n	800748a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d04f      	beq.n	800754e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 ffd9 	bl	8008466 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d141      	bne.n	8007546 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074d0:	e853 3f00 	ldrex	r3, [r3]
 80074d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3308      	adds	r3, #8
 80074ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1d9      	bne.n	80074c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	2b00      	cmp	r3, #0
 8007514:	d013      	beq.n	800753e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751a:	4a13      	ldr	r2, [pc, #76]	; (8007568 <HAL_UART_IRQHandler+0x29c>)
 800751c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	4618      	mov	r0, r3
 8007524:	f7fa fb66 	bl	8001bf4 <HAL_DMA_Abort_IT>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d017      	beq.n	800755e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	e00f      	b.n	800755e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f9b0 	bl	80078a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007544:	e00b      	b.n	800755e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f9ac 	bl	80078a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754c:	e007      	b.n	800755e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f9a8 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800755c:	e18d      	b.n	800787a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755e:	bf00      	nop
    return;
 8007560:	e18b      	b.n	800787a <HAL_UART_IRQHandler+0x5ae>
 8007562:	bf00      	nop
 8007564:	04000120 	.word	0x04000120
 8007568:	0800852d 	.word	0x0800852d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007570:	2b01      	cmp	r3, #1
 8007572:	f040 8146 	bne.w	8007802 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	f003 0310 	and.w	r3, r3, #16
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 813f 	beq.w	8007802 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007588:	f003 0310 	and.w	r3, r3, #16
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8138 	beq.w	8007802 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2210      	movs	r2, #16
 8007598:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	f040 80b4 	bne.w	8007712 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 815f 	beq.w	800787e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ca:	429a      	cmp	r2, r3
 80075cc:	f080 8157 	bcs.w	800787e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f040 8085 	bne.w	80076f6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800761a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007622:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800762e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1da      	bne.n	80075ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3308      	adds	r3, #8
 800763c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007648:	f023 0301 	bic.w	r3, r3, #1
 800764c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800765a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800765e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800766c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e1      	bne.n	8007636 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3308      	adds	r3, #8
 8007692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800769c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e3      	bne.n	8007672 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c6:	f023 0310 	bic.w	r3, r3, #16
 80076ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80076da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076e0:	e841 2300 	strex	r3, r2, [r1]
 80076e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e4      	bne.n	80076b6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fa fa41 	bl	8001b78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007702:	b29b      	uxth	r3, r3
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	b29b      	uxth	r3, r3
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f8d4 	bl	80078b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007710:	e0b5      	b.n	800787e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800771e:	b29b      	uxth	r3, r3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80a7 	beq.w	8007882 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80a2 	beq.w	8007882 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007760:	647b      	str	r3, [r7, #68]	; 0x44
 8007762:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e4      	bne.n	800773e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	623b      	str	r3, [r7, #32]
   return(result);
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	f023 0301 	bic.w	r3, r3, #1
 800778a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007798:	633a      	str	r2, [r7, #48]	; 0x30
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800779e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e3      	bne.n	8007774 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0310 	bic.w	r3, r3, #16
 80077d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077e0:	61fb      	str	r3, [r7, #28]
 80077e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	69b9      	ldr	r1, [r7, #24]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	617b      	str	r3, [r7, #20]
   return(result);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e4      	bne.n	80077be <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f85c 	bl	80078b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007800:	e03f      	b.n	8007882 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00e      	beq.n	800782c <HAL_UART_IRQHandler+0x560>
 800780e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007822:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fec1 	bl	80085ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800782a:	e02d      	b.n	8007888 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800782c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00e      	beq.n	8007856 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800783c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01c      	beq.n	8007886 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
    }
    return;
 8007854:	e017      	b.n	8007886 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d012      	beq.n	8007888 <HAL_UART_IRQHandler+0x5bc>
 8007862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00c      	beq.n	8007888 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fe72 	bl	8008558 <UART_EndTransmit_IT>
    return;
 8007874:	e008      	b.n	8007888 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007876:	bf00      	nop
 8007878:	e006      	b.n	8007888 <HAL_UART_IRQHandler+0x5bc>
    return;
 800787a:	bf00      	nop
 800787c:	e004      	b.n	8007888 <HAL_UART_IRQHandler+0x5bc>
      return;
 800787e:	bf00      	nop
 8007880:	e002      	b.n	8007888 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007886:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007888:	37e8      	adds	r7, #232	; 0xe8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop

08007890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078d4:	b08a      	sub	sp, #40	; 0x28
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4a9e      	ldr	r2, [pc, #632]	; (8007b60 <UART_SetConfig+0x290>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d904      	bls.n	80078f4 <UART_SetConfig+0x24>
 80078ea:	f640 4157 	movw	r1, #3159	; 0xc57
 80078ee:	489d      	ldr	r0, [pc, #628]	; (8007b64 <UART_SetConfig+0x294>)
 80078f0:	f7f9 f8f1 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078fc:	d00d      	beq.n	800791a <UART_SetConfig+0x4a>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <UART_SetConfig+0x4a>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790e:	d004      	beq.n	800791a <UART_SetConfig+0x4a>
 8007910:	f640 4158 	movw	r1, #3160	; 0xc58
 8007914:	4893      	ldr	r0, [pc, #588]	; (8007b64 <UART_SetConfig+0x294>)
 8007916:	f7f9 f8de 	bl	8000ad6 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a92      	ldr	r2, [pc, #584]	; (8007b68 <UART_SetConfig+0x298>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d10e      	bne.n	8007942 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d030      	beq.n	800798e <UART_SetConfig+0xbe>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007934:	d02b      	beq.n	800798e <UART_SetConfig+0xbe>
 8007936:	f640 415b 	movw	r1, #3163	; 0xc5b
 800793a:	488a      	ldr	r0, [pc, #552]	; (8007b64 <UART_SetConfig+0x294>)
 800793c:	f7f9 f8cb 	bl	8000ad6 <assert_failed>
 8007940:	e025      	b.n	800798e <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794a:	d012      	beq.n	8007972 <UART_SetConfig+0xa2>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <UART_SetConfig+0xa2>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800795c:	d009      	beq.n	8007972 <UART_SetConfig+0xa2>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007966:	d004      	beq.n	8007972 <UART_SetConfig+0xa2>
 8007968:	f640 415f 	movw	r1, #3167	; 0xc5f
 800796c:	487d      	ldr	r0, [pc, #500]	; (8007b64 <UART_SetConfig+0x294>)
 800796e:	f7f9 f8b2 	bl	8000ad6 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <UART_SetConfig+0xbe>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d004      	beq.n	800798e <UART_SetConfig+0xbe>
 8007984:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 8007988:	4876      	ldr	r0, [pc, #472]	; (8007b64 <UART_SetConfig+0x294>)
 800798a:	f7f9 f8a4 	bl	8000ad6 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00e      	beq.n	80079b4 <UART_SetConfig+0xe4>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800799e:	d009      	beq.n	80079b4 <UART_SetConfig+0xe4>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80079a8:	d004      	beq.n	80079b4 <UART_SetConfig+0xe4>
 80079aa:	f640 4163 	movw	r1, #3171	; 0xc63
 80079ae:	486d      	ldr	r0, [pc, #436]	; (8007b64 <UART_SetConfig+0x294>)
 80079b0:	f7f9 f891 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	f023 030c 	bic.w	r3, r3, #12
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <UART_SetConfig+0xf8>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d104      	bne.n	80079d2 <UART_SetConfig+0x102>
 80079c8:	f640 4164 	movw	r1, #3172	; 0xc64
 80079cc:	4865      	ldr	r0, [pc, #404]	; (8007b64 <UART_SetConfig+0x294>)
 80079ce:	f7f9 f882 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d013      	beq.n	8007a02 <UART_SetConfig+0x132>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e2:	d00e      	beq.n	8007a02 <UART_SetConfig+0x132>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ec:	d009      	beq.n	8007a02 <UART_SetConfig+0x132>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079f6:	d004      	beq.n	8007a02 <UART_SetConfig+0x132>
 80079f8:	f640 4165 	movw	r1, #3173	; 0xc65
 80079fc:	4859      	ldr	r0, [pc, #356]	; (8007b64 <UART_SetConfig+0x294>)
 80079fe:	f7f9 f86a 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <UART_SetConfig+0x14e>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a12:	d004      	beq.n	8007a1e <UART_SetConfig+0x14e>
 8007a14:	f640 4166 	movw	r1, #3174	; 0xc66
 8007a18:	4852      	ldr	r0, [pc, #328]	; (8007b64 <UART_SetConfig+0x294>)
 8007a1a:	f7f9 f85c 	bl	8000ad6 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b4b      	ldr	r3, [pc, #300]	; (8007b6c <UART_SetConfig+0x29c>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a46:	430b      	orrs	r3, r1
 8007a48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a3f      	ldr	r2, [pc, #252]	; (8007b68 <UART_SetConfig+0x298>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	4313      	orrs	r3, r2
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a37      	ldr	r2, [pc, #220]	; (8007b70 <UART_SetConfig+0x2a0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d125      	bne.n	8007ae4 <UART_SetConfig+0x214>
 8007a98:	4b36      	ldr	r3, [pc, #216]	; (8007b74 <UART_SetConfig+0x2a4>)
 8007a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9e:	f003 0303 	and.w	r3, r3, #3
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d81a      	bhi.n	8007adc <UART_SetConfig+0x20c>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <UART_SetConfig+0x1dc>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007acd 	.word	0x08007acd
 8007ab4:	08007ac5 	.word	0x08007ac5
 8007ab8:	08007ad5 	.word	0x08007ad5
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac2:	e114      	b.n	8007cee <UART_SetConfig+0x41e>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aca:	e110      	b.n	8007cee <UART_SetConfig+0x41e>
 8007acc:	2304      	movs	r3, #4
 8007ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ad2:	e10c      	b.n	8007cee <UART_SetConfig+0x41e>
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ada:	e108      	b.n	8007cee <UART_SetConfig+0x41e>
 8007adc:	2310      	movs	r3, #16
 8007ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ae2:	e104      	b.n	8007cee <UART_SetConfig+0x41e>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a23      	ldr	r2, [pc, #140]	; (8007b78 <UART_SetConfig+0x2a8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d146      	bne.n	8007b7c <UART_SetConfig+0x2ac>
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <UART_SetConfig+0x2a4>)
 8007af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af4:	f003 030c 	and.w	r3, r3, #12
 8007af8:	2b0c      	cmp	r3, #12
 8007afa:	d82d      	bhi.n	8007b58 <UART_SetConfig+0x288>
 8007afc:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <UART_SetConfig+0x234>)
 8007afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b02:	bf00      	nop
 8007b04:	08007b39 	.word	0x08007b39
 8007b08:	08007b59 	.word	0x08007b59
 8007b0c:	08007b59 	.word	0x08007b59
 8007b10:	08007b59 	.word	0x08007b59
 8007b14:	08007b49 	.word	0x08007b49
 8007b18:	08007b59 	.word	0x08007b59
 8007b1c:	08007b59 	.word	0x08007b59
 8007b20:	08007b59 	.word	0x08007b59
 8007b24:	08007b41 	.word	0x08007b41
 8007b28:	08007b59 	.word	0x08007b59
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	08007b59 	.word	0x08007b59
 8007b34:	08007b51 	.word	0x08007b51
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b3e:	e0d6      	b.n	8007cee <UART_SetConfig+0x41e>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b46:	e0d2      	b.n	8007cee <UART_SetConfig+0x41e>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b4e:	e0ce      	b.n	8007cee <UART_SetConfig+0x41e>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b56:	e0ca      	b.n	8007cee <UART_SetConfig+0x41e>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5e:	e0c6      	b.n	8007cee <UART_SetConfig+0x41e>
 8007b60:	00989680 	.word	0x00989680
 8007b64:	08011130 	.word	0x08011130
 8007b68:	40008000 	.word	0x40008000
 8007b6c:	efff69f3 	.word	0xefff69f3
 8007b70:	40013800 	.word	0x40013800
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40004400 	.word	0x40004400
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4aae      	ldr	r2, [pc, #696]	; (8007e3c <UART_SetConfig+0x56c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d125      	bne.n	8007bd2 <UART_SetConfig+0x302>
 8007b86:	4bae      	ldr	r3, [pc, #696]	; (8007e40 <UART_SetConfig+0x570>)
 8007b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b90:	2b30      	cmp	r3, #48	; 0x30
 8007b92:	d016      	beq.n	8007bc2 <UART_SetConfig+0x2f2>
 8007b94:	2b30      	cmp	r3, #48	; 0x30
 8007b96:	d818      	bhi.n	8007bca <UART_SetConfig+0x2fa>
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d00a      	beq.n	8007bb2 <UART_SetConfig+0x2e2>
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d814      	bhi.n	8007bca <UART_SetConfig+0x2fa>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <UART_SetConfig+0x2da>
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d008      	beq.n	8007bba <UART_SetConfig+0x2ea>
 8007ba8:	e00f      	b.n	8007bca <UART_SetConfig+0x2fa>
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bb0:	e09d      	b.n	8007cee <UART_SetConfig+0x41e>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bb8:	e099      	b.n	8007cee <UART_SetConfig+0x41e>
 8007bba:	2304      	movs	r3, #4
 8007bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc0:	e095      	b.n	8007cee <UART_SetConfig+0x41e>
 8007bc2:	2308      	movs	r3, #8
 8007bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc8:	e091      	b.n	8007cee <UART_SetConfig+0x41e>
 8007bca:	2310      	movs	r3, #16
 8007bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd0:	e08d      	b.n	8007cee <UART_SetConfig+0x41e>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a9b      	ldr	r2, [pc, #620]	; (8007e44 <UART_SetConfig+0x574>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d125      	bne.n	8007c28 <UART_SetConfig+0x358>
 8007bdc:	4b98      	ldr	r3, [pc, #608]	; (8007e40 <UART_SetConfig+0x570>)
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007be6:	2bc0      	cmp	r3, #192	; 0xc0
 8007be8:	d016      	beq.n	8007c18 <UART_SetConfig+0x348>
 8007bea:	2bc0      	cmp	r3, #192	; 0xc0
 8007bec:	d818      	bhi.n	8007c20 <UART_SetConfig+0x350>
 8007bee:	2b80      	cmp	r3, #128	; 0x80
 8007bf0:	d00a      	beq.n	8007c08 <UART_SetConfig+0x338>
 8007bf2:	2b80      	cmp	r3, #128	; 0x80
 8007bf4:	d814      	bhi.n	8007c20 <UART_SetConfig+0x350>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <UART_SetConfig+0x330>
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	d008      	beq.n	8007c10 <UART_SetConfig+0x340>
 8007bfe:	e00f      	b.n	8007c20 <UART_SetConfig+0x350>
 8007c00:	2300      	movs	r3, #0
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c06:	e072      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c0e:	e06e      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c16:	e06a      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c1e:	e066      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c26:	e062      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a86      	ldr	r2, [pc, #536]	; (8007e48 <UART_SetConfig+0x578>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d12a      	bne.n	8007c88 <UART_SetConfig+0x3b8>
 8007c32:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <UART_SetConfig+0x570>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c40:	d01a      	beq.n	8007c78 <UART_SetConfig+0x3a8>
 8007c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c46:	d81b      	bhi.n	8007c80 <UART_SetConfig+0x3b0>
 8007c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c4c:	d00c      	beq.n	8007c68 <UART_SetConfig+0x398>
 8007c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c52:	d815      	bhi.n	8007c80 <UART_SetConfig+0x3b0>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <UART_SetConfig+0x390>
 8007c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5c:	d008      	beq.n	8007c70 <UART_SetConfig+0x3a0>
 8007c5e:	e00f      	b.n	8007c80 <UART_SetConfig+0x3b0>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c66:	e042      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c6e:	e03e      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c76:	e03a      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c7e:	e036      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c86:	e032      	b.n	8007cee <UART_SetConfig+0x41e>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a6f      	ldr	r2, [pc, #444]	; (8007e4c <UART_SetConfig+0x57c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d12a      	bne.n	8007ce8 <UART_SetConfig+0x418>
 8007c92:	4b6b      	ldr	r3, [pc, #428]	; (8007e40 <UART_SetConfig+0x570>)
 8007c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ca0:	d01a      	beq.n	8007cd8 <UART_SetConfig+0x408>
 8007ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ca6:	d81b      	bhi.n	8007ce0 <UART_SetConfig+0x410>
 8007ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cac:	d00c      	beq.n	8007cc8 <UART_SetConfig+0x3f8>
 8007cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb2:	d815      	bhi.n	8007ce0 <UART_SetConfig+0x410>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <UART_SetConfig+0x3f0>
 8007cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbc:	d008      	beq.n	8007cd0 <UART_SetConfig+0x400>
 8007cbe:	e00f      	b.n	8007ce0 <UART_SetConfig+0x410>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc6:	e012      	b.n	8007cee <UART_SetConfig+0x41e>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cce:	e00e      	b.n	8007cee <UART_SetConfig+0x41e>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cd6:	e00a      	b.n	8007cee <UART_SetConfig+0x41e>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cde:	e006      	b.n	8007cee <UART_SetConfig+0x41e>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce6:	e002      	b.n	8007cee <UART_SetConfig+0x41e>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a56      	ldr	r2, [pc, #344]	; (8007e4c <UART_SetConfig+0x57c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d17a      	bne.n	8007dee <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d824      	bhi.n	8007d4a <UART_SetConfig+0x47a>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <UART_SetConfig+0x438>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d2d 	.word	0x08007d2d
 8007d0c:	08007d4b 	.word	0x08007d4b
 8007d10:	08007d35 	.word	0x08007d35
 8007d14:	08007d4b 	.word	0x08007d4b
 8007d18:	08007d3b 	.word	0x08007d3b
 8007d1c:	08007d4b 	.word	0x08007d4b
 8007d20:	08007d4b 	.word	0x08007d4b
 8007d24:	08007d4b 	.word	0x08007d4b
 8007d28:	08007d43 	.word	0x08007d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d2c:	f7fb fb78 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8007d30:	61f8      	str	r0, [r7, #28]
        break;
 8007d32:	e010      	b.n	8007d56 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d34:	4b46      	ldr	r3, [pc, #280]	; (8007e50 <UART_SetConfig+0x580>)
 8007d36:	61fb      	str	r3, [r7, #28]
        break;
 8007d38:	e00d      	b.n	8007d56 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d3a:	f7fb fad9 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8007d3e:	61f8      	str	r0, [r7, #28]
        break;
 8007d40:	e009      	b.n	8007d56 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d46:	61fb      	str	r3, [r7, #28]
        break;
 8007d48:	e005      	b.n	8007d56 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 8107 	beq.w	8007f6c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4413      	add	r3, r2
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d305      	bcc.n	8007d7a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d903      	bls.n	8007d82 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d80:	e0f4      	b.n	8007f6c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2200      	movs	r2, #0
 8007d86:	461c      	mov	r4, r3
 8007d88:	4615      	mov	r5, r2
 8007d8a:	f04f 0200 	mov.w	r2, #0
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	022b      	lsls	r3, r5, #8
 8007d94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d98:	0222      	lsls	r2, r4, #8
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	6849      	ldr	r1, [r1, #4]
 8007d9e:	0849      	lsrs	r1, r1, #1
 8007da0:	2000      	movs	r0, #0
 8007da2:	4688      	mov	r8, r1
 8007da4:	4681      	mov	r9, r0
 8007da6:	eb12 0a08 	adds.w	sl, r2, r8
 8007daa:	eb43 0b09 	adc.w	fp, r3, r9
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	603b      	str	r3, [r7, #0]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	4659      	mov	r1, fp
 8007dc0:	f7f8 fa60 	bl	8000284 <__aeabi_uldivmod>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4613      	mov	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd2:	d308      	bcc.n	8007de6 <UART_SetConfig+0x516>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dda:	d204      	bcs.n	8007de6 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	60da      	str	r2, [r3, #12]
 8007de4:	e0c2      	b.n	8007f6c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007dec:	e0be      	b.n	8007f6c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df6:	d16a      	bne.n	8007ece <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8007df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d834      	bhi.n	8007e6a <UART_SetConfig+0x59a>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x538>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e35 	.word	0x08007e35
 8007e10:	08007e55 	.word	0x08007e55
 8007e14:	08007e6b 	.word	0x08007e6b
 8007e18:	08007e5b 	.word	0x08007e5b
 8007e1c:	08007e6b 	.word	0x08007e6b
 8007e20:	08007e6b 	.word	0x08007e6b
 8007e24:	08007e6b 	.word	0x08007e6b
 8007e28:	08007e63 	.word	0x08007e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e2c:	f7fb faf8 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8007e30:	61f8      	str	r0, [r7, #28]
        break;
 8007e32:	e020      	b.n	8007e76 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e34:	f7fb fb0a 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8007e38:	61f8      	str	r0, [r7, #28]
        break;
 8007e3a:	e01c      	b.n	8007e76 <UART_SetConfig+0x5a6>
 8007e3c:	40004800 	.word	0x40004800
 8007e40:	40021000 	.word	0x40021000
 8007e44:	40004c00 	.word	0x40004c00
 8007e48:	40005000 	.word	0x40005000
 8007e4c:	40008000 	.word	0x40008000
 8007e50:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e54:	4b4c      	ldr	r3, [pc, #304]	; (8007f88 <UART_SetConfig+0x6b8>)
 8007e56:	61fb      	str	r3, [r7, #28]
        break;
 8007e58:	e00d      	b.n	8007e76 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e5a:	f7fb fa49 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8007e5e:	61f8      	str	r0, [r7, #28]
        break;
 8007e60:	e009      	b.n	8007e76 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e66:	61fb      	str	r3, [r7, #28]
        break;
 8007e68:	e005      	b.n	8007e76 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d077      	beq.n	8007f6c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	005a      	lsls	r2, r3, #1
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	441a      	add	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b0f      	cmp	r3, #15
 8007e96:	d916      	bls.n	8007ec6 <UART_SetConfig+0x5f6>
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e9e:	d212      	bcs.n	8007ec6 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f023 030f 	bic.w	r3, r3, #15
 8007ea8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	8afb      	ldrh	r3, [r7, #22]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	8afa      	ldrh	r2, [r7, #22]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e052      	b.n	8007f6c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ecc:	e04e      	b.n	8007f6c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ed2:	2b08      	cmp	r3, #8
 8007ed4:	d827      	bhi.n	8007f26 <UART_SetConfig+0x656>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <UART_SetConfig+0x60c>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007f01 	.word	0x08007f01
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	08007f27 	.word	0x08007f27
 8007eec:	08007f17 	.word	0x08007f17
 8007ef0:	08007f27 	.word	0x08007f27
 8007ef4:	08007f27 	.word	0x08007f27
 8007ef8:	08007f27 	.word	0x08007f27
 8007efc:	08007f1f 	.word	0x08007f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f00:	f7fb fa8e 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8007f04:	61f8      	str	r0, [r7, #28]
        break;
 8007f06:	e014      	b.n	8007f32 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f08:	f7fb faa0 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8007f0c:	61f8      	str	r0, [r7, #28]
        break;
 8007f0e:	e010      	b.n	8007f32 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f10:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <UART_SetConfig+0x6b8>)
 8007f12:	61fb      	str	r3, [r7, #28]
        break;
 8007f14:	e00d      	b.n	8007f32 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f16:	f7fb f9eb 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8007f1a:	61f8      	str	r0, [r7, #28]
        break;
 8007f1c:	e009      	b.n	8007f32 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f22:	61fb      	str	r3, [r7, #28]
        break;
 8007f24:	e005      	b.n	8007f32 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f30:	bf00      	nop
    }

    if (pclk != 0U)
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d019      	beq.n	8007f6c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	085a      	lsrs	r2, r3, #1
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	441a      	add	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b0f      	cmp	r3, #15
 8007f50:	d909      	bls.n	8007f66 <UART_SetConfig+0x696>
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f58:	d205      	bcs.n	8007f66 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60da      	str	r2, [r3, #12]
 8007f64:	e002      	b.n	8007f6c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007f78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3728      	adds	r7, #40	; 0x28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f86:	bf00      	nop
 8007f88:	00f42400 	.word	0x00f42400

08007f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	2bff      	cmp	r3, #255	; 0xff
 8007f9a:	d904      	bls.n	8007fa6 <UART_AdvFeatureConfig+0x1a>
 8007f9c:	f640 514c 	movw	r1, #3404	; 0xd4c
 8007fa0:	4891      	ldr	r0, [pc, #580]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 8007fa2:	f7f8 fd98 	bl	8000ad6 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d018      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <UART_AdvFeatureConfig+0x42>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fc2:	d004      	beq.n	8007fce <UART_AdvFeatureConfig+0x42>
 8007fc4:	f640 5151 	movw	r1, #3409	; 0xd51
 8007fc8:	4887      	ldr	r0, [pc, #540]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 8007fca:	f7f8 fd84 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	f003 0302 	and.w	r3, r3, #2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d018      	beq.n	8008022 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d009      	beq.n	800800c <UART_AdvFeatureConfig+0x80>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008000:	d004      	beq.n	800800c <UART_AdvFeatureConfig+0x80>
 8008002:	f640 5158 	movw	r1, #3416	; 0xd58
 8008006:	4878      	ldr	r0, [pc, #480]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 8008008:	f7f8 fd65 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	2b00      	cmp	r3, #0
 800802c:	d018      	beq.n	8008060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <UART_AdvFeatureConfig+0xbe>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800803e:	d004      	beq.n	800804a <UART_AdvFeatureConfig+0xbe>
 8008040:	f640 515f 	movw	r1, #3423	; 0xd5f
 8008044:	4868      	ldr	r0, [pc, #416]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 8008046:	f7f8 fd46 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d018      	beq.n	800809e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	2b00      	cmp	r3, #0
 8008072:	d009      	beq.n	8008088 <UART_AdvFeatureConfig+0xfc>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800807c:	d004      	beq.n	8008088 <UART_AdvFeatureConfig+0xfc>
 800807e:	f640 5166 	movw	r1, #3430	; 0xd66
 8008082:	4859      	ldr	r0, [pc, #356]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 8008084:	f7f8 fd27 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d018      	beq.n	80080dc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <UART_AdvFeatureConfig+0x13a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ba:	d004      	beq.n	80080c6 <UART_AdvFeatureConfig+0x13a>
 80080bc:	f640 516d 	movw	r1, #3437	; 0xd6d
 80080c0:	4849      	ldr	r0, [pc, #292]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 80080c2:	f7f8 fd08 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	430a      	orrs	r2, r1
 80080da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d018      	beq.n	800811a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <UART_AdvFeatureConfig+0x178>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f8:	d004      	beq.n	8008104 <UART_AdvFeatureConfig+0x178>
 80080fa:	f640 5174 	movw	r1, #3444	; 0xd74
 80080fe:	483a      	ldr	r0, [pc, #232]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 8008100:	f7f8 fce9 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d06c      	beq.n	8008200 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a30      	ldr	r2, [pc, #192]	; (80081ec <UART_AdvFeatureConfig+0x260>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d018      	beq.n	8008162 <UART_AdvFeatureConfig+0x1d6>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a2e      	ldr	r2, [pc, #184]	; (80081f0 <UART_AdvFeatureConfig+0x264>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <UART_AdvFeatureConfig+0x1d6>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2d      	ldr	r2, [pc, #180]	; (80081f4 <UART_AdvFeatureConfig+0x268>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00e      	beq.n	8008162 <UART_AdvFeatureConfig+0x1d6>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a2b      	ldr	r2, [pc, #172]	; (80081f8 <UART_AdvFeatureConfig+0x26c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d009      	beq.n	8008162 <UART_AdvFeatureConfig+0x1d6>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <UART_AdvFeatureConfig+0x270>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <UART_AdvFeatureConfig+0x1d6>
 8008158:	f640 517b 	movw	r1, #3451	; 0xd7b
 800815c:	4822      	ldr	r0, [pc, #136]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 800815e:	f7f8 fcba 	bl	8000ad6 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <UART_AdvFeatureConfig+0x1f2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008172:	d004      	beq.n	800817e <UART_AdvFeatureConfig+0x1f2>
 8008174:	f640 517c 	movw	r1, #3452	; 0xd7c
 8008178:	481b      	ldr	r0, [pc, #108]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 800817a:	f7f8 fcac 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800819c:	d130      	bne.n	8008200 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d013      	beq.n	80081ce <UART_AdvFeatureConfig+0x242>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ae:	d00e      	beq.n	80081ce <UART_AdvFeatureConfig+0x242>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081b8:	d009      	beq.n	80081ce <UART_AdvFeatureConfig+0x242>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081c2:	d004      	beq.n	80081ce <UART_AdvFeatureConfig+0x242>
 80081c4:	f640 5181 	movw	r1, #3457	; 0xd81
 80081c8:	4807      	ldr	r0, [pc, #28]	; (80081e8 <UART_AdvFeatureConfig+0x25c>)
 80081ca:	f7f8 fc84 	bl	8000ad6 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	430a      	orrs	r2, r1
 80081e2:	605a      	str	r2, [r3, #4]
 80081e4:	e00c      	b.n	8008200 <UART_AdvFeatureConfig+0x274>
 80081e6:	bf00      	nop
 80081e8:	08011130 	.word	0x08011130
 80081ec:	40013800 	.word	0x40013800
 80081f0:	40004400 	.word	0x40004400
 80081f4:	40004800 	.word	0x40004800
 80081f8:	40004c00 	.word	0x40004c00
 80081fc:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008208:	2b00      	cmp	r3, #0
 800820a:	d018      	beq.n	800823e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008210:	2b00      	cmp	r3, #0
 8008212:	d009      	beq.n	8008228 <UART_AdvFeatureConfig+0x29c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008218:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800821c:	d004      	beq.n	8008228 <UART_AdvFeatureConfig+0x29c>
 800821e:	f640 5189 	movw	r1, #3465	; 0xd89
 8008222:	4809      	ldr	r0, [pc, #36]	; (8008248 <UART_AdvFeatureConfig+0x2bc>)
 8008224:	f7f8 fc57 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	605a      	str	r2, [r3, #4]
  }
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	08011130 	.word	0x08011130

0800824c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af02      	add	r7, sp, #8
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800825c:	f7f9 f82a 	bl	80012b4 <HAL_GetTick>
 8008260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b08      	cmp	r3, #8
 800826e:	d10e      	bne.n	800828e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f82d 	bl	80082de <UART_WaitOnFlagUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e023      	b.n	80082d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b04      	cmp	r3, #4
 800829a:	d10e      	bne.n	80082ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800829c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f817 	bl	80082de <UART_WaitOnFlagUntilTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e00d      	b.n	80082d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b09c      	sub	sp, #112	; 0x70
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	4613      	mov	r3, r2
 80082ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ee:	e0a5      	b.n	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	f000 80a1 	beq.w	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fa:	f7f8 ffdb 	bl	80012b4 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008306:	429a      	cmp	r2, r3
 8008308:	d302      	bcc.n	8008310 <UART_WaitOnFlagUntilTimeout+0x32>
 800830a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830c:	2b00      	cmp	r3, #0
 800830e:	d13e      	bne.n	800838e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800831e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008324:	667b      	str	r3, [r7, #100]	; 0x64
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800832e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008330:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800833c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	663b      	str	r3, [r7, #96]	; 0x60
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008362:	64ba      	str	r2, [r7, #72]	; 0x48
 8008364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2220      	movs	r2, #32
 800837a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2220      	movs	r2, #32
 8008380:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e067      	b.n	800845e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d04f      	beq.n	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083aa:	d147      	bne.n	800843c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d4:	637b      	str	r3, [r7, #52]	; 0x34
 80083d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e6      	bne.n	80083b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3308      	adds	r3, #8
 80083ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	613b      	str	r3, [r7, #16]
   return(result);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3308      	adds	r3, #8
 8008406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008408:	623a      	str	r2, [r7, #32]
 800840a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	69f9      	ldr	r1, [r7, #28]
 800840e:	6a3a      	ldr	r2, [r7, #32]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	61bb      	str	r3, [r7, #24]
   return(result);
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e5      	bne.n	80083e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2220      	movs	r2, #32
 800842c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e010      	b.n	800845e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4013      	ands	r3, r2
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	429a      	cmp	r2, r3
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	461a      	mov	r2, r3
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	429a      	cmp	r2, r3
 8008458:	f43f af4a 	beq.w	80082f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3770      	adds	r7, #112	; 0x70
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008466:	b480      	push	{r7}
 8008468:	b095      	sub	sp, #84	; 0x54
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	643b      	str	r3, [r7, #64]	; 0x40
 800848e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e6      	bne.n	800846e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	f023 0301 	bic.w	r3, r3, #1
 80084b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e5      	bne.n	80084a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d118      	bne.n	800850e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	e853 3f00 	ldrex	r3, [r3]
 80084e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f023 0310 	bic.w	r3, r3, #16
 80084f0:	647b      	str	r3, [r7, #68]	; 0x44
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6979      	ldr	r1, [r7, #20]
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	613b      	str	r3, [r7, #16]
   return(result);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e6      	bne.n	80084dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008520:	bf00      	nop
 8008522:	3754      	adds	r7, #84	; 0x54
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff f9aa 	bl	80078a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008550:	bf00      	nop
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60bb      	str	r3, [r7, #8]
   return(result);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6979      	ldr	r1, [r7, #20]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	613b      	str	r3, [r7, #16]
   return(result);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff f976 	bl	8007890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085a4:	bf00      	nop
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80085c0:	b084      	sub	sp, #16
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	f107 001c 	add.w	r0, r7, #28
 80085ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a35      	ldr	r2, [pc, #212]	; (80086b0 <SDMMC_Init+0xf0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <SDMMC_Init+0x26>
 80085de:	21dc      	movs	r1, #220	; 0xdc
 80085e0:	4834      	ldr	r0, [pc, #208]	; (80086b4 <SDMMC_Init+0xf4>)
 80085e2:	f7f8 fa78 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <SDMMC_Init+0x3c>
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f2:	d003      	beq.n	80085fc <SDMMC_Init+0x3c>
 80085f4:	21dd      	movs	r1, #221	; 0xdd
 80085f6:	482f      	ldr	r0, [pc, #188]	; (80086b4 <SDMMC_Init+0xf4>)
 80085f8:	f7f8 fa6d 	bl	8000ad6 <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <SDMMC_Init+0x52>
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008608:	d003      	beq.n	8008612 <SDMMC_Init+0x52>
 800860a:	21df      	movs	r1, #223	; 0xdf
 800860c:	4829      	ldr	r0, [pc, #164]	; (80086b4 <SDMMC_Init+0xf4>)
 800860e:	f7f8 fa62 	bl	8000ad6 <assert_failed>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <SDMMC_Init+0x68>
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800861e:	d003      	beq.n	8008628 <SDMMC_Init+0x68>
 8008620:	21e1      	movs	r1, #225	; 0xe1
 8008622:	4824      	ldr	r0, [pc, #144]	; (80086b4 <SDMMC_Init+0xf4>)
 8008624:	f7f8 fa57 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <SDMMC_Init+0x86>
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008634:	d007      	beq.n	8008646 <SDMMC_Init+0x86>
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863c:	d003      	beq.n	8008646 <SDMMC_Init+0x86>
 800863e:	21e2      	movs	r1, #226	; 0xe2
 8008640:	481c      	ldr	r0, [pc, #112]	; (80086b4 <SDMMC_Init+0xf4>)
 8008642:	f7f8 fa48 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <SDMMC_Init+0x9c>
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008652:	d003      	beq.n	800865c <SDMMC_Init+0x9c>
 8008654:	21e3      	movs	r1, #227	; 0xe3
 8008656:	4817      	ldr	r0, [pc, #92]	; (80086b4 <SDMMC_Init+0xf4>)
 8008658:	f7f8 fa3d 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	2bff      	cmp	r3, #255	; 0xff
 8008660:	d903      	bls.n	800866a <SDMMC_Init+0xaa>
 8008662:	21e4      	movs	r1, #228	; 0xe4
 8008664:	4813      	ldr	r0, [pc, #76]	; (80086b4 <SDMMC_Init+0xf4>)
 8008666:	f7f8 fa36 	bl	8000ad6 <assert_failed>

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008672:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008676:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800867a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800867e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008682:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008692:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086aa:	b004      	add	sp, #16
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40012800 	.word	0x40012800
 80086b4:	0801116c 	.word	0x0801116c

080086b8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2203      	movs	r2, #3
 8008700:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008702:	2002      	movs	r0, #2
 8008704:	f7f8 fde2 	bl	80012cc <HAL_Delay>

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0303 	and.w	r3, r3, #3
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2b3f      	cmp	r3, #63	; 0x3f
 8008744:	d904      	bls.n	8008750 <SDMMC_SendCommand+0x20>
 8008746:	f240 1187 	movw	r1, #391	; 0x187
 800874a:	482b      	ldr	r0, [pc, #172]	; (80087f8 <SDMMC_SendCommand+0xc8>)
 800874c:	f7f8 f9c3 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00c      	beq.n	8008772 <SDMMC_SendCommand+0x42>
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d008      	beq.n	8008772 <SDMMC_SendCommand+0x42>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	2bc0      	cmp	r3, #192	; 0xc0
 8008766:	d004      	beq.n	8008772 <SDMMC_SendCommand+0x42>
 8008768:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800876c:	4822      	ldr	r0, [pc, #136]	; (80087f8 <SDMMC_SendCommand+0xc8>)
 800876e:	f7f8 f9b2 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00e      	beq.n	8008798 <SDMMC_SendCommand+0x68>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008782:	d009      	beq.n	8008798 <SDMMC_SendCommand+0x68>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800878c:	d004      	beq.n	8008798 <SDMMC_SendCommand+0x68>
 800878e:	f240 1189 	movw	r1, #393	; 0x189
 8008792:	4819      	ldr	r0, [pc, #100]	; (80087f8 <SDMMC_SendCommand+0xc8>)
 8008794:	f7f8 f99f 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <SDMMC_SendCommand+0x84>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a8:	d004      	beq.n	80087b4 <SDMMC_SendCommand+0x84>
 80087aa:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80087ae:	4812      	ldr	r0, [pc, #72]	; (80087f8 <SDMMC_SendCommand+0xc8>)
 80087b0:	f7f8 f991 	bl	8000ad6 <assert_failed>

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087c4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80087ca:	431a      	orrs	r2, r3
                       Command->CPSM);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80087d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80087e0:	f023 030f 	bic.w	r3, r3, #15
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	0801116c 	.word	0x0801116c

080087fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	b2db      	uxtb	r3, r3
}
 800880a:	4618      	mov	r0, r3
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
	...

08008818 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00d      	beq.n	8008844 <SDMMC_GetResponse+0x2c>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b04      	cmp	r3, #4
 800882c:	d00a      	beq.n	8008844 <SDMMC_GetResponse+0x2c>
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b08      	cmp	r3, #8
 8008832:	d007      	beq.n	8008844 <SDMMC_GetResponse+0x2c>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b0c      	cmp	r3, #12
 8008838:	d004      	beq.n	8008844 <SDMMC_GetResponse+0x2c>
 800883a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800883e:	4807      	ldr	r0, [pc, #28]	; (800885c <SDMMC_GetResponse+0x44>)
 8008840:	f7f8 f949 	bl	8000ad6 <assert_failed>

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3314      	adds	r3, #20
 8008848:	461a      	mov	r2, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	4413      	add	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	0801116c 	.word	0x0801116c

08008860 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008876:	d304      	bcc.n	8008882 <SDMMC_ConfigData+0x22>
 8008878:	f240 11cb 	movw	r1, #459	; 0x1cb
 800887c:	4846      	ldr	r0, [pc, #280]	; (8008998 <SDMMC_ConfigData+0x138>)
 800887e:	f7f8 f92a 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d03c      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b10      	cmp	r3, #16
 8008890:	d038      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b20      	cmp	r3, #32
 8008898:	d034      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	2b30      	cmp	r3, #48	; 0x30
 80088a0:	d030      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d02c      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b50      	cmp	r3, #80	; 0x50
 80088b0:	d028      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b60      	cmp	r3, #96	; 0x60
 80088b8:	d024      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b70      	cmp	r3, #112	; 0x70
 80088c0:	d020      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d01c      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	2b90      	cmp	r3, #144	; 0x90
 80088d0:	d018      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	2ba0      	cmp	r3, #160	; 0xa0
 80088d8:	d014      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2bb0      	cmp	r3, #176	; 0xb0
 80088e0:	d010      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	2bc0      	cmp	r3, #192	; 0xc0
 80088e8:	d00c      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	2bd0      	cmp	r3, #208	; 0xd0
 80088f0:	d008      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2be0      	cmp	r3, #224	; 0xe0
 80088f8:	d004      	beq.n	8008904 <SDMMC_ConfigData+0xa4>
 80088fa:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80088fe:	4826      	ldr	r0, [pc, #152]	; (8008998 <SDMMC_ConfigData+0x138>)
 8008900:	f7f8 f8e9 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d008      	beq.n	800891e <SDMMC_ConfigData+0xbe>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d004      	beq.n	800891e <SDMMC_ConfigData+0xbe>
 8008914:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008918:	481f      	ldr	r0, [pc, #124]	; (8008998 <SDMMC_ConfigData+0x138>)
 800891a:	f7f8 f8dc 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d008      	beq.n	8008938 <SDMMC_ConfigData+0xd8>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b04      	cmp	r3, #4
 800892c:	d004      	beq.n	8008938 <SDMMC_ConfigData+0xd8>
 800892e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8008932:	4819      	ldr	r0, [pc, #100]	; (8008998 <SDMMC_ConfigData+0x138>)
 8008934:	f7f8 f8cf 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <SDMMC_ConfigData+0xf2>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	2b01      	cmp	r3, #1
 8008946:	d004      	beq.n	8008952 <SDMMC_ConfigData+0xf2>
 8008948:	f240 11cf 	movw	r1, #463	; 0x1cf
 800894c:	4812      	ldr	r0, [pc, #72]	; (8008998 <SDMMC_ConfigData+0x138>)
 800894e:	f7f8 f8c2 	bl	8000ad6 <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800896a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008970:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008976:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800898e:	2300      	movs	r3, #0

}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	0801116c 	.word	0x0801116c

0800899c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80089aa:	2310      	movs	r3, #16
 80089ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089ae:	2340      	movs	r3, #64	; 0x40
 80089b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089bc:	f107 0308 	add.w	r3, r7, #8
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff feb4 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80089c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089cc:	2110      	movs	r1, #16
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa18 	bl	8008e04 <SDMMC_GetCmdResp1>
 80089d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089d6:	69fb      	ldr	r3, [r7, #28]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3720      	adds	r7, #32
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80089ee:	2311      	movs	r3, #17
 80089f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089f2:	2340      	movs	r3, #64	; 0x40
 80089f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a00:	f107 0308 	add.w	r3, r7, #8
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fe92 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a10:	2111      	movs	r1, #17
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9f6 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a1a:	69fb      	ldr	r3, [r7, #28]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3720      	adds	r7, #32
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008a32:	2312      	movs	r3, #18
 8008a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a36:	2340      	movs	r3, #64	; 0x40
 8008a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a44:	f107 0308 	add.w	r3, r7, #8
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7ff fe70 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a54:	2112      	movs	r1, #18
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9d4 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008a76:	2318      	movs	r3, #24
 8008a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a7a:	2340      	movs	r3, #64	; 0x40
 8008a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a88:	f107 0308 	add.w	r3, r7, #8
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fe4e 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a98:	2118      	movs	r1, #24
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9b2 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008aa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008aba:	2319      	movs	r3, #25
 8008abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008abe:	2340      	movs	r3, #64	; 0x40
 8008ac0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008acc:	f107 0308 	add.w	r3, r7, #8
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fe2c 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008adc:	2119      	movs	r1, #25
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f990 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3720      	adds	r7, #32
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b088      	sub	sp, #32
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008afc:	230c      	movs	r3, #12
 8008afe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b00:	2340      	movs	r3, #64	; 0x40
 8008b02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b0c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b0e:	f107 0308 	add.w	r3, r7, #8
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fe0b 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008b1a:	4a05      	ldr	r2, [pc, #20]	; (8008b30 <SDMMC_CmdStopTransfer+0x40>)
 8008b1c:	210c      	movs	r1, #12
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f970 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008b24:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008b26:	69fb      	ldr	r3, [r7, #28]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3720      	adds	r7, #32
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	05f5e100 	.word	0x05f5e100

08008b34 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	; 0x28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008b44:	2307      	movs	r3, #7
 8008b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b48:	2340      	movs	r3, #64	; 0x40
 8008b4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b54:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b56:	f107 0310 	add.w	r3, r7, #16
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fde7 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b66:	2107      	movs	r1, #7
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f94b 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008b6e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3728      	adds	r7, #40	; 0x28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b088      	sub	sp, #32
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b98:	f107 0308 	add.w	r3, r7, #8
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff fdc6 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fb65 	bl	8009274 <SDMMC_GetCmdError>
 8008baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bac:	69fb      	ldr	r3, [r7, #28]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b088      	sub	sp, #32
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008bbe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bc8:	2340      	movs	r3, #64	; 0x40
 8008bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008bd6:	f107 0308 	add.w	r3, r7, #8
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff fda7 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 faf8 	bl	80091d8 <SDMMC_GetCmdResp7>
 8008be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bea:	69fb      	ldr	r3, [r7, #28]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008c02:	2337      	movs	r3, #55	; 0x37
 8008c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c06:	2340      	movs	r3, #64	; 0x40
 8008c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c14:	f107 0308 	add.w	r3, r7, #8
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff fd88 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c24:	2137      	movs	r1, #55	; 0x37
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f8ec 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c4c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008c4e:	2329      	movs	r3, #41	; 0x29
 8008c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c52:	2340      	movs	r3, #64	; 0x40
 8008c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c60:	f107 0308 	add.w	r3, r7, #8
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fd62 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9ff 	bl	8009070 <SDMMC_GetCmdResp3>
 8008c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c74:	69fb      	ldr	r3, [r7, #28]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b088      	sub	sp, #32
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008c8c:	2306      	movs	r3, #6
 8008c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c90:	2340      	movs	r3, #64	; 0x40
 8008c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c9e:	f107 0308 	add.w	r3, r7, #8
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f7ff fd43 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cae:	2106      	movs	r1, #6
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f8a7 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3720      	adds	r7, #32
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b088      	sub	sp, #32
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008cce:	2333      	movs	r3, #51	; 0x33
 8008cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008cd2:	2340      	movs	r3, #64	; 0x40
 8008cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fd22 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf0:	2133      	movs	r1, #51	; 0x33
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f886 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008d10:	2302      	movs	r3, #2
 8008d12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d14:	23c0      	movs	r3, #192	; 0xc0
 8008d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d22:	f107 0308 	add.w	r3, r7, #8
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fd01 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f956 	bl	8008fe0 <SDMMC_GetCmdResp2>
 8008d34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d36:	69fb      	ldr	r3, [r7, #28]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008d4e:	2309      	movs	r3, #9
 8008d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008d52:	23c0      	movs	r3, #192	; 0xc0
 8008d54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d60:	f107 0308 	add.w	r3, r7, #8
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff fce2 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f937 	bl	8008fe0 <SDMMC_GetCmdResp2>
 8008d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d74:	69fb      	ldr	r3, [r7, #28]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3720      	adds	r7, #32
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b088      	sub	sp, #32
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d90:	2340      	movs	r3, #64	; 0x40
 8008d92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff fcc3 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008daa:	683a      	ldr	r2, [r7, #0]
 8008dac:	2103      	movs	r1, #3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f99c 	bl	80090ec <SDMMC_GetCmdResp6>
 8008db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008db6:	69fb      	ldr	r3, [r7, #28]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008dce:	230d      	movs	r3, #13
 8008dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dd2:	2340      	movs	r3, #64	; 0x40
 8008dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008de0:	f107 0308 	add.w	r3, r7, #8
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fca2 	bl	8008730 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df0:	210d      	movs	r1, #13
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f806 	bl	8008e04 <SDMMC_GetCmdResp1>
 8008df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dfa:	69fb      	ldr	r3, [r7, #28]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3720      	adds	r7, #32
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e12:	4b70      	ldr	r3, [pc, #448]	; (8008fd4 <SDMMC_GetCmdResp1+0x1d0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a70      	ldr	r2, [pc, #448]	; (8008fd8 <SDMMC_GetCmdResp1+0x1d4>)
 8008e18:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1c:	0a5a      	lsrs	r2, r3, #9
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	fb02 f303 	mul.w	r3, r2, r3
 8008e24:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	1e5a      	subs	r2, r3, #1
 8008e2a:	61fa      	str	r2, [r7, #28]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e34:	e0c9      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0ef      	beq.n	8008e26 <SDMMC_GetCmdResp1+0x22>
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1ea      	bne.n	8008e26 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d004      	beq.n	8008e66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e62:	2304      	movs	r3, #4
 8008e64:	e0b1      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d004      	beq.n	8008e7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0a6      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	22c5      	movs	r2, #197	; 0xc5
 8008e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7ff fcba 	bl	80087fc <SDMMC_GetCommandResponse>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d001      	beq.n	8008e96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e099      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008e96:	2100      	movs	r1, #0
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff fcbd 	bl	8008818 <SDMMC_GetResponse>
 8008e9e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	4b4e      	ldr	r3, [pc, #312]	; (8008fdc <SDMMC_GetCmdResp1+0x1d8>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e08d      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da02      	bge.n	8008eba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008eb8:	e087      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ec4:	2340      	movs	r3, #64	; 0x40
 8008ec6:	e080      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008ed2:	2380      	movs	r3, #128	; 0x80
 8008ed4:	e079      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee4:	e071      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ef4:	e069      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f04:	e061      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f14:	e059      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f24:	e051      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f34:	e049      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f44:	e041      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f54:	e039      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f64:	e031      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008f70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f74:	e029      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008f80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f84:	e021      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008f90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f94:	e019      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008fa4:	e011      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008fb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008fb4:	e009      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f003 0308 	and.w	r3, r3, #8
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008fc0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008fc4:	e001      	b.n	8008fca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000000 	.word	0x20000000
 8008fd8:	10624dd3 	.word	0x10624dd3
 8008fdc:	fdffe008 	.word	0xfdffe008

08008fe0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fe8:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <SDMMC_GetCmdResp2+0x88>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a1f      	ldr	r2, [pc, #124]	; (800906c <SDMMC_GetCmdResp2+0x8c>)
 8008fee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff2:	0a5b      	lsrs	r3, r3, #9
 8008ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff8:	fb02 f303 	mul.w	r3, r2, r3
 8008ffc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	1e5a      	subs	r2, r3, #1
 8009002:	60fa      	str	r2, [r7, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009008:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800900c:	e026      	b.n	800905c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0ef      	beq.n	8008ffe <SDMMC_GetCmdResp2+0x1e>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1ea      	bne.n	8008ffe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d004      	beq.n	800903e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2204      	movs	r2, #4
 8009038:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800903a:	2304      	movs	r3, #4
 800903c:	e00e      	b.n	800905c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009050:	2301      	movs	r3, #1
 8009052:	e003      	b.n	800905c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	22c5      	movs	r2, #197	; 0xc5
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20000000 	.word	0x20000000
 800906c:	10624dd3 	.word	0x10624dd3

08009070 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009078:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <SDMMC_GetCmdResp3+0x74>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a1a      	ldr	r2, [pc, #104]	; (80090e8 <SDMMC_GetCmdResp3+0x78>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	0a5b      	lsrs	r3, r3, #9
 8009084:	f241 3288 	movw	r2, #5000	; 0x1388
 8009088:	fb02 f303 	mul.w	r3, r2, r3
 800908c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	60fa      	str	r2, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d102      	bne.n	800909e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009098:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800909c:	e01b      	b.n	80090d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0ef      	beq.n	800908e <SDMMC_GetCmdResp3+0x1e>
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1ea      	bne.n	800908e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2204      	movs	r2, #4
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090ca:	2304      	movs	r3, #4
 80090cc:	e003      	b.n	80090d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	22c5      	movs	r2, #197	; 0xc5
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	20000000 	.word	0x20000000
 80090e8:	10624dd3 	.word	0x10624dd3

080090ec <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	460b      	mov	r3, r1
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090fa:	4b35      	ldr	r3, [pc, #212]	; (80091d0 <SDMMC_GetCmdResp6+0xe4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a35      	ldr	r2, [pc, #212]	; (80091d4 <SDMMC_GetCmdResp6+0xe8>)
 8009100:	fba2 2303 	umull	r2, r3, r2, r3
 8009104:	0a5b      	lsrs	r3, r3, #9
 8009106:	f241 3288 	movw	r2, #5000	; 0x1388
 800910a:	fb02 f303 	mul.w	r3, r2, r3
 800910e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	61fa      	str	r2, [r7, #28]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800911a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800911e:	e052      	b.n	80091c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0ef      	beq.n	8009110 <SDMMC_GetCmdResp6+0x24>
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1ea      	bne.n	8009110 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b00      	cmp	r3, #0
 8009144:	d004      	beq.n	8009150 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2204      	movs	r2, #4
 800914a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800914c:	2304      	movs	r3, #4
 800914e:	e03a      	b.n	80091c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009162:	2301      	movs	r3, #1
 8009164:	e02f      	b.n	80091c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f7ff fb48 	bl	80087fc <SDMMC_GetCommandResponse>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	7afb      	ldrb	r3, [r7, #11]
 8009172:	4293      	cmp	r3, r2
 8009174:	d001      	beq.n	800917a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009176:	2301      	movs	r3, #1
 8009178:	e025      	b.n	80091c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	22c5      	movs	r2, #197	; 0xc5
 800917e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009180:	2100      	movs	r1, #0
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff fb48 	bl	8008818 <SDMMC_GetResponse>
 8009188:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d106      	bne.n	80091a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	0c1b      	lsrs	r3, r3, #16
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800919e:	2300      	movs	r3, #0
 80091a0:	e011      	b.n	80091c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80091ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091b0:	e009      	b.n	80091c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80091bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091c0:	e001      	b.n	80091c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80091c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20000000 	.word	0x20000000
 80091d4:	10624dd3 	.word	0x10624dd3

080091d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091e0:	4b22      	ldr	r3, [pc, #136]	; (800926c <SDMMC_GetCmdResp7+0x94>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a22      	ldr	r2, [pc, #136]	; (8009270 <SDMMC_GetCmdResp7+0x98>)
 80091e6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ea:	0a5b      	lsrs	r3, r3, #9
 80091ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
 80091f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	1e5a      	subs	r2, r3, #1
 80091fa:	60fa      	str	r2, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009204:	e02c      	b.n	8009260 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0ef      	beq.n	80091f6 <SDMMC_GetCmdResp7+0x1e>
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1ea      	bne.n	80091f6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2204      	movs	r2, #4
 8009230:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009232:	2304      	movs	r3, #4
 8009234:	e014      	b.n	8009260 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009248:	2301      	movs	r3, #1
 800924a:	e009      	b.n	8009260 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2240      	movs	r2, #64	; 0x40
 800925c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800925e:	2300      	movs	r3, #0

}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	20000000 	.word	0x20000000
 8009270:	10624dd3 	.word	0x10624dd3

08009274 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800927c:	4b11      	ldr	r3, [pc, #68]	; (80092c4 <SDMMC_GetCmdError+0x50>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a11      	ldr	r2, [pc, #68]	; (80092c8 <SDMMC_GetCmdError+0x54>)
 8009282:	fba2 2303 	umull	r2, r3, r2, r3
 8009286:	0a5b      	lsrs	r3, r3, #9
 8009288:	f241 3288 	movw	r2, #5000	; 0x1388
 800928c:	fb02 f303 	mul.w	r3, r2, r3
 8009290:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1e5a      	subs	r2, r3, #1
 8009296:	60fa      	str	r2, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800929c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a0:	e009      	b.n	80092b6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0f1      	beq.n	8009292 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	22c5      	movs	r2, #197	; 0xc5
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000000 	.word	0x20000000
 80092c8:	10624dd3 	.word	0x10624dd3

080092cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <MX_FATFS_Init+0x18>)
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <MX_FATFS_Init+0x1c>)
 80092d4:	f002 fe7e 	bl	800bfd4 <FATFS_LinkDriver>
 80092d8:	4603      	mov	r3, r0
 80092da:	461a      	mov	r2, r3
 80092dc:	4b03      	ldr	r3, [pc, #12]	; (80092ec <MX_FATFS_Init+0x20>)
 80092de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80092e0:	bf00      	nop
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	200005fc 	.word	0x200005fc
 80092e8:	080112fc 	.word	0x080112fc
 80092ec:	200005f8 	.word	0x200005f8

080092f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80092f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <SD_DMAConfig>:
 *         only one channel for TX/RX, see MX_SDMMC1_SD_Init
 * @param  direction: Channel direction
 * @retval Status
 * ==================================================================== */
HAL_StatusTypeDef SD_DMAConfig( uint32_t direction )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]

  // Set transmit direction
  hdma_sdmmc1.Init.Direction = direction;
 8009308:	4a08      	ldr	r2, [pc, #32]	; (800932c <SD_DMAConfig+0x2c>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6093      	str	r3, [r2, #8]

  // Stop any DMA activity
  HAL_DMA_Abort( &hdma_sdmmc1 );
 800930e:	4807      	ldr	r0, [pc, #28]	; (800932c <SD_DMAConfig+0x2c>)
 8009310:	f7f8 fc32 	bl	8001b78 <HAL_DMA_Abort>

  // Deinit DMA
  HAL_DMA_DeInit( &hdma_sdmmc1 );
 8009314:	4805      	ldr	r0, [pc, #20]	; (800932c <SD_DMAConfig+0x2c>)
 8009316:	f7f8 fac7 	bl	80018a8 <HAL_DMA_DeInit>

  // Initialize DMA
  return HAL_DMA_Init( &hdma_sdmmc1 );
 800931a:	4804      	ldr	r0, [pc, #16]	; (800932c <SD_DMAConfig+0x2c>)
 800931c:	f7f8 f90c 	bl	8001538 <HAL_DMA_Init>
 8009320:	4603      	mov	r3, r0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	200003d4 	.word	0x200003d4

08009330 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA( uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_PERIPH_TO_MEMORY;
 8009340:	2300      	movs	r3, #0
 8009342:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to receive
  if ( hsd1.hdmarx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 8009344:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <BSP_SD_ReadBlocks_DMA+0x50>)
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	429a      	cmp	r2, r3
 800934e:	d004      	beq.n	800935a <BSP_SD_ReadBlocks_DMA+0x2a>
 8009350:	6938      	ldr	r0, [r7, #16]
 8009352:	f7ff ffd5 	bl	8009300 <SD_DMAConfig>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_ReadBlocks_DMA( &hsd1, (uint8_t *) pData, ReadAddr, NumOfBlocks ) != HAL_OK ) {
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d108      	bne.n	8009372 <BSP_SD_ReadBlocks_DMA+0x42>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	68f9      	ldr	r1, [r7, #12]
 8009366:	4806      	ldr	r0, [pc, #24]	; (8009380 <BSP_SD_ReadBlocks_DMA+0x50>)
 8009368:	f7fc f8dc 	bl	8005524 <HAL_SD_ReadBlocks_DMA>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <BSP_SD_ReadBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009376:	7dfb      	ldrb	r3, [r7, #23]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	20000350 	.word	0x20000350

08009384 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA( uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_MEMORY_TO_PERIPH;
 8009394:	2310      	movs	r3, #16
 8009396:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to transmit
  if ( hsd1.hdmatx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 8009398:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <BSP_SD_WriteBlocks_DMA+0x50>)
 800939a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d004      	beq.n	80093ae <BSP_SD_WriteBlocks_DMA+0x2a>
 80093a4:	6938      	ldr	r0, [r7, #16]
 80093a6:	f7ff ffab 	bl	8009300 <SD_DMAConfig>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_WriteBlocks_DMA( &hsd1, (uint8_t *) pData, WriteAddr, NumOfBlocks ) != HAL_OK ) {
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d108      	bne.n	80093c6 <BSP_SD_WriteBlocks_DMA+0x42>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	68f9      	ldr	r1, [r7, #12]
 80093ba:	4806      	ldr	r0, [pc, #24]	; (80093d4 <BSP_SD_WriteBlocks_DMA+0x50>)
 80093bc:	f7fc f97a 	bl	80056b4 <HAL_SD_WriteBlocks_DMA>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <BSP_SD_WriteBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20000350 	.word	0x20000350

080093d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80093e2:	f000 f862 	bl	80094aa <BSP_SD_IsDetected>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d001      	beq.n	80093f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80093ec:	2302      	movs	r3, #2
 80093ee:	e012      	b.n	8009416 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80093f0:	480b      	ldr	r0, [pc, #44]	; (8009420 <BSP_SD_Init+0x48>)
 80093f2:	f7fb ff5f 	bl	80052b4 <HAL_SD_Init>
 80093f6:	4603      	mov	r3, r0
 80093f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009404:	4806      	ldr	r0, [pc, #24]	; (8009420 <BSP_SD_Init+0x48>)
 8009406:	f7fc fd71 	bl	8005eec <HAL_SD_ConfigWideBusOperation>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009414:	79fb      	ldrb	r3, [r7, #7]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000350 	.word	0x20000350

08009424 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009428:	4805      	ldr	r0, [pc, #20]	; (8009440 <BSP_SD_GetCardState+0x1c>)
 800942a:	f7fc fe2d 	bl	8006088 <HAL_SD_GetCardState>
 800942e:	4603      	mov	r3, r0
 8009430:	2b04      	cmp	r3, #4
 8009432:	bf14      	ite	ne
 8009434:	2301      	movne	r3, #1
 8009436:	2300      	moveq	r3, #0
 8009438:	b2db      	uxtb	r3, r3
}
 800943a:	4618      	mov	r0, r3
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000350 	.word	0x20000350

08009444 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4803      	ldr	r0, [pc, #12]	; (800945c <BSP_SD_GetCardInfo+0x18>)
 8009450:	f7fc fd20 	bl	8005e94 <HAL_SD_GetCardInfo>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20000350 	.word	0x20000350

08009460 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009468:	f000 f818 	bl	800949c <BSP_SD_AbortCallback>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800947c:	f000 f9c4 	bl	8009808 <BSP_SD_WriteCpltCallback>
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009490:	f000 f9c8 	bl	8009824 <BSP_SD_ReadCpltCallback>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0

}
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80094b0:	2301      	movs	r3, #1
 80094b2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80094b4:	f000 f80c 	bl	80094d0 <BSP_PlatformIsDetected>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80094be:	2300      	movs	r3, #0
 80094c0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	b2db      	uxtb	r3, r3
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80094d6:	2301      	movs	r3, #1
 80094d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80094da:	2102      	movs	r1, #2
 80094dc:	4806      	ldr	r0, [pc, #24]	; (80094f8 <BSP_PlatformIsDetected+0x28>)
 80094de:	f7f8 ff27 	bl	8002330 <HAL_GPIO_ReadPin>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80094e8:	2300      	movs	r3, #0
 80094ea:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80094ec:	79fb      	ldrb	r3, [r7, #7]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	48000c00 	.word	0x48000c00

080094fc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8009504:	f002 fdfe 	bl	800c104 <osKernelSysTick>
 8009508:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800950a:	e006      	b.n	800951a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800950c:	f7ff ff8a 	bl	8009424 <BSP_SD_GetCardState>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009516:	2300      	movs	r3, #0
 8009518:	e009      	b.n	800952e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800951a:	f002 fdf3 	bl	800c104 <osKernelSysTick>
 800951e:	4602      	mov	r2, r0
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	429a      	cmp	r2, r3
 8009528:	d8f0      	bhi.n	800950c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800952a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009542:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <SD_CheckStatus+0x38>)
 8009544:	2201      	movs	r2, #1
 8009546:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009548:	f7ff ff6c 	bl	8009424 <BSP_SD_GetCardState>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d107      	bne.n	8009562 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009552:	4b07      	ldr	r3, [pc, #28]	; (8009570 <SD_CheckStatus+0x38>)
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f023 0301 	bic.w	r3, r3, #1
 800955c:	b2da      	uxtb	r2, r3
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <SD_CheckStatus+0x38>)
 8009560:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009562:	4b03      	ldr	r3, [pc, #12]	; (8009570 <SD_CheckStatus+0x38>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	b2db      	uxtb	r3, r3
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20000009 	.word	0x20000009

08009574 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009574:	b590      	push	{r4, r7, lr}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800957e:	4b20      	ldr	r3, [pc, #128]	; (8009600 <SD_initialize+0x8c>)
 8009580:	2201      	movs	r2, #1
 8009582:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8009584:	f002 fdb2 	bl	800c0ec <osKernelRunning>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d030      	beq.n	80095f0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800958e:	f7ff ff23 	bl	80093d8 <BSP_SD_Init>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d107      	bne.n	80095a8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff ffcc 	bl	8009538 <SD_CheckStatus>
 80095a0:	4603      	mov	r3, r0
 80095a2:	461a      	mov	r2, r3
 80095a4:	4b16      	ldr	r3, [pc, #88]	; (8009600 <SD_initialize+0x8c>)
 80095a6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80095a8:	4b15      	ldr	r3, [pc, #84]	; (8009600 <SD_initialize+0x8c>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d01e      	beq.n	80095f0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80095b2:	4b14      	ldr	r3, [pc, #80]	; (8009604 <SD_initialize+0x90>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10e      	bne.n	80095d8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80095ba:	4b13      	ldr	r3, [pc, #76]	; (8009608 <SD_initialize+0x94>)
 80095bc:	f107 0408 	add.w	r4, r7, #8
 80095c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80095c6:	f107 0308 	add.w	r3, r7, #8
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f002 fed2 	bl	800c376 <osMessageCreate>
 80095d2:	4603      	mov	r3, r0
 80095d4:	4a0b      	ldr	r2, [pc, #44]	; (8009604 <SD_initialize+0x90>)
 80095d6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <SD_initialize+0x90>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d107      	bne.n	80095f0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <SD_initialize+0x8c>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f043 0301 	orr.w	r3, r3, #1
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	4b04      	ldr	r3, [pc, #16]	; (8009600 <SD_initialize+0x8c>)
 80095ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80095f0:	4b03      	ldr	r3, [pc, #12]	; (8009600 <SD_initialize+0x8c>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	b2db      	uxtb	r3, r3
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd90      	pop	{r4, r7, pc}
 80095fe:	bf00      	nop
 8009600:	20000009 	.word	0x20000009
 8009604:	20000a64 	.word	0x20000a64
 8009608:	080111a8 	.word	0x080111a8

0800960c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff ff8d 	bl	8009538 <SD_CheckStatus>
 800961e:	4603      	mov	r3, r0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	607a      	str	r2, [r7, #4]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800963e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009642:	f7ff ff5b 	bl	80094fc <SD_CheckStatusWithTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	da02      	bge.n	8009652 <SD_read+0x2a>
  {
    return res;
 800964c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009650:	e032      	b.n	80096b8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	68b8      	ldr	r0, [r7, #8]
 8009658:	f7ff fe6a 	bl	8009330 <BSP_SD_ReadBlocks_DMA>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8009662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009666:	2b00      	cmp	r3, #0
 8009668:	d124      	bne.n	80096b4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800966a:	4b15      	ldr	r3, [pc, #84]	; (80096c0 <SD_read+0x98>)
 800966c:	6819      	ldr	r1, [r3, #0]
 800966e:	f107 0314 	add.w	r3, r7, #20
 8009672:	f247 5230 	movw	r2, #30000	; 0x7530
 8009676:	4618      	mov	r0, r3
 8009678:	f002 fee6 	bl	800c448 <osMessageGet>

    if (event.status == osEventMessage)
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2b10      	cmp	r3, #16
 8009680:	d118      	bne.n	80096b4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d115      	bne.n	80096b4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8009688:	f002 fd3c 	bl	800c104 <osKernelSysTick>
 800968c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800968e:	e008      	b.n	80096a2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009690:	f7ff fec8 	bl	8009424 <BSP_SD_GetCardState>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <SD_read+0x7a>
              {
                res = RES_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80096a0:	e008      	b.n	80096b4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80096a2:	f002 fd2f 	bl	800c104 <osKernelSysTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d9ed      	bls.n	8009690 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80096b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3728      	adds	r7, #40	; 0x28
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000a64 	.word	0x20000a64

080096c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08a      	sub	sp, #40	; 0x28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80096da:	f247 5030 	movw	r0, #30000	; 0x7530
 80096de:	f7ff ff0d 	bl	80094fc <SD_CheckStatusWithTimeout>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	da02      	bge.n	80096ee <SD_write+0x2a>
  {
    return res;
 80096e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ec:	e02e      	b.n	800974c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	68b8      	ldr	r0, [r7, #8]
 80096f4:	f7ff fe46 	bl	8009384 <BSP_SD_WriteBlocks_DMA>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d124      	bne.n	8009748 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80096fe:	4b15      	ldr	r3, [pc, #84]	; (8009754 <SD_write+0x90>)
 8009700:	6819      	ldr	r1, [r3, #0]
 8009702:	f107 0314 	add.w	r3, r7, #20
 8009706:	f247 5230 	movw	r2, #30000	; 0x7530
 800970a:	4618      	mov	r0, r3
 800970c:	f002 fe9c 	bl	800c448 <osMessageGet>

    if (event.status == osEventMessage)
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b10      	cmp	r3, #16
 8009714:	d118      	bne.n	8009748 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	2b02      	cmp	r3, #2
 800971a:	d115      	bne.n	8009748 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800971c:	f002 fcf2 	bl	800c104 <osKernelSysTick>
 8009720:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8009722:	e008      	b.n	8009736 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009724:	f7ff fe7e 	bl	8009424 <BSP_SD_GetCardState>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d103      	bne.n	8009736 <SD_write+0x72>
          {
            res = RES_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8009734:	e008      	b.n	8009748 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8009736:	f002 fce5 	bl	800c104 <osKernelSysTick>
 800973a:	4602      	mov	r2, r0
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	f247 522f 	movw	r2, #29999	; 0x752f
 8009744:	4293      	cmp	r3, r2
 8009746:	d9ed      	bls.n	8009724 <SD_write+0x60>
    }

  }
#endif

  return res;
 8009748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800974c:	4618      	mov	r0, r3
 800974e:	3728      	adds	r7, #40	; 0x28
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20000a64 	.word	0x20000a64

08009758 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08c      	sub	sp, #48	; 0x30
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	603a      	str	r2, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
 8009764:	460b      	mov	r3, r1
 8009766:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800976e:	4b25      	ldr	r3, [pc, #148]	; (8009804 <SD_ioctl+0xac>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <SD_ioctl+0x28>
 800977c:	2303      	movs	r3, #3
 800977e:	e03c      	b.n	80097fa <SD_ioctl+0xa2>

  switch (cmd)
 8009780:	79bb      	ldrb	r3, [r7, #6]
 8009782:	2b03      	cmp	r3, #3
 8009784:	d834      	bhi.n	80097f0 <SD_ioctl+0x98>
 8009786:	a201      	add	r2, pc, #4	; (adr r2, 800978c <SD_ioctl+0x34>)
 8009788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978c:	0800979d 	.word	0x0800979d
 8009790:	080097a5 	.word	0x080097a5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097d7 	.word	0x080097d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097a2:	e028      	b.n	80097f6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff fe4b 	bl	8009444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80097ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097ba:	e01c      	b.n	80097f6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80097bc:	f107 030c 	add.w	r3, r7, #12
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff fe3f 	bl	8009444 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80097c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097d4:	e00f      	b.n	80097f6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80097d6:	f107 030c 	add.w	r3, r7, #12
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fe32 	bl	8009444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	0a5a      	lsrs	r2, r3, #9
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097ee:	e002      	b.n	80097f6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80097f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3730      	adds	r7, #48	; 0x30
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20000009 	.word	0x20000009

08009808 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800980c:	4b04      	ldr	r3, [pc, #16]	; (8009820 <BSP_SD_WriteCpltCallback+0x18>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2200      	movs	r2, #0
 8009812:	2102      	movs	r1, #2
 8009814:	4618      	mov	r0, r3
 8009816:	f002 fdd7 	bl	800c3c8 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800981a:	bf00      	nop
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000a64 	.word	0x20000a64

08009824 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <BSP_SD_ReadCpltCallback+0x18>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2200      	movs	r2, #0
 800982e:	2101      	movs	r1, #1
 8009830:	4618      	mov	r0, r3
 8009832:	f002 fdc9 	bl	800c3c8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8009836:	bf00      	nop
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20000a64 	.word	0x20000a64

08009840 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	4603      	mov	r3, r0
 8009848:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	4a08      	ldr	r2, [pc, #32]	; (8009870 <disk_status+0x30>)
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	79fa      	ldrb	r2, [r7, #7]
 8009858:	4905      	ldr	r1, [pc, #20]	; (8009870 <disk_status+0x30>)
 800985a:	440a      	add	r2, r1
 800985c:	7a12      	ldrb	r2, [r2, #8]
 800985e:	4610      	mov	r0, r2
 8009860:	4798      	blx	r3
 8009862:	4603      	mov	r3, r0
 8009864:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20000a90 	.word	0x20000a90

08009874 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	4603      	mov	r3, r0
 800987c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	4a0d      	ldr	r2, [pc, #52]	; (80098bc <disk_initialize+0x48>)
 8009886:	5cd3      	ldrb	r3, [r2, r3]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d111      	bne.n	80098b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	4a0b      	ldr	r2, [pc, #44]	; (80098bc <disk_initialize+0x48>)
 8009890:	2101      	movs	r1, #1
 8009892:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009894:	79fb      	ldrb	r3, [r7, #7]
 8009896:	4a09      	ldr	r2, [pc, #36]	; (80098bc <disk_initialize+0x48>)
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	79fa      	ldrb	r2, [r7, #7]
 80098a2:	4906      	ldr	r1, [pc, #24]	; (80098bc <disk_initialize+0x48>)
 80098a4:	440a      	add	r2, r1
 80098a6:	7a12      	ldrb	r2, [r2, #8]
 80098a8:	4610      	mov	r0, r2
 80098aa:	4798      	blx	r3
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000a90 	.word	0x20000a90

080098c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	607a      	str	r2, [r7, #4]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	4a0a      	ldr	r2, [pc, #40]	; (80098fc <disk_read+0x3c>)
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	689c      	ldr	r4, [r3, #8]
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	4a07      	ldr	r2, [pc, #28]	; (80098fc <disk_read+0x3c>)
 80098e0:	4413      	add	r3, r2
 80098e2:	7a18      	ldrb	r0, [r3, #8]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	68b9      	ldr	r1, [r7, #8]
 80098ea:	47a0      	blx	r4
 80098ec:	4603      	mov	r3, r0
 80098ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	371c      	adds	r7, #28
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd90      	pop	{r4, r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000a90 	.word	0x20000a90

08009900 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	4a0a      	ldr	r2, [pc, #40]	; (800993c <disk_write+0x3c>)
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	68dc      	ldr	r4, [r3, #12]
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	4a07      	ldr	r2, [pc, #28]	; (800993c <disk_write+0x3c>)
 8009920:	4413      	add	r3, r2
 8009922:	7a18      	ldrb	r0, [r3, #8]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	47a0      	blx	r4
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
}
 8009932:	4618      	mov	r0, r3
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	bd90      	pop	{r4, r7, pc}
 800993a:	bf00      	nop
 800993c:	20000a90 	.word	0x20000a90

08009940 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	603a      	str	r2, [r7, #0]
 800994a:	71fb      	strb	r3, [r7, #7]
 800994c:	460b      	mov	r3, r1
 800994e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	4a09      	ldr	r2, [pc, #36]	; (8009978 <disk_ioctl+0x38>)
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	79fa      	ldrb	r2, [r7, #7]
 800995e:	4906      	ldr	r1, [pc, #24]	; (8009978 <disk_ioctl+0x38>)
 8009960:	440a      	add	r2, r1
 8009962:	7a10      	ldrb	r0, [r2, #8]
 8009964:	79b9      	ldrb	r1, [r7, #6]
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	4798      	blx	r3
 800996a:	4603      	mov	r3, r0
 800996c:	73fb      	strb	r3, [r7, #15]
  return res;
 800996e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	20000a90 	.word	0x20000a90

0800997c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3301      	adds	r3, #1
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800998c:	89fb      	ldrh	r3, [r7, #14]
 800998e:	021b      	lsls	r3, r3, #8
 8009990:	b21a      	sxth	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	b21b      	sxth	r3, r3
 8009998:	4313      	orrs	r3, r2
 800999a:	b21b      	sxth	r3, r3
 800999c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800999e:	89fb      	ldrh	r3, [r7, #14]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3714      	adds	r7, #20
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3303      	adds	r3, #3
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	3202      	adds	r2, #2
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	021b      	lsls	r3, r3, #8
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	3201      	adds	r2, #1
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	021b      	lsls	r3, r3, #8
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7812      	ldrb	r2, [r2, #0]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]
	return rv;
 80099e4:	68fb      	ldr	r3, [r7, #12]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80099f2:	b480      	push	{r7}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	887a      	ldrh	r2, [r7, #2]
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	887b      	ldrh	r3, [r7, #2]
 8009a0c:	0a1b      	lsrs	r3, r3, #8
 8009a0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	887a      	ldrh	r2, [r7, #2]
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	701a      	strb	r2, [r3, #0]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	0a1b      	lsrs	r3, r3, #8
 8009a42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	701a      	strb	r2, [r3, #0]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	0a1b      	lsrs	r3, r3, #8
 8009a54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	0a1b      	lsrs	r3, r3, #8
 8009a66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	701a      	strb	r2, [r3, #0]
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00d      	beq.n	8009ab6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	1c53      	adds	r3, r2, #1
 8009a9e:	613b      	str	r3, [r7, #16]
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	1c59      	adds	r1, r3, #1
 8009aa4:	6179      	str	r1, [r7, #20]
 8009aa6:	7812      	ldrb	r2, [r2, #0]
 8009aa8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1f1      	bne.n	8009a9a <mem_cpy+0x1a>
	}
}
 8009ab6:	bf00      	nop
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009ac2:	b480      	push	{r7}
 8009ac4:	b087      	sub	sp, #28
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	617a      	str	r2, [r7, #20]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	b2d2      	uxtb	r2, r2
 8009adc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	607b      	str	r3, [r7, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f3      	bne.n	8009ad2 <mem_set+0x10>
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009af8:	b480      	push	{r7}
 8009afa:	b089      	sub	sp, #36	; 0x24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	61fb      	str	r3, [r7, #28]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	61fa      	str	r2, [r7, #28]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	61ba      	str	r2, [r7, #24]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	1acb      	subs	r3, r1, r3
 8009b24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	607b      	str	r3, [r7, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <mem_cmp+0x40>
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d0eb      	beq.n	8009b10 <mem_cmp+0x18>

	return r;
 8009b38:	697b      	ldr	r3, [r7, #20]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3724      	adds	r7, #36	; 0x24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b50:	e002      	b.n	8009b58 <chk_chr+0x12>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3301      	adds	r3, #1
 8009b56:	607b      	str	r3, [r7, #4]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <chk_chr+0x26>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d1f2      	bne.n	8009b52 <chk_chr+0xc>
	return *str;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <lock_fs+0x22>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f002 fa5b 	bl	800c04a <ff_req_grant>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <lock_fs+0x22>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <lock_fs+0x24>
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <unlock_fs+0x2e>
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	2b0c      	cmp	r3, #12
 8009bbe:	d00a      	beq.n	8009bd6 <unlock_fs+0x2e>
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	2b0b      	cmp	r3, #11
 8009bc4:	d007      	beq.n	8009bd6 <unlock_fs+0x2e>
 8009bc6:	78fb      	ldrb	r3, [r7, #3]
 8009bc8:	2b0f      	cmp	r3, #15
 8009bca:	d004      	beq.n	8009bd6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f002 fa4f 	bl	800c074 <ff_rel_grant>
	}
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bea:	2300      	movs	r3, #0
 8009bec:	60bb      	str	r3, [r7, #8]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	e029      	b.n	8009c48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009bf4:	4a27      	ldr	r2, [pc, #156]	; (8009c94 <chk_lock+0xb4>)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	011b      	lsls	r3, r3, #4
 8009bfa:	4413      	add	r3, r2
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d01d      	beq.n	8009c3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c02:	4a24      	ldr	r2, [pc, #144]	; (8009c94 <chk_lock+0xb4>)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4413      	add	r3, r2
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d116      	bne.n	8009c42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c14:	4a1f      	ldr	r2, [pc, #124]	; (8009c94 <chk_lock+0xb4>)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	011b      	lsls	r3, r3, #4
 8009c1a:	4413      	add	r3, r2
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d10c      	bne.n	8009c42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c28:	4a1a      	ldr	r2, [pc, #104]	; (8009c94 <chk_lock+0xb4>)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	4413      	add	r3, r2
 8009c30:	3308      	adds	r3, #8
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d102      	bne.n	8009c42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c3c:	e007      	b.n	8009c4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3301      	adds	r3, #1
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d9d2      	bls.n	8009bf4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d109      	bne.n	8009c68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <chk_lock+0x80>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d101      	bne.n	8009c64 <chk_lock+0x84>
 8009c60:	2300      	movs	r3, #0
 8009c62:	e010      	b.n	8009c86 <chk_lock+0xa6>
 8009c64:	2312      	movs	r3, #18
 8009c66:	e00e      	b.n	8009c86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d108      	bne.n	8009c80 <chk_lock+0xa0>
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <chk_lock+0xb4>)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	4413      	add	r3, r2
 8009c76:	330c      	adds	r3, #12
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c7e:	d101      	bne.n	8009c84 <chk_lock+0xa4>
 8009c80:	2310      	movs	r3, #16
 8009c82:	e000      	b.n	8009c86 <chk_lock+0xa6>
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20000a70 	.word	0x20000a70

08009c98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	e002      	b.n	8009caa <enq_lock+0x12>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d806      	bhi.n	8009cbe <enq_lock+0x26>
 8009cb0:	4a09      	ldr	r2, [pc, #36]	; (8009cd8 <enq_lock+0x40>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	4413      	add	r3, r2
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f2      	bne.n	8009ca4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	bf14      	ite	ne
 8009cc4:	2301      	movne	r3, #1
 8009cc6:	2300      	moveq	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	20000a70 	.word	0x20000a70

08009cdc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e01f      	b.n	8009d2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009cec:	4a41      	ldr	r2, [pc, #260]	; (8009df4 <inc_lock+0x118>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	4413      	add	r3, r2
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d113      	bne.n	8009d26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009cfe:	4a3d      	ldr	r2, [pc, #244]	; (8009df4 <inc_lock+0x118>)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	011b      	lsls	r3, r3, #4
 8009d04:	4413      	add	r3, r2
 8009d06:	3304      	adds	r3, #4
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d109      	bne.n	8009d26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d12:	4a38      	ldr	r2, [pc, #224]	; (8009df4 <inc_lock+0x118>)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	4413      	add	r3, r2
 8009d1a:	3308      	adds	r3, #8
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d006      	beq.n	8009d34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d9dc      	bls.n	8009cec <inc_lock+0x10>
 8009d32:	e000      	b.n	8009d36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d132      	bne.n	8009da2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	e002      	b.n	8009d48 <inc_lock+0x6c>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3301      	adds	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d806      	bhi.n	8009d5c <inc_lock+0x80>
 8009d4e:	4a29      	ldr	r2, [pc, #164]	; (8009df4 <inc_lock+0x118>)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	011b      	lsls	r3, r3, #4
 8009d54:	4413      	add	r3, r2
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f2      	bne.n	8009d42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d101      	bne.n	8009d66 <inc_lock+0x8a>
 8009d62:	2300      	movs	r3, #0
 8009d64:	e040      	b.n	8009de8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4922      	ldr	r1, [pc, #136]	; (8009df4 <inc_lock+0x118>)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	440b      	add	r3, r1
 8009d72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	491e      	ldr	r1, [pc, #120]	; (8009df4 <inc_lock+0x118>)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	011b      	lsls	r3, r3, #4
 8009d7e:	440b      	add	r3, r1
 8009d80:	3304      	adds	r3, #4
 8009d82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695a      	ldr	r2, [r3, #20]
 8009d88:	491a      	ldr	r1, [pc, #104]	; (8009df4 <inc_lock+0x118>)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	011b      	lsls	r3, r3, #4
 8009d8e:	440b      	add	r3, r1
 8009d90:	3308      	adds	r3, #8
 8009d92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d94:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <inc_lock+0x118>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	4413      	add	r3, r2
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	2200      	movs	r2, #0
 8009da0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d009      	beq.n	8009dbc <inc_lock+0xe0>
 8009da8:	4a12      	ldr	r2, [pc, #72]	; (8009df4 <inc_lock+0x118>)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	011b      	lsls	r3, r3, #4
 8009dae:	4413      	add	r3, r2
 8009db0:	330c      	adds	r3, #12
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <inc_lock+0xe0>
 8009db8:	2300      	movs	r3, #0
 8009dba:	e015      	b.n	8009de8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d108      	bne.n	8009dd4 <inc_lock+0xf8>
 8009dc2:	4a0c      	ldr	r2, [pc, #48]	; (8009df4 <inc_lock+0x118>)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	4413      	add	r3, r2
 8009dca:	330c      	adds	r3, #12
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	e001      	b.n	8009dd8 <inc_lock+0xfc>
 8009dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dd8:	4906      	ldr	r1, [pc, #24]	; (8009df4 <inc_lock+0x118>)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	440b      	add	r3, r1
 8009de0:	330c      	adds	r3, #12
 8009de2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3301      	adds	r3, #1
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	20000a70 	.word	0x20000a70

08009df8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3b01      	subs	r3, #1
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d825      	bhi.n	8009e58 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e0c:	4a17      	ldr	r2, [pc, #92]	; (8009e6c <dec_lock+0x74>)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	4413      	add	r3, r2
 8009e14:	330c      	adds	r3, #12
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e1a:	89fb      	ldrh	r3, [r7, #14]
 8009e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e20:	d101      	bne.n	8009e26 <dec_lock+0x2e>
 8009e22:	2300      	movs	r3, #0
 8009e24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e26:	89fb      	ldrh	r3, [r7, #14]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <dec_lock+0x3a>
 8009e2c:	89fb      	ldrh	r3, [r7, #14]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e32:	4a0e      	ldr	r2, [pc, #56]	; (8009e6c <dec_lock+0x74>)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	4413      	add	r3, r2
 8009e3a:	330c      	adds	r3, #12
 8009e3c:	89fa      	ldrh	r2, [r7, #14]
 8009e3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e40:	89fb      	ldrh	r3, [r7, #14]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d105      	bne.n	8009e52 <dec_lock+0x5a>
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <dec_lock+0x74>)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	737b      	strb	r3, [r7, #13]
 8009e56:	e001      	b.n	8009e5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e58:	2302      	movs	r3, #2
 8009e5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009e5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000a70 	.word	0x20000a70

08009e70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	e010      	b.n	8009ea0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e7e:	4a0d      	ldr	r2, [pc, #52]	; (8009eb4 <clear_lock+0x44>)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	4413      	add	r3, r2
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d105      	bne.n	8009e9a <clear_lock+0x2a>
 8009e8e:	4a09      	ldr	r2, [pc, #36]	; (8009eb4 <clear_lock+0x44>)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	4413      	add	r3, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d9eb      	bls.n	8009e7e <clear_lock+0xe>
	}
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20000a70 	.word	0x20000a70

08009eb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	78db      	ldrb	r3, [r3, #3]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d034      	beq.n	8009f36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7858      	ldrb	r0, [r3, #1]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009edc:	2301      	movs	r3, #1
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	f7ff fd0e 	bl	8009900 <disk_write>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
 8009eee:	e022      	b.n	8009f36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	1ad2      	subs	r2, r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d217      	bcs.n	8009f36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	789b      	ldrb	r3, [r3, #2]
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	e010      	b.n	8009f30 <sync_window+0x78>
					wsect += fs->fsize;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	69db      	ldr	r3, [r3, #28]
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	4413      	add	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	7858      	ldrb	r0, [r3, #1]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f22:	2301      	movs	r3, #1
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	f7ff fceb 	bl	8009900 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	3b01      	subs	r3, #1
 8009f2e:	613b      	str	r3, [r7, #16]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d8eb      	bhi.n	8009f0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d01b      	beq.n	8009f90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff ffad 	bl	8009eb8 <sync_window>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d113      	bne.n	8009f90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	7858      	ldrb	r0, [r3, #1]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009f72:	2301      	movs	r3, #1
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	f7ff fca3 	bl	80098c0 <disk_read>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f80:	f04f 33ff 	mov.w	r3, #4294967295
 8009f84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff ff87 	bl	8009eb8 <sync_window>
 8009faa:	4603      	mov	r3, r0
 8009fac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d158      	bne.n	800a066 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d148      	bne.n	800a04e <sync_fs+0xb2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	791b      	ldrb	r3, [r3, #4]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d144      	bne.n	800a04e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3334      	adds	r3, #52	; 0x34
 8009fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff fd77 	bl	8009ac2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3334      	adds	r3, #52	; 0x34
 8009fd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fdc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff fd06 	bl	80099f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	3334      	adds	r3, #52	; 0x34
 8009fea:	4921      	ldr	r1, [pc, #132]	; (800a070 <sync_fs+0xd4>)
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff fd1b 	bl	8009a28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3334      	adds	r3, #52	; 0x34
 8009ff6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009ffa:	491e      	ldr	r1, [pc, #120]	; (800a074 <sync_fs+0xd8>)
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff fd13 	bl	8009a28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3334      	adds	r3, #52	; 0x34
 800a006:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7ff fd09 	bl	8009a28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3334      	adds	r3, #52	; 0x34
 800a01a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	4619      	mov	r1, r3
 800a024:	4610      	mov	r0, r2
 800a026:	f7ff fcff 	bl	8009a28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7858      	ldrb	r0, [r3, #1]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a042:	2301      	movs	r3, #1
 800a044:	f7ff fc5c 	bl	8009900 <disk_write>
			fs->fsi_flag = 0;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	785b      	ldrb	r3, [r3, #1]
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff fc72 	bl	8009940 <disk_ioctl>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <sync_fs+0xca>
 800a062:	2301      	movs	r3, #1
 800a064:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a066:	7bfb      	ldrb	r3, [r7, #15]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	41615252 	.word	0x41615252
 800a074:	61417272 	.word	0x61417272

0800a078 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	3b02      	subs	r3, #2
 800a086:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	3b02      	subs	r3, #2
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d301      	bcc.n	800a098 <clust2sect+0x20>
 800a094:	2300      	movs	r3, #0
 800a096:	e008      	b.n	800a0aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	895b      	ldrh	r3, [r3, #10]
 800a09c:	461a      	mov	r2, r3
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	fb03 f202 	mul.w	r2, r3, r2
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	4413      	add	r3, r2
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b086      	sub	sp, #24
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d904      	bls.n	800a0d6 <get_fat+0x20>
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d302      	bcc.n	800a0dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	617b      	str	r3, [r7, #20]
 800a0da:	e08f      	b.n	800a1fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d062      	beq.n	800a1b0 <get_fat+0xfa>
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	dc7c      	bgt.n	800a1e8 <get_fat+0x132>
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d002      	beq.n	800a0f8 <get_fat+0x42>
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d042      	beq.n	800a17c <get_fat+0xc6>
 800a0f6:	e077      	b.n	800a1e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	085b      	lsrs	r3, r3, #1
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4413      	add	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	0a5b      	lsrs	r3, r3, #9
 800a10e:	4413      	add	r3, r2
 800a110:	4619      	mov	r1, r3
 800a112:	6938      	ldr	r0, [r7, #16]
 800a114:	f7ff ff14 	bl	8009f40 <move_window>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d167      	bne.n	800a1ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	60fa      	str	r2, [r7, #12]
 800a124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4413      	add	r3, r2
 800a12c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a130:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	0a5b      	lsrs	r3, r3, #9
 800a13a:	4413      	add	r3, r2
 800a13c:	4619      	mov	r1, r3
 800a13e:	6938      	ldr	r0, [r7, #16]
 800a140:	f7ff fefe 	bl	8009f40 <move_window>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d153      	bne.n	800a1f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4413      	add	r3, r2
 800a154:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	461a      	mov	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <get_fat+0xbc>
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	091b      	lsrs	r3, r3, #4
 800a170:	e002      	b.n	800a178 <get_fat+0xc2>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a178:	617b      	str	r3, [r7, #20]
			break;
 800a17a:	e03f      	b.n	800a1fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	4413      	add	r3, r2
 800a186:	4619      	mov	r1, r3
 800a188:	6938      	ldr	r0, [r7, #16]
 800a18a:	f7ff fed9 	bl	8009f40 <move_window>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d130      	bne.n	800a1f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a1a2:	4413      	add	r3, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff fbe9 	bl	800997c <ld_word>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	617b      	str	r3, [r7, #20]
			break;
 800a1ae:	e025      	b.n	800a1fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	09db      	lsrs	r3, r3, #7
 800a1b8:	4413      	add	r3, r2
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6938      	ldr	r0, [r7, #16]
 800a1be:	f7ff febf 	bl	8009f40 <move_window>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d118      	bne.n	800a1fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a1d6:	4413      	add	r3, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff fbe7 	bl	80099ac <ld_dword>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a1e4:	617b      	str	r3, [r7, #20]
			break;
 800a1e6:	e009      	b.n	800a1fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e006      	b.n	800a1fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1ee:	bf00      	nop
 800a1f0:	e004      	b.n	800a1fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1f2:	bf00      	nop
 800a1f4:	e002      	b.n	800a1fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1f6:	bf00      	nop
 800a1f8:	e000      	b.n	800a1fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a1fa:	bf00      	nop
		}
	}

	return val;
 800a1fc:	697b      	ldr	r3, [r7, #20]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a206:	b590      	push	{r4, r7, lr}
 800a208:	b089      	sub	sp, #36	; 0x24
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a212:	2302      	movs	r3, #2
 800a214:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	f240 80d2 	bls.w	800a3c2 <put_fat+0x1bc>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	429a      	cmp	r2, r3
 800a226:	f080 80cc 	bcs.w	800a3c2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b03      	cmp	r3, #3
 800a230:	f000 8096 	beq.w	800a360 <put_fat+0x15a>
 800a234:	2b03      	cmp	r3, #3
 800a236:	f300 80cd 	bgt.w	800a3d4 <put_fat+0x1ce>
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d002      	beq.n	800a244 <put_fat+0x3e>
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d06e      	beq.n	800a320 <put_fat+0x11a>
 800a242:	e0c7      	b.n	800a3d4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	61bb      	str	r3, [r7, #24]
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	085b      	lsrs	r3, r3, #1
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	4413      	add	r3, r2
 800a250:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	0a5b      	lsrs	r3, r3, #9
 800a25a:	4413      	add	r3, r2
 800a25c:	4619      	mov	r1, r3
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff fe6e 	bl	8009f40 <move_window>
 800a264:	4603      	mov	r3, r0
 800a266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a268:	7ffb      	ldrb	r3, [r7, #31]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f040 80ab 	bne.w	800a3c6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	1c59      	adds	r1, r3, #1
 800a27a:	61b9      	str	r1, [r7, #24]
 800a27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a280:	4413      	add	r3, r2
 800a282:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00d      	beq.n	800a2aa <put_fat+0xa4>
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b25b      	sxtb	r3, r3
 800a294:	f003 030f 	and.w	r3, r3, #15
 800a298:	b25a      	sxtb	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	b25b      	sxtb	r3, r3
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	b25b      	sxtb	r3, r3
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	e001      	b.n	800a2ae <put_fat+0xa8>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	0a5b      	lsrs	r3, r3, #9
 800a2c0:	4413      	add	r3, r2
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f7ff fe3b 	bl	8009f40 <move_window>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2ce:	7ffb      	ldrb	r3, [r7, #31]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d17a      	bne.n	800a3ca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e0:	4413      	add	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d003      	beq.n	800a2f6 <put_fat+0xf0>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	091b      	lsrs	r3, r3, #4
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	e00e      	b.n	800a314 <put_fat+0x10e>
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b25b      	sxtb	r3, r3
 800a2fc:	f023 030f 	bic.w	r3, r3, #15
 800a300:	b25a      	sxtb	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	0a1b      	lsrs	r3, r3, #8
 800a306:	b25b      	sxtb	r3, r3
 800a308:	f003 030f 	and.w	r3, r3, #15
 800a30c:	b25b      	sxtb	r3, r3
 800a30e:	4313      	orrs	r3, r2
 800a310:	b25b      	sxtb	r3, r3
 800a312:	b2db      	uxtb	r3, r3
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2201      	movs	r2, #1
 800a31c:	70da      	strb	r2, [r3, #3]
			break;
 800a31e:	e059      	b.n	800a3d4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	0a1b      	lsrs	r3, r3, #8
 800a328:	4413      	add	r3, r2
 800a32a:	4619      	mov	r1, r3
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f7ff fe07 	bl	8009f40 <move_window>
 800a332:	4603      	mov	r3, r0
 800a334:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a336:	7ffb      	ldrb	r3, [r7, #31]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d148      	bne.n	800a3ce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a34a:	4413      	add	r3, r2
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	b292      	uxth	r2, r2
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff fb4d 	bl	80099f2 <st_word>
			fs->wflag = 1;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2201      	movs	r2, #1
 800a35c:	70da      	strb	r2, [r3, #3]
			break;
 800a35e:	e039      	b.n	800a3d4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	09db      	lsrs	r3, r3, #7
 800a368:	4413      	add	r3, r2
 800a36a:	4619      	mov	r1, r3
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7ff fde7 	bl	8009f40 <move_window>
 800a372:	4603      	mov	r3, r0
 800a374:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a376:	7ffb      	ldrb	r3, [r7, #31]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d12a      	bne.n	800a3d2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a390:	4413      	add	r3, r2
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff fb0a 	bl	80099ac <ld_dword>
 800a398:	4603      	mov	r3, r0
 800a39a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a39e:	4323      	orrs	r3, r4
 800a3a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3b0:	4413      	add	r3, r2
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff fb37 	bl	8009a28 <st_dword>
			fs->wflag = 1;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	70da      	strb	r2, [r3, #3]
			break;
 800a3c0:	e008      	b.n	800a3d4 <put_fat+0x1ce>
		}
	}
 800a3c2:	bf00      	nop
 800a3c4:	e006      	b.n	800a3d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3c6:	bf00      	nop
 800a3c8:	e004      	b.n	800a3d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3ca:	bf00      	nop
 800a3cc:	e002      	b.n	800a3d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3ce:	bf00      	nop
 800a3d0:	e000      	b.n	800a3d4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a3d2:	bf00      	nop
	return res;
 800a3d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3724      	adds	r7, #36	; 0x24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd90      	pop	{r4, r7, pc}

0800a3de <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b088      	sub	sp, #32
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d904      	bls.n	800a404 <remove_chain+0x26>
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	429a      	cmp	r2, r3
 800a402:	d301      	bcc.n	800a408 <remove_chain+0x2a>
 800a404:	2302      	movs	r3, #2
 800a406:	e04b      	b.n	800a4a0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00c      	beq.n	800a428 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a40e:	f04f 32ff 	mov.w	r2, #4294967295
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	69b8      	ldr	r0, [r7, #24]
 800a416:	f7ff fef6 	bl	800a206 <put_fat>
 800a41a:	4603      	mov	r3, r0
 800a41c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <remove_chain+0x4a>
 800a424:	7ffb      	ldrb	r3, [r7, #31]
 800a426:	e03b      	b.n	800a4a0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a428:	68b9      	ldr	r1, [r7, #8]
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fe43 	bl	800a0b6 <get_fat>
 800a430:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d031      	beq.n	800a49c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <remove_chain+0x64>
 800a43e:	2302      	movs	r3, #2
 800a440:	e02e      	b.n	800a4a0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d101      	bne.n	800a44e <remove_chain+0x70>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e028      	b.n	800a4a0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a44e:	2200      	movs	r2, #0
 800a450:	68b9      	ldr	r1, [r7, #8]
 800a452:	69b8      	ldr	r0, [r7, #24]
 800a454:	f7ff fed7 	bl	800a206 <put_fat>
 800a458:	4603      	mov	r3, r0
 800a45a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a45c:	7ffb      	ldrb	r3, [r7, #31]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <remove_chain+0x88>
 800a462:	7ffb      	ldrb	r3, [r7, #31]
 800a464:	e01c      	b.n	800a4a0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	695a      	ldr	r2, [r3, #20]
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	3b02      	subs	r3, #2
 800a470:	429a      	cmp	r2, r3
 800a472:	d20b      	bcs.n	800a48c <remove_chain+0xae>
			fs->free_clst++;
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	791b      	ldrb	r3, [r3, #4]
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	b2da      	uxtb	r2, r3
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	429a      	cmp	r2, r3
 800a498:	d3c6      	bcc.n	800a428 <remove_chain+0x4a>
 800a49a:	e000      	b.n	800a49e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a49c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3720      	adds	r7, #32
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10d      	bne.n	800a4da <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d004      	beq.n	800a4d4 <create_chain+0x2c>
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d31b      	bcc.n	800a50c <create_chain+0x64>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	61bb      	str	r3, [r7, #24]
 800a4d8:	e018      	b.n	800a50c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a4da:	6839      	ldr	r1, [r7, #0]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff fdea 	bl	800a0b6 <get_fat>
 800a4e2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d801      	bhi.n	800a4ee <create_chain+0x46>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e070      	b.n	800a5d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f4:	d101      	bne.n	800a4fa <create_chain+0x52>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	e06a      	b.n	800a5d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	429a      	cmp	r2, r3
 800a502:	d201      	bcs.n	800a508 <create_chain+0x60>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	e063      	b.n	800a5d0 <create_chain+0x128>
		scl = clst;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	3301      	adds	r3, #1
 800a514:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	69fa      	ldr	r2, [r7, #28]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d307      	bcc.n	800a530 <create_chain+0x88>
				ncl = 2;
 800a520:	2302      	movs	r3, #2
 800a522:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a524:	69fa      	ldr	r2, [r7, #28]
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d901      	bls.n	800a530 <create_chain+0x88>
 800a52c:	2300      	movs	r3, #0
 800a52e:	e04f      	b.n	800a5d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a530:	69f9      	ldr	r1, [r7, #28]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff fdbf 	bl	800a0b6 <get_fat>
 800a538:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00e      	beq.n	800a55e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d003      	beq.n	800a54e <create_chain+0xa6>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54c:	d101      	bne.n	800a552 <create_chain+0xaa>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	e03e      	b.n	800a5d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a552:	69fa      	ldr	r2, [r7, #28]
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	429a      	cmp	r2, r3
 800a558:	d1da      	bne.n	800a510 <create_chain+0x68>
 800a55a:	2300      	movs	r3, #0
 800a55c:	e038      	b.n	800a5d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a55e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a560:	f04f 32ff 	mov.w	r2, #4294967295
 800a564:	69f9      	ldr	r1, [r7, #28]
 800a566:	6938      	ldr	r0, [r7, #16]
 800a568:	f7ff fe4d 	bl	800a206 <put_fat>
 800a56c:	4603      	mov	r3, r0
 800a56e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a570:	7dfb      	ldrb	r3, [r7, #23]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d109      	bne.n	800a58a <create_chain+0xe2>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d006      	beq.n	800a58a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6938      	ldr	r0, [r7, #16]
 800a582:	f7ff fe40 	bl	800a206 <put_fat>
 800a586:	4603      	mov	r3, r0
 800a588:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d116      	bne.n	800a5be <create_chain+0x116>
		fs->last_clst = ncl;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	695a      	ldr	r2, [r3, #20]
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	3b02      	subs	r3, #2
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d804      	bhi.n	800a5ae <create_chain+0x106>
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	1e5a      	subs	r2, r3, #1
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	791b      	ldrb	r3, [r3, #4]
 800a5b2:	f043 0301 	orr.w	r3, r3, #1
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	711a      	strb	r2, [r3, #4]
 800a5bc:	e007      	b.n	800a5ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a5be:	7dfb      	ldrb	r3, [r7, #23]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d102      	bne.n	800a5ca <create_chain+0x122>
 800a5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c8:	e000      	b.n	800a5cc <create_chain+0x124>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a5ce:	69fb      	ldr	r3, [r7, #28]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3720      	adds	r7, #32
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b087      	sub	sp, #28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	0a5b      	lsrs	r3, r3, #9
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	8952      	ldrh	r2, [r2, #10]
 800a5f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	1d1a      	adds	r2, r3, #4
 800a602:	613a      	str	r2, [r7, #16]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <clmt_clust+0x3a>
 800a60e:	2300      	movs	r3, #0
 800a610:	e010      	b.n	800a634 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	429a      	cmp	r2, r3
 800a618:	d307      	bcc.n	800a62a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	3304      	adds	r3, #4
 800a626:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a628:	e7e9      	b.n	800a5fe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a62a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	4413      	add	r3, r2
}
 800a634:	4618      	mov	r0, r3
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a656:	d204      	bcs.n	800a662 <dir_sdi+0x22>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	f003 031f 	and.w	r3, r3, #31
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a662:	2302      	movs	r3, #2
 800a664:	e063      	b.n	800a72e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <dir_sdi+0x46>
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d902      	bls.n	800a686 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10c      	bne.n	800a6a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	095b      	lsrs	r3, r3, #5
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	8912      	ldrh	r2, [r2, #8]
 800a694:	4293      	cmp	r3, r2
 800a696:	d301      	bcc.n	800a69c <dir_sdi+0x5c>
 800a698:	2302      	movs	r3, #2
 800a69a:	e048      	b.n	800a72e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	61da      	str	r2, [r3, #28]
 800a6a4:	e029      	b.n	800a6fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	895b      	ldrh	r3, [r3, #10]
 800a6aa:	025b      	lsls	r3, r3, #9
 800a6ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6ae:	e019      	b.n	800a6e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6979      	ldr	r1, [r7, #20]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7ff fcfe 	bl	800a0b6 <get_fat>
 800a6ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c2:	d101      	bne.n	800a6c8 <dir_sdi+0x88>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e032      	b.n	800a72e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d904      	bls.n	800a6d8 <dir_sdi+0x98>
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d301      	bcc.n	800a6dc <dir_sdi+0x9c>
 800a6d8:	2302      	movs	r3, #2
 800a6da:	e028      	b.n	800a72e <dir_sdi+0xee>
			ofs -= csz;
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d2e1      	bcs.n	800a6b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a6ec:	6979      	ldr	r1, [r7, #20]
 800a6ee:	6938      	ldr	r0, [r7, #16]
 800a6f0:	f7ff fcc2 	bl	800a078 <clust2sect>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	69db      	ldr	r3, [r3, #28]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <dir_sdi+0xcc>
 800a708:	2302      	movs	r3, #2
 800a70a:	e010      	b.n	800a72e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	69da      	ldr	r2, [r3, #28]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	0a5b      	lsrs	r3, r3, #9
 800a714:	441a      	add	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a726:	441a      	add	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b086      	sub	sp, #24
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	3320      	adds	r3, #32
 800a74c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <dir_next+0x28>
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a75c:	d301      	bcc.n	800a762 <dir_next+0x2c>
 800a75e:	2304      	movs	r3, #4
 800a760:	e0aa      	b.n	800a8b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f040 8098 	bne.w	800a89e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	69db      	ldr	r3, [r3, #28]
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10b      	bne.n	800a798 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	095b      	lsrs	r3, r3, #5
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	8912      	ldrh	r2, [r2, #8]
 800a788:	4293      	cmp	r3, r2
 800a78a:	f0c0 8088 	bcc.w	800a89e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	61da      	str	r2, [r3, #28]
 800a794:	2304      	movs	r3, #4
 800a796:	e08f      	b.n	800a8b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	0a5b      	lsrs	r3, r3, #9
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	8952      	ldrh	r2, [r2, #10]
 800a7a0:	3a01      	subs	r2, #1
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d17a      	bne.n	800a89e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	f7ff fc80 	bl	800a0b6 <get_fat>
 800a7b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d801      	bhi.n	800a7c2 <dir_next+0x8c>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	e07a      	b.n	800a8b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c8:	d101      	bne.n	800a7ce <dir_next+0x98>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e074      	b.n	800a8b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d358      	bcc.n	800a88a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d104      	bne.n	800a7e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	61da      	str	r2, [r3, #28]
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	e067      	b.n	800a8b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7ff fe59 	bl	800a4a8 <create_chain>
 800a7f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <dir_next+0xcc>
 800a7fe:	2307      	movs	r3, #7
 800a800:	e05a      	b.n	800a8b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <dir_next+0xd6>
 800a808:	2302      	movs	r3, #2
 800a80a:	e055      	b.n	800a8b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d101      	bne.n	800a818 <dir_next+0xe2>
 800a814:	2301      	movs	r3, #1
 800a816:	e04f      	b.n	800a8b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f7ff fb4d 	bl	8009eb8 <sync_window>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <dir_next+0xf2>
 800a824:	2301      	movs	r3, #1
 800a826:	e047      	b.n	800a8b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3334      	adds	r3, #52	; 0x34
 800a82c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a830:	2100      	movs	r1, #0
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff f945 	bl	8009ac2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a838:	2300      	movs	r3, #0
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	6979      	ldr	r1, [r7, #20]
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7ff fc1a 	bl	800a078 <clust2sect>
 800a844:	4602      	mov	r2, r0
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	631a      	str	r2, [r3, #48]	; 0x30
 800a84a:	e012      	b.n	800a872 <dir_next+0x13c>
						fs->wflag = 1;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2201      	movs	r2, #1
 800a850:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7ff fb30 	bl	8009eb8 <sync_window>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <dir_next+0x12c>
 800a85e:	2301      	movs	r3, #1
 800a860:	e02a      	b.n	800a8b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	3301      	adds	r3, #1
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	631a      	str	r2, [r3, #48]	; 0x30
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	895b      	ldrh	r3, [r3, #10]
 800a876:	461a      	mov	r2, r3
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d3e6      	bcc.n	800a84c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	1ad2      	subs	r2, r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a890:	6979      	ldr	r1, [r7, #20]
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7ff fbf0 	bl	800a078 <clust2sect>
 800a898:	4602      	mov	r2, r0
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8b0:	441a      	add	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff feb4 	bl	800a640 <dir_sdi>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d12b      	bne.n	800a93a <dir_alloc+0x7a>
		n = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff fb27 	bl	8009f40 <move_window>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d11d      	bne.n	800a938 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	2be5      	cmp	r3, #229	; 0xe5
 800a904:	d004      	beq.n	800a910 <dir_alloc+0x50>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d107      	bne.n	800a920 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	3301      	adds	r3, #1
 800a914:	613b      	str	r3, [r7, #16]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d102      	bne.n	800a924 <dir_alloc+0x64>
 800a91e:	e00c      	b.n	800a93a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a920:	2300      	movs	r3, #0
 800a922:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a924:	2101      	movs	r1, #1
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff ff05 	bl	800a736 <dir_next>
 800a92c:	4603      	mov	r3, r0
 800a92e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0d7      	beq.n	800a8e6 <dir_alloc+0x26>
 800a936:	e000      	b.n	800a93a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a938:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d101      	bne.n	800a944 <dir_alloc+0x84>
 800a940:	2307      	movs	r3, #7
 800a942:	75fb      	strb	r3, [r7, #23]
	return res;
 800a944:	7dfb      	ldrb	r3, [r7, #23]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	331a      	adds	r3, #26
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff f80d 	bl	800997c <ld_word>
 800a962:	4603      	mov	r3, r0
 800a964:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d109      	bne.n	800a982 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	3314      	adds	r3, #20
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff f802 	bl	800997c <ld_word>
 800a978:	4603      	mov	r3, r0
 800a97a:	041b      	lsls	r3, r3, #16
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4313      	orrs	r3, r2
 800a980:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a982:	68fb      	ldr	r3, [r7, #12]
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	331a      	adds	r3, #26
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	b292      	uxth	r2, r2
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff f825 	bl	80099f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d109      	bne.n	800a9c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f103 0214 	add.w	r2, r3, #20
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7ff f817 	bl	80099f2 <st_word>
	}
}
 800a9c4:	bf00      	nop
 800a9c6:	3710      	adds	r7, #16
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a9da:	2100      	movs	r1, #0
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7ff fe2f 	bl	800a640 <dir_sdi>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a9e6:	7dfb      	ldrb	r3, [r7, #23]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <dir_find+0x24>
 800a9ec:	7dfb      	ldrb	r3, [r7, #23]
 800a9ee:	e03e      	b.n	800aa6e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	69db      	ldr	r3, [r3, #28]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6938      	ldr	r0, [r7, #16]
 800a9f8:	f7ff faa2 	bl	8009f40 <move_window>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d12f      	bne.n	800aa66 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <dir_find+0x4e>
 800aa14:	2304      	movs	r3, #4
 800aa16:	75fb      	strb	r3, [r7, #23]
 800aa18:	e028      	b.n	800aa6c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	330b      	adds	r3, #11
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a1b      	ldr	r3, [r3, #32]
 800aa30:	330b      	adds	r3, #11
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	f003 0308 	and.w	r3, r3, #8
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <dir_find+0x86>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a18      	ldr	r0, [r3, #32]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3324      	adds	r3, #36	; 0x24
 800aa44:	220b      	movs	r2, #11
 800aa46:	4619      	mov	r1, r3
 800aa48:	f7ff f856 	bl	8009af8 <mem_cmp>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aa52:	2100      	movs	r1, #0
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff fe6e 	bl	800a736 <dir_next>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0c5      	beq.n	800a9f0 <dir_find+0x24>
 800aa64:	e002      	b.n	800aa6c <dir_find+0xa0>
		if (res != FR_OK) break;
 800aa66:	bf00      	nop
 800aa68:	e000      	b.n	800aa6c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa6a:	bf00      	nop

	return res;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa84:	2101      	movs	r1, #1
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ff1a 	bl	800a8c0 <dir_alloc>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d11c      	bne.n	800aad0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	68b8      	ldr	r0, [r7, #8]
 800aa9e:	f7ff fa4f 	bl	8009f40 <move_window>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d111      	bne.n	800aad0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	2220      	movs	r2, #32
 800aab2:	2100      	movs	r1, #0
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff f804 	bl	8009ac2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a18      	ldr	r0, [r3, #32]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3324      	adds	r3, #36	; 0x24
 800aac2:	220b      	movs	r2, #11
 800aac4:	4619      	mov	r1, r3
 800aac6:	f7fe ffdb 	bl	8009a80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2201      	movs	r2, #1
 800aace:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
	...

0800aadc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3324      	adds	r3, #36	; 0x24
 800aaf0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aaf2:	220b      	movs	r2, #11
 800aaf4:	2120      	movs	r1, #32
 800aaf6:	68b8      	ldr	r0, [r7, #8]
 800aaf8:	f7fe ffe3 	bl	8009ac2 <mem_set>
	si = i = 0; ni = 8;
 800aafc:	2300      	movs	r3, #0
 800aafe:	613b      	str	r3, [r7, #16]
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	2308      	movs	r3, #8
 800ab06:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	61fa      	str	r2, [r7, #28]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab16:	7efb      	ldrb	r3, [r7, #27]
 800ab18:	2b20      	cmp	r3, #32
 800ab1a:	d94e      	bls.n	800abba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ab1c:	7efb      	ldrb	r3, [r7, #27]
 800ab1e:	2b2f      	cmp	r3, #47	; 0x2f
 800ab20:	d006      	beq.n	800ab30 <create_name+0x54>
 800ab22:	7efb      	ldrb	r3, [r7, #27]
 800ab24:	2b5c      	cmp	r3, #92	; 0x5c
 800ab26:	d110      	bne.n	800ab4a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ab28:	e002      	b.n	800ab30 <create_name+0x54>
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	4413      	add	r3, r2
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	2b2f      	cmp	r3, #47	; 0x2f
 800ab3a:	d0f6      	beq.n	800ab2a <create_name+0x4e>
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	4413      	add	r3, r2
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b5c      	cmp	r3, #92	; 0x5c
 800ab46:	d0f0      	beq.n	800ab2a <create_name+0x4e>
			break;
 800ab48:	e038      	b.n	800abbc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ab4a:	7efb      	ldrb	r3, [r7, #27]
 800ab4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab4e:	d003      	beq.n	800ab58 <create_name+0x7c>
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d30c      	bcc.n	800ab72 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b0b      	cmp	r3, #11
 800ab5c:	d002      	beq.n	800ab64 <create_name+0x88>
 800ab5e:	7efb      	ldrb	r3, [r7, #27]
 800ab60:	2b2e      	cmp	r3, #46	; 0x2e
 800ab62:	d001      	beq.n	800ab68 <create_name+0x8c>
 800ab64:	2306      	movs	r3, #6
 800ab66:	e044      	b.n	800abf2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ab68:	2308      	movs	r3, #8
 800ab6a:	613b      	str	r3, [r7, #16]
 800ab6c:	230b      	movs	r3, #11
 800ab6e:	617b      	str	r3, [r7, #20]
			continue;
 800ab70:	e022      	b.n	800abb8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ab72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	da04      	bge.n	800ab84 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ab7a:	7efb      	ldrb	r3, [r7, #27]
 800ab7c:	3b80      	subs	r3, #128	; 0x80
 800ab7e:	4a1f      	ldr	r2, [pc, #124]	; (800abfc <create_name+0x120>)
 800ab80:	5cd3      	ldrb	r3, [r2, r3]
 800ab82:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ab84:	7efb      	ldrb	r3, [r7, #27]
 800ab86:	4619      	mov	r1, r3
 800ab88:	481d      	ldr	r0, [pc, #116]	; (800ac00 <create_name+0x124>)
 800ab8a:	f7fe ffdc 	bl	8009b46 <chk_chr>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <create_name+0xbc>
 800ab94:	2306      	movs	r3, #6
 800ab96:	e02c      	b.n	800abf2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ab98:	7efb      	ldrb	r3, [r7, #27]
 800ab9a:	2b60      	cmp	r3, #96	; 0x60
 800ab9c:	d905      	bls.n	800abaa <create_name+0xce>
 800ab9e:	7efb      	ldrb	r3, [r7, #27]
 800aba0:	2b7a      	cmp	r3, #122	; 0x7a
 800aba2:	d802      	bhi.n	800abaa <create_name+0xce>
 800aba4:	7efb      	ldrb	r3, [r7, #27]
 800aba6:	3b20      	subs	r3, #32
 800aba8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	613a      	str	r2, [r7, #16]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	4413      	add	r3, r2
 800abb4:	7efa      	ldrb	r2, [r7, #27]
 800abb6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800abb8:	e7a6      	b.n	800ab08 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800abba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	441a      	add	r2, r3
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <create_name+0xf4>
 800abcc:	2306      	movs	r3, #6
 800abce:	e010      	b.n	800abf2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2be5      	cmp	r3, #229	; 0xe5
 800abd6:	d102      	bne.n	800abde <create_name+0x102>
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2205      	movs	r2, #5
 800abdc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800abde:	7efb      	ldrb	r3, [r7, #27]
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d801      	bhi.n	800abe8 <create_name+0x10c>
 800abe4:	2204      	movs	r2, #4
 800abe6:	e000      	b.n	800abea <create_name+0x10e>
 800abe8:	2200      	movs	r2, #0
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	330b      	adds	r3, #11
 800abee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800abf0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3720      	adds	r7, #32
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	08011310 	.word	0x08011310
 800ac00:	080111b8 	.word	0x080111b8

0800ac04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac18:	e002      	b.n	800ac20 <follow_path+0x1c>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	2b2f      	cmp	r3, #47	; 0x2f
 800ac26:	d0f8      	beq.n	800ac1a <follow_path+0x16>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b5c      	cmp	r3, #92	; 0x5c
 800ac2e:	d0f4      	beq.n	800ac1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2200      	movs	r2, #0
 800ac34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	2b1f      	cmp	r3, #31
 800ac3c:	d80a      	bhi.n	800ac54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2280      	movs	r2, #128	; 0x80
 800ac42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ac46:	2100      	movs	r1, #0
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff fcf9 	bl	800a640 <dir_sdi>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	75fb      	strb	r3, [r7, #23]
 800ac52:	e043      	b.n	800acdc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac54:	463b      	mov	r3, r7
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff ff3f 	bl	800aadc <create_name>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d134      	bne.n	800acd2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff feaf 	bl	800a9cc <dir_find>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d127      	bne.n	800acd6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ac86:	7afb      	ldrb	r3, [r7, #11]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d122      	bne.n	800acd6 <follow_path+0xd2>
 800ac90:	2305      	movs	r3, #5
 800ac92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ac94:	e01f      	b.n	800acd6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac96:	7afb      	ldrb	r3, [r7, #11]
 800ac98:	f003 0304 	and.w	r3, r3, #4
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d11c      	bne.n	800acda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	799b      	ldrb	r3, [r3, #6]
 800aca4:	f003 0310 	and.w	r3, r3, #16
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800acac:	2305      	movs	r3, #5
 800acae:	75fb      	strb	r3, [r7, #23]
 800acb0:	e014      	b.n	800acdc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc0:	4413      	add	r3, r2
 800acc2:	4619      	mov	r1, r3
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7ff fe42 	bl	800a94e <ld_clust>
 800acca:	4602      	mov	r2, r0
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800acd0:	e7c0      	b.n	800ac54 <follow_path+0x50>
			if (res != FR_OK) break;
 800acd2:	bf00      	nop
 800acd4:	e002      	b.n	800acdc <follow_path+0xd8>
				break;
 800acd6:	bf00      	nop
 800acd8:	e000      	b.n	800acdc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800acda:	bf00      	nop
			}
		}
	}

	return res;
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b087      	sub	sp, #28
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800acee:	f04f 33ff 	mov.w	r3, #4294967295
 800acf2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d031      	beq.n	800ad60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	e002      	b.n	800ad0a <get_ldnumber+0x24>
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	3301      	adds	r3, #1
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d903      	bls.n	800ad1a <get_ldnumber+0x34>
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	2b3a      	cmp	r3, #58	; 0x3a
 800ad18:	d1f4      	bne.n	800ad04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b3a      	cmp	r3, #58	; 0x3a
 800ad20:	d11c      	bne.n	800ad5c <get_ldnumber+0x76>
			tp = *path;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	1c5a      	adds	r2, r3, #1
 800ad2c:	60fa      	str	r2, [r7, #12]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	3b30      	subs	r3, #48	; 0x30
 800ad32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b09      	cmp	r3, #9
 800ad38:	d80e      	bhi.n	800ad58 <get_ldnumber+0x72>
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d10a      	bne.n	800ad58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d107      	bne.n	800ad58 <get_ldnumber+0x72>
					vol = (int)i;
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	697a      	ldr	r2, [r7, #20]
 800ad56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	e002      	b.n	800ad62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ad60:	693b      	ldr	r3, [r7, #16]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	371c      	adds	r7, #28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
	...

0800ad70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	70da      	strb	r2, [r3, #3]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f04f 32ff 	mov.w	r2, #4294967295
 800ad86:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff f8d8 	bl	8009f40 <move_window>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <check_fs+0x2a>
 800ad96:	2304      	movs	r3, #4
 800ad98:	e038      	b.n	800ae0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3334      	adds	r3, #52	; 0x34
 800ad9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe fdea 	bl	800997c <ld_word>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d001      	beq.n	800adb8 <check_fs+0x48>
 800adb4:	2303      	movs	r3, #3
 800adb6:	e029      	b.n	800ae0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adbe:	2be9      	cmp	r3, #233	; 0xe9
 800adc0:	d009      	beq.n	800add6 <check_fs+0x66>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800adc8:	2beb      	cmp	r3, #235	; 0xeb
 800adca:	d11e      	bne.n	800ae0a <check_fs+0x9a>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800add2:	2b90      	cmp	r3, #144	; 0x90
 800add4:	d119      	bne.n	800ae0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3334      	adds	r3, #52	; 0x34
 800adda:	3336      	adds	r3, #54	; 0x36
 800addc:	4618      	mov	r0, r3
 800adde:	f7fe fde5 	bl	80099ac <ld_dword>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ade8:	4a0a      	ldr	r2, [pc, #40]	; (800ae14 <check_fs+0xa4>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d101      	bne.n	800adf2 <check_fs+0x82>
 800adee:	2300      	movs	r3, #0
 800adf0:	e00c      	b.n	800ae0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3334      	adds	r3, #52	; 0x34
 800adf6:	3352      	adds	r3, #82	; 0x52
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe fdd7 	bl	80099ac <ld_dword>
 800adfe:	4603      	mov	r3, r0
 800ae00:	4a05      	ldr	r2, [pc, #20]	; (800ae18 <check_fs+0xa8>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d101      	bne.n	800ae0a <check_fs+0x9a>
 800ae06:	2300      	movs	r3, #0
 800ae08:	e000      	b.n	800ae0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae0a:	2302      	movs	r3, #2
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	00544146 	.word	0x00544146
 800ae18:	33544146 	.word	0x33544146

0800ae1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b096      	sub	sp, #88	; 0x58
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	4613      	mov	r3, r2
 800ae28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff ff58 	bl	800ace6 <get_ldnumber>
 800ae36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	da01      	bge.n	800ae42 <find_volume+0x26>
 800ae3e:	230b      	movs	r3, #11
 800ae40:	e235      	b.n	800b2ae <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ae42:	4aa5      	ldr	r2, [pc, #660]	; (800b0d8 <find_volume+0x2bc>)
 800ae44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <find_volume+0x3a>
 800ae52:	230c      	movs	r3, #12
 800ae54:	e22b      	b.n	800b2ae <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800ae56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae58:	f7fe fe90 	bl	8009b7c <lock_fs>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <find_volume+0x4a>
 800ae62:	230f      	movs	r3, #15
 800ae64:	e223      	b.n	800b2ae <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	f023 0301 	bic.w	r3, r3, #1
 800ae72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01a      	beq.n	800aeb2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	785b      	ldrb	r3, [r3, #1]
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fcdd 	bl	8009840 <disk_status>
 800ae86:	4603      	mov	r3, r0
 800ae88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae90:	f003 0301 	and.w	r3, r3, #1
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10c      	bne.n	800aeb2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d007      	beq.n	800aeae <find_volume+0x92>
 800ae9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aea2:	f003 0304 	and.w	r3, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800aeaa:	230a      	movs	r3, #10
 800aeac:	e1ff      	b.n	800b2ae <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e1fd      	b.n	800b2ae <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aeb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe fcd5 	bl	8009874 <disk_initialize>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aedc:	2303      	movs	r3, #3
 800aede:	e1e6      	b.n	800b2ae <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800aee0:	79fb      	ldrb	r3, [r7, #7]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <find_volume+0xda>
 800aee6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aeea:	f003 0304 	and.w	r3, r3, #4
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800aef2:	230a      	movs	r3, #10
 800aef4:	e1db      	b.n	800b2ae <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aefa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aefc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aefe:	f7ff ff37 	bl	800ad70 <check_fs>
 800af02:	4603      	mov	r3, r0
 800af04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d149      	bne.n	800afa4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af10:	2300      	movs	r3, #0
 800af12:	643b      	str	r3, [r7, #64]	; 0x40
 800af14:	e01e      	b.n	800af54 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af24:	4413      	add	r3, r2
 800af26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	3304      	adds	r3, #4
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d006      	beq.n	800af40 <find_volume+0x124>
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	3308      	adds	r3, #8
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe fd38 	bl	80099ac <ld_dword>
 800af3c:	4602      	mov	r2, r0
 800af3e:	e000      	b.n	800af42 <find_volume+0x126>
 800af40:	2200      	movs	r2, #0
 800af42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	3358      	adds	r3, #88	; 0x58
 800af48:	443b      	add	r3, r7
 800af4a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af50:	3301      	adds	r3, #1
 800af52:	643b      	str	r3, [r7, #64]	; 0x40
 800af54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af56:	2b03      	cmp	r3, #3
 800af58:	d9dd      	bls.n	800af16 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800af5a:	2300      	movs	r3, #0
 800af5c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800af5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af60:	2b00      	cmp	r3, #0
 800af62:	d002      	beq.n	800af6a <find_volume+0x14e>
 800af64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af66:	3b01      	subs	r3, #1
 800af68:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800af6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	3358      	adds	r3, #88	; 0x58
 800af70:	443b      	add	r3, r7
 800af72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af76:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d005      	beq.n	800af8a <find_volume+0x16e>
 800af7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af82:	f7ff fef5 	bl	800ad70 <check_fs>
 800af86:	4603      	mov	r3, r0
 800af88:	e000      	b.n	800af8c <find_volume+0x170>
 800af8a:	2303      	movs	r3, #3
 800af8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af94:	2b01      	cmp	r3, #1
 800af96:	d905      	bls.n	800afa4 <find_volume+0x188>
 800af98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af9a:	3301      	adds	r3, #1
 800af9c:	643b      	str	r3, [r7, #64]	; 0x40
 800af9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d9e2      	bls.n	800af6a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800afa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afa8:	2b04      	cmp	r3, #4
 800afaa:	d101      	bne.n	800afb0 <find_volume+0x194>
 800afac:	2301      	movs	r3, #1
 800afae:	e17e      	b.n	800b2ae <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800afb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d901      	bls.n	800afbc <find_volume+0x1a0>
 800afb8:	230d      	movs	r3, #13
 800afba:	e178      	b.n	800b2ae <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	3334      	adds	r3, #52	; 0x34
 800afc0:	330b      	adds	r3, #11
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fe fcda 	bl	800997c <ld_word>
 800afc8:	4603      	mov	r3, r0
 800afca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afce:	d001      	beq.n	800afd4 <find_volume+0x1b8>
 800afd0:	230d      	movs	r3, #13
 800afd2:	e16c      	b.n	800b2ae <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	3334      	adds	r3, #52	; 0x34
 800afd8:	3316      	adds	r3, #22
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fcce 	bl	800997c <ld_word>
 800afe0:	4603      	mov	r3, r0
 800afe2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800afe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <find_volume+0x1dc>
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	3334      	adds	r3, #52	; 0x34
 800afee:	3324      	adds	r3, #36	; 0x24
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fe fcdb 	bl	80099ac <ld_dword>
 800aff6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800affc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	789b      	ldrb	r3, [r3, #2]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d005      	beq.n	800b01c <find_volume+0x200>
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	789b      	ldrb	r3, [r3, #2]
 800b014:	2b02      	cmp	r3, #2
 800b016:	d001      	beq.n	800b01c <find_volume+0x200>
 800b018:	230d      	movs	r3, #13
 800b01a:	e148      	b.n	800b2ae <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01e:	789b      	ldrb	r3, [r3, #2]
 800b020:	461a      	mov	r2, r3
 800b022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b024:	fb02 f303 	mul.w	r3, r2, r3
 800b028:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b030:	b29a      	uxth	r2, r3
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	895b      	ldrh	r3, [r3, #10]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d008      	beq.n	800b050 <find_volume+0x234>
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	895b      	ldrh	r3, [r3, #10]
 800b042:	461a      	mov	r2, r3
 800b044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b046:	895b      	ldrh	r3, [r3, #10]
 800b048:	3b01      	subs	r3, #1
 800b04a:	4013      	ands	r3, r2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <find_volume+0x238>
 800b050:	230d      	movs	r3, #13
 800b052:	e12c      	b.n	800b2ae <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	3334      	adds	r3, #52	; 0x34
 800b058:	3311      	adds	r3, #17
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe fc8e 	bl	800997c <ld_word>
 800b060:	4603      	mov	r3, r0
 800b062:	461a      	mov	r2, r3
 800b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b066:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	891b      	ldrh	r3, [r3, #8]
 800b06c:	f003 030f 	and.w	r3, r3, #15
 800b070:	b29b      	uxth	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <find_volume+0x25e>
 800b076:	230d      	movs	r3, #13
 800b078:	e119      	b.n	800b2ae <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07c:	3334      	adds	r3, #52	; 0x34
 800b07e:	3313      	adds	r3, #19
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fc7b 	bl	800997c <ld_word>
 800b086:	4603      	mov	r3, r0
 800b088:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b08a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d106      	bne.n	800b09e <find_volume+0x282>
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	3334      	adds	r3, #52	; 0x34
 800b094:	3320      	adds	r3, #32
 800b096:	4618      	mov	r0, r3
 800b098:	f7fe fc88 	bl	80099ac <ld_dword>
 800b09c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a0:	3334      	adds	r3, #52	; 0x34
 800b0a2:	330e      	adds	r3, #14
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe fc69 	bl	800997c <ld_word>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <find_volume+0x29c>
 800b0b4:	230d      	movs	r3, #13
 800b0b6:	e0fa      	b.n	800b2ae <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0bc:	4413      	add	r3, r2
 800b0be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0c0:	8912      	ldrh	r2, [r2, #8]
 800b0c2:	0912      	lsrs	r2, r2, #4
 800b0c4:	b292      	uxth	r2, r2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b0ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d204      	bcs.n	800b0dc <find_volume+0x2c0>
 800b0d2:	230d      	movs	r3, #13
 800b0d4:	e0eb      	b.n	800b2ae <find_volume+0x492>
 800b0d6:	bf00      	nop
 800b0d8:	20000a68 	.word	0x20000a68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b0dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0e4:	8952      	ldrh	r2, [r2, #10]
 800b0e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <find_volume+0x2da>
 800b0f2:	230d      	movs	r3, #13
 800b0f4:	e0db      	b.n	800b2ae <find_volume+0x492>
		fmt = FS_FAT32;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b102:	4293      	cmp	r3, r2
 800b104:	d802      	bhi.n	800b10c <find_volume+0x2f0>
 800b106:	2302      	movs	r3, #2
 800b108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b112:	4293      	cmp	r3, r2
 800b114:	d802      	bhi.n	800b11c <find_volume+0x300>
 800b116:	2301      	movs	r3, #1
 800b118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	1c9a      	adds	r2, r3, #2
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b128:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b12a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b12e:	441a      	add	r2, r3
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	441a      	add	r2, r3
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800b13e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b142:	2b03      	cmp	r3, #3
 800b144:	d11e      	bne.n	800b184 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	3334      	adds	r3, #52	; 0x34
 800b14a:	332a      	adds	r3, #42	; 0x2a
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fe fc15 	bl	800997c <ld_word>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <find_volume+0x340>
 800b158:	230d      	movs	r3, #13
 800b15a:	e0a8      	b.n	800b2ae <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15e:	891b      	ldrh	r3, [r3, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <find_volume+0x34c>
 800b164:	230d      	movs	r3, #13
 800b166:	e0a2      	b.n	800b2ae <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	3334      	adds	r3, #52	; 0x34
 800b16c:	332c      	adds	r3, #44	; 0x2c
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fc1c 	bl	80099ac <ld_dword>
 800b174:	4602      	mov	r2, r0
 800b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b178:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	699b      	ldr	r3, [r3, #24]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	647b      	str	r3, [r7, #68]	; 0x44
 800b182:	e01f      	b.n	800b1c4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	891b      	ldrh	r3, [r3, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <find_volume+0x374>
 800b18c:	230d      	movs	r3, #13
 800b18e:	e08e      	b.n	800b2ae <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b196:	441a      	add	r2, r3
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b19c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d103      	bne.n	800b1ac <find_volume+0x390>
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	e00a      	b.n	800b1c2 <find_volume+0x3a6>
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	4413      	add	r3, r2
 800b1b6:	085a      	lsrs	r2, r3, #1
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b1c2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	69da      	ldr	r2, [r3, #28]
 800b1c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b1ce:	0a5b      	lsrs	r3, r3, #9
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d201      	bcs.n	800b1d8 <find_volume+0x3bc>
 800b1d4:	230d      	movs	r3, #13
 800b1d6:	e06a      	b.n	800b2ae <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	f04f 32ff 	mov.w	r2, #4294967295
 800b1de:	615a      	str	r2, [r3, #20]
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	695a      	ldr	r2, [r3, #20]
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	2280      	movs	r2, #128	; 0x80
 800b1ec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b1ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d149      	bne.n	800b28a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	3334      	adds	r3, #52	; 0x34
 800b1fa:	3330      	adds	r3, #48	; 0x30
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fe fbbd 	bl	800997c <ld_word>
 800b202:	4603      	mov	r3, r0
 800b204:	2b01      	cmp	r3, #1
 800b206:	d140      	bne.n	800b28a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20a:	3301      	adds	r3, #1
 800b20c:	4619      	mov	r1, r3
 800b20e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b210:	f7fe fe96 	bl	8009f40 <move_window>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d137      	bne.n	800b28a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	2200      	movs	r2, #0
 800b21e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	3334      	adds	r3, #52	; 0x34
 800b224:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fe fba7 	bl	800997c <ld_word>
 800b22e:	4603      	mov	r3, r0
 800b230:	461a      	mov	r2, r3
 800b232:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b236:	429a      	cmp	r2, r3
 800b238:	d127      	bne.n	800b28a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	3334      	adds	r3, #52	; 0x34
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fbb4 	bl	80099ac <ld_dword>
 800b244:	4603      	mov	r3, r0
 800b246:	4a1c      	ldr	r2, [pc, #112]	; (800b2b8 <find_volume+0x49c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d11e      	bne.n	800b28a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24e:	3334      	adds	r3, #52	; 0x34
 800b250:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe fba9 	bl	80099ac <ld_dword>
 800b25a:	4603      	mov	r3, r0
 800b25c:	4a17      	ldr	r2, [pc, #92]	; (800b2bc <find_volume+0x4a0>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d113      	bne.n	800b28a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	3334      	adds	r3, #52	; 0x34
 800b266:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fe fb9e 	bl	80099ac <ld_dword>
 800b270:	4602      	mov	r2, r0
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	3334      	adds	r3, #52	; 0x34
 800b27a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe fb94 	bl	80099ac <ld_dword>
 800b284:	4602      	mov	r2, r0
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b290:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b292:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <find_volume+0x4a4>)
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	3301      	adds	r3, #1
 800b298:	b29a      	uxth	r2, r3
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <find_volume+0x4a4>)
 800b29c:	801a      	strh	r2, [r3, #0]
 800b29e:	4b08      	ldr	r3, [pc, #32]	; (800b2c0 <find_volume+0x4a4>)
 800b2a0:	881a      	ldrh	r2, [r3, #0]
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b2a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2a8:	f7fe fde2 	bl	8009e70 <clear_lock>
#endif
	return FR_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3758      	adds	r7, #88	; 0x58
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	41615252 	.word	0x41615252
 800b2bc:	61417272 	.word	0x61417272
 800b2c0:	20000a6c 	.word	0x20000a6c

0800b2c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b2ce:	2309      	movs	r3, #9
 800b2d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d02e      	beq.n	800b336 <validate+0x72>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d02a      	beq.n	800b336 <validate+0x72>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d025      	beq.n	800b336 <validate+0x72>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	889a      	ldrh	r2, [r3, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	88db      	ldrh	r3, [r3, #6]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d11e      	bne.n	800b336 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe fc3d 	bl	8009b7c <lock_fs>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d014      	beq.n	800b332 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	785b      	ldrb	r3, [r3, #1]
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fe fa96 	bl	8009840 <disk_status>
 800b314:	4603      	mov	r3, r0
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d102      	bne.n	800b324 <validate+0x60>
				res = FR_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
 800b322:	e008      	b.n	800b336 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fc3c 	bl	8009ba8 <unlock_fs>
 800b330:	e001      	b.n	800b336 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b332:	230f      	movs	r3, #15
 800b334:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <validate+0x7e>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	e000      	b.n	800b344 <validate+0x80>
 800b342:	2300      	movs	r3, #0
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	6013      	str	r3, [r2, #0]
	return res;
 800b348:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b366:	f107 0310 	add.w	r3, r7, #16
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff fcbb 	bl	800ace6 <get_ldnumber>
 800b370:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	2b00      	cmp	r3, #0
 800b376:	da01      	bge.n	800b37c <f_mount+0x28>
 800b378:	230b      	movs	r3, #11
 800b37a:	e048      	b.n	800b40e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b37c:	4a26      	ldr	r2, [pc, #152]	; (800b418 <f_mount+0xc4>)
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b384:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00f      	beq.n	800b3ac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b38c:	69b8      	ldr	r0, [r7, #24]
 800b38e:	f7fe fd6f 	bl	8009e70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	4618      	mov	r0, r3
 800b398:	f000 fe4b 	bl	800c032 <ff_del_syncobj>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <f_mount+0x52>
 800b3a2:	2302      	movs	r3, #2
 800b3a4:	e033      	b.n	800b40e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00f      	beq.n	800b3d2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	330c      	adds	r3, #12
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	f000 fe15 	bl	800bff2 <ff_cre_syncobj>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <f_mount+0x7e>
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	e01d      	b.n	800b40e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4910      	ldr	r1, [pc, #64]	; (800b418 <f_mount+0xc4>)
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <f_mount+0x94>
 800b3e2:	79fb      	ldrb	r3, [r7, #7]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d001      	beq.n	800b3ec <f_mount+0x98>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e010      	b.n	800b40e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b3ec:	f107 010c 	add.w	r1, r7, #12
 800b3f0:	f107 0308 	add.w	r3, r7, #8
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff fd10 	bl	800ae1c <find_volume>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	7dfa      	ldrb	r2, [r7, #23]
 800b404:	4611      	mov	r1, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f7fe fbce 	bl	8009ba8 <unlock_fs>
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20000a68 	.word	0x20000a68

0800b41c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b098      	sub	sp, #96	; 0x60
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <f_open+0x18>
 800b430:	2309      	movs	r3, #9
 800b432:	e1b4      	b.n	800b79e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b43a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b43c:	79fa      	ldrb	r2, [r7, #7]
 800b43e:	f107 0110 	add.w	r1, r7, #16
 800b442:	f107 0308 	add.w	r3, r7, #8
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff fce8 	bl	800ae1c <find_volume>
 800b44c:	4603      	mov	r3, r0
 800b44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b456:	2b00      	cmp	r3, #0
 800b458:	f040 8191 	bne.w	800b77e <f_open+0x362>
		dj.obj.fs = fs;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	f107 0314 	add.w	r3, r7, #20
 800b466:	4611      	mov	r1, r2
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff fbcb 	bl	800ac04 <follow_path>
 800b46e:	4603      	mov	r3, r0
 800b470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d11a      	bne.n	800b4b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b47c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b480:	b25b      	sxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	da03      	bge.n	800b48e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b486:	2306      	movs	r3, #6
 800b488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b48c:	e011      	b.n	800b4b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	f023 0301 	bic.w	r3, r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	bf14      	ite	ne
 800b498:	2301      	movne	r3, #1
 800b49a:	2300      	moveq	r3, #0
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	461a      	mov	r2, r3
 800b4a0:	f107 0314 	add.w	r3, r7, #20
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe fb9a 	bl	8009be0 <chk_lock>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4b2:	79fb      	ldrb	r3, [r7, #7]
 800b4b4:	f003 031c 	and.w	r3, r3, #28
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d07f      	beq.n	800b5bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b4bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d017      	beq.n	800b4f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4c8:	2b04      	cmp	r3, #4
 800b4ca:	d10e      	bne.n	800b4ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4cc:	f7fe fbe4 	bl	8009c98 <enq_lock>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d006      	beq.n	800b4e4 <f_open+0xc8>
 800b4d6:	f107 0314 	add.w	r3, r7, #20
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff facb 	bl	800aa76 <dir_register>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	e000      	b.n	800b4e6 <f_open+0xca>
 800b4e4:	2312      	movs	r3, #18
 800b4e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4ea:	79fb      	ldrb	r3, [r7, #7]
 800b4ec:	f043 0308 	orr.w	r3, r3, #8
 800b4f0:	71fb      	strb	r3, [r7, #7]
 800b4f2:	e010      	b.n	800b516 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4f4:	7ebb      	ldrb	r3, [r7, #26]
 800b4f6:	f003 0311 	and.w	r3, r3, #17
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <f_open+0xea>
					res = FR_DENIED;
 800b4fe:	2307      	movs	r3, #7
 800b500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b504:	e007      	b.n	800b516 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	f003 0304 	and.w	r3, r3, #4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <f_open+0xfa>
 800b510:	2308      	movs	r3, #8
 800b512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d168      	bne.n	800b5f0 <f_open+0x1d4>
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	f003 0308 	and.w	r3, r3, #8
 800b524:	2b00      	cmp	r3, #0
 800b526:	d063      	beq.n	800b5f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b528:	f7fd fee2 	bl	80092f0 <get_fattime>
 800b52c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b530:	330e      	adds	r3, #14
 800b532:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b534:	4618      	mov	r0, r3
 800b536:	f7fe fa77 	bl	8009a28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53c:	3316      	adds	r3, #22
 800b53e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fa71 	bl	8009a28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b548:	330b      	adds	r3, #11
 800b54a:	2220      	movs	r2, #32
 800b54c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b552:	4611      	mov	r1, r2
 800b554:	4618      	mov	r0, r3
 800b556:	f7ff f9fa 	bl	800a94e <ld_clust>
 800b55a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b560:	2200      	movs	r2, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff fa12 	bl	800a98c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56a:	331c      	adds	r3, #28
 800b56c:	2100      	movs	r1, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe fa5a 	bl	8009a28 <st_dword>
					fs->wflag = 1;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	2201      	movs	r2, #1
 800b578:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d037      	beq.n	800b5f0 <f_open+0x1d4>
						dw = fs->winsect;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b584:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b586:	f107 0314 	add.w	r3, r7, #20
 800b58a:	2200      	movs	r2, #0
 800b58c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe ff25 	bl	800a3de <remove_chain>
 800b594:	4603      	mov	r3, r0
 800b596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d126      	bne.n	800b5f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe fcca 	bl	8009f40 <move_window>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5b6:	3a01      	subs	r2, #1
 800b5b8:	611a      	str	r2, [r3, #16]
 800b5ba:	e019      	b.n	800b5f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b5bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d115      	bne.n	800b5f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5c4:	7ebb      	ldrb	r3, [r7, #26]
 800b5c6:	f003 0310 	and.w	r3, r3, #16
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b5ce:	2304      	movs	r3, #4
 800b5d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5d4:	e00c      	b.n	800b5f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	f003 0302 	and.w	r3, r3, #2
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d007      	beq.n	800b5f0 <f_open+0x1d4>
 800b5e0:	7ebb      	ldrb	r3, [r7, #26]
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <f_open+0x1d4>
						res = FR_DENIED;
 800b5ea:	2307      	movs	r3, #7
 800b5ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d128      	bne.n	800b64a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b608:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	f023 0301 	bic.w	r3, r3, #1
 800b61e:	2b00      	cmp	r3, #0
 800b620:	bf14      	ite	ne
 800b622:	2301      	movne	r3, #1
 800b624:	2300      	moveq	r3, #0
 800b626:	b2db      	uxtb	r3, r3
 800b628:	461a      	mov	r2, r3
 800b62a:	f107 0314 	add.w	r3, r7, #20
 800b62e:	4611      	mov	r1, r2
 800b630:	4618      	mov	r0, r3
 800b632:	f7fe fb53 	bl	8009cdc <inc_lock>
 800b636:	4602      	mov	r2, r0
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <f_open+0x22e>
 800b644:	2302      	movs	r3, #2
 800b646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f040 8095 	bne.w	800b77e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b658:	4611      	mov	r1, r2
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff f977 	bl	800a94e <ld_clust>
 800b660:	4602      	mov	r2, r0
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b668:	331c      	adds	r3, #28
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe f99e 	bl	80099ac <ld_dword>
 800b670:	4602      	mov	r2, r0
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	88da      	ldrh	r2, [r3, #6]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	79fa      	ldrb	r2, [r7, #7]
 800b68e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3330      	adds	r3, #48	; 0x30
 800b6a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe fa08 	bl	8009ac2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b6b2:	79fb      	ldrb	r3, [r7, #7]
 800b6b4:	f003 0320 	and.w	r3, r3, #32
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d060      	beq.n	800b77e <f_open+0x362>
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d05c      	beq.n	800b77e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	68da      	ldr	r2, [r3, #12]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	895b      	ldrh	r3, [r3, #10]
 800b6d0:	025b      	lsls	r3, r3, #9
 800b6d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	657b      	str	r3, [r7, #84]	; 0x54
 800b6e0:	e016      	b.n	800b710 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe fce5 	bl	800a0b6 <get_fat>
 800b6ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b6ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d802      	bhi.n	800b6fa <f_open+0x2de>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b700:	d102      	bne.n	800b708 <f_open+0x2ec>
 800b702:	2301      	movs	r3, #1
 800b704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	657b      	str	r3, [r7, #84]	; 0x54
 800b710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b714:	2b00      	cmp	r3, #0
 800b716:	d103      	bne.n	800b720 <f_open+0x304>
 800b718:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b71a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d8e0      	bhi.n	800b6e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b724:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d127      	bne.n	800b77e <f_open+0x362>
 800b72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b734:	2b00      	cmp	r3, #0
 800b736:	d022      	beq.n	800b77e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fe fc9b 	bl	800a078 <clust2sect>
 800b742:	6478      	str	r0, [r7, #68]	; 0x44
 800b744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b746:	2b00      	cmp	r3, #0
 800b748:	d103      	bne.n	800b752 <f_open+0x336>
						res = FR_INT_ERR;
 800b74a:	2302      	movs	r3, #2
 800b74c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b750:	e015      	b.n	800b77e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b754:	0a5a      	lsrs	r2, r3, #9
 800b756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b758:	441a      	add	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	7858      	ldrb	r0, [r3, #1]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6a1a      	ldr	r2, [r3, #32]
 800b76c:	2301      	movs	r3, #1
 800b76e:	f7fe f8a7 	bl	80098c0 <disk_read>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <f_open+0x362>
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b782:	2b00      	cmp	r3, #0
 800b784:	d002      	beq.n	800b78c <f_open+0x370>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe fa07 	bl	8009ba8 <unlock_fs>
 800b79a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3760      	adds	r7, #96	; 0x60
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b08e      	sub	sp, #56	; 0x38
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	60f8      	str	r0, [r7, #12]
 800b7ae:	60b9      	str	r1, [r7, #8]
 800b7b0:	607a      	str	r2, [r7, #4]
 800b7b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f107 0214 	add.w	r2, r7, #20
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff fd7c 	bl	800b2c4 <validate>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d107      	bne.n	800b7ea <f_read+0x44>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	7d5b      	ldrb	r3, [r3, #21]
 800b7de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b7e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d009      	beq.n	800b7fe <f_read+0x58>
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe f9d8 	bl	8009ba8 <unlock_fs>
 800b7f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7fc:	e13d      	b.n	800ba7a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	7d1b      	ldrb	r3, [r3, #20]
 800b802:	f003 0301 	and.w	r3, r3, #1
 800b806:	2b00      	cmp	r3, #0
 800b808:	d106      	bne.n	800b818 <f_read+0x72>
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2107      	movs	r1, #7
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe f9ca 	bl	8009ba8 <unlock_fs>
 800b814:	2307      	movs	r3, #7
 800b816:	e130      	b.n	800ba7a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	429a      	cmp	r2, r3
 800b82a:	f240 811c 	bls.w	800ba66 <f_read+0x2c0>
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b832:	e118      	b.n	800ba66 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f040 80e4 	bne.w	800ba0a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	0a5b      	lsrs	r3, r3, #9
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	8952      	ldrh	r2, [r2, #10]
 800b84c:	3a01      	subs	r2, #1
 800b84e:	4013      	ands	r3, r2
 800b850:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d139      	bne.n	800b8cc <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d103      	bne.n	800b868 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	633b      	str	r3, [r7, #48]	; 0x30
 800b866:	e013      	b.n	800b890 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d007      	beq.n	800b880 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	4619      	mov	r1, r3
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7fe feae 	bl	800a5d8 <clmt_clust>
 800b87c:	6338      	str	r0, [r7, #48]	; 0x30
 800b87e:	e007      	b.n	800b890 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7fe fc14 	bl	800a0b6 <get_fat>
 800b88e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	2b01      	cmp	r3, #1
 800b894:	d809      	bhi.n	800b8aa <f_read+0x104>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2202      	movs	r2, #2
 800b89a:	755a      	strb	r2, [r3, #21]
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2102      	movs	r1, #2
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe f981 	bl	8009ba8 <unlock_fs>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e0e7      	b.n	800ba7a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b0:	d109      	bne.n	800b8c6 <f_read+0x120>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	755a      	strb	r2, [r3, #21]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2101      	movs	r1, #1
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fe f973 	bl	8009ba8 <unlock_fs>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e0d9      	b.n	800ba7a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ca:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	f7fe fbcf 	bl	800a078 <clust2sect>
 800b8da:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d109      	bne.n	800b8f6 <f_read+0x150>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	755a      	strb	r2, [r3, #21]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2102      	movs	r1, #2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fe f95b 	bl	8009ba8 <unlock_fs>
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	e0c1      	b.n	800ba7a <f_read+0x2d4>
			sect += csect;
 800b8f6:	69ba      	ldr	r2, [r7, #24]
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	0a5b      	lsrs	r3, r3, #9
 800b902:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	2b00      	cmp	r3, #0
 800b908:	d03e      	beq.n	800b988 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b90a:	69fa      	ldr	r2, [r7, #28]
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	4413      	add	r3, r2
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	8952      	ldrh	r2, [r2, #10]
 800b914:	4293      	cmp	r3, r2
 800b916:	d905      	bls.n	800b924 <f_read+0x17e>
					cc = fs->csize - csect;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	895b      	ldrh	r3, [r3, #10]
 800b91c:	461a      	mov	r2, r3
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	7858      	ldrb	r0, [r3, #1]
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	69ba      	ldr	r2, [r7, #24]
 800b92c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b92e:	f7fd ffc7 	bl	80098c0 <disk_read>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d009      	beq.n	800b94c <f_read+0x1a6>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2201      	movs	r2, #1
 800b93c:	755a      	strb	r2, [r3, #21]
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2101      	movs	r1, #1
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe f930 	bl	8009ba8 <unlock_fs>
 800b948:	2301      	movs	r3, #1
 800b94a:	e096      	b.n	800ba7a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	7d1b      	ldrb	r3, [r3, #20]
 800b950:	b25b      	sxtb	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	da14      	bge.n	800b980 <f_read+0x1da>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6a1a      	ldr	r2, [r3, #32]
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b960:	429a      	cmp	r2, r3
 800b962:	d90d      	bls.n	800b980 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6a1a      	ldr	r2, [r3, #32]
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	025b      	lsls	r3, r3, #9
 800b96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b970:	18d0      	adds	r0, r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3330      	adds	r3, #48	; 0x30
 800b976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b97a:	4619      	mov	r1, r3
 800b97c:	f7fe f880 	bl	8009a80 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	025b      	lsls	r3, r3, #9
 800b984:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b986:	e05a      	b.n	800ba3e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d038      	beq.n	800ba04 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	7d1b      	ldrb	r3, [r3, #20]
 800b996:	b25b      	sxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	da1d      	bge.n	800b9d8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	7858      	ldrb	r0, [r3, #1]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6a1a      	ldr	r2, [r3, #32]
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	f7fd ffa8 	bl	8009900 <disk_write>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d009      	beq.n	800b9ca <f_read+0x224>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	755a      	strb	r2, [r3, #21]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2101      	movs	r1, #1
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe f8f1 	bl	8009ba8 <unlock_fs>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e057      	b.n	800ba7a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	7d1b      	ldrb	r3, [r3, #20]
 800b9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d2:	b2da      	uxtb	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	7858      	ldrb	r0, [r3, #1]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	69ba      	ldr	r2, [r7, #24]
 800b9e6:	f7fd ff6b 	bl	80098c0 <disk_read>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d009      	beq.n	800ba04 <f_read+0x25e>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	755a      	strb	r2, [r3, #21]
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe f8d4 	bl	8009ba8 <unlock_fs>
 800ba00:	2301      	movs	r3, #1
 800ba02:	e03a      	b.n	800ba7a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ba16:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ba18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d901      	bls.n	800ba24 <f_read+0x27e>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba32:	4413      	add	r3, r2
 800ba34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba36:	4619      	mov	r1, r3
 800ba38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba3a:	f7fe f821 	bl	8009a80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ba3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba42:	4413      	add	r3, r2
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	699a      	ldr	r2, [r3, #24]
 800ba4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4c:	441a      	add	r2, r3
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	619a      	str	r2, [r3, #24]
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba58:	441a      	add	r2, r3
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	601a      	str	r2, [r3, #0]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f47f aee3 	bne.w	800b834 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe f898 	bl	8009ba8 <unlock_fs>
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3738      	adds	r7, #56	; 0x38
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b08c      	sub	sp, #48	; 0x30
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	607a      	str	r2, [r7, #4]
 800ba8e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f107 0210 	add.w	r2, r7, #16
 800baa0:	4611      	mov	r1, r2
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fc0e 	bl	800b2c4 <validate>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800baae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d107      	bne.n	800bac6 <f_write+0x44>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	7d5b      	ldrb	r3, [r3, #21]
 800baba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800babe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d009      	beq.n	800bada <f_write+0x58>
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bacc:	4611      	mov	r1, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe f86a 	bl	8009ba8 <unlock_fs>
 800bad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bad8:	e173      	b.n	800bdc2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	7d1b      	ldrb	r3, [r3, #20]
 800bade:	f003 0302 	and.w	r3, r3, #2
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d106      	bne.n	800baf4 <f_write+0x72>
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	2107      	movs	r1, #7
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe f85c 	bl	8009ba8 <unlock_fs>
 800baf0:	2307      	movs	r3, #7
 800baf2:	e166      	b.n	800bdc2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	699a      	ldr	r2, [r3, #24]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	441a      	add	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	f080 814b 	bcs.w	800bd9c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	43db      	mvns	r3, r3
 800bb0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bb0e:	e145      	b.n	800bd9c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f040 8101 	bne.w	800bd20 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	0a5b      	lsrs	r3, r3, #9
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	8952      	ldrh	r2, [r2, #10]
 800bb28:	3a01      	subs	r2, #1
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d14d      	bne.n	800bbd0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10c      	bne.n	800bb56 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d11a      	bne.n	800bb7e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe fcab 	bl	800a4a8 <create_chain>
 800bb52:	62b8      	str	r0, [r7, #40]	; 0x28
 800bb54:	e013      	b.n	800bb7e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d007      	beq.n	800bb6e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	699b      	ldr	r3, [r3, #24]
 800bb62:	4619      	mov	r1, r3
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7fe fd37 	bl	800a5d8 <clmt_clust>
 800bb6a:	62b8      	str	r0, [r7, #40]	; 0x28
 800bb6c:	e007      	b.n	800bb7e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	4619      	mov	r1, r3
 800bb76:	4610      	mov	r0, r2
 800bb78:	f7fe fc96 	bl	800a4a8 <create_chain>
 800bb7c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 8110 	beq.w	800bda6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d109      	bne.n	800bba0 <f_write+0x11e>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	755a      	strb	r2, [r3, #21]
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2102      	movs	r1, #2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe f806 	bl	8009ba8 <unlock_fs>
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	e110      	b.n	800bdc2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba6:	d109      	bne.n	800bbbc <f_write+0x13a>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	755a      	strb	r2, [r3, #21]
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd fff8 	bl	8009ba8 <unlock_fs>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e102      	b.n	800bdc2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbc0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <f_write+0x14e>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	7d1b      	ldrb	r3, [r3, #20]
 800bbd4:	b25b      	sxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	da1d      	bge.n	800bc16 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	7858      	ldrb	r0, [r3, #1]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a1a      	ldr	r2, [r3, #32]
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f7fd fe89 	bl	8009900 <disk_write>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d009      	beq.n	800bc08 <f_write+0x186>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	755a      	strb	r2, [r3, #21]
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fd ffd2 	bl	8009ba8 <unlock_fs>
 800bc04:	2301      	movs	r3, #1
 800bc06:	e0dc      	b.n	800bdc2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	7d1b      	ldrb	r3, [r3, #20]
 800bc0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	69db      	ldr	r3, [r3, #28]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fe fa2a 	bl	800a078 <clust2sect>
 800bc24:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d109      	bne.n	800bc40 <f_write+0x1be>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	755a      	strb	r2, [r3, #21]
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	2102      	movs	r1, #2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd ffb6 	bl	8009ba8 <unlock_fs>
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	e0c0      	b.n	800bdc2 <f_write+0x340>
			sect += csect;
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	4413      	add	r3, r2
 800bc46:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	0a5b      	lsrs	r3, r3, #9
 800bc4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d041      	beq.n	800bcd8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc54:	69ba      	ldr	r2, [r7, #24]
 800bc56:	6a3b      	ldr	r3, [r7, #32]
 800bc58:	4413      	add	r3, r2
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	8952      	ldrh	r2, [r2, #10]
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d905      	bls.n	800bc6e <f_write+0x1ec>
					cc = fs->csize - csect;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	895b      	ldrh	r3, [r3, #10]
 800bc66:	461a      	mov	r2, r3
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	7858      	ldrb	r0, [r3, #1]
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	697a      	ldr	r2, [r7, #20]
 800bc76:	69f9      	ldr	r1, [r7, #28]
 800bc78:	f7fd fe42 	bl	8009900 <disk_write>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d009      	beq.n	800bc96 <f_write+0x214>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2201      	movs	r2, #1
 800bc86:	755a      	strb	r2, [r3, #21]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fd ff8b 	bl	8009ba8 <unlock_fs>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e095      	b.n	800bdc2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	6a3a      	ldr	r2, [r7, #32]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d915      	bls.n	800bcd0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6a1a      	ldr	r2, [r3, #32]
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	025b      	lsls	r3, r3, #9
 800bcb4:	69fa      	ldr	r2, [r7, #28]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	f7fd fedf 	bl	8009a80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	7d1b      	ldrb	r3, [r3, #20]
 800bcc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	025b      	lsls	r3, r3, #9
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bcd6:	e044      	b.n	800bd62 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6a1b      	ldr	r3, [r3, #32]
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d01b      	beq.n	800bd1a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	699a      	ldr	r2, [r3, #24]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d215      	bcs.n	800bd1a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	7858      	ldrb	r0, [r3, #1]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	f7fd fde0 	bl	80098c0 <disk_read>
 800bd00:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d009      	beq.n	800bd1a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	755a      	strb	r2, [r3, #21]
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2101      	movs	r1, #1
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fd ff49 	bl	8009ba8 <unlock_fs>
 800bd16:	2301      	movs	r3, #1
 800bd18:	e053      	b.n	800bdc2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd28:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd2c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bd2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d901      	bls.n	800bd3a <f_write+0x2b8>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd48:	4413      	add	r3, r2
 800bd4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd4c:	69f9      	ldr	r1, [r7, #28]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fd fe96 	bl	8009a80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	7d1b      	ldrb	r3, [r3, #20]
 800bd58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bd62:	69fa      	ldr	r2, [r7, #28]
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	4413      	add	r3, r2
 800bd68:	61fb      	str	r3, [r7, #28]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	699a      	ldr	r2, [r3, #24]
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	441a      	add	r2, r3
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	619a      	str	r2, [r3, #24]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	68da      	ldr	r2, [r3, #12]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	bf38      	it	cc
 800bd82:	461a      	movcc	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	60da      	str	r2, [r3, #12]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	441a      	add	r2, r3
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f47f aeb6 	bne.w	800bb10 <f_write+0x8e>
 800bda4:	e000      	b.n	800bda8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bda6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	7d1b      	ldrb	r3, [r3, #20]
 800bdac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fd fef4 	bl	8009ba8 <unlock_fs>
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3730      	adds	r7, #48	; 0x30
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b086      	sub	sp, #24
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f107 0208 	add.w	r2, r7, #8
 800bdd8:	4611      	mov	r1, r2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fa72 	bl	800b2c4 <validate>
 800bde0:	4603      	mov	r3, r0
 800bde2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d16d      	bne.n	800bec6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7d1b      	ldrb	r3, [r3, #20]
 800bdee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d067      	beq.n	800bec6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7d1b      	ldrb	r3, [r3, #20]
 800bdfa:	b25b      	sxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	da1a      	bge.n	800be36 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	7858      	ldrb	r0, [r3, #1]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a1a      	ldr	r2, [r3, #32]
 800be0e:	2301      	movs	r3, #1
 800be10:	f7fd fd76 	bl	8009900 <disk_write>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d006      	beq.n	800be28 <f_sync+0x5e>
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2101      	movs	r1, #1
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd fec2 	bl	8009ba8 <unlock_fs>
 800be24:	2301      	movs	r3, #1
 800be26:	e055      	b.n	800bed4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7d1b      	ldrb	r3, [r3, #20]
 800be2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be30:	b2da      	uxtb	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800be36:	f7fd fa5b 	bl	80092f0 <get_fattime>
 800be3a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be42:	4619      	mov	r1, r3
 800be44:	4610      	mov	r0, r2
 800be46:	f7fe f87b 	bl	8009f40 <move_window>
 800be4a:	4603      	mov	r3, r0
 800be4c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d138      	bne.n	800bec6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be58:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	330b      	adds	r3, #11
 800be5e:	781a      	ldrb	r2, [r3, #0]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	330b      	adds	r3, #11
 800be64:	f042 0220 	orr.w	r2, r2, #32
 800be68:	b2d2      	uxtb	r2, r2
 800be6a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6818      	ldr	r0, [r3, #0]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	461a      	mov	r2, r3
 800be76:	68f9      	ldr	r1, [r7, #12]
 800be78:	f7fe fd88 	bl	800a98c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f103 021c 	add.w	r2, r3, #28
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7fd fdcd 	bl	8009a28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3316      	adds	r3, #22
 800be92:	6939      	ldr	r1, [r7, #16]
 800be94:	4618      	mov	r0, r3
 800be96:	f7fd fdc7 	bl	8009a28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3312      	adds	r3, #18
 800be9e:	2100      	movs	r1, #0
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7fd fda6 	bl	80099f2 <st_word>
					fs->wflag = 1;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2201      	movs	r2, #1
 800beaa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe f874 	bl	8009f9c <sync_fs>
 800beb4:	4603      	mov	r3, r0
 800beb6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	7d1b      	ldrb	r3, [r3, #20]
 800bebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	7dfa      	ldrb	r2, [r7, #23]
 800beca:	4611      	mov	r1, r2
 800becc:	4618      	mov	r0, r3
 800bece:	f7fd fe6b 	bl	8009ba8 <unlock_fs>
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3718      	adds	r7, #24
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff ff70 	bl	800bdca <f_sync>
 800beea:	4603      	mov	r3, r0
 800beec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d11d      	bne.n	800bf30 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f107 0208 	add.w	r2, r7, #8
 800befa:	4611      	mov	r1, r2
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff f9e1 	bl	800b2c4 <validate>
 800bf02:	4603      	mov	r3, r0
 800bf04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d111      	bne.n	800bf30 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fd ff71 	bl	8009df8 <dec_lock>
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fd fe3c 	bl	8009ba8 <unlock_fs>
#endif
		}
	}
	return res;
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	4613      	mov	r3, r2
 800bf48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf52:	4b1f      	ldr	r3, [pc, #124]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf54:	7a5b      	ldrb	r3, [r3, #9]
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d131      	bne.n	800bfc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf5c:	4b1c      	ldr	r3, [pc, #112]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf5e:	7a5b      	ldrb	r3, [r3, #9]
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	461a      	mov	r2, r3
 800bf64:	4b1a      	ldr	r3, [pc, #104]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf66:	2100      	movs	r1, #0
 800bf68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf6a:	4b19      	ldr	r3, [pc, #100]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf6c:	7a5b      	ldrb	r3, [r3, #9]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	4a17      	ldr	r2, [pc, #92]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf7a:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf7c:	7a5b      	ldrb	r3, [r3, #9]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	461a      	mov	r2, r3
 800bf82:	4b13      	ldr	r3, [pc, #76]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf84:	4413      	add	r3, r2
 800bf86:	79fa      	ldrb	r2, [r7, #7]
 800bf88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf8a:	4b11      	ldr	r3, [pc, #68]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf8c:	7a5b      	ldrb	r3, [r3, #9]
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	b2d1      	uxtb	r1, r2
 800bf94:	4a0e      	ldr	r2, [pc, #56]	; (800bfd0 <FATFS_LinkDriverEx+0x94>)
 800bf96:	7251      	strb	r1, [r2, #9]
 800bf98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf9a:	7dbb      	ldrb	r3, [r7, #22]
 800bf9c:	3330      	adds	r3, #48	; 0x30
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	223a      	movs	r2, #58	; 0x3a
 800bfaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	3302      	adds	r3, #2
 800bfb0:	222f      	movs	r2, #47	; 0x2f
 800bfb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	3303      	adds	r3, #3
 800bfb8:	2200      	movs	r2, #0
 800bfba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	20000a90 	.word	0x20000a90

0800bfd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfde:	2200      	movs	r2, #0
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7ff ffaa 	bl	800bf3c <FATFS_LinkDriverEx>
 800bfe8:	4603      	mov	r3, r0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b086      	sub	sp, #24
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	4603      	mov	r3, r0
 800bffa:	6039      	str	r1, [r7, #0]
 800bffc:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	2300      	movs	r3, #0
 800c004:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c006:	f107 030c 	add.w	r3, r7, #12
 800c00a:	2101      	movs	r1, #1
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f8e9 	bl	800c1e4 <osSemaphoreCreate>
 800c012:	4602      	mov	r2, r0
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bf14      	ite	ne
 800c020:	2301      	movne	r3, #1
 800c022:	2300      	moveq	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	617b      	str	r3, [r7, #20]

    return ret;
 800c028:	697b      	ldr	r3, [r7, #20]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f988 	bl	800c350 <osSemaphoreDelete>
#endif
    return 1;
 800c040:	2301      	movs	r3, #1
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c056:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 f8f4 	bl	800c248 <osSemaphoreWait>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c066:	2301      	movs	r3, #1
 800c068:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c06a:	68fb      	ldr	r3, [r7, #12]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f931 	bl	800c2e4 <osSemaphoreRelease>
#endif
}
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b085      	sub	sp, #20
 800c08e:	af00      	add	r7, sp, #0
 800c090:	4603      	mov	r3, r0
 800c092:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c094:	2300      	movs	r3, #0
 800c096:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c09c:	2b84      	cmp	r3, #132	; 0x84
 800c09e:	d005      	beq.n	800c0ac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c0a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	3303      	adds	r3, #3
 800c0aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c0ba:	b480      	push	{r7}
 800c0bc:	b083      	sub	sp, #12
 800c0be:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0c0:	f3ef 8305 	mrs	r3, IPSR
 800c0c4:	607b      	str	r3, [r7, #4]
  return(result);
 800c0c6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	bf14      	ite	ne
 800c0cc:	2301      	movne	r3, #1
 800c0ce:	2300      	moveq	r3, #0
 800c0d0:	b2db      	uxtb	r3, r3
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c0e2:	f001 fda1 	bl	800dc28 <vTaskStartScheduler>
  
  return osOK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c0f0:	f002 f9f6 	bl	800e4e0 <xTaskGetSchedulerState>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d101      	bne.n	800c0fe <osKernelRunning+0x12>
    return 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e000      	b.n	800c100 <osKernelRunning+0x14>
  else
    return 1;
 800c0fe:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c100:	4618      	mov	r0, r3
 800c102:	bd80      	pop	{r7, pc}

0800c104 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c108:	f7ff ffd7 	bl	800c0ba <inHandlerMode>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c112:	f001 febf 	bl	800de94 <xTaskGetTickCountFromISR>
 800c116:	4603      	mov	r3, r0
 800c118:	e002      	b.n	800c120 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c11a:	f001 feab 	bl	800de74 <xTaskGetTickCount>
 800c11e:	4603      	mov	r3, r0
  }
}
 800c120:	4618      	mov	r0, r3
 800c122:	bd80      	pop	{r7, pc}

0800c124 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c126:	b089      	sub	sp, #36	; 0x24
 800c128:	af04      	add	r7, sp, #16
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	695b      	ldr	r3, [r3, #20]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d020      	beq.n	800c178 <osThreadCreate+0x54>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d01c      	beq.n	800c178 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685c      	ldr	r4, [r3, #4]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681d      	ldr	r5, [r3, #0]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691e      	ldr	r6, [r3, #16]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff ff9a 	bl	800c08a <makeFreeRtosPriority>
 800c156:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c160:	9202      	str	r2, [sp, #8]
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	9100      	str	r1, [sp, #0]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	4632      	mov	r2, r6
 800c16a:	4629      	mov	r1, r5
 800c16c:	4620      	mov	r0, r4
 800c16e:	f001 fab1 	bl	800d6d4 <xTaskCreateStatic>
 800c172:	4603      	mov	r3, r0
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	e01c      	b.n	800c1b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685c      	ldr	r4, [r3, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c184:	b29e      	uxth	r6, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7ff ff7c 	bl	800c08a <makeFreeRtosPriority>
 800c192:	4602      	mov	r2, r0
 800c194:	f107 030c 	add.w	r3, r7, #12
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	9200      	str	r2, [sp, #0]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	4632      	mov	r2, r6
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f001 faf3 	bl	800d78e <xTaskCreate>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d001      	beq.n	800c1b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e000      	b.n	800c1b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c1bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <osDelay+0x16>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	e000      	b.n	800c1d4 <osDelay+0x18>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 fcef 	bl	800dbb8 <vTaskDelay>
  
  return osOK;
 800c1da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00f      	beq.n	800c216 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d10a      	bne.n	800c212 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	2203      	movs	r2, #3
 800c202:	9200      	str	r2, [sp, #0]
 800c204:	2200      	movs	r2, #0
 800c206:	2100      	movs	r1, #0
 800c208:	2001      	movs	r0, #1
 800c20a:	f000 faad 	bl	800c768 <xQueueGenericCreateStatic>
 800c20e:	4603      	mov	r3, r0
 800c210:	e016      	b.n	800c240 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c212:	2300      	movs	r3, #0
 800c214:	e014      	b.n	800c240 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d110      	bne.n	800c23e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c21c:	2203      	movs	r2, #3
 800c21e:	2100      	movs	r1, #0
 800c220:	2001      	movs	r0, #1
 800c222:	f000 fb19 	bl	800c858 <xQueueGenericCreate>
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d005      	beq.n	800c23a <osSemaphoreCreate+0x56>
 800c22e:	2300      	movs	r3, #0
 800c230:	2200      	movs	r2, #0
 800c232:	2100      	movs	r1, #0
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f000 fb6f 	bl	800c918 <xQueueGenericSend>
      return sema;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	e000      	b.n	800c240 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c23e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c252:	2300      	movs	r3, #0
 800c254:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d101      	bne.n	800c260 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c25c:	2380      	movs	r3, #128	; 0x80
 800c25e:	e03a      	b.n	800c2d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26a:	d103      	bne.n	800c274 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c26c:	f04f 33ff 	mov.w	r3, #4294967295
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	e009      	b.n	800c288 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <osSemaphoreWait+0x40>
      ticks = 1;
 800c284:	2301      	movs	r3, #1
 800c286:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c288:	f7ff ff17 	bl	800c0ba <inHandlerMode>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d017      	beq.n	800c2c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c292:	f107 0308 	add.w	r3, r7, #8
 800c296:	461a      	mov	r2, r3
 800c298:	2100      	movs	r1, #0
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fffe 	bl	800d29c <xQueueReceiveFromISR>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d001      	beq.n	800c2aa <osSemaphoreWait+0x62>
      return osErrorOS;
 800c2a6:	23ff      	movs	r3, #255	; 0xff
 800c2a8:	e015      	b.n	800c2d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d011      	beq.n	800c2d4 <osSemaphoreWait+0x8c>
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <osSemaphoreWait+0x98>)
 800c2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	e008      	b.n	800c2d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c2c2:	68f9      	ldr	r1, [r7, #12]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fead 	bl	800d024 <xQueueSemaphoreTake>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d001      	beq.n	800c2d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c2d0:	23ff      	movs	r3, #255	; 0xff
 800c2d2:	e000      	b.n	800c2d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	e000ed04 	.word	0xe000ed04

0800c2e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c2f4:	f7ff fee1 	bl	800c0ba <inHandlerMode>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d016      	beq.n	800c32c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c2fe:	f107 0308 	add.w	r3, r7, #8
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fcdc 	bl	800ccc2 <xQueueGiveFromISR>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d001      	beq.n	800c314 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c310:	23ff      	movs	r3, #255	; 0xff
 800c312:	e017      	b.n	800c344 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d013      	beq.n	800c342 <osSemaphoreRelease+0x5e>
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <osSemaphoreRelease+0x68>)
 800c31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c320:	601a      	str	r2, [r3, #0]
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	e00a      	b.n	800c342 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c32c:	2300      	movs	r3, #0
 800c32e:	2200      	movs	r2, #0
 800c330:	2100      	movs	r1, #0
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 faf0 	bl	800c918 <xQueueGenericSend>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d001      	beq.n	800c342 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c33e:	23ff      	movs	r3, #255	; 0xff
 800c340:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c342:	68fb      	ldr	r3, [r7, #12]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c358:	f7ff feaf 	bl	800c0ba <inHandlerMode>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d001      	beq.n	800c366 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c362:	2382      	movs	r3, #130	; 0x82
 800c364:	e003      	b.n	800c36e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f001 f836 	bl	800d3d8 <vQueueDelete>

  return osOK; 
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c376:	b590      	push	{r4, r7, lr}
 800c378:	b085      	sub	sp, #20
 800c37a:	af02      	add	r7, sp, #8
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d011      	beq.n	800c3ac <osMessageCreate+0x36>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00d      	beq.n	800c3ac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6818      	ldr	r0, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6859      	ldr	r1, [r3, #4]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	689a      	ldr	r2, [r3, #8]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	2400      	movs	r4, #0
 800c3a2:	9400      	str	r4, [sp, #0]
 800c3a4:	f000 f9e0 	bl	800c768 <xQueueGenericCreateStatic>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	e008      	b.n	800c3be <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6818      	ldr	r0, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	f000 fa4e 	bl	800c858 <xQueueGenericCreate>
 800c3bc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd90      	pop	{r4, r7, pc}
	...

0800c3c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <osMessagePut+0x1e>
    ticks = 1;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c3e6:	f7ff fe68 	bl	800c0ba <inHandlerMode>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d018      	beq.n	800c422 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c3f0:	f107 0210 	add.w	r2, r7, #16
 800c3f4:	f107 0108 	add.w	r1, r7, #8
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 fbb2 	bl	800cb64 <xQueueGenericSendFromISR>
 800c400:	4603      	mov	r3, r0
 800c402:	2b01      	cmp	r3, #1
 800c404:	d001      	beq.n	800c40a <osMessagePut+0x42>
      return osErrorOS;
 800c406:	23ff      	movs	r3, #255	; 0xff
 800c408:	e018      	b.n	800c43c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d014      	beq.n	800c43a <osMessagePut+0x72>
 800c410:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <osMessagePut+0x7c>)
 800c412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	e00b      	b.n	800c43a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c422:	f107 0108 	add.w	r1, r7, #8
 800c426:	2300      	movs	r3, #0
 800c428:	697a      	ldr	r2, [r7, #20]
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f000 fa74 	bl	800c918 <xQueueGenericSend>
 800c430:	4603      	mov	r3, r0
 800c432:	2b01      	cmp	r3, #1
 800c434:	d001      	beq.n	800c43a <osMessagePut+0x72>
      return osErrorOS;
 800c436:	23ff      	movs	r3, #255	; 0xff
 800c438:	e000      	b.n	800c43c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	e000ed04 	.word	0xe000ed04

0800c448 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b08b      	sub	sp, #44	; 0x2c
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10a      	bne.n	800c478 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c462:	2380      	movs	r3, #128	; 0x80
 800c464:	617b      	str	r3, [r7, #20]
    return event;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	461c      	mov	r4, r3
 800c46a:	f107 0314 	add.w	r3, r7, #20
 800c46e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c476:	e054      	b.n	800c522 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c478:	2300      	movs	r3, #0
 800c47a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c47c:	2300      	movs	r3, #0
 800c47e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d103      	bne.n	800c490 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c488:	f04f 33ff 	mov.w	r3, #4294967295
 800c48c:	627b      	str	r3, [r7, #36]	; 0x24
 800c48e:	e009      	b.n	800c4a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d006      	beq.n	800c4a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <osMessageGet+0x5c>
      ticks = 1;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c4a4:	f7ff fe09 	bl	800c0ba <inHandlerMode>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d01c      	beq.n	800c4e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c4ae:	f107 0220 	add.w	r2, r7, #32
 800c4b2:	f107 0314 	add.w	r3, r7, #20
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	68b8      	ldr	r0, [r7, #8]
 800c4bc:	f000 feee 	bl	800d29c <xQueueReceiveFromISR>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d102      	bne.n	800c4cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c4c6:	2310      	movs	r3, #16
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	e001      	b.n	800c4d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d01d      	beq.n	800c512 <osMessageGet+0xca>
 800c4d6:	4b15      	ldr	r3, [pc, #84]	; (800c52c <osMessageGet+0xe4>)
 800c4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4dc:	601a      	str	r2, [r3, #0]
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	f3bf 8f6f 	isb	sy
 800c4e6:	e014      	b.n	800c512 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c4e8:	f107 0314 	add.w	r3, r7, #20
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	68b8      	ldr	r0, [r7, #8]
 800c4f4:	f000 fc86 	bl	800ce04 <xQueueReceive>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d102      	bne.n	800c504 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c4fe:	2310      	movs	r3, #16
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	e006      	b.n	800c512 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	2b00      	cmp	r3, #0
 800c508:	d101      	bne.n	800c50e <osMessageGet+0xc6>
 800c50a:	2300      	movs	r3, #0
 800c50c:	e000      	b.n	800c510 <osMessageGet+0xc8>
 800c50e:	2340      	movs	r3, #64	; 0x40
 800c510:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	461c      	mov	r4, r3
 800c516:	f107 0314 	add.w	r3, r7, #20
 800c51a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c51e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	372c      	adds	r7, #44	; 0x2c
 800c526:	46bd      	mov	sp, r7
 800c528:	bd90      	pop	{r4, r7, pc}
 800c52a:	bf00      	nop
 800c52c:	e000ed04 	.word	0xe000ed04

0800c530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f103 0208 	add.w	r2, r3, #8
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f04f 32ff 	mov.w	r2, #4294967295
 800c548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f103 0208 	add.w	r2, r3, #8
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f103 0208 	add.w	r2, r3, #8
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c57e:	bf00      	nop
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c58a:	b480      	push	{r7}
 800c58c:	b085      	sub	sp, #20
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	1c5a      	adds	r2, r3, #1
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	601a      	str	r2, [r3, #0]
}
 800c5c6:	bf00      	nop
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e8:	d103      	bne.n	800c5f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	e00c      	b.n	800c60c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3308      	adds	r3, #8
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	e002      	b.n	800c600 <vListInsert+0x2e>
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	60fb      	str	r3, [r7, #12]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d2f6      	bcs.n	800c5fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	1c5a      	adds	r2, r3, #1
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	601a      	str	r2, [r3, #0]
}
 800c638:	bf00      	nop
 800c63a:	3714      	adds	r7, #20
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	6892      	ldr	r2, [r2, #8]
 800c65a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	6852      	ldr	r2, [r2, #4]
 800c664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d103      	bne.n	800c678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	689a      	ldr	r2, [r3, #8]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	1e5a      	subs	r2, r3, #1
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d10a      	bne.n	800c6c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b0:	f383 8811 	msr	BASEPRI, r3
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c6be:	bf00      	nop
 800c6c0:	e7fe      	b.n	800c6c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c6c2:	f002 fa77 	bl	800ebb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ce:	68f9      	ldr	r1, [r7, #12]
 800c6d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6d2:	fb01 f303 	mul.w	r3, r1, r3
 800c6d6:	441a      	add	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	68f9      	ldr	r1, [r7, #12]
 800c6f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c6f8:	fb01 f303 	mul.w	r3, r1, r3
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	22ff      	movs	r2, #255	; 0xff
 800c706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	22ff      	movs	r2, #255	; 0xff
 800c70e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d114      	bne.n	800c742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01a      	beq.n	800c756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3310      	adds	r3, #16
 800c724:	4618      	mov	r0, r3
 800c726:	f001 fd17 	bl	800e158 <xTaskRemoveFromEventList>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d012      	beq.n	800c756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c730:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <xQueueGenericReset+0xcc>)
 800c732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	e009      	b.n	800c756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3310      	adds	r3, #16
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff fef2 	bl	800c530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3324      	adds	r3, #36	; 0x24
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff feed 	bl	800c530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c756:	f002 fa5d 	bl	800ec14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c75a:	2301      	movs	r3, #1
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	e000ed04 	.word	0xe000ed04

0800c768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08e      	sub	sp, #56	; 0x38
 800c76c:	af02      	add	r7, sp, #8
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <xQueueGenericCreateStatic+0x52>
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <xQueueGenericCreateStatic+0x56>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e000      	b.n	800c7c0 <xQueueGenericCreateStatic+0x58>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10a      	bne.n	800c7da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	623b      	str	r3, [r7, #32]
}
 800c7d6:	bf00      	nop
 800c7d8:	e7fe      	b.n	800c7d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <xQueueGenericCreateStatic+0x7e>
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d101      	bne.n	800c7ea <xQueueGenericCreateStatic+0x82>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e000      	b.n	800c7ec <xQueueGenericCreateStatic+0x84>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10a      	bne.n	800c806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	61fb      	str	r3, [r7, #28]
}
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c806:	2348      	movs	r3, #72	; 0x48
 800c808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b48      	cmp	r3, #72	; 0x48
 800c80e:	d00a      	beq.n	800c826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	61bb      	str	r3, [r7, #24]
}
 800c822:	bf00      	nop
 800c824:	e7fe      	b.n	800c824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00d      	beq.n	800c84e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c83a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	4613      	mov	r3, r2
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	68b9      	ldr	r1, [r7, #8]
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 f83f 	bl	800c8cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c850:	4618      	mov	r0, r3
 800c852:	3730      	adds	r7, #48	; 0x30
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af02      	add	r7, sp, #8
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10a      	bne.n	800c882 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	613b      	str	r3, [r7, #16]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	fb02 f303 	mul.w	r3, r2, r3
 800c88a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	3348      	adds	r3, #72	; 0x48
 800c890:	4618      	mov	r0, r3
 800c892:	f002 fab1 	bl	800edf8 <pvPortMalloc>
 800c896:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d011      	beq.n	800c8c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	3348      	adds	r3, #72	; 0x48
 800c8a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c8b0:	79fa      	ldrb	r2, [r7, #7]
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 f805 	bl	800c8cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
	}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3720      	adds	r7, #32
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d103      	bne.n	800c8e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	69ba      	ldr	r2, [r7, #24]
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	e002      	b.n	800c8ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	69b8      	ldr	r0, [r7, #24]
 800c8fe:	f7ff fecb 	bl	800c698 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800c902:	78fb      	ldrb	r3, [r7, #3]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	68f9      	ldr	r1, [r7, #12]
 800c908:	2073      	movs	r0, #115	; 0x73
 800c90a:	f003 f9c3 	bl	800fc94 <SEGGER_SYSVIEW_RecordU32x3>
}
 800c90e:	bf00      	nop
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
	...

0800c918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b090      	sub	sp, #64	; 0x40
 800c91c:	af02      	add	r7, sp, #8
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c926:	2300      	movs	r3, #0
 800c928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10a      	bne.n	800c94a <xQueueGenericSend+0x32>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c946:	bf00      	nop
 800c948:	e7fe      	b.n	800c948 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d103      	bne.n	800c958 <xQueueGenericSend+0x40>
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <xQueueGenericSend+0x44>
 800c958:	2301      	movs	r3, #1
 800c95a:	e000      	b.n	800c95e <xQueueGenericSend+0x46>
 800c95c:	2300      	movs	r3, #0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10a      	bne.n	800c978 <xQueueGenericSend+0x60>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c974:	bf00      	nop
 800c976:	e7fe      	b.n	800c976 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d103      	bne.n	800c986 <xQueueGenericSend+0x6e>
 800c97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c982:	2b01      	cmp	r3, #1
 800c984:	d101      	bne.n	800c98a <xQueueGenericSend+0x72>
 800c986:	2301      	movs	r3, #1
 800c988:	e000      	b.n	800c98c <xQueueGenericSend+0x74>
 800c98a:	2300      	movs	r3, #0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10a      	bne.n	800c9a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	623b      	str	r3, [r7, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	e7fe      	b.n	800c9a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9a6:	f001 fd9b 	bl	800e4e0 <xTaskGetSchedulerState>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <xQueueGenericSend+0x9e>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <xQueueGenericSend+0xa2>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e000      	b.n	800c9bc <xQueueGenericSend+0xa4>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10a      	bne.n	800c9d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c4:	f383 8811 	msr	BASEPRI, r3
 800c9c8:	f3bf 8f6f 	isb	sy
 800c9cc:	f3bf 8f4f 	dsb	sy
 800c9d0:	61fb      	str	r3, [r7, #28]
}
 800c9d2:	bf00      	nop
 800c9d4:	e7fe      	b.n	800c9d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9d6:	f002 f8ed 	bl	800ebb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d302      	bcc.n	800c9ec <xQueueGenericSend+0xd4>
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d136      	bne.n	800ca5a <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f003 fe02 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4601      	mov	r1, r0
 800ca00:	205a      	movs	r0, #90	; 0x5a
 800ca02:	f003 f9bd 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	68b9      	ldr	r1, [r7, #8]
 800ca0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca0c:	f000 fd28 	bl	800d460 <prvCopyDataToQueue>
 800ca10:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d010      	beq.n	800ca3c <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	3324      	adds	r3, #36	; 0x24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f001 fb9a 	bl	800e158 <xTaskRemoveFromEventList>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d013      	beq.n	800ca52 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca2a:	4b4d      	ldr	r3, [pc, #308]	; (800cb60 <xQueueGenericSend+0x248>)
 800ca2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	e00a      	b.n	800ca52 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d007      	beq.n	800ca52 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca42:	4b47      	ldr	r3, [pc, #284]	; (800cb60 <xQueueGenericSend+0x248>)
 800ca44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ca52:	f002 f8df 	bl	800ec14 <vPortExitCritical>
				return pdPASS;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e07d      	b.n	800cb56 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d110      	bne.n	800ca82 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca60:	f002 f8d8 	bl	800ec14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	4618      	mov	r0, r3
 800ca68:	f003 fdc6 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	460b      	mov	r3, r1
 800ca76:	4601      	mov	r1, r0
 800ca78:	205a      	movs	r0, #90	; 0x5a
 800ca7a:	f003 f981 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e069      	b.n	800cb56 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d106      	bne.n	800ca96 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca88:	f107 0314 	add.w	r3, r7, #20
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f001 fbc9 	bl	800e224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca92:	2301      	movs	r3, #1
 800ca94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca96:	f002 f8bd 	bl	800ec14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca9a:	f001 f93d 	bl	800dd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca9e:	f002 f889 	bl	800ebb4 <vPortEnterCritical>
 800caa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caa8:	b25b      	sxtb	r3, r3
 800caaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caae:	d103      	bne.n	800cab8 <xQueueGenericSend+0x1a0>
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cabe:	b25b      	sxtb	r3, r3
 800cac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cac4:	d103      	bne.n	800cace <xQueueGenericSend+0x1b6>
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cace:	f002 f8a1 	bl	800ec14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cad2:	1d3a      	adds	r2, r7, #4
 800cad4:	f107 0314 	add.w	r3, r7, #20
 800cad8:	4611      	mov	r1, r2
 800cada:	4618      	mov	r0, r3
 800cadc:	f001 fbb8 	bl	800e250 <xTaskCheckForTimeOut>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d124      	bne.n	800cb30 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cae8:	f000 fdb2 	bl	800d650 <prvIsQueueFull>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d018      	beq.n	800cb24 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	3310      	adds	r3, #16
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	4611      	mov	r1, r2
 800cafa:	4618      	mov	r0, r3
 800cafc:	f001 fb08 	bl	800e110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb02:	f000 fd3d 	bl	800d580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb06:	f001 f915 	bl	800dd34 <xTaskResumeAll>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f47f af62 	bne.w	800c9d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <xQueueGenericSend+0x248>)
 800cb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	e758      	b.n	800c9d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb26:	f000 fd2b 	bl	800d580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb2a:	f001 f903 	bl	800dd34 <xTaskResumeAll>
 800cb2e:	e752      	b.n	800c9d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb32:	f000 fd25 	bl	800d580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb36:	f001 f8fd 	bl	800dd34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f003 fd5b 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4601      	mov	r1, r0
 800cb4e:	205a      	movs	r0, #90	; 0x5a
 800cb50:	f003 f916 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800cb54:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3738      	adds	r7, #56	; 0x38
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	e000ed04 	.word	0xe000ed04

0800cb64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b090      	sub	sp, #64	; 0x40
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
 800cb70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d103      	bne.n	800cba0 <xQueueGenericSendFromISR+0x3c>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <xQueueGenericSendFromISR+0x40>
 800cba0:	2301      	movs	r3, #1
 800cba2:	e000      	b.n	800cba6 <xQueueGenericSendFromISR+0x42>
 800cba4:	2300      	movs	r3, #0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbbc:	bf00      	nop
 800cbbe:	e7fe      	b.n	800cbbe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d103      	bne.n	800cbce <xQueueGenericSendFromISR+0x6a>
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d101      	bne.n	800cbd2 <xQueueGenericSendFromISR+0x6e>
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e000      	b.n	800cbd4 <xQueueGenericSendFromISR+0x70>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10a      	bne.n	800cbee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	623b      	str	r3, [r7, #32]
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbee:	f002 f8c3 	bl	800ed78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cbf2:	f3ef 8211 	mrs	r2, BASEPRI
 800cbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	61fa      	str	r2, [r7, #28]
 800cc08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d302      	bcc.n	800cc20 <xQueueGenericSendFromISR+0xbc>
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d139      	bne.n	800cc94 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2e:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	4618      	mov	r0, r3
 800cc34:	f003 fce0 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cc38:	4601      	mov	r1, r0
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	2060      	movs	r0, #96	; 0x60
 800cc40:	f002 ffce 	bl	800fbe0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	68b9      	ldr	r1, [r7, #8]
 800cc48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc4a:	f000 fc09 	bl	800d460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc56:	d112      	bne.n	800cc7e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d016      	beq.n	800cc8e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc62:	3324      	adds	r3, #36	; 0x24
 800cc64:	4618      	mov	r0, r3
 800cc66:	f001 fa77 	bl	800e158 <xTaskRemoveFromEventList>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00e      	beq.n	800cc8e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d00b      	beq.n	800cc8e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	e007      	b.n	800cc8e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc82:	3301      	adds	r3, #1
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	b25a      	sxtb	r2, r3
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cc92:	e00b      	b.n	800ccac <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	4618      	mov	r0, r3
 800cc98:	f003 fcae 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cc9c:	4601      	mov	r1, r0
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	461a      	mov	r2, r3
 800cca2:	2060      	movs	r0, #96	; 0x60
 800cca4:	f002 ff9c 	bl	800fbe0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3740      	adds	r7, #64	; 0x40
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b08e      	sub	sp, #56	; 0x38
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10a      	bne.n	800ccec <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ccd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	623b      	str	r3, [r7, #32]
}
 800cce8:	bf00      	nop
 800ccea:	e7fe      	b.n	800ccea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ccec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <xQueueGiveFromISR+0x48>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	61fb      	str	r3, [r7, #28]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d103      	bne.n	800cd1a <xQueueGiveFromISR+0x58>
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d101      	bne.n	800cd1e <xQueueGiveFromISR+0x5c>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e000      	b.n	800cd20 <xQueueGiveFromISR+0x5e>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10a      	bne.n	800cd3a <xQueueGiveFromISR+0x78>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	61bb      	str	r3, [r7, #24]
}
 800cd36:	bf00      	nop
 800cd38:	e7fe      	b.n	800cd38 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd3a:	f002 f81d 	bl	800ed78 <vPortValidateInterruptPriority>
	__asm volatile
 800cd3e:	f3ef 8211 	mrs	r2, BASEPRI
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	617a      	str	r2, [r7, #20]
 800cd54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cd56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d235      	bcs.n	800cdd6 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800cd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd76:	4618      	mov	r0, r3
 800cd78:	f003 fc3e 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cd7c:	4601      	mov	r1, r0
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	461a      	mov	r2, r3
 800cd82:	2060      	movs	r0, #96	; 0x60
 800cd84:	f002 ff2c 	bl	800fbe0 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd8a:	1c5a      	adds	r2, r3, #1
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd98:	d112      	bne.n	800cdc0 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d016      	beq.n	800cdd0 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	3324      	adds	r3, #36	; 0x24
 800cda6:	4618      	mov	r0, r3
 800cda8:	f001 f9d6 	bl	800e158 <xTaskRemoveFromEventList>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00e      	beq.n	800cdd0 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00b      	beq.n	800cdd0 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	e007      	b.n	800cdd0 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	b25a      	sxtb	r2, r3
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd4:	e00b      	b.n	800cdee <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f003 fc0d 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cdde:	4601      	mov	r1, r0
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	461a      	mov	r2, r3
 800cde4:	2060      	movs	r0, #96	; 0x60
 800cde6:	f002 fefb 	bl	800fbe0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	637b      	str	r3, [r7, #52]	; 0x34
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f383 8811 	msr	BASEPRI, r3
}
 800cdf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3738      	adds	r7, #56	; 0x38
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce04:	b590      	push	{r4, r7, lr}
 800ce06:	b08f      	sub	sp, #60	; 0x3c
 800ce08:	af02      	add	r7, sp, #8
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce10:	2300      	movs	r3, #0
 800ce12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <xQueueReceive+0x30>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	623b      	str	r3, [r7, #32]
}
 800ce30:	bf00      	nop
 800ce32:	e7fe      	b.n	800ce32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d103      	bne.n	800ce42 <xQueueReceive+0x3e>
 800ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <xQueueReceive+0x42>
 800ce42:	2301      	movs	r3, #1
 800ce44:	e000      	b.n	800ce48 <xQueueReceive+0x44>
 800ce46:	2300      	movs	r3, #0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10a      	bne.n	800ce62 <xQueueReceive+0x5e>
	__asm volatile
 800ce4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce50:	f383 8811 	msr	BASEPRI, r3
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	f3bf 8f4f 	dsb	sy
 800ce5c:	61fb      	str	r3, [r7, #28]
}
 800ce5e:	bf00      	nop
 800ce60:	e7fe      	b.n	800ce60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce62:	f001 fb3d 	bl	800e4e0 <xTaskGetSchedulerState>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <xQueueReceive+0x6e>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d101      	bne.n	800ce76 <xQueueReceive+0x72>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e000      	b.n	800ce78 <xQueueReceive+0x74>
 800ce76:	2300      	movs	r3, #0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10a      	bne.n	800ce92 <xQueueReceive+0x8e>
	__asm volatile
 800ce7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce80:	f383 8811 	msr	BASEPRI, r3
 800ce84:	f3bf 8f6f 	isb	sy
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	61bb      	str	r3, [r7, #24]
}
 800ce8e:	bf00      	nop
 800ce90:	e7fe      	b.n	800ce90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce92:	f001 fe8f 	bl	800ebb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d02f      	beq.n	800cf02 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cea2:	68b9      	ldr	r1, [r7, #8]
 800cea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cea6:	f000 fb45 	bl	800d534 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	4618      	mov	r0, r3
 800ceae:	f003 fba3 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	f003 fb9f 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800ceba:	4602      	mov	r2, r0
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2101      	movs	r1, #1
 800cec0:	9100      	str	r1, [sp, #0]
 800cec2:	4621      	mov	r1, r4
 800cec4:	205c      	movs	r0, #92	; 0x5c
 800cec6:	f002 ff5b 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	1e5a      	subs	r2, r3, #1
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00f      	beq.n	800cefa <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	3310      	adds	r3, #16
 800cede:	4618      	mov	r0, r3
 800cee0:	f001 f93a 	bl	800e158 <xTaskRemoveFromEventList>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d007      	beq.n	800cefa <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ceea:	4b4d      	ldr	r3, [pc, #308]	; (800d020 <xQueueReceive+0x21c>)
 800ceec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cefa:	f001 fe8b 	bl	800ec14 <vPortExitCritical>
				return pdPASS;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e08a      	b.n	800d018 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d113      	bne.n	800cf30 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf08:	f001 fe84 	bl	800ec14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f003 fb72 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cf14:	4604      	mov	r4, r0
 800cf16:	2000      	movs	r0, #0
 800cf18:	f003 fb6e 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2101      	movs	r1, #1
 800cf22:	9100      	str	r1, [sp, #0]
 800cf24:	4621      	mov	r1, r4
 800cf26:	205c      	movs	r0, #92	; 0x5c
 800cf28:	f002 ff2a 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e073      	b.n	800d018 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d106      	bne.n	800cf44 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf36:	f107 0310 	add.w	r3, r7, #16
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f001 f972 	bl	800e224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf40:	2301      	movs	r3, #1
 800cf42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf44:	f001 fe66 	bl	800ec14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf48:	f000 fee6 	bl	800dd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf4c:	f001 fe32 	bl	800ebb4 <vPortEnterCritical>
 800cf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf56:	b25b      	sxtb	r3, r3
 800cf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5c:	d103      	bne.n	800cf66 <xQueueReceive+0x162>
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf6c:	b25b      	sxtb	r3, r3
 800cf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf72:	d103      	bne.n	800cf7c <xQueueReceive+0x178>
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf7c:	f001 fe4a 	bl	800ec14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf80:	1d3a      	adds	r2, r7, #4
 800cf82:	f107 0310 	add.w	r3, r7, #16
 800cf86:	4611      	mov	r1, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f001 f961 	bl	800e250 <xTaskCheckForTimeOut>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d124      	bne.n	800cfde <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf96:	f000 fb45 	bl	800d624 <prvIsQueueEmpty>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d018      	beq.n	800cfd2 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa2:	3324      	adds	r3, #36	; 0x24
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f001 f8b1 	bl	800e110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb0:	f000 fae6 	bl	800d580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfb4:	f000 febe 	bl	800dd34 <xTaskResumeAll>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f47f af69 	bne.w	800ce92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cfc0:	4b17      	ldr	r3, [pc, #92]	; (800d020 <xQueueReceive+0x21c>)
 800cfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	e75f      	b.n	800ce92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cfd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd4:	f000 fad4 	bl	800d580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfd8:	f000 feac 	bl	800dd34 <xTaskResumeAll>
 800cfdc:	e759      	b.n	800ce92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cfde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfe0:	f000 face 	bl	800d580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfe4:	f000 fea6 	bl	800dd34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfea:	f000 fb1b 	bl	800d624 <prvIsQueueEmpty>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f43f af4e 	beq.w	800ce92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800cff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff8:	4618      	mov	r0, r3
 800cffa:	f003 fafd 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800cffe:	4604      	mov	r4, r0
 800d000:	2000      	movs	r0, #0
 800d002:	f003 faf9 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d006:	4602      	mov	r2, r0
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2101      	movs	r1, #1
 800d00c:	9100      	str	r1, [sp, #0]
 800d00e:	4621      	mov	r1, r4
 800d010:	205c      	movs	r0, #92	; 0x5c
 800d012:	f002 feb5 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800d016:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3734      	adds	r7, #52	; 0x34
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd90      	pop	{r4, r7, pc}
 800d020:	e000ed04 	.word	0xe000ed04

0800d024 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d024:	b590      	push	{r4, r7, lr}
 800d026:	b091      	sub	sp, #68	; 0x44
 800d028:	af02      	add	r7, sp, #8
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d02e:	2300      	movs	r3, #0
 800d030:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d036:	2300      	movs	r3, #0
 800d038:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	623b      	str	r3, [r7, #32]
}
 800d052:	bf00      	nop
 800d054:	e7fe      	b.n	800d054 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00a      	beq.n	800d074 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	61fb      	str	r3, [r7, #28]
}
 800d070:	bf00      	nop
 800d072:	e7fe      	b.n	800d072 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d074:	f001 fa34 	bl	800e4e0 <xTaskGetSchedulerState>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d102      	bne.n	800d084 <xQueueSemaphoreTake+0x60>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d101      	bne.n	800d088 <xQueueSemaphoreTake+0x64>
 800d084:	2301      	movs	r3, #1
 800d086:	e000      	b.n	800d08a <xQueueSemaphoreTake+0x66>
 800d088:	2300      	movs	r3, #0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	61bb      	str	r3, [r7, #24]
}
 800d0a0:	bf00      	nop
 800d0a2:	e7fe      	b.n	800d0a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0a4:	f001 fd86 	bl	800ebb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d034      	beq.n	800d11e <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f003 fa9e 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d0bc:	4604      	mov	r4, r0
 800d0be:	2000      	movs	r0, #0
 800d0c0:	f003 fa9a 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	9100      	str	r1, [sp, #0]
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	205c      	movs	r0, #92	; 0x5c
 800d0d0:	f002 fe56 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d6:	1e5a      	subs	r2, r3, #1
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d104      	bne.n	800d0ee <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0e4:	f001 fbbe 	bl	800e864 <pvTaskIncrementMutexHeldCount>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00f      	beq.n	800d116 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	3310      	adds	r3, #16
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f001 f82c 	bl	800e158 <xTaskRemoveFromEventList>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d007      	beq.n	800d116 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d106:	4b64      	ldr	r3, [pc, #400]	; (800d298 <xQueueSemaphoreTake+0x274>)
 800d108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d116:	f001 fd7d 	bl	800ec14 <vPortExitCritical>
				return pdPASS;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e0b7      	b.n	800d28e <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d121      	bne.n	800d168 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00a      	beq.n	800d140 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 800d12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	617b      	str	r3, [r7, #20]
}
 800d13c:	bf00      	nop
 800d13e:	e7fe      	b.n	800d13e <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d140:	f001 fd68 	bl	800ec14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d146:	4618      	mov	r0, r3
 800d148:	f003 fa56 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d14c:	4604      	mov	r4, r0
 800d14e:	2000      	movs	r0, #0
 800d150:	f003 fa52 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d154:	4602      	mov	r2, r0
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	2101      	movs	r1, #1
 800d15a:	9100      	str	r1, [sp, #0]
 800d15c:	4621      	mov	r1, r4
 800d15e:	205c      	movs	r0, #92	; 0x5c
 800d160:	f002 fe0e 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800d164:	2300      	movs	r3, #0
 800d166:	e092      	b.n	800d28e <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d106      	bne.n	800d17c <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d16e:	f107 030c 	add.w	r3, r7, #12
 800d172:	4618      	mov	r0, r3
 800d174:	f001 f856 	bl	800e224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d178:	2301      	movs	r3, #1
 800d17a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d17c:	f001 fd4a 	bl	800ec14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d180:	f000 fdca 	bl	800dd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d184:	f001 fd16 	bl	800ebb4 <vPortEnterCritical>
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d18e:	b25b      	sxtb	r3, r3
 800d190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d194:	d103      	bne.n	800d19e <xQueueSemaphoreTake+0x17a>
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1a4:	b25b      	sxtb	r3, r3
 800d1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1aa:	d103      	bne.n	800d1b4 <xQueueSemaphoreTake+0x190>
 800d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1b4:	f001 fd2e 	bl	800ec14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1b8:	463a      	mov	r2, r7
 800d1ba:	f107 030c 	add.w	r3, r7, #12
 800d1be:	4611      	mov	r1, r2
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 f845 	bl	800e250 <xTaskCheckForTimeOut>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d132      	bne.n	800d232 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1ce:	f000 fa29 	bl	800d624 <prvIsQueueEmpty>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d026      	beq.n	800d226 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d109      	bne.n	800d1f4 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 800d1e0:	f001 fce8 	bl	800ebb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f001 f997 	bl	800e51c <xTaskPriorityInherit>
 800d1ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d1f0:	f001 fd10 	bl	800ec14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f6:	3324      	adds	r3, #36	; 0x24
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 ff87 	bl	800e110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d204:	f000 f9bc 	bl	800d580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d208:	f000 fd94 	bl	800dd34 <xTaskResumeAll>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f47f af48 	bne.w	800d0a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d214:	4b20      	ldr	r3, [pc, #128]	; (800d298 <xQueueSemaphoreTake+0x274>)
 800d216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	e73e      	b.n	800d0a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d228:	f000 f9aa 	bl	800d580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d22c:	f000 fd82 	bl	800dd34 <xTaskResumeAll>
 800d230:	e738      	b.n	800d0a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d234:	f000 f9a4 	bl	800d580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d238:	f000 fd7c 	bl	800dd34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d23c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d23e:	f000 f9f1 	bl	800d624 <prvIsQueueEmpty>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	f43f af2d 	beq.w	800d0a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00d      	beq.n	800d26c <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 800d250:	f001 fcb0 	bl	800ebb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d256:	f000 f8eb 	bl	800d430 <prvGetDisinheritPriorityAfterTimeout>
 800d25a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d262:	4618      	mov	r0, r3
 800d264:	f001 fa66 	bl	800e734 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d268:	f001 fcd4 	bl	800ec14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	4618      	mov	r0, r3
 800d270:	f003 f9c2 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d274:	4604      	mov	r4, r0
 800d276:	2000      	movs	r0, #0
 800d278:	f003 f9be 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d27c:	4602      	mov	r2, r0
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2101      	movs	r1, #1
 800d282:	9100      	str	r1, [sp, #0]
 800d284:	4621      	mov	r1, r4
 800d286:	205c      	movs	r0, #92	; 0x5c
 800d288:	f002 fd7a 	bl	800fd80 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800d28c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d28e:	4618      	mov	r0, r3
 800d290:	373c      	adds	r7, #60	; 0x3c
 800d292:	46bd      	mov	sp, r7
 800d294:	bd90      	pop	{r4, r7, pc}
 800d296:	bf00      	nop
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d29c:	b590      	push	{r4, r7, lr}
 800d29e:	b08f      	sub	sp, #60	; 0x3c
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d10a      	bne.n	800d2c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b6:	f383 8811 	msr	BASEPRI, r3
 800d2ba:	f3bf 8f6f 	isb	sy
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	623b      	str	r3, [r7, #32]
}
 800d2c4:	bf00      	nop
 800d2c6:	e7fe      	b.n	800d2c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d103      	bne.n	800d2d6 <xQueueReceiveFromISR+0x3a>
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d101      	bne.n	800d2da <xQueueReceiveFromISR+0x3e>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e000      	b.n	800d2dc <xQueueReceiveFromISR+0x40>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d10a      	bne.n	800d2f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	61fb      	str	r3, [r7, #28]
}
 800d2f2:	bf00      	nop
 800d2f4:	e7fe      	b.n	800d2f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2f6:	f001 fd3f 	bl	800ed78 <vPortValidateInterruptPriority>
	__asm volatile
 800d2fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	61ba      	str	r2, [r7, #24]
 800d310:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d312:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d314:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d03e      	beq.n	800d3a0 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800d32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32e:	4618      	mov	r0, r3
 800d330:	f003 f962 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d334:	4604      	mov	r4, r0
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	4618      	mov	r0, r3
 800d33a:	f003 f95d 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d33e:	4602      	mov	r2, r0
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4621      	mov	r1, r4
 800d344:	2062      	movs	r0, #98	; 0x62
 800d346:	f002 fca5 	bl	800fc94 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d34a:	68b9      	ldr	r1, [r7, #8]
 800d34c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d34e:	f000 f8f1 	bl	800d534 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	1e5a      	subs	r2, r3, #1
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d35a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d362:	d112      	bne.n	800d38a <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d016      	beq.n	800d39a <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	3310      	adds	r3, #16
 800d370:	4618      	mov	r0, r3
 800d372:	f000 fef1 	bl	800e158 <xTaskRemoveFromEventList>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d00e      	beq.n	800d39a <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00b      	beq.n	800d39a <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	e007      	b.n	800d39a <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d38a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d38e:	3301      	adds	r3, #1
 800d390:	b2db      	uxtb	r3, r3
 800d392:	b25a      	sxtb	r2, r3
 800d394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d39a:	2301      	movs	r3, #1
 800d39c:	637b      	str	r3, [r7, #52]	; 0x34
 800d39e:	e010      	b.n	800d3c2 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f003 f926 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f003 f921 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	2062      	movs	r0, #98	; 0x62
 800d3be:	f002 fc69 	bl	800fc94 <SEGGER_SYSVIEW_RecordU32x3>
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	f383 8811 	msr	BASEPRI, r3
}
 800d3cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	373c      	adds	r7, #60	; 0x3c
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd90      	pop	{r4, r7, pc}

0800d3d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10a      	bne.n	800d400 <vQueueDelete+0x28>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	60bb      	str	r3, [r7, #8]
}
 800d3fc:	bf00      	nop
 800d3fe:	e7fe      	b.n	800d3fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	4618      	mov	r0, r3
 800d404:	f003 f8f8 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800d408:	4603      	mov	r3, r0
 800d40a:	4619      	mov	r1, r3
 800d40c:	205f      	movs	r0, #95	; 0x5f
 800d40e:	f002 fbab 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f000 f934 	bl	800d680 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d102      	bne.n	800d428 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f001 fdb4 	bl	800ef90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d428:	bf00      	nop
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d430:	b480      	push	{r7}
 800d432:	b085      	sub	sp, #20
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d006      	beq.n	800d44e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f1c3 0307 	rsb	r3, r3, #7
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	e001      	b.n	800d452 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d44e:	2300      	movs	r3, #0
 800d450:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d452:	68fb      	ldr	r3, [r7, #12]
	}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d46c:	2300      	movs	r3, #0
 800d46e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10d      	bne.n	800d49a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d14d      	bne.n	800d522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f001 f8c4 	bl	800e618 <xTaskPriorityDisinherit>
 800d490:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2200      	movs	r2, #0
 800d496:	609a      	str	r2, [r3, #8]
 800d498:	e043      	b.n	800d522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d119      	bne.n	800d4d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6858      	ldr	r0, [r3, #4]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68b9      	ldr	r1, [r7, #8]
 800d4ac:	f003 fc18 	bl	8010ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b8:	441a      	add	r2, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d32b      	bcc.n	800d522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	605a      	str	r2, [r3, #4]
 800d4d2:	e026      	b.n	800d522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	68d8      	ldr	r0, [r3, #12]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4dc:	461a      	mov	r2, r3
 800d4de:	68b9      	ldr	r1, [r7, #8]
 800d4e0:	f003 fbfe 	bl	8010ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	68da      	ldr	r2, [r3, #12]
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ec:	425b      	negs	r3, r3
 800d4ee:	441a      	add	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	68da      	ldr	r2, [r3, #12]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d207      	bcs.n	800d510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	689a      	ldr	r2, [r3, #8]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d508:	425b      	negs	r3, r3
 800d50a:	441a      	add	r2, r3
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b02      	cmp	r3, #2
 800d514:	d105      	bne.n	800d522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d002      	beq.n	800d522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	3b01      	subs	r3, #1
 800d520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	1c5a      	adds	r2, r3, #1
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d52a:	697b      	ldr	r3, [r7, #20]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d542:	2b00      	cmp	r3, #0
 800d544:	d018      	beq.n	800d578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	68da      	ldr	r2, [r3, #12]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54e:	441a      	add	r2, r3
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	68da      	ldr	r2, [r3, #12]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d303      	bcc.n	800d568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68d9      	ldr	r1, [r3, #12]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d570:	461a      	mov	r2, r3
 800d572:	6838      	ldr	r0, [r7, #0]
 800d574:	f003 fbb4 	bl	8010ce0 <memcpy>
	}
}
 800d578:	bf00      	nop
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d588:	f001 fb14 	bl	800ebb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d594:	e011      	b.n	800d5ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d012      	beq.n	800d5c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3324      	adds	r3, #36	; 0x24
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 fdd8 	bl	800e158 <xTaskRemoveFromEventList>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d5ae:	f000 feb1 	bl	800e314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dce9      	bgt.n	800d596 <prvUnlockQueue+0x16>
 800d5c2:	e000      	b.n	800d5c6 <prvUnlockQueue+0x46>
					break;
 800d5c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	22ff      	movs	r2, #255	; 0xff
 800d5ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d5ce:	f001 fb21 	bl	800ec14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d5d2:	f001 faef 	bl	800ebb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5de:	e011      	b.n	800d604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d012      	beq.n	800d60e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3310      	adds	r3, #16
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 fdb3 	bl	800e158 <xTaskRemoveFromEventList>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5f8:	f000 fe8c 	bl	800e314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5fc:	7bbb      	ldrb	r3, [r7, #14]
 800d5fe:	3b01      	subs	r3, #1
 800d600:	b2db      	uxtb	r3, r3
 800d602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	dce9      	bgt.n	800d5e0 <prvUnlockQueue+0x60>
 800d60c:	e000      	b.n	800d610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d60e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	22ff      	movs	r2, #255	; 0xff
 800d614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d618:	f001 fafc 	bl	800ec14 <vPortExitCritical>
}
 800d61c:	bf00      	nop
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d62c:	f001 fac2 	bl	800ebb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d634:	2b00      	cmp	r3, #0
 800d636:	d102      	bne.n	800d63e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d638:	2301      	movs	r3, #1
 800d63a:	60fb      	str	r3, [r7, #12]
 800d63c:	e001      	b.n	800d642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d63e:	2300      	movs	r3, #0
 800d640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d642:	f001 fae7 	bl	800ec14 <vPortExitCritical>

	return xReturn;
 800d646:	68fb      	ldr	r3, [r7, #12]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d658:	f001 faac 	bl	800ebb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d664:	429a      	cmp	r2, r3
 800d666:	d102      	bne.n	800d66e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d668:	2301      	movs	r3, #1
 800d66a:	60fb      	str	r3, [r7, #12]
 800d66c:	e001      	b.n	800d672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d66e:	2300      	movs	r3, #0
 800d670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d672:	f001 facf 	bl	800ec14 <vPortExitCritical>

	return xReturn;
 800d676:	68fb      	ldr	r3, [r7, #12]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d688:	2300      	movs	r3, #0
 800d68a:	60fb      	str	r3, [r7, #12]
 800d68c:	e016      	b.n	800d6bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d68e:	4a10      	ldr	r2, [pc, #64]	; (800d6d0 <vQueueUnregisterQueue+0x50>)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	4413      	add	r3, r2
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d10b      	bne.n	800d6b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d69e:	4a0c      	ldr	r2, [pc, #48]	; (800d6d0 <vQueueUnregisterQueue+0x50>)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d6a8:	4a09      	ldr	r2, [pc, #36]	; (800d6d0 <vQueueUnregisterQueue+0x50>)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	4413      	add	r3, r2
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	605a      	str	r2, [r3, #4]
				break;
 800d6b4:	e006      	b.n	800d6c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b07      	cmp	r3, #7
 800d6c0:	d9e5      	bls.n	800d68e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d6c2:	bf00      	nop
 800d6c4:	bf00      	nop
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	20000a9c 	.word	0x20000a9c

0800d6d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08e      	sub	sp, #56	; 0x38
 800d6d8:	af04      	add	r7, sp, #16
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	623b      	str	r3, [r7, #32]
}
 800d6fa:	bf00      	nop
 800d6fc:	e7fe      	b.n	800d6fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10a      	bne.n	800d71a <xTaskCreateStatic+0x46>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	61fb      	str	r3, [r7, #28]
}
 800d716:	bf00      	nop
 800d718:	e7fe      	b.n	800d718 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d71a:	23b4      	movs	r3, #180	; 0xb4
 800d71c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2bb4      	cmp	r3, #180	; 0xb4
 800d722:	d00a      	beq.n	800d73a <xTaskCreateStatic+0x66>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	61bb      	str	r3, [r7, #24]
}
 800d736:	bf00      	nop
 800d738:	e7fe      	b.n	800d738 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d73a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d01e      	beq.n	800d780 <xTaskCreateStatic+0xac>
 800d742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d744:	2b00      	cmp	r3, #0
 800d746:	d01b      	beq.n	800d780 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d750:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d754:	2202      	movs	r2, #2
 800d756:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d75a:	2300      	movs	r3, #0
 800d75c:	9303      	str	r3, [sp, #12]
 800d75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d760:	9302      	str	r3, [sp, #8]
 800d762:	f107 0314 	add.w	r3, r7, #20
 800d766:	9301      	str	r3, [sp, #4]
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	68b9      	ldr	r1, [r7, #8]
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f000 f850 	bl	800d818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d77a:	f000 f8eb 	bl	800d954 <prvAddNewTaskToReadyList>
 800d77e:	e001      	b.n	800d784 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d780:	2300      	movs	r3, #0
 800d782:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d784:	697b      	ldr	r3, [r7, #20]
	}
 800d786:	4618      	mov	r0, r3
 800d788:	3728      	adds	r7, #40	; 0x28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b08c      	sub	sp, #48	; 0x30
 800d792:	af04      	add	r7, sp, #16
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	60b9      	str	r1, [r7, #8]
 800d798:	603b      	str	r3, [r7, #0]
 800d79a:	4613      	mov	r3, r2
 800d79c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d79e:	88fb      	ldrh	r3, [r7, #6]
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 fb28 	bl	800edf8 <pvPortMalloc>
 800d7a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00e      	beq.n	800d7ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7b0:	20b4      	movs	r0, #180	; 0xb4
 800d7b2:	f001 fb21 	bl	800edf8 <pvPortMalloc>
 800d7b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	631a      	str	r2, [r3, #48]	; 0x30
 800d7c4:	e005      	b.n	800d7d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7c6:	6978      	ldr	r0, [r7, #20]
 800d7c8:	f001 fbe2 	bl	800ef90 <vPortFree>
 800d7cc:	e001      	b.n	800d7d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d017      	beq.n	800d808 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7e0:	88fa      	ldrh	r2, [r7, #6]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	9303      	str	r3, [sp, #12]
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	9302      	str	r3, [sp, #8]
 800d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ec:	9301      	str	r3, [sp, #4]
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	68b9      	ldr	r1, [r7, #8]
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f000 f80e 	bl	800d818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7fc:	69f8      	ldr	r0, [r7, #28]
 800d7fe:	f000 f8a9 	bl	800d954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d802:	2301      	movs	r3, #1
 800d804:	61bb      	str	r3, [r7, #24]
 800d806:	e002      	b.n	800d80e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d808:	f04f 33ff 	mov.w	r3, #4294967295
 800d80c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d80e:	69bb      	ldr	r3, [r7, #24]
	}
 800d810:	4618      	mov	r0, r3
 800d812:	3720      	adds	r7, #32
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b088      	sub	sp, #32
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d830:	3b01      	subs	r3, #1
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4413      	add	r3, r2
 800d836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	f023 0307 	bic.w	r3, r3, #7
 800d83e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f003 0307 	and.w	r3, r3, #7
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	617b      	str	r3, [r7, #20]
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d01f      	beq.n	800d8a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]
 800d86a:	e012      	b.n	800d892 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	4413      	add	r3, r2
 800d872:	7819      	ldrb	r1, [r3, #0]
 800d874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	4413      	add	r3, r2
 800d87a:	3334      	adds	r3, #52	; 0x34
 800d87c:	460a      	mov	r2, r1
 800d87e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	4413      	add	r3, r2
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	3301      	adds	r3, #1
 800d890:	61fb      	str	r3, [r7, #28]
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	2b0f      	cmp	r3, #15
 800d896:	d9e9      	bls.n	800d86c <prvInitialiseNewTask+0x54>
 800d898:	e000      	b.n	800d89c <prvInitialiseNewTask+0x84>
			{
				break;
 800d89a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8a4:	e003      	b.n	800d8ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b0:	2b06      	cmp	r3, #6
 800d8b2:	d901      	bls.n	800d8b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8b4:	2306      	movs	r3, #6
 800d8b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fe fe4e 	bl	800c570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	3318      	adds	r3, #24
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fe fe49 	bl	800c570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e6:	f1c3 0207 	rsb	r2, r3, #7
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d906:	334c      	adds	r3, #76	; 0x4c
 800d908:	2260      	movs	r2, #96	; 0x60
 800d90a:	2100      	movs	r1, #0
 800d90c:	4618      	mov	r0, r3
 800d90e:	f003 f9f5 	bl	8010cfc <memset>
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	4a0c      	ldr	r2, [pc, #48]	; (800d948 <prvInitialiseNewTask+0x130>)
 800d916:	651a      	str	r2, [r3, #80]	; 0x50
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	4a0c      	ldr	r2, [pc, #48]	; (800d94c <prvInitialiseNewTask+0x134>)
 800d91c:	655a      	str	r2, [r3, #84]	; 0x54
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	4a0b      	ldr	r2, [pc, #44]	; (800d950 <prvInitialiseNewTask+0x138>)
 800d922:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	68f9      	ldr	r1, [r7, #12]
 800d928:	69b8      	ldr	r0, [r7, #24]
 800d92a:	f001 f815 	bl	800e958 <pxPortInitialiseStack>
 800d92e:	4602      	mov	r2, r0
 800d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d932:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	2b00      	cmp	r3, #0
 800d938:	d002      	beq.n	800d940 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d93e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d940:	bf00      	nop
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	080113d8 	.word	0x080113d8
 800d94c:	080113f8 	.word	0x080113f8
 800d950:	080113b8 	.word	0x080113b8

0800d954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d954:	b5b0      	push	{r4, r5, r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af02      	add	r7, sp, #8
 800d95a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d95c:	f001 f92a 	bl	800ebb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d960:	4b39      	ldr	r3, [pc, #228]	; (800da48 <prvAddNewTaskToReadyList+0xf4>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3301      	adds	r3, #1
 800d966:	4a38      	ldr	r2, [pc, #224]	; (800da48 <prvAddNewTaskToReadyList+0xf4>)
 800d968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d96a:	4b38      	ldr	r3, [pc, #224]	; (800da4c <prvAddNewTaskToReadyList+0xf8>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d109      	bne.n	800d986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d972:	4a36      	ldr	r2, [pc, #216]	; (800da4c <prvAddNewTaskToReadyList+0xf8>)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d978:	4b33      	ldr	r3, [pc, #204]	; (800da48 <prvAddNewTaskToReadyList+0xf4>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d110      	bne.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d980:	f000 fcec 	bl	800e35c <prvInitialiseTaskLists>
 800d984:	e00d      	b.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d986:	4b32      	ldr	r3, [pc, #200]	; (800da50 <prvAddNewTaskToReadyList+0xfc>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d109      	bne.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d98e:	4b2f      	ldr	r3, [pc, #188]	; (800da4c <prvAddNewTaskToReadyList+0xf8>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d998:	429a      	cmp	r2, r3
 800d99a:	d802      	bhi.n	800d9a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d99c:	4a2b      	ldr	r2, [pc, #172]	; (800da4c <prvAddNewTaskToReadyList+0xf8>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9a2:	4b2c      	ldr	r3, [pc, #176]	; (800da54 <prvAddNewTaskToReadyList+0x100>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	4a2a      	ldr	r2, [pc, #168]	; (800da54 <prvAddNewTaskToReadyList+0x100>)
 800d9aa:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d016      	beq.n	800d9e0 <prvAddNewTaskToReadyList+0x8c>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f002 fd59 	bl	801046c <SEGGER_SYSVIEW_OnTaskCreate>
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ca:	461d      	mov	r5, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	461c      	mov	r4, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d6:	1ae3      	subs	r3, r4, r3
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	462b      	mov	r3, r5
 800d9dc:	f003 f804 	bl	80109e8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f002 fdc6 	bl	8010574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	409a      	lsls	r2, r3
 800d9f0:	4b19      	ldr	r3, [pc, #100]	; (800da58 <prvAddNewTaskToReadyList+0x104>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	4a18      	ldr	r2, [pc, #96]	; (800da58 <prvAddNewTaskToReadyList+0x104>)
 800d9f8:	6013      	str	r3, [r2, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9fe:	4613      	mov	r3, r2
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	4413      	add	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4a15      	ldr	r2, [pc, #84]	; (800da5c <prvAddNewTaskToReadyList+0x108>)
 800da08:	441a      	add	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	3304      	adds	r3, #4
 800da0e:	4619      	mov	r1, r3
 800da10:	4610      	mov	r0, r2
 800da12:	f7fe fdba 	bl	800c58a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da16:	f001 f8fd 	bl	800ec14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da1a:	4b0d      	ldr	r3, [pc, #52]	; (800da50 <prvAddNewTaskToReadyList+0xfc>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00e      	beq.n	800da40 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da22:	4b0a      	ldr	r3, [pc, #40]	; (800da4c <prvAddNewTaskToReadyList+0xf8>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d207      	bcs.n	800da40 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da30:	4b0b      	ldr	r3, [pc, #44]	; (800da60 <prvAddNewTaskToReadyList+0x10c>)
 800da32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bdb0      	pop	{r4, r5, r7, pc}
 800da48:	20000bdc 	.word	0x20000bdc
 800da4c:	20000adc 	.word	0x20000adc
 800da50:	20000be8 	.word	0x20000be8
 800da54:	20000bf8 	.word	0x20000bf8
 800da58:	20000be4 	.word	0x20000be4
 800da5c:	20000ae0 	.word	0x20000ae0
 800da60:	e000ed04 	.word	0xe000ed04

0800da64 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800da6c:	f001 f8a2 	bl	800ebb4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d102      	bne.n	800da7c <vTaskDelete+0x18>
 800da76:	4b46      	ldr	r3, [pc, #280]	; (800db90 <vTaskDelete+0x12c>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	e000      	b.n	800da7e <vTaskDelete+0x1a>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3304      	adds	r3, #4
 800da84:	4618      	mov	r0, r3
 800da86:	f7fe fddd 	bl	800c644 <uxListRemove>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d115      	bne.n	800dabc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	493f      	ldr	r1, [pc, #252]	; (800db94 <vTaskDelete+0x130>)
 800da96:	4613      	mov	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	440b      	add	r3, r1
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d10a      	bne.n	800dabc <vTaskDelete+0x58>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daaa:	2201      	movs	r2, #1
 800daac:	fa02 f303 	lsl.w	r3, r2, r3
 800dab0:	43da      	mvns	r2, r3
 800dab2:	4b39      	ldr	r3, [pc, #228]	; (800db98 <vTaskDelete+0x134>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4013      	ands	r3, r2
 800dab8:	4a37      	ldr	r2, [pc, #220]	; (800db98 <vTaskDelete+0x134>)
 800daba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d004      	beq.n	800dace <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3318      	adds	r3, #24
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fe fdbb 	bl	800c644 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800dace:	4b33      	ldr	r3, [pc, #204]	; (800db9c <vTaskDelete+0x138>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	3301      	adds	r3, #1
 800dad4:	4a31      	ldr	r2, [pc, #196]	; (800db9c <vTaskDelete+0x138>)
 800dad6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800dad8:	4b2d      	ldr	r3, [pc, #180]	; (800db90 <vTaskDelete+0x12c>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d118      	bne.n	800db14 <vTaskDelete+0xb0>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	3304      	adds	r3, #4
 800dae6:	4619      	mov	r1, r3
 800dae8:	482d      	ldr	r0, [pc, #180]	; (800dba0 <vTaskDelete+0x13c>)
 800daea:	f7fe fd4e 	bl	800c58a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800daee:	4b2d      	ldr	r3, [pc, #180]	; (800dba4 <vTaskDelete+0x140>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	3301      	adds	r3, #1
 800daf4:	4a2b      	ldr	r2, [pc, #172]	; (800dba4 <vTaskDelete+0x140>)
 800daf6:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f002 fd7c 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800db00:	4603      	mov	r3, r0
 800db02:	4619      	mov	r1, r3
 800db04:	2022      	movs	r0, #34	; 0x22
 800db06:	f002 f82f 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f002 ffd3 	bl	8010ab8 <SYSVIEW_DeleteTask>
 800db12:	e016      	b.n	800db42 <vTaskDelete+0xde>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800db14:	4b24      	ldr	r3, [pc, #144]	; (800dba8 <vTaskDelete+0x144>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	3b01      	subs	r3, #1
 800db1a:	4a23      	ldr	r2, [pc, #140]	; (800dba8 <vTaskDelete+0x144>)
 800db1c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	4618      	mov	r0, r3
 800db22:	f002 fd69 	bl	80105f8 <SEGGER_SYSVIEW_ShrinkId>
 800db26:	4603      	mov	r3, r0
 800db28:	4619      	mov	r1, r3
 800db2a:	2022      	movs	r0, #34	; 0x22
 800db2c:	f002 f81c 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4618      	mov	r0, r3
 800db34:	f002 ffc0 	bl	8010ab8 <SYSVIEW_DeleteTask>
				prvDeleteTCB( pxTCB );
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 fc7d 	bl	800e438 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800db3e:	f000 fcaf 	bl	800e4a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800db42:	f001 f867 	bl	800ec14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800db46:	4b19      	ldr	r3, [pc, #100]	; (800dbac <vTaskDelete+0x148>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d01b      	beq.n	800db86 <vTaskDelete+0x122>
		{
			if( pxTCB == pxCurrentTCB )
 800db4e:	4b10      	ldr	r3, [pc, #64]	; (800db90 <vTaskDelete+0x12c>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	429a      	cmp	r2, r3
 800db56:	d116      	bne.n	800db86 <vTaskDelete+0x122>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800db58:	4b15      	ldr	r3, [pc, #84]	; (800dbb0 <vTaskDelete+0x14c>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00a      	beq.n	800db76 <vTaskDelete+0x112>
	__asm volatile
 800db60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db64:	f383 8811 	msr	BASEPRI, r3
 800db68:	f3bf 8f6f 	isb	sy
 800db6c:	f3bf 8f4f 	dsb	sy
 800db70:	60bb      	str	r3, [r7, #8]
}
 800db72:	bf00      	nop
 800db74:	e7fe      	b.n	800db74 <vTaskDelete+0x110>
				portYIELD_WITHIN_API();
 800db76:	4b0f      	ldr	r3, [pc, #60]	; (800dbb4 <vTaskDelete+0x150>)
 800db78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db86:	bf00      	nop
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20000adc 	.word	0x20000adc
 800db94:	20000ae0 	.word	0x20000ae0
 800db98:	20000be4 	.word	0x20000be4
 800db9c:	20000bf8 	.word	0x20000bf8
 800dba0:	20000bb0 	.word	0x20000bb0
 800dba4:	20000bc4 	.word	0x20000bc4
 800dba8:	20000bdc 	.word	0x20000bdc
 800dbac:	20000be8 	.word	0x20000be8
 800dbb0:	20000c04 	.word	0x20000c04
 800dbb4:	e000ed04 	.word	0xe000ed04

0800dbb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d01b      	beq.n	800dc02 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dbca:	4b15      	ldr	r3, [pc, #84]	; (800dc20 <vTaskDelay+0x68>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00a      	beq.n	800dbe8 <vTaskDelay+0x30>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	60bb      	str	r3, [r7, #8]
}
 800dbe4:	bf00      	nop
 800dbe6:	e7fe      	b.n	800dbe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dbe8:	f000 f896 	bl	800dd18 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	2023      	movs	r0, #35	; 0x23
 800dbf0:	f001 ffba 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fe48 	bl	800e88c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbfc:	f000 f89a 	bl	800dd34 <xTaskResumeAll>
 800dc00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d107      	bne.n	800dc18 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800dc08:	4b06      	ldr	r3, [pc, #24]	; (800dc24 <vTaskDelay+0x6c>)
 800dc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc18:	bf00      	nop
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	20000c04 	.word	0x20000c04
 800dc24:	e000ed04 	.word	0xe000ed04

0800dc28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b08a      	sub	sp, #40	; 0x28
 800dc2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc36:	463a      	mov	r2, r7
 800dc38:	1d39      	adds	r1, r7, #4
 800dc3a:	f107 0308 	add.w	r3, r7, #8
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7f2 fcc0 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	9202      	str	r2, [sp, #8]
 800dc4c:	9301      	str	r3, [sp, #4]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	2300      	movs	r3, #0
 800dc54:	460a      	mov	r2, r1
 800dc56:	4928      	ldr	r1, [pc, #160]	; (800dcf8 <vTaskStartScheduler+0xd0>)
 800dc58:	4828      	ldr	r0, [pc, #160]	; (800dcfc <vTaskStartScheduler+0xd4>)
 800dc5a:	f7ff fd3b 	bl	800d6d4 <xTaskCreateStatic>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	4a27      	ldr	r2, [pc, #156]	; (800dd00 <vTaskStartScheduler+0xd8>)
 800dc62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc64:	4b26      	ldr	r3, [pc, #152]	; (800dd00 <vTaskStartScheduler+0xd8>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	e001      	b.n	800dc76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc72:	2300      	movs	r3, #0
 800dc74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d129      	bne.n	800dcd0 <vTaskStartScheduler+0xa8>
	__asm volatile
 800dc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	613b      	str	r3, [r7, #16]
}
 800dc8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc90:	4b1c      	ldr	r3, [pc, #112]	; (800dd04 <vTaskStartScheduler+0xdc>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	334c      	adds	r3, #76	; 0x4c
 800dc96:	4a1c      	ldr	r2, [pc, #112]	; (800dd08 <vTaskStartScheduler+0xe0>)
 800dc98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc9a:	4b1c      	ldr	r3, [pc, #112]	; (800dd0c <vTaskStartScheduler+0xe4>)
 800dc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dca2:	4b1b      	ldr	r3, [pc, #108]	; (800dd10 <vTaskStartScheduler+0xe8>)
 800dca4:	2201      	movs	r2, #1
 800dca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dca8:	4b1a      	ldr	r3, [pc, #104]	; (800dd14 <vTaskStartScheduler+0xec>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800dcae:	4b15      	ldr	r3, [pc, #84]	; (800dd04 <vTaskStartScheduler+0xdc>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b13      	ldr	r3, [pc, #76]	; (800dd00 <vTaskStartScheduler+0xd8>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d102      	bne.n	800dcc0 <vTaskStartScheduler+0x98>
 800dcba:	f002 fbbb 	bl	8010434 <SEGGER_SYSVIEW_OnIdle>
 800dcbe:	e004      	b.n	800dcca <vTaskStartScheduler+0xa2>
 800dcc0:	4b10      	ldr	r3, [pc, #64]	; (800dd04 <vTaskStartScheduler+0xdc>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f002 fc13 	bl	80104f0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dcca:	f000 fed1 	bl	800ea70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dcce:	e00e      	b.n	800dcee <vTaskStartScheduler+0xc6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd6:	d10a      	bne.n	800dcee <vTaskStartScheduler+0xc6>
	__asm volatile
 800dcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcdc:	f383 8811 	msr	BASEPRI, r3
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	60fb      	str	r3, [r7, #12]
}
 800dcea:	bf00      	nop
 800dcec:	e7fe      	b.n	800dcec <vTaskStartScheduler+0xc4>
}
 800dcee:	bf00      	nop
 800dcf0:	3718      	adds	r7, #24
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	080111fc 	.word	0x080111fc
 800dcfc:	0800e32d 	.word	0x0800e32d
 800dd00:	20000c00 	.word	0x20000c00
 800dd04:	20000adc 	.word	0x20000adc
 800dd08:	20000010 	.word	0x20000010
 800dd0c:	20000bfc 	.word	0x20000bfc
 800dd10:	20000be8 	.word	0x20000be8
 800dd14:	20000be0 	.word	0x20000be0

0800dd18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd18:	b480      	push	{r7}
 800dd1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd1c:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <vTaskSuspendAll+0x18>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3301      	adds	r3, #1
 800dd22:	4a03      	ldr	r2, [pc, #12]	; (800dd30 <vTaskSuspendAll+0x18>)
 800dd24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd26:	bf00      	nop
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	20000c04 	.word	0x20000c04

0800dd34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd42:	4b43      	ldr	r3, [pc, #268]	; (800de50 <xTaskResumeAll+0x11c>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10a      	bne.n	800dd60 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	603b      	str	r3, [r7, #0]
}
 800dd5c:	bf00      	nop
 800dd5e:	e7fe      	b.n	800dd5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd60:	f000 ff28 	bl	800ebb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd64:	4b3a      	ldr	r3, [pc, #232]	; (800de50 <xTaskResumeAll+0x11c>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	4a39      	ldr	r2, [pc, #228]	; (800de50 <xTaskResumeAll+0x11c>)
 800dd6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd6e:	4b38      	ldr	r3, [pc, #224]	; (800de50 <xTaskResumeAll+0x11c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d165      	bne.n	800de42 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd76:	4b37      	ldr	r3, [pc, #220]	; (800de54 <xTaskResumeAll+0x120>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d061      	beq.n	800de42 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd7e:	e032      	b.n	800dde6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd80:	4b35      	ldr	r3, [pc, #212]	; (800de58 <xTaskResumeAll+0x124>)
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3318      	adds	r3, #24
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fe fc59 	bl	800c644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3304      	adds	r3, #4
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe fc54 	bl	800c644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f002 fbe8 	bl	8010574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda8:	2201      	movs	r2, #1
 800ddaa:	409a      	lsls	r2, r3
 800ddac:	4b2b      	ldr	r3, [pc, #172]	; (800de5c <xTaskResumeAll+0x128>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	4a2a      	ldr	r2, [pc, #168]	; (800de5c <xTaskResumeAll+0x128>)
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddba:	4613      	mov	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4a27      	ldr	r2, [pc, #156]	; (800de60 <xTaskResumeAll+0x12c>)
 800ddc4:	441a      	add	r2, r3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3304      	adds	r3, #4
 800ddca:	4619      	mov	r1, r3
 800ddcc:	4610      	mov	r0, r2
 800ddce:	f7fe fbdc 	bl	800c58a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd6:	4b23      	ldr	r3, [pc, #140]	; (800de64 <xTaskResumeAll+0x130>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d302      	bcc.n	800dde6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800dde0:	4b21      	ldr	r3, [pc, #132]	; (800de68 <xTaskResumeAll+0x134>)
 800dde2:	2201      	movs	r2, #1
 800dde4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dde6:	4b1c      	ldr	r3, [pc, #112]	; (800de58 <xTaskResumeAll+0x124>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d1c8      	bne.n	800dd80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddf4:	f000 fb54 	bl	800e4a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ddf8:	4b1c      	ldr	r3, [pc, #112]	; (800de6c <xTaskResumeAll+0x138>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d010      	beq.n	800de26 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de04:	f000 f858 	bl	800deb8 <xTaskIncrementTick>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800de0e:	4b16      	ldr	r3, [pc, #88]	; (800de68 <xTaskResumeAll+0x134>)
 800de10:	2201      	movs	r2, #1
 800de12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3b01      	subs	r3, #1
 800de18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1f1      	bne.n	800de04 <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 800de20:	4b12      	ldr	r3, [pc, #72]	; (800de6c <xTaskResumeAll+0x138>)
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de26:	4b10      	ldr	r3, [pc, #64]	; (800de68 <xTaskResumeAll+0x134>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de2e:	2301      	movs	r3, #1
 800de30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de32:	4b0f      	ldr	r3, [pc, #60]	; (800de70 <xTaskResumeAll+0x13c>)
 800de34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de38:	601a      	str	r2, [r3, #0]
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de42:	f000 fee7 	bl	800ec14 <vPortExitCritical>

	return xAlreadyYielded;
 800de46:	68bb      	ldr	r3, [r7, #8]
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	20000c04 	.word	0x20000c04
 800de54:	20000bdc 	.word	0x20000bdc
 800de58:	20000b9c 	.word	0x20000b9c
 800de5c:	20000be4 	.word	0x20000be4
 800de60:	20000ae0 	.word	0x20000ae0
 800de64:	20000adc 	.word	0x20000adc
 800de68:	20000bf0 	.word	0x20000bf0
 800de6c:	20000bec 	.word	0x20000bec
 800de70:	e000ed04 	.word	0xe000ed04

0800de74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de7a:	4b05      	ldr	r3, [pc, #20]	; (800de90 <xTaskGetTickCount+0x1c>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de80:	687b      	ldr	r3, [r7, #4]
}
 800de82:	4618      	mov	r0, r3
 800de84:	370c      	adds	r7, #12
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	20000be0 	.word	0x20000be0

0800de94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de9a:	f000 ff6d 	bl	800ed78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800de9e:	2300      	movs	r3, #0
 800dea0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dea2:	4b04      	ldr	r3, [pc, #16]	; (800deb4 <xTaskGetTickCountFromISR+0x20>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dea8:	683b      	ldr	r3, [r7, #0]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	20000be0 	.word	0x20000be0

0800deb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b086      	sub	sp, #24
 800debc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800debe:	2300      	movs	r3, #0
 800dec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dec2:	4b50      	ldr	r3, [pc, #320]	; (800e004 <xTaskIncrementTick+0x14c>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f040 8092 	bne.w	800dff0 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800decc:	4b4e      	ldr	r3, [pc, #312]	; (800e008 <xTaskIncrementTick+0x150>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	3301      	adds	r3, #1
 800ded2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ded4:	4a4c      	ldr	r2, [pc, #304]	; (800e008 <xTaskIncrementTick+0x150>)
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d120      	bne.n	800df22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dee0:	4b4a      	ldr	r3, [pc, #296]	; (800e00c <xTaskIncrementTick+0x154>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <xTaskIncrementTick+0x48>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	603b      	str	r3, [r7, #0]
}
 800defc:	bf00      	nop
 800defe:	e7fe      	b.n	800defe <xTaskIncrementTick+0x46>
 800df00:	4b42      	ldr	r3, [pc, #264]	; (800e00c <xTaskIncrementTick+0x154>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	4b42      	ldr	r3, [pc, #264]	; (800e010 <xTaskIncrementTick+0x158>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a40      	ldr	r2, [pc, #256]	; (800e00c <xTaskIncrementTick+0x154>)
 800df0c:	6013      	str	r3, [r2, #0]
 800df0e:	4a40      	ldr	r2, [pc, #256]	; (800e010 <xTaskIncrementTick+0x158>)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	6013      	str	r3, [r2, #0]
 800df14:	4b3f      	ldr	r3, [pc, #252]	; (800e014 <xTaskIncrementTick+0x15c>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3301      	adds	r3, #1
 800df1a:	4a3e      	ldr	r2, [pc, #248]	; (800e014 <xTaskIncrementTick+0x15c>)
 800df1c:	6013      	str	r3, [r2, #0]
 800df1e:	f000 fabf 	bl	800e4a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df22:	4b3d      	ldr	r3, [pc, #244]	; (800e018 <xTaskIncrementTick+0x160>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d34c      	bcc.n	800dfc6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df2c:	4b37      	ldr	r3, [pc, #220]	; (800e00c <xTaskIncrementTick+0x154>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d104      	bne.n	800df40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df36:	4b38      	ldr	r3, [pc, #224]	; (800e018 <xTaskIncrementTick+0x160>)
 800df38:	f04f 32ff 	mov.w	r2, #4294967295
 800df3c:	601a      	str	r2, [r3, #0]
					break;
 800df3e:	e042      	b.n	800dfc6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df40:	4b32      	ldr	r3, [pc, #200]	; (800e00c <xTaskIncrementTick+0x154>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df50:	693a      	ldr	r2, [r7, #16]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d203      	bcs.n	800df60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df58:	4a2f      	ldr	r2, [pc, #188]	; (800e018 <xTaskIncrementTick+0x160>)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df5e:	e032      	b.n	800dfc6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	3304      	adds	r3, #4
 800df64:	4618      	mov	r0, r3
 800df66:	f7fe fb6d 	bl	800c644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d004      	beq.n	800df7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	3318      	adds	r3, #24
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe fb64 	bl	800c644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	4618      	mov	r0, r3
 800df80:	f002 faf8 	bl	8010574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df88:	2201      	movs	r2, #1
 800df8a:	409a      	lsls	r2, r3
 800df8c:	4b23      	ldr	r3, [pc, #140]	; (800e01c <xTaskIncrementTick+0x164>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4313      	orrs	r3, r2
 800df92:	4a22      	ldr	r2, [pc, #136]	; (800e01c <xTaskIncrementTick+0x164>)
 800df94:	6013      	str	r3, [r2, #0]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4a1f      	ldr	r2, [pc, #124]	; (800e020 <xTaskIncrementTick+0x168>)
 800dfa4:	441a      	add	r2, r3
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3304      	adds	r3, #4
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7fe faec 	bl	800c58a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb6:	4b1b      	ldr	r3, [pc, #108]	; (800e024 <xTaskIncrementTick+0x16c>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d3b5      	bcc.n	800df2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfc4:	e7b2      	b.n	800df2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfc6:	4b17      	ldr	r3, [pc, #92]	; (800e024 <xTaskIncrementTick+0x16c>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfcc:	4914      	ldr	r1, [pc, #80]	; (800e020 <xTaskIncrementTick+0x168>)
 800dfce:	4613      	mov	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4413      	add	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	440b      	add	r3, r1
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d901      	bls.n	800dfe2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dfe2:	4b11      	ldr	r3, [pc, #68]	; (800e028 <xTaskIncrementTick+0x170>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d007      	beq.n	800dffa <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800dfea:	2301      	movs	r3, #1
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	e004      	b.n	800dffa <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dff0:	4b0e      	ldr	r3, [pc, #56]	; (800e02c <xTaskIncrementTick+0x174>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	4a0d      	ldr	r2, [pc, #52]	; (800e02c <xTaskIncrementTick+0x174>)
 800dff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dffa:	697b      	ldr	r3, [r7, #20]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	20000c04 	.word	0x20000c04
 800e008:	20000be0 	.word	0x20000be0
 800e00c:	20000b94 	.word	0x20000b94
 800e010:	20000b98 	.word	0x20000b98
 800e014:	20000bf4 	.word	0x20000bf4
 800e018:	20000bfc 	.word	0x20000bfc
 800e01c:	20000be4 	.word	0x20000be4
 800e020:	20000ae0 	.word	0x20000ae0
 800e024:	20000adc 	.word	0x20000adc
 800e028:	20000bf0 	.word	0x20000bf0
 800e02c:	20000bec 	.word	0x20000bec

0800e030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e036:	4b2f      	ldr	r3, [pc, #188]	; (800e0f4 <vTaskSwitchContext+0xc4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e03e:	4b2e      	ldr	r3, [pc, #184]	; (800e0f8 <vTaskSwitchContext+0xc8>)
 800e040:	2201      	movs	r2, #1
 800e042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e044:	e052      	b.n	800e0ec <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800e046:	4b2c      	ldr	r3, [pc, #176]	; (800e0f8 <vTaskSwitchContext+0xc8>)
 800e048:	2200      	movs	r2, #0
 800e04a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e04c:	4b2b      	ldr	r3, [pc, #172]	; (800e0fc <vTaskSwitchContext+0xcc>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	fab3 f383 	clz	r3, r3
 800e058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e05a:	7afb      	ldrb	r3, [r7, #11]
 800e05c:	f1c3 031f 	rsb	r3, r3, #31
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	4927      	ldr	r1, [pc, #156]	; (800e100 <vTaskSwitchContext+0xd0>)
 800e064:	697a      	ldr	r2, [r7, #20]
 800e066:	4613      	mov	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	4413      	add	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	440b      	add	r3, r1
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10a      	bne.n	800e08c <vTaskSwitchContext+0x5c>
	__asm volatile
 800e076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	607b      	str	r3, [r7, #4]
}
 800e088:	bf00      	nop
 800e08a:	e7fe      	b.n	800e08a <vTaskSwitchContext+0x5a>
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	4613      	mov	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4413      	add	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4a1a      	ldr	r2, [pc, #104]	; (800e100 <vTaskSwitchContext+0xd0>)
 800e098:	4413      	add	r3, r2
 800e09a:	613b      	str	r3, [r7, #16]
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	685a      	ldr	r2, [r3, #4]
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	605a      	str	r2, [r3, #4]
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	685a      	ldr	r2, [r3, #4]
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d104      	bne.n	800e0bc <vTaskSwitchContext+0x8c>
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	605a      	str	r2, [r3, #4]
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	4a10      	ldr	r2, [pc, #64]	; (800e104 <vTaskSwitchContext+0xd4>)
 800e0c4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800e0c6:	4b0f      	ldr	r3, [pc, #60]	; (800e104 <vTaskSwitchContext+0xd4>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	4b0f      	ldr	r3, [pc, #60]	; (800e108 <vTaskSwitchContext+0xd8>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d102      	bne.n	800e0d8 <vTaskSwitchContext+0xa8>
 800e0d2:	f002 f9af 	bl	8010434 <SEGGER_SYSVIEW_OnIdle>
 800e0d6:	e004      	b.n	800e0e2 <vTaskSwitchContext+0xb2>
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	; (800e104 <vTaskSwitchContext+0xd4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f002 fa07 	bl	80104f0 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0e2:	4b08      	ldr	r3, [pc, #32]	; (800e104 <vTaskSwitchContext+0xd4>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	334c      	adds	r3, #76	; 0x4c
 800e0e8:	4a08      	ldr	r2, [pc, #32]	; (800e10c <vTaskSwitchContext+0xdc>)
 800e0ea:	6013      	str	r3, [r2, #0]
}
 800e0ec:	bf00      	nop
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	20000c04 	.word	0x20000c04
 800e0f8:	20000bf0 	.word	0x20000bf0
 800e0fc:	20000be4 	.word	0x20000be4
 800e100:	20000ae0 	.word	0x20000ae0
 800e104:	20000adc 	.word	0x20000adc
 800e108:	20000c00 	.word	0x20000c00
 800e10c:	20000010 	.word	0x20000010

0800e110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	60fb      	str	r3, [r7, #12]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e136:	4b07      	ldr	r3, [pc, #28]	; (800e154 <vTaskPlaceOnEventList+0x44>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	3318      	adds	r3, #24
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7fe fa47 	bl	800c5d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e144:	2101      	movs	r1, #1
 800e146:	6838      	ldr	r0, [r7, #0]
 800e148:	f000 fba0 	bl	800e88c <prvAddCurrentTaskToDelayedList>
}
 800e14c:	bf00      	nop
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	20000adc 	.word	0x20000adc

0800e158 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10a      	bne.n	800e184 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	60fb      	str	r3, [r7, #12]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	3318      	adds	r3, #24
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fe fa5b 	bl	800c644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e18e:	4b1f      	ldr	r3, [pc, #124]	; (800e20c <xTaskRemoveFromEventList+0xb4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d120      	bne.n	800e1d8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	3304      	adds	r3, #4
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe fa52 	bl	800c644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f002 f9e6 	bl	8010574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	409a      	lsls	r2, r3
 800e1b0:	4b17      	ldr	r3, [pc, #92]	; (800e210 <xTaskRemoveFromEventList+0xb8>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	4a16      	ldr	r2, [pc, #88]	; (800e210 <xTaskRemoveFromEventList+0xb8>)
 800e1b8:	6013      	str	r3, [r2, #0]
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4a13      	ldr	r2, [pc, #76]	; (800e214 <xTaskRemoveFromEventList+0xbc>)
 800e1c8:	441a      	add	r2, r3
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fe f9da 	bl	800c58a <vListInsertEnd>
 800e1d6:	e005      	b.n	800e1e4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	3318      	adds	r3, #24
 800e1dc:	4619      	mov	r1, r3
 800e1de:	480e      	ldr	r0, [pc, #56]	; (800e218 <xTaskRemoveFromEventList+0xc0>)
 800e1e0:	f7fe f9d3 	bl	800c58a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e8:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <xTaskRemoveFromEventList+0xc4>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d905      	bls.n	800e1fe <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1f6:	4b0a      	ldr	r3, [pc, #40]	; (800e220 <xTaskRemoveFromEventList+0xc8>)
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	e001      	b.n	800e202 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800e1fe:	2300      	movs	r3, #0
 800e200:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e202:	697b      	ldr	r3, [r7, #20]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3718      	adds	r7, #24
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	20000c04 	.word	0x20000c04
 800e210:	20000be4 	.word	0x20000be4
 800e214:	20000ae0 	.word	0x20000ae0
 800e218:	20000b9c 	.word	0x20000b9c
 800e21c:	20000adc 	.word	0x20000adc
 800e220:	20000bf0 	.word	0x20000bf0

0800e224 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e22c:	4b06      	ldr	r3, [pc, #24]	; (800e248 <vTaskInternalSetTimeOutState+0x24>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e234:	4b05      	ldr	r3, [pc, #20]	; (800e24c <vTaskInternalSetTimeOutState+0x28>)
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	605a      	str	r2, [r3, #4]
}
 800e23c:	bf00      	nop
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	20000bf4 	.word	0x20000bf4
 800e24c:	20000be0 	.word	0x20000be0

0800e250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b088      	sub	sp, #32
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10a      	bne.n	800e276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	f383 8811 	msr	BASEPRI, r3
 800e268:	f3bf 8f6f 	isb	sy
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	613b      	str	r3, [r7, #16]
}
 800e272:	bf00      	nop
 800e274:	e7fe      	b.n	800e274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d10a      	bne.n	800e292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e280:	f383 8811 	msr	BASEPRI, r3
 800e284:	f3bf 8f6f 	isb	sy
 800e288:	f3bf 8f4f 	dsb	sy
 800e28c:	60fb      	str	r3, [r7, #12]
}
 800e28e:	bf00      	nop
 800e290:	e7fe      	b.n	800e290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e292:	f000 fc8f 	bl	800ebb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e296:	4b1d      	ldr	r3, [pc, #116]	; (800e30c <xTaskCheckForTimeOut+0xbc>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	69ba      	ldr	r2, [r7, #24]
 800e2a2:	1ad3      	subs	r3, r2, r3
 800e2a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ae:	d102      	bne.n	800e2b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	61fb      	str	r3, [r7, #28]
 800e2b4:	e023      	b.n	800e2fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	4b15      	ldr	r3, [pc, #84]	; (800e310 <xTaskCheckForTimeOut+0xc0>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d007      	beq.n	800e2d2 <xTaskCheckForTimeOut+0x82>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	69ba      	ldr	r2, [r7, #24]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d302      	bcc.n	800e2d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	61fb      	str	r3, [r7, #28]
 800e2d0:	e015      	b.n	800e2fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	697a      	ldr	r2, [r7, #20]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d20b      	bcs.n	800e2f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	1ad2      	subs	r2, r2, r3
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff ff9b 	bl	800e224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	61fb      	str	r3, [r7, #28]
 800e2f2:	e004      	b.n	800e2fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e2fe:	f000 fc89 	bl	800ec14 <vPortExitCritical>

	return xReturn;
 800e302:	69fb      	ldr	r3, [r7, #28]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3720      	adds	r7, #32
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20000be0 	.word	0x20000be0
 800e310:	20000bf4 	.word	0x20000bf4

0800e314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e314:	b480      	push	{r7}
 800e316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e318:	4b03      	ldr	r3, [pc, #12]	; (800e328 <vTaskMissedYield+0x14>)
 800e31a:	2201      	movs	r2, #1
 800e31c:	601a      	str	r2, [r3, #0]
}
 800e31e:	bf00      	nop
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr
 800e328:	20000bf0 	.word	0x20000bf0

0800e32c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e334:	f000 f852 	bl	800e3dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e338:	4b06      	ldr	r3, [pc, #24]	; (800e354 <prvIdleTask+0x28>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d9f9      	bls.n	800e334 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e340:	4b05      	ldr	r3, [pc, #20]	; (800e358 <prvIdleTask+0x2c>)
 800e342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e346:	601a      	str	r2, [r3, #0]
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e350:	e7f0      	b.n	800e334 <prvIdleTask+0x8>
 800e352:	bf00      	nop
 800e354:	20000ae0 	.word	0x20000ae0
 800e358:	e000ed04 	.word	0xe000ed04

0800e35c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e362:	2300      	movs	r3, #0
 800e364:	607b      	str	r3, [r7, #4]
 800e366:	e00c      	b.n	800e382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	4613      	mov	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4a12      	ldr	r2, [pc, #72]	; (800e3bc <prvInitialiseTaskLists+0x60>)
 800e374:	4413      	add	r3, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe f8da 	bl	800c530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3301      	adds	r3, #1
 800e380:	607b      	str	r3, [r7, #4]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b06      	cmp	r3, #6
 800e386:	d9ef      	bls.n	800e368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e388:	480d      	ldr	r0, [pc, #52]	; (800e3c0 <prvInitialiseTaskLists+0x64>)
 800e38a:	f7fe f8d1 	bl	800c530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e38e:	480d      	ldr	r0, [pc, #52]	; (800e3c4 <prvInitialiseTaskLists+0x68>)
 800e390:	f7fe f8ce 	bl	800c530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e394:	480c      	ldr	r0, [pc, #48]	; (800e3c8 <prvInitialiseTaskLists+0x6c>)
 800e396:	f7fe f8cb 	bl	800c530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e39a:	480c      	ldr	r0, [pc, #48]	; (800e3cc <prvInitialiseTaskLists+0x70>)
 800e39c:	f7fe f8c8 	bl	800c530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3a0:	480b      	ldr	r0, [pc, #44]	; (800e3d0 <prvInitialiseTaskLists+0x74>)
 800e3a2:	f7fe f8c5 	bl	800c530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3a6:	4b0b      	ldr	r3, [pc, #44]	; (800e3d4 <prvInitialiseTaskLists+0x78>)
 800e3a8:	4a05      	ldr	r2, [pc, #20]	; (800e3c0 <prvInitialiseTaskLists+0x64>)
 800e3aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	; (800e3d8 <prvInitialiseTaskLists+0x7c>)
 800e3ae:	4a05      	ldr	r2, [pc, #20]	; (800e3c4 <prvInitialiseTaskLists+0x68>)
 800e3b0:	601a      	str	r2, [r3, #0]
}
 800e3b2:	bf00      	nop
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	20000ae0 	.word	0x20000ae0
 800e3c0:	20000b6c 	.word	0x20000b6c
 800e3c4:	20000b80 	.word	0x20000b80
 800e3c8:	20000b9c 	.word	0x20000b9c
 800e3cc:	20000bb0 	.word	0x20000bb0
 800e3d0:	20000bc8 	.word	0x20000bc8
 800e3d4:	20000b94 	.word	0x20000b94
 800e3d8:	20000b98 	.word	0x20000b98

0800e3dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3e2:	e019      	b.n	800e418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3e4:	f000 fbe6 	bl	800ebb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e8:	4b10      	ldr	r3, [pc, #64]	; (800e42c <prvCheckTasksWaitingTermination+0x50>)
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fe f925 	bl	800c644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3fa:	4b0d      	ldr	r3, [pc, #52]	; (800e430 <prvCheckTasksWaitingTermination+0x54>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	4a0b      	ldr	r2, [pc, #44]	; (800e430 <prvCheckTasksWaitingTermination+0x54>)
 800e402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e404:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <prvCheckTasksWaitingTermination+0x58>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3b01      	subs	r3, #1
 800e40a:	4a0a      	ldr	r2, [pc, #40]	; (800e434 <prvCheckTasksWaitingTermination+0x58>)
 800e40c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e40e:	f000 fc01 	bl	800ec14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f810 	bl	800e438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <prvCheckTasksWaitingTermination+0x58>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1e1      	bne.n	800e3e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20000bb0 	.word	0x20000bb0
 800e430:	20000bdc 	.word	0x20000bdc
 800e434:	20000bc4 	.word	0x20000bc4

0800e438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	334c      	adds	r3, #76	; 0x4c
 800e444:	4618      	mov	r0, r3
 800e446:	f002 fc6f 	bl	8010d28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e450:	2b00      	cmp	r3, #0
 800e452:	d108      	bne.n	800e466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e458:	4618      	mov	r0, r3
 800e45a:	f000 fd99 	bl	800ef90 <vPortFree>
				vPortFree( pxTCB );
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 fd96 	bl	800ef90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e464:	e018      	b.n	800e498 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d103      	bne.n	800e478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fd8d 	bl	800ef90 <vPortFree>
	}
 800e476:	e00f      	b.n	800e498 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d00a      	beq.n	800e498 <prvDeleteTCB+0x60>
	__asm volatile
 800e482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	60fb      	str	r3, [r7, #12]
}
 800e494:	bf00      	nop
 800e496:	e7fe      	b.n	800e496 <prvDeleteTCB+0x5e>
	}
 800e498:	bf00      	nop
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4a6:	4b0c      	ldr	r3, [pc, #48]	; (800e4d8 <prvResetNextTaskUnblockTime+0x38>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d104      	bne.n	800e4ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4b0:	4b0a      	ldr	r3, [pc, #40]	; (800e4dc <prvResetNextTaskUnblockTime+0x3c>)
 800e4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4b8:	e008      	b.n	800e4cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ba:	4b07      	ldr	r3, [pc, #28]	; (800e4d8 <prvResetNextTaskUnblockTime+0x38>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	4a04      	ldr	r2, [pc, #16]	; (800e4dc <prvResetNextTaskUnblockTime+0x3c>)
 800e4ca:	6013      	str	r3, [r2, #0]
}
 800e4cc:	bf00      	nop
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr
 800e4d8:	20000b94 	.word	0x20000b94
 800e4dc:	20000bfc 	.word	0x20000bfc

0800e4e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <xTaskGetSchedulerState+0x34>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d102      	bne.n	800e4f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	607b      	str	r3, [r7, #4]
 800e4f2:	e008      	b.n	800e506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4f4:	4b08      	ldr	r3, [pc, #32]	; (800e518 <xTaskGetSchedulerState+0x38>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e4fc:	2302      	movs	r3, #2
 800e4fe:	607b      	str	r3, [r7, #4]
 800e500:	e001      	b.n	800e506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e502:	2300      	movs	r3, #0
 800e504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e506:	687b      	ldr	r3, [r7, #4]
	}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	20000be8 	.word	0x20000be8
 800e518:	20000c04 	.word	0x20000c04

0800e51c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e528:	2300      	movs	r3, #0
 800e52a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d067      	beq.n	800e602 <xTaskPriorityInherit+0xe6>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e536:	4b35      	ldr	r3, [pc, #212]	; (800e60c <xTaskPriorityInherit+0xf0>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d257      	bcs.n	800e5f0 <xTaskPriorityInherit+0xd4>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	699b      	ldr	r3, [r3, #24]
 800e544:	2b00      	cmp	r3, #0
 800e546:	db06      	blt.n	800e556 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e548:	4b30      	ldr	r3, [pc, #192]	; (800e60c <xTaskPriorityInherit+0xf0>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54e:	f1c3 0207 	rsb	r2, r3, #7
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	6959      	ldr	r1, [r3, #20]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55e:	4613      	mov	r3, r2
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4413      	add	r3, r2
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4a2a      	ldr	r2, [pc, #168]	; (800e610 <xTaskPriorityInherit+0xf4>)
 800e568:	4413      	add	r3, r2
 800e56a:	4299      	cmp	r1, r3
 800e56c:	d133      	bne.n	800e5d6 <xTaskPriorityInherit+0xba>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	3304      	adds	r3, #4
 800e572:	4618      	mov	r0, r3
 800e574:	f7fe f866 	bl	800c644 <uxListRemove>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d10a      	bne.n	800e594 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e582:	2201      	movs	r2, #1
 800e584:	fa02 f303 	lsl.w	r3, r2, r3
 800e588:	43da      	mvns	r2, r3
 800e58a:	4b22      	ldr	r3, [pc, #136]	; (800e614 <xTaskPriorityInherit+0xf8>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4013      	ands	r3, r2
 800e590:	4a20      	ldr	r2, [pc, #128]	; (800e614 <xTaskPriorityInherit+0xf8>)
 800e592:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e594:	4b1d      	ldr	r3, [pc, #116]	; (800e60c <xTaskPriorityInherit+0xf0>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f001 ffe7 	bl	8010574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	409a      	lsls	r2, r3
 800e5ae:	4b19      	ldr	r3, [pc, #100]	; (800e614 <xTaskPriorityInherit+0xf8>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	4a17      	ldr	r2, [pc, #92]	; (800e614 <xTaskPriorityInherit+0xf8>)
 800e5b6:	6013      	str	r3, [r2, #0]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5bc:	4613      	mov	r3, r2
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	4413      	add	r3, r2
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	4a12      	ldr	r2, [pc, #72]	; (800e610 <xTaskPriorityInherit+0xf4>)
 800e5c6:	441a      	add	r2, r3
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	f7fd ffdb 	bl	800c58a <vListInsertEnd>
 800e5d4:	e004      	b.n	800e5e0 <xTaskPriorityInherit+0xc4>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5d6:	4b0d      	ldr	r3, [pc, #52]	; (800e60c <xTaskPriorityInherit+0xf0>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	2049      	movs	r0, #73	; 0x49
 800e5e6:	f001 fabf 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	60fb      	str	r3, [r7, #12]
 800e5ee:	e008      	b.n	800e602 <xTaskPriorityInherit+0xe6>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5f4:	4b05      	ldr	r3, [pc, #20]	; (800e60c <xTaskPriorityInherit+0xf0>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d201      	bcs.n	800e602 <xTaskPriorityInherit+0xe6>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e5fe:	2301      	movs	r3, #1
 800e600:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e602:	68fb      	ldr	r3, [r7, #12]
	}
 800e604:	4618      	mov	r0, r3
 800e606:	3710      	adds	r7, #16
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	20000adc 	.word	0x20000adc
 800e610:	20000ae0 	.word	0x20000ae0
 800e614:	20000be4 	.word	0x20000be4

0800e618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e624:	2300      	movs	r3, #0
 800e626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d077      	beq.n	800e71e <xTaskPriorityDisinherit+0x106>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e62e:	4b3e      	ldr	r3, [pc, #248]	; (800e728 <xTaskPriorityDisinherit+0x110>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	693a      	ldr	r2, [r7, #16]
 800e634:	429a      	cmp	r2, r3
 800e636:	d00a      	beq.n	800e64e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	60fb      	str	r3, [r7, #12]
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e652:	2b00      	cmp	r3, #0
 800e654:	d10a      	bne.n	800e66c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	60bb      	str	r3, [r7, #8]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e670:	1e5a      	subs	r2, r3, #1
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e67e:	429a      	cmp	r2, r3
 800e680:	d04d      	beq.n	800e71e <xTaskPriorityDisinherit+0x106>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e686:	2b00      	cmp	r3, #0
 800e688:	d149      	bne.n	800e71e <xTaskPriorityDisinherit+0x106>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	3304      	adds	r3, #4
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fd ffd8 	bl	800c644 <uxListRemove>
 800e694:	4603      	mov	r3, r0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d115      	bne.n	800e6c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69e:	4923      	ldr	r1, [pc, #140]	; (800e72c <xTaskPriorityDisinherit+0x114>)
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	440b      	add	r3, r1
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d10a      	bne.n	800e6c6 <xTaskPriorityDisinherit+0xae>
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e6ba:	43da      	mvns	r2, r3
 800e6bc:	4b1c      	ldr	r3, [pc, #112]	; (800e730 <xTaskPriorityDisinherit+0x118>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	4a1b      	ldr	r2, [pc, #108]	; (800e730 <xTaskPriorityDisinherit+0x118>)
 800e6c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	204a      	movs	r0, #74	; 0x4a
 800e6cc:	f001 fa4c 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6dc:	f1c3 0207 	rsb	r2, r3, #7
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f001 ff44 	bl	8010574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	409a      	lsls	r2, r3
 800e6f4:	4b0e      	ldr	r3, [pc, #56]	; (800e730 <xTaskPriorityDisinherit+0x118>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	4a0d      	ldr	r2, [pc, #52]	; (800e730 <xTaskPriorityDisinherit+0x118>)
 800e6fc:	6013      	str	r3, [r2, #0]
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e702:	4613      	mov	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4413      	add	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	4a08      	ldr	r2, [pc, #32]	; (800e72c <xTaskPriorityDisinherit+0x114>)
 800e70c:	441a      	add	r2, r3
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	3304      	adds	r3, #4
 800e712:	4619      	mov	r1, r3
 800e714:	4610      	mov	r0, r2
 800e716:	f7fd ff38 	bl	800c58a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e71a:	2301      	movs	r3, #1
 800e71c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e71e:	697b      	ldr	r3, [r7, #20]
	}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	20000adc 	.word	0x20000adc
 800e72c:	20000ae0 	.word	0x20000ae0
 800e730:	20000be4 	.word	0x20000be4

0800e734 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e742:	2301      	movs	r3, #1
 800e744:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f000 8081 	beq.w	800e850 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10a      	bne.n	800e76c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75a:	f383 8811 	msr	BASEPRI, r3
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	60fb      	str	r3, [r7, #12]
}
 800e768:	bf00      	nop
 800e76a:	e7fe      	b.n	800e76a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e770:	683a      	ldr	r2, [r7, #0]
 800e772:	429a      	cmp	r2, r3
 800e774:	d902      	bls.n	800e77c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	61fb      	str	r3, [r7, #28]
 800e77a:	e002      	b.n	800e782 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e780:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e786:	69fa      	ldr	r2, [r7, #28]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d061      	beq.n	800e850 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e790:	697a      	ldr	r2, [r7, #20]
 800e792:	429a      	cmp	r2, r3
 800e794:	d15c      	bne.n	800e850 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e796:	4b30      	ldr	r3, [pc, #192]	; (800e858 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	69ba      	ldr	r2, [r7, #24]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d10a      	bne.n	800e7b6 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	60bb      	str	r3, [r7, #8]
}
 800e7b2:	bf00      	nop
 800e7b4:	e7fe      	b.n	800e7b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	204a      	movs	r0, #74	; 0x4a
 800e7bc:	f001 f9d4 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	699b      	ldr	r3, [r3, #24]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	db04      	blt.n	800e7de <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	f1c3 0207 	rsb	r2, r3, #7
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	6959      	ldr	r1, [r3, #20]
 800e7e2:	693a      	ldr	r2, [r7, #16]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	4413      	add	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	4a1b      	ldr	r2, [pc, #108]	; (800e85c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800e7ee:	4413      	add	r3, r2
 800e7f0:	4299      	cmp	r1, r3
 800e7f2:	d12d      	bne.n	800e850 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fd ff23 	bl	800c644 <uxListRemove>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10a      	bne.n	800e81a <vTaskPriorityDisinheritAfterTimeout+0xe6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e808:	2201      	movs	r2, #1
 800e80a:	fa02 f303 	lsl.w	r3, r2, r3
 800e80e:	43da      	mvns	r2, r3
 800e810:	4b13      	ldr	r3, [pc, #76]	; (800e860 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4013      	ands	r3, r2
 800e816:	4a12      	ldr	r2, [pc, #72]	; (800e860 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e818:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 fea9 	bl	8010574 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e826:	2201      	movs	r2, #1
 800e828:	409a      	lsls	r2, r3
 800e82a:	4b0d      	ldr	r3, [pc, #52]	; (800e860 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	4313      	orrs	r3, r2
 800e830:	4a0b      	ldr	r2, [pc, #44]	; (800e860 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e832:	6013      	str	r3, [r2, #0]
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e838:	4613      	mov	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	4413      	add	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4a06      	ldr	r2, [pc, #24]	; (800e85c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800e842:	441a      	add	r2, r3
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	3304      	adds	r3, #4
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f7fd fe9d 	bl	800c58a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e850:	bf00      	nop
 800e852:	3720      	adds	r7, #32
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	20000adc 	.word	0x20000adc
 800e85c:	20000ae0 	.word	0x20000ae0
 800e860:	20000be4 	.word	0x20000be4

0800e864 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e864:	b480      	push	{r7}
 800e866:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e868:	4b07      	ldr	r3, [pc, #28]	; (800e888 <pvTaskIncrementMutexHeldCount+0x24>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d004      	beq.n	800e87a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e870:	4b05      	ldr	r3, [pc, #20]	; (800e888 <pvTaskIncrementMutexHeldCount+0x24>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e876:	3201      	adds	r2, #1
 800e878:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e87a:	4b03      	ldr	r3, [pc, #12]	; (800e888 <pvTaskIncrementMutexHeldCount+0x24>)
 800e87c:	681b      	ldr	r3, [r3, #0]
	}
 800e87e:	4618      	mov	r0, r3
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr
 800e888:	20000adc 	.word	0x20000adc

0800e88c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e896:	4b29      	ldr	r3, [pc, #164]	; (800e93c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e89c:	4b28      	ldr	r3, [pc, #160]	; (800e940 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3304      	adds	r3, #4
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fd fece 	bl	800c644 <uxListRemove>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10b      	bne.n	800e8c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e8ae:	4b24      	ldr	r3, [pc, #144]	; (800e940 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ba:	43da      	mvns	r2, r3
 800e8bc:	4b21      	ldr	r3, [pc, #132]	; (800e944 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4013      	ands	r3, r2
 800e8c2:	4a20      	ldr	r2, [pc, #128]	; (800e944 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e8c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8cc:	d10a      	bne.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x58>
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d007      	beq.n	800e8e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8d4:	4b1a      	ldr	r3, [pc, #104]	; (800e940 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	4619      	mov	r1, r3
 800e8dc:	481a      	ldr	r0, [pc, #104]	; (800e948 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e8de:	f7fd fe54 	bl	800c58a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e8e2:	e026      	b.n	800e932 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8ec:	4b14      	ldr	r3, [pc, #80]	; (800e940 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d209      	bcs.n	800e910 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8fc:	4b13      	ldr	r3, [pc, #76]	; (800e94c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	4b0f      	ldr	r3, [pc, #60]	; (800e940 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	3304      	adds	r3, #4
 800e906:	4619      	mov	r1, r3
 800e908:	4610      	mov	r0, r2
 800e90a:	f7fd fe62 	bl	800c5d2 <vListInsert>
}
 800e90e:	e010      	b.n	800e932 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e910:	4b0f      	ldr	r3, [pc, #60]	; (800e950 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	4b0a      	ldr	r3, [pc, #40]	; (800e940 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3304      	adds	r3, #4
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7fd fe58 	bl	800c5d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e922:	4b0c      	ldr	r3, [pc, #48]	; (800e954 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d202      	bcs.n	800e932 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e92c:	4a09      	ldr	r2, [pc, #36]	; (800e954 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	6013      	str	r3, [r2, #0]
}
 800e932:	bf00      	nop
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	20000be0 	.word	0x20000be0
 800e940:	20000adc 	.word	0x20000adc
 800e944:	20000be4 	.word	0x20000be4
 800e948:	20000bc8 	.word	0x20000bc8
 800e94c:	20000b98 	.word	0x20000b98
 800e950:	20000b94 	.word	0x20000b94
 800e954:	20000bfc 	.word	0x20000bfc

0800e958 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	3b04      	subs	r3, #4
 800e968:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	3b04      	subs	r3, #4
 800e976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	f023 0201 	bic.w	r2, r3, #1
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	3b04      	subs	r3, #4
 800e986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e988:	4a0c      	ldr	r2, [pc, #48]	; (800e9bc <pxPortInitialiseStack+0x64>)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3b14      	subs	r3, #20
 800e992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	3b04      	subs	r3, #4
 800e99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f06f 0202 	mvn.w	r2, #2
 800e9a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	3b20      	subs	r3, #32
 800e9ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	0800e9c1 	.word	0x0800e9c1

0800e9c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <prvTaskExitError+0x54>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d2:	d00a      	beq.n	800e9ea <prvTaskExitError+0x2a>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	60fb      	str	r3, [r7, #12]
}
 800e9e6:	bf00      	nop
 800e9e8:	e7fe      	b.n	800e9e8 <prvTaskExitError+0x28>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	60bb      	str	r3, [r7, #8]
}
 800e9fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e9fe:	bf00      	nop
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0fc      	beq.n	800ea00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea06:	bf00      	nop
 800ea08:	bf00      	nop
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	2000000c 	.word	0x2000000c
	...

0800ea20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea20:	4b07      	ldr	r3, [pc, #28]	; (800ea40 <pxCurrentTCBConst2>)
 800ea22:	6819      	ldr	r1, [r3, #0]
 800ea24:	6808      	ldr	r0, [r1, #0]
 800ea26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2a:	f380 8809 	msr	PSP, r0
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f04f 0000 	mov.w	r0, #0
 800ea36:	f380 8811 	msr	BASEPRI, r0
 800ea3a:	4770      	bx	lr
 800ea3c:	f3af 8000 	nop.w

0800ea40 <pxCurrentTCBConst2>:
 800ea40:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop

0800ea48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ea48:	4808      	ldr	r0, [pc, #32]	; (800ea6c <prvPortStartFirstTask+0x24>)
 800ea4a:	6800      	ldr	r0, [r0, #0]
 800ea4c:	6800      	ldr	r0, [r0, #0]
 800ea4e:	f380 8808 	msr	MSP, r0
 800ea52:	f04f 0000 	mov.w	r0, #0
 800ea56:	f380 8814 	msr	CONTROL, r0
 800ea5a:	b662      	cpsie	i
 800ea5c:	b661      	cpsie	f
 800ea5e:	f3bf 8f4f 	dsb	sy
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	df00      	svc	0
 800ea68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea6a:	bf00      	nop
 800ea6c:	e000ed08 	.word	0xe000ed08

0800ea70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b086      	sub	sp, #24
 800ea74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ea76:	4b46      	ldr	r3, [pc, #280]	; (800eb90 <xPortStartScheduler+0x120>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4a46      	ldr	r2, [pc, #280]	; (800eb94 <xPortStartScheduler+0x124>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d10a      	bne.n	800ea96 <xPortStartScheduler+0x26>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	613b      	str	r3, [r7, #16]
}
 800ea92:	bf00      	nop
 800ea94:	e7fe      	b.n	800ea94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ea96:	4b3e      	ldr	r3, [pc, #248]	; (800eb90 <xPortStartScheduler+0x120>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a3f      	ldr	r2, [pc, #252]	; (800eb98 <xPortStartScheduler+0x128>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d10a      	bne.n	800eab6 <xPortStartScheduler+0x46>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	60fb      	str	r3, [r7, #12]
}
 800eab2:	bf00      	nop
 800eab4:	e7fe      	b.n	800eab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eab6:	4b39      	ldr	r3, [pc, #228]	; (800eb9c <xPortStartScheduler+0x12c>)
 800eab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	22ff      	movs	r2, #255	; 0xff
 800eac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ead0:	78fb      	ldrb	r3, [r7, #3]
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ead8:	b2da      	uxtb	r2, r3
 800eada:	4b31      	ldr	r3, [pc, #196]	; (800eba0 <xPortStartScheduler+0x130>)
 800eadc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eade:	4b31      	ldr	r3, [pc, #196]	; (800eba4 <xPortStartScheduler+0x134>)
 800eae0:	2207      	movs	r2, #7
 800eae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eae4:	e009      	b.n	800eafa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eae6:	4b2f      	ldr	r3, [pc, #188]	; (800eba4 <xPortStartScheduler+0x134>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	3b01      	subs	r3, #1
 800eaec:	4a2d      	ldr	r2, [pc, #180]	; (800eba4 <xPortStartScheduler+0x134>)
 800eaee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	005b      	lsls	r3, r3, #1
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eafa:	78fb      	ldrb	r3, [r7, #3]
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb02:	2b80      	cmp	r3, #128	; 0x80
 800eb04:	d0ef      	beq.n	800eae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb06:	4b27      	ldr	r3, [pc, #156]	; (800eba4 <xPortStartScheduler+0x134>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f1c3 0307 	rsb	r3, r3, #7
 800eb0e:	2b04      	cmp	r3, #4
 800eb10:	d00a      	beq.n	800eb28 <xPortStartScheduler+0xb8>
	__asm volatile
 800eb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	60bb      	str	r3, [r7, #8]
}
 800eb24:	bf00      	nop
 800eb26:	e7fe      	b.n	800eb26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb28:	4b1e      	ldr	r3, [pc, #120]	; (800eba4 <xPortStartScheduler+0x134>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	021b      	lsls	r3, r3, #8
 800eb2e:	4a1d      	ldr	r2, [pc, #116]	; (800eba4 <xPortStartScheduler+0x134>)
 800eb30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb32:	4b1c      	ldr	r3, [pc, #112]	; (800eba4 <xPortStartScheduler+0x134>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb3a:	4a1a      	ldr	r2, [pc, #104]	; (800eba4 <xPortStartScheduler+0x134>)
 800eb3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	b2da      	uxtb	r2, r3
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb46:	4b18      	ldr	r3, [pc, #96]	; (800eba8 <xPortStartScheduler+0x138>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a17      	ldr	r2, [pc, #92]	; (800eba8 <xPortStartScheduler+0x138>)
 800eb4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb52:	4b15      	ldr	r3, [pc, #84]	; (800eba8 <xPortStartScheduler+0x138>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4a14      	ldr	r2, [pc, #80]	; (800eba8 <xPortStartScheduler+0x138>)
 800eb58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb5e:	f000 f8dd 	bl	800ed1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb62:	4b12      	ldr	r3, [pc, #72]	; (800ebac <xPortStartScheduler+0x13c>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb68:	f000 f8fc 	bl	800ed64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb6c:	4b10      	ldr	r3, [pc, #64]	; (800ebb0 <xPortStartScheduler+0x140>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4a0f      	ldr	r2, [pc, #60]	; (800ebb0 <xPortStartScheduler+0x140>)
 800eb72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eb76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb78:	f7ff ff66 	bl	800ea48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eb7c:	f7ff fa58 	bl	800e030 <vTaskSwitchContext>
	prvTaskExitError();
 800eb80:	f7ff ff1e 	bl	800e9c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	e000ed00 	.word	0xe000ed00
 800eb94:	410fc271 	.word	0x410fc271
 800eb98:	410fc270 	.word	0x410fc270
 800eb9c:	e000e400 	.word	0xe000e400
 800eba0:	20000c08 	.word	0x20000c08
 800eba4:	20000c0c 	.word	0x20000c0c
 800eba8:	e000ed20 	.word	0xe000ed20
 800ebac:	2000000c 	.word	0x2000000c
 800ebb0:	e000ef34 	.word	0xe000ef34

0800ebb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
	__asm volatile
 800ebba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbe:	f383 8811 	msr	BASEPRI, r3
 800ebc2:	f3bf 8f6f 	isb	sy
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	607b      	str	r3, [r7, #4]
}
 800ebcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ebce:	4b0f      	ldr	r3, [pc, #60]	; (800ec0c <vPortEnterCritical+0x58>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	4a0d      	ldr	r2, [pc, #52]	; (800ec0c <vPortEnterCritical+0x58>)
 800ebd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ebd8:	4b0c      	ldr	r3, [pc, #48]	; (800ec0c <vPortEnterCritical+0x58>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d10f      	bne.n	800ec00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ebe0:	4b0b      	ldr	r3, [pc, #44]	; (800ec10 <vPortEnterCritical+0x5c>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00a      	beq.n	800ec00 <vPortEnterCritical+0x4c>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	603b      	str	r3, [r7, #0]
}
 800ebfc:	bf00      	nop
 800ebfe:	e7fe      	b.n	800ebfe <vPortEnterCritical+0x4a>
	}
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	2000000c 	.word	0x2000000c
 800ec10:	e000ed04 	.word	0xe000ed04

0800ec14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec1a:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <vPortExitCritical+0x50>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10a      	bne.n	800ec38 <vPortExitCritical+0x24>
	__asm volatile
 800ec22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	607b      	str	r3, [r7, #4]
}
 800ec34:	bf00      	nop
 800ec36:	e7fe      	b.n	800ec36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ec38:	4b0a      	ldr	r3, [pc, #40]	; (800ec64 <vPortExitCritical+0x50>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	4a09      	ldr	r2, [pc, #36]	; (800ec64 <vPortExitCritical+0x50>)
 800ec40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec42:	4b08      	ldr	r3, [pc, #32]	; (800ec64 <vPortExitCritical+0x50>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d105      	bne.n	800ec56 <vPortExitCritical+0x42>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	f383 8811 	msr	BASEPRI, r3
}
 800ec54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec56:	bf00      	nop
 800ec58:	370c      	adds	r7, #12
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec60:	4770      	bx	lr
 800ec62:	bf00      	nop
 800ec64:	2000000c 	.word	0x2000000c
	...

0800ec70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec70:	f3ef 8009 	mrs	r0, PSP
 800ec74:	f3bf 8f6f 	isb	sy
 800ec78:	4b15      	ldr	r3, [pc, #84]	; (800ecd0 <pxCurrentTCBConst>)
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	f01e 0f10 	tst.w	lr, #16
 800ec80:	bf08      	it	eq
 800ec82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ec86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8a:	6010      	str	r0, [r2, #0]
 800ec8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec94:	f380 8811 	msr	BASEPRI, r0
 800ec98:	f3bf 8f4f 	dsb	sy
 800ec9c:	f3bf 8f6f 	isb	sy
 800eca0:	f7ff f9c6 	bl	800e030 <vTaskSwitchContext>
 800eca4:	f04f 0000 	mov.w	r0, #0
 800eca8:	f380 8811 	msr	BASEPRI, r0
 800ecac:	bc09      	pop	{r0, r3}
 800ecae:	6819      	ldr	r1, [r3, #0]
 800ecb0:	6808      	ldr	r0, [r1, #0]
 800ecb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb6:	f01e 0f10 	tst.w	lr, #16
 800ecba:	bf08      	it	eq
 800ecbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ecc0:	f380 8809 	msr	PSP, r0
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	f3af 8000 	nop.w

0800ecd0 <pxCurrentTCBConst>:
 800ecd0:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop

0800ecd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
	__asm volatile
 800ecde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ece2:	f383 8811 	msr	BASEPRI, r3
 800ece6:	f3bf 8f6f 	isb	sy
 800ecea:	f3bf 8f4f 	dsb	sy
 800ecee:	607b      	str	r3, [r7, #4]
}
 800ecf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ecf2:	f7ff f8e1 	bl	800deb8 <xTaskIncrementTick>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ecfc:	4b06      	ldr	r3, [pc, #24]	; (800ed18 <SysTick_Handler+0x40>)
 800ecfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed02:	601a      	str	r2, [r3, #0]
 800ed04:	2300      	movs	r3, #0
 800ed06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	f383 8811 	msr	BASEPRI, r3
}
 800ed0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed10:	bf00      	nop
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	e000ed04 	.word	0xe000ed04

0800ed1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed20:	4b0b      	ldr	r3, [pc, #44]	; (800ed50 <vPortSetupTimerInterrupt+0x34>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed26:	4b0b      	ldr	r3, [pc, #44]	; (800ed54 <vPortSetupTimerInterrupt+0x38>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed2c:	4b0a      	ldr	r3, [pc, #40]	; (800ed58 <vPortSetupTimerInterrupt+0x3c>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a0a      	ldr	r2, [pc, #40]	; (800ed5c <vPortSetupTimerInterrupt+0x40>)
 800ed32:	fba2 2303 	umull	r2, r3, r2, r3
 800ed36:	099b      	lsrs	r3, r3, #6
 800ed38:	4a09      	ldr	r2, [pc, #36]	; (800ed60 <vPortSetupTimerInterrupt+0x44>)
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed3e:	4b04      	ldr	r3, [pc, #16]	; (800ed50 <vPortSetupTimerInterrupt+0x34>)
 800ed40:	2207      	movs	r2, #7
 800ed42:	601a      	str	r2, [r3, #0]
}
 800ed44:	bf00      	nop
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	e000e010 	.word	0xe000e010
 800ed54:	e000e018 	.word	0xe000e018
 800ed58:	20000000 	.word	0x20000000
 800ed5c:	10624dd3 	.word	0x10624dd3
 800ed60:	e000e014 	.word	0xe000e014

0800ed64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ed74 <vPortEnableVFP+0x10>
 800ed68:	6801      	ldr	r1, [r0, #0]
 800ed6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed6e:	6001      	str	r1, [r0, #0]
 800ed70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ed72:	bf00      	nop
 800ed74:	e000ed88 	.word	0xe000ed88

0800ed78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ed7e:	f3ef 8305 	mrs	r3, IPSR
 800ed82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2b0f      	cmp	r3, #15
 800ed88:	d914      	bls.n	800edb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed8a:	4a17      	ldr	r2, [pc, #92]	; (800ede8 <vPortValidateInterruptPriority+0x70>)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	4413      	add	r3, r2
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed94:	4b15      	ldr	r3, [pc, #84]	; (800edec <vPortValidateInterruptPriority+0x74>)
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	7afa      	ldrb	r2, [r7, #11]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	d20a      	bcs.n	800edb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ed9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda2:	f383 8811 	msr	BASEPRI, r3
 800eda6:	f3bf 8f6f 	isb	sy
 800edaa:	f3bf 8f4f 	dsb	sy
 800edae:	607b      	str	r3, [r7, #4]
}
 800edb0:	bf00      	nop
 800edb2:	e7fe      	b.n	800edb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800edb4:	4b0e      	ldr	r3, [pc, #56]	; (800edf0 <vPortValidateInterruptPriority+0x78>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800edbc:	4b0d      	ldr	r3, [pc, #52]	; (800edf4 <vPortValidateInterruptPriority+0x7c>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d90a      	bls.n	800edda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800edc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	603b      	str	r3, [r7, #0]
}
 800edd6:	bf00      	nop
 800edd8:	e7fe      	b.n	800edd8 <vPortValidateInterruptPriority+0x60>
	}
 800edda:	bf00      	nop
 800eddc:	3714      	adds	r7, #20
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	e000e3f0 	.word	0xe000e3f0
 800edec:	20000c08 	.word	0x20000c08
 800edf0:	e000ed0c 	.word	0xe000ed0c
 800edf4:	20000c0c 	.word	0x20000c0c

0800edf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08a      	sub	sp, #40	; 0x28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee00:	2300      	movs	r3, #0
 800ee02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee04:	f7fe ff88 	bl	800dd18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee08:	4b5b      	ldr	r3, [pc, #364]	; (800ef78 <pvPortMalloc+0x180>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee10:	f000 f920 	bl	800f054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee14:	4b59      	ldr	r3, [pc, #356]	; (800ef7c <pvPortMalloc+0x184>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4013      	ands	r3, r2
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f040 8093 	bne.w	800ef48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d01d      	beq.n	800ee64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ee28:	2208      	movs	r2, #8
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f003 0307 	and.w	r3, r3, #7
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d014      	beq.n	800ee64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f023 0307 	bic.w	r3, r3, #7
 800ee40:	3308      	adds	r3, #8
 800ee42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f003 0307 	and.w	r3, r3, #7
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <pvPortMalloc+0x6c>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	617b      	str	r3, [r7, #20]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d06e      	beq.n	800ef48 <pvPortMalloc+0x150>
 800ee6a:	4b45      	ldr	r3, [pc, #276]	; (800ef80 <pvPortMalloc+0x188>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d869      	bhi.n	800ef48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ee74:	4b43      	ldr	r3, [pc, #268]	; (800ef84 <pvPortMalloc+0x18c>)
 800ee76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ee78:	4b42      	ldr	r3, [pc, #264]	; (800ef84 <pvPortMalloc+0x18c>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee7e:	e004      	b.n	800ee8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d903      	bls.n	800ee9c <pvPortMalloc+0xa4>
 800ee94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1f1      	bne.n	800ee80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee9c:	4b36      	ldr	r3, [pc, #216]	; (800ef78 <pvPortMalloc+0x180>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d050      	beq.n	800ef48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2208      	movs	r2, #8
 800eeac:	4413      	add	r3, r2
 800eeae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	6a3b      	ldr	r3, [r7, #32]
 800eeb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	1ad2      	subs	r2, r2, r3
 800eec0:	2308      	movs	r3, #8
 800eec2:	005b      	lsls	r3, r3, #1
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d91f      	bls.n	800ef08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4413      	add	r3, r2
 800eece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	f003 0307 	and.w	r3, r3, #7
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d00a      	beq.n	800eef0 <pvPortMalloc+0xf8>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	613b      	str	r3, [r7, #16]
}
 800eeec:	bf00      	nop
 800eeee:	e7fe      	b.n	800eeee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	685a      	ldr	r2, [r3, #4]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	1ad2      	subs	r2, r2, r3
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef02:	69b8      	ldr	r0, [r7, #24]
 800ef04:	f000 f908 	bl	800f118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef08:	4b1d      	ldr	r3, [pc, #116]	; (800ef80 <pvPortMalloc+0x188>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	4a1b      	ldr	r2, [pc, #108]	; (800ef80 <pvPortMalloc+0x188>)
 800ef14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef16:	4b1a      	ldr	r3, [pc, #104]	; (800ef80 <pvPortMalloc+0x188>)
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	4b1b      	ldr	r3, [pc, #108]	; (800ef88 <pvPortMalloc+0x190>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d203      	bcs.n	800ef2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef22:	4b17      	ldr	r3, [pc, #92]	; (800ef80 <pvPortMalloc+0x188>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a18      	ldr	r2, [pc, #96]	; (800ef88 <pvPortMalloc+0x190>)
 800ef28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2c:	685a      	ldr	r2, [r3, #4]
 800ef2e:	4b13      	ldr	r3, [pc, #76]	; (800ef7c <pvPortMalloc+0x184>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	431a      	orrs	r2, r3
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ef3e:	4b13      	ldr	r3, [pc, #76]	; (800ef8c <pvPortMalloc+0x194>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	3301      	adds	r3, #1
 800ef44:	4a11      	ldr	r2, [pc, #68]	; (800ef8c <pvPortMalloc+0x194>)
 800ef46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef48:	f7fe fef4 	bl	800dd34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	f003 0307 	and.w	r3, r3, #7
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00a      	beq.n	800ef6c <pvPortMalloc+0x174>
	__asm volatile
 800ef56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	60fb      	str	r3, [r7, #12]
}
 800ef68:	bf00      	nop
 800ef6a:	e7fe      	b.n	800ef6a <pvPortMalloc+0x172>
	return pvReturn;
 800ef6c:	69fb      	ldr	r3, [r7, #28]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3728      	adds	r7, #40	; 0x28
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	20008148 	.word	0x20008148
 800ef7c:	2000815c 	.word	0x2000815c
 800ef80:	2000814c 	.word	0x2000814c
 800ef84:	20008140 	.word	0x20008140
 800ef88:	20008150 	.word	0x20008150
 800ef8c:	20008154 	.word	0x20008154

0800ef90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d04d      	beq.n	800f03e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800efa2:	2308      	movs	r3, #8
 800efa4:	425b      	negs	r3, r3
 800efa6:	697a      	ldr	r2, [r7, #20]
 800efa8:	4413      	add	r3, r2
 800efaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	4b24      	ldr	r3, [pc, #144]	; (800f048 <vPortFree+0xb8>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4013      	ands	r3, r2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10a      	bne.n	800efd4 <vPortFree+0x44>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	60fb      	str	r3, [r7, #12]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00a      	beq.n	800eff2 <vPortFree+0x62>
	__asm volatile
 800efdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe0:	f383 8811 	msr	BASEPRI, r3
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	60bb      	str	r3, [r7, #8]
}
 800efee:	bf00      	nop
 800eff0:	e7fe      	b.n	800eff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	685a      	ldr	r2, [r3, #4]
 800eff6:	4b14      	ldr	r3, [pc, #80]	; (800f048 <vPortFree+0xb8>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4013      	ands	r3, r2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d01e      	beq.n	800f03e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d11a      	bne.n	800f03e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	4b0e      	ldr	r3, [pc, #56]	; (800f048 <vPortFree+0xb8>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	43db      	mvns	r3, r3
 800f012:	401a      	ands	r2, r3
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f018:	f7fe fe7e 	bl	800dd18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <vPortFree+0xbc>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4413      	add	r3, r2
 800f026:	4a09      	ldr	r2, [pc, #36]	; (800f04c <vPortFree+0xbc>)
 800f028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f02a:	6938      	ldr	r0, [r7, #16]
 800f02c:	f000 f874 	bl	800f118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f030:	4b07      	ldr	r3, [pc, #28]	; (800f050 <vPortFree+0xc0>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	3301      	adds	r3, #1
 800f036:	4a06      	ldr	r2, [pc, #24]	; (800f050 <vPortFree+0xc0>)
 800f038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f03a:	f7fe fe7b 	bl	800dd34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f03e:	bf00      	nop
 800f040:	3718      	adds	r7, #24
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2000815c 	.word	0x2000815c
 800f04c:	2000814c 	.word	0x2000814c
 800f050:	20008158 	.word	0x20008158

0800f054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f05a:	f247 5330 	movw	r3, #30000	; 0x7530
 800f05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f060:	4b27      	ldr	r3, [pc, #156]	; (800f100 <prvHeapInit+0xac>)
 800f062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00c      	beq.n	800f088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3307      	adds	r3, #7
 800f072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f023 0307 	bic.w	r3, r3, #7
 800f07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f07c:	68ba      	ldr	r2, [r7, #8]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	4a1f      	ldr	r2, [pc, #124]	; (800f100 <prvHeapInit+0xac>)
 800f084:	4413      	add	r3, r2
 800f086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f08c:	4a1d      	ldr	r2, [pc, #116]	; (800f104 <prvHeapInit+0xb0>)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f092:	4b1c      	ldr	r3, [pc, #112]	; (800f104 <prvHeapInit+0xb0>)
 800f094:	2200      	movs	r2, #0
 800f096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	68ba      	ldr	r2, [r7, #8]
 800f09c:	4413      	add	r3, r2
 800f09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0a0:	2208      	movs	r2, #8
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	1a9b      	subs	r3, r3, r2
 800f0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f023 0307 	bic.w	r3, r3, #7
 800f0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	4a15      	ldr	r2, [pc, #84]	; (800f108 <prvHeapInit+0xb4>)
 800f0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0b6:	4b14      	ldr	r3, [pc, #80]	; (800f108 <prvHeapInit+0xb4>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0be:	4b12      	ldr	r3, [pc, #72]	; (800f108 <prvHeapInit+0xb4>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	1ad2      	subs	r2, r2, r3
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f0d4:	4b0c      	ldr	r3, [pc, #48]	; (800f108 <prvHeapInit+0xb4>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	4a0a      	ldr	r2, [pc, #40]	; (800f10c <prvHeapInit+0xb8>)
 800f0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	4a09      	ldr	r2, [pc, #36]	; (800f110 <prvHeapInit+0xbc>)
 800f0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f0ec:	4b09      	ldr	r3, [pc, #36]	; (800f114 <prvHeapInit+0xc0>)
 800f0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f0f2:	601a      	str	r2, [r3, #0]
}
 800f0f4:	bf00      	nop
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	20000c10 	.word	0x20000c10
 800f104:	20008140 	.word	0x20008140
 800f108:	20008148 	.word	0x20008148
 800f10c:	20008150 	.word	0x20008150
 800f110:	2000814c 	.word	0x2000814c
 800f114:	2000815c 	.word	0x2000815c

0800f118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f120:	4b28      	ldr	r3, [pc, #160]	; (800f1c4 <prvInsertBlockIntoFreeList+0xac>)
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	e002      	b.n	800f12c <prvInsertBlockIntoFreeList+0x14>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	429a      	cmp	r2, r3
 800f134:	d8f7      	bhi.n	800f126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	4413      	add	r3, r2
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	429a      	cmp	r2, r3
 800f146:	d108      	bne.n	800f15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	441a      	add	r2, r3
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	441a      	add	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d118      	bne.n	800f1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	4b15      	ldr	r3, [pc, #84]	; (800f1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d00d      	beq.n	800f196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	441a      	add	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	601a      	str	r2, [r3, #0]
 800f194:	e008      	b.n	800f1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f196:	4b0c      	ldr	r3, [pc, #48]	; (800f1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	e003      	b.n	800f1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d002      	beq.n	800f1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1b6:	bf00      	nop
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	20008140 	.word	0x20008140
 800f1c8:	20008148 	.word	0x20008148

0800f1cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800f1d2:	4b26      	ldr	r3, [pc, #152]	; (800f26c <_DoInit+0xa0>)
 800f1d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800f1d6:	22a8      	movs	r2, #168	; 0xa8
 800f1d8:	2100      	movs	r1, #0
 800f1da:	6838      	ldr	r0, [r7, #0]
 800f1dc:	f001 fd8e 	bl	8010cfc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2203      	movs	r2, #3
 800f1e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	2203      	movs	r2, #3
 800f1ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	4a20      	ldr	r2, [pc, #128]	; (800f270 <_DoInit+0xa4>)
 800f1f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	4a1f      	ldr	r2, [pc, #124]	; (800f274 <_DoInit+0xa8>)
 800f1f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	2200      	movs	r2, #0
 800f204:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	2200      	movs	r2, #0
 800f20a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	2200      	movs	r2, #0
 800f210:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	4a16      	ldr	r2, [pc, #88]	; (800f270 <_DoInit+0xa4>)
 800f216:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	4a17      	ldr	r2, [pc, #92]	; (800f278 <_DoInit+0xac>)
 800f21c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	2210      	movs	r2, #16
 800f222:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	2200      	movs	r2, #0
 800f228:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	2200      	movs	r2, #0
 800f22e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	2200      	movs	r2, #0
 800f234:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800f236:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800f23a:	2300      	movs	r3, #0
 800f23c:	607b      	str	r3, [r7, #4]
 800f23e:	e00c      	b.n	800f25a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f1c3 030f 	rsb	r3, r3, #15
 800f246:	4a0d      	ldr	r2, [pc, #52]	; (800f27c <_DoInit+0xb0>)
 800f248:	5cd1      	ldrb	r1, [r2, r3]
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	460a      	mov	r2, r1
 800f252:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	3301      	adds	r3, #1
 800f258:	607b      	str	r3, [r7, #4]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2b0f      	cmp	r3, #15
 800f25e:	d9ef      	bls.n	800f240 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800f260:	f3bf 8f5f 	dmb	sy
}
 800f264:	bf00      	nop
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	20008160 	.word	0x20008160
 800f270:	08011204 	.word	0x08011204
 800f274:	20008208 	.word	0x20008208
 800f278:	20008608 	.word	0x20008608
 800f27c:	08011390 	.word	0x08011390

0800f280 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800f280:	b580      	push	{r7, lr}
 800f282:	b08c      	sub	sp, #48	; 0x30
 800f284:	af00      	add	r7, sp, #0
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800f28c:	4b3e      	ldr	r3, [pc, #248]	; (800f388 <SEGGER_RTT_ReadNoLock+0x108>)
 800f28e:	623b      	str	r3, [r7, #32]
 800f290:	6a3b      	ldr	r3, [r7, #32]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <SEGGER_RTT_ReadNoLock+0x1e>
 800f29a:	f7ff ff97 	bl	800f1cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	005b      	lsls	r3, r3, #1
 800f2a4:	4413      	add	r3, r2
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	3360      	adds	r3, #96	; 0x60
 800f2aa:	4a37      	ldr	r2, [pc, #220]	; (800f388 <SEGGER_RTT_ReadNoLock+0x108>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800f2c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2c6:	69bb      	ldr	r3, [r7, #24]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d92b      	bls.n	800f324 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	689a      	ldr	r2, [r3, #8]
 800f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800f2d6:	697a      	ldr	r2, [r7, #20]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	bf28      	it	cs
 800f2de:	4613      	movcs	r3, r2
 800f2e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e8:	4413      	add	r3, r2
 800f2ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800f2ec:	697a      	ldr	r2, [r7, #20]
 800f2ee:	6939      	ldr	r1, [r7, #16]
 800f2f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2f2:	f001 fcf5 	bl	8010ce0 <memcpy>
    NumBytesRead += NumBytesRem;
 800f2f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800f2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	4413      	add	r3, r2
 800f304:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	1ad3      	subs	r3, r2, r3
 800f30c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800f30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	4413      	add	r3, r2
 800f314:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d101      	bne.n	800f324 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800f320:	2300      	movs	r3, #0
 800f322:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800f32c:	697a      	ldr	r2, [r7, #20]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4293      	cmp	r3, r2
 800f332:	bf28      	it	cs
 800f334:	4613      	movcs	r3, r2
 800f336:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d019      	beq.n	800f372 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f344:	4413      	add	r3, r2
 800f346:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	6939      	ldr	r1, [r7, #16]
 800f34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f34e:	f001 fcc7 	bl	8010ce0 <memcpy>
    NumBytesRead += NumBytesRem;
 800f352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	4413      	add	r3, r2
 800f358:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800f35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	4413      	add	r3, r2
 800f360:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800f36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	4413      	add	r3, r2
 800f370:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	2b00      	cmp	r3, #0
 800f376:	d002      	beq.n	800f37e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f37c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800f37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f380:	4618      	mov	r0, r3
 800f382:	3730      	adds	r7, #48	; 0x30
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	20008160 	.word	0x20008160

0800f38c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b088      	sub	sp, #32
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800f39a:	4b3d      	ldr	r3, [pc, #244]	; (800f490 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800f39c:	61bb      	str	r3, [r7, #24]
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	b2db      	uxtb	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d101      	bne.n	800f3ac <SEGGER_RTT_AllocUpBuffer+0x20>
 800f3a8:	f7ff ff10 	bl	800f1cc <_DoInit>
  SEGGER_RTT_LOCK();
 800f3ac:	f3ef 8311 	mrs	r3, BASEPRI
 800f3b0:	f04f 0120 	mov.w	r1, #32
 800f3b4:	f381 8811 	msr	BASEPRI, r1
 800f3b8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f3ba:	4b35      	ldr	r3, [pc, #212]	; (800f490 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800f3bc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800f3c2:	6939      	ldr	r1, [r7, #16]
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	1c5a      	adds	r2, r3, #1
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	4413      	add	r3, r2
 800f3ce:	00db      	lsls	r3, r3, #3
 800f3d0:	440b      	add	r3, r1
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d008      	beq.n	800f3ec <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	dbeb      	blt.n	800f3c2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800f3ea:	e000      	b.n	800f3ee <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800f3ec:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	69fa      	ldr	r2, [r7, #28]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	da3f      	bge.n	800f478 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800f3f8:	6939      	ldr	r1, [r7, #16]
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	1c5a      	adds	r2, r3, #1
 800f3fe:	4613      	mov	r3, r2
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	4413      	add	r3, r2
 800f404:	00db      	lsls	r3, r3, #3
 800f406:	440b      	add	r3, r1
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800f40c:	6939      	ldr	r1, [r7, #16]
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	1c5a      	adds	r2, r3, #1
 800f412:	4613      	mov	r3, r2
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	4413      	add	r3, r2
 800f418:	00db      	lsls	r3, r3, #3
 800f41a:	440b      	add	r3, r1
 800f41c:	3304      	adds	r3, #4
 800f41e:	68ba      	ldr	r2, [r7, #8]
 800f420:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800f422:	6939      	ldr	r1, [r7, #16]
 800f424:	69fa      	ldr	r2, [r7, #28]
 800f426:	4613      	mov	r3, r2
 800f428:	005b      	lsls	r3, r3, #1
 800f42a:	4413      	add	r3, r2
 800f42c:	00db      	lsls	r3, r3, #3
 800f42e:	440b      	add	r3, r1
 800f430:	3320      	adds	r3, #32
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800f436:	6939      	ldr	r1, [r7, #16]
 800f438:	69fa      	ldr	r2, [r7, #28]
 800f43a:	4613      	mov	r3, r2
 800f43c:	005b      	lsls	r3, r3, #1
 800f43e:	4413      	add	r3, r2
 800f440:	00db      	lsls	r3, r3, #3
 800f442:	440b      	add	r3, r1
 800f444:	3328      	adds	r3, #40	; 0x28
 800f446:	2200      	movs	r2, #0
 800f448:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800f44a:	6939      	ldr	r1, [r7, #16]
 800f44c:	69fa      	ldr	r2, [r7, #28]
 800f44e:	4613      	mov	r3, r2
 800f450:	005b      	lsls	r3, r3, #1
 800f452:	4413      	add	r3, r2
 800f454:	00db      	lsls	r3, r3, #3
 800f456:	440b      	add	r3, r1
 800f458:	3324      	adds	r3, #36	; 0x24
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800f45e:	6939      	ldr	r1, [r7, #16]
 800f460:	69fa      	ldr	r2, [r7, #28]
 800f462:	4613      	mov	r3, r2
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	4413      	add	r3, r2
 800f468:	00db      	lsls	r3, r3, #3
 800f46a:	440b      	add	r3, r1
 800f46c:	332c      	adds	r3, #44	; 0x2c
 800f46e:	683a      	ldr	r2, [r7, #0]
 800f470:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f472:	f3bf 8f5f 	dmb	sy
 800f476:	e002      	b.n	800f47e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800f478:	f04f 33ff 	mov.w	r3, #4294967295
 800f47c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800f484:	69fb      	ldr	r3, [r7, #28]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3720      	adds	r7, #32
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	20008160 	.word	0x20008160

0800f494 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800f494:	b580      	push	{r7, lr}
 800f496:	b08a      	sub	sp, #40	; 0x28
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
 800f4a0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800f4a2:	4b21      	ldr	r3, [pc, #132]	; (800f528 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800f4a4:	623b      	str	r3, [r7, #32]
 800f4a6:	6a3b      	ldr	r3, [r7, #32]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	b2db      	uxtb	r3, r3
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800f4b0:	f7ff fe8c 	bl	800f1cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800f4b4:	4b1c      	ldr	r3, [pc, #112]	; (800f528 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800f4b6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	d82c      	bhi.n	800f518 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800f4be:	f3ef 8311 	mrs	r3, BASEPRI
 800f4c2:	f04f 0120 	mov.w	r1, #32
 800f4c6:	f381 8811 	msr	BASEPRI, r1
 800f4ca:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	005b      	lsls	r3, r3, #1
 800f4d2:	4413      	add	r3, r2
 800f4d4:	00db      	lsls	r3, r3, #3
 800f4d6:	3360      	adds	r3, #96	; 0x60
 800f4d8:	69fa      	ldr	r2, [r7, #28]
 800f4da:	4413      	add	r3, r2
 800f4dc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00e      	beq.n	800f502 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	2200      	movs	r2, #0
 800f500:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f506:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800f508:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800f512:	2300      	movs	r3, #0
 800f514:	627b      	str	r3, [r7, #36]	; 0x24
 800f516:	e002      	b.n	800f51e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800f518:	f04f 33ff 	mov.w	r3, #4294967295
 800f51c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800f51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f520:	4618      	mov	r0, r3
 800f522:	3728      	adds	r7, #40	; 0x28
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20008160 	.word	0x20008160

0800f52c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800f52c:	b480      	push	{r7}
 800f52e:	b087      	sub	sp, #28
 800f530:	af00      	add	r7, sp, #0
 800f532:	60f8      	str	r0, [r7, #12]
 800f534:	60b9      	str	r1, [r7, #8]
 800f536:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d00f      	beq.n	800f562 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800f542:	e002      	b.n	800f54a <_EncodeStr+0x1e>
      Len++;
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	3301      	adds	r3, #1
 800f548:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	4413      	add	r3, r2
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1f6      	bne.n	800f544 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d901      	bls.n	800f562 <_EncodeStr+0x36>
      Len = Limit;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	2bfe      	cmp	r3, #254	; 0xfe
 800f566:	d806      	bhi.n	800f576 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	1c5a      	adds	r2, r3, #1
 800f56c:	60fa      	str	r2, [r7, #12]
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	b2d2      	uxtb	r2, r2
 800f572:	701a      	strb	r2, [r3, #0]
 800f574:	e011      	b.n	800f59a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	1c5a      	adds	r2, r3, #1
 800f57a:	60fa      	str	r2, [r7, #12]
 800f57c:	22ff      	movs	r2, #255	; 0xff
 800f57e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	1c5a      	adds	r2, r3, #1
 800f584:	60fa      	str	r2, [r7, #12]
 800f586:	693a      	ldr	r2, [r7, #16]
 800f588:	b2d2      	uxtb	r2, r2
 800f58a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	0a19      	lsrs	r1, r3, #8
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	60fa      	str	r2, [r7, #12]
 800f596:	b2ca      	uxtb	r2, r1
 800f598:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800f59e:	e00a      	b.n	800f5b6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	1c53      	adds	r3, r2, #1
 800f5a4:	60bb      	str	r3, [r7, #8]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	1c59      	adds	r1, r3, #1
 800f5aa:	60f9      	str	r1, [r7, #12]
 800f5ac:	7812      	ldrb	r2, [r2, #0]
 800f5ae:	701a      	strb	r2, [r3, #0]
    n++;
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d3f0      	bcc.n	800f5a0 <_EncodeStr+0x74>
  }
  return pPayload;
 800f5be:	68fb      	ldr	r3, [r7, #12]
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	371c      	adds	r7, #28
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	3307      	adds	r3, #7
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f5ea:	4b35      	ldr	r3, [pc, #212]	; (800f6c0 <_HandleIncomingPacket+0xdc>)
 800f5ec:	7e1b      	ldrb	r3, [r3, #24]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	1cfb      	adds	r3, r7, #3
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	f7ff fe43 	bl	800f280 <SEGGER_RTT_ReadNoLock>
 800f5fa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d052      	beq.n	800f6a8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800f602:	78fb      	ldrb	r3, [r7, #3]
 800f604:	2b80      	cmp	r3, #128	; 0x80
 800f606:	d031      	beq.n	800f66c <_HandleIncomingPacket+0x88>
 800f608:	2b80      	cmp	r3, #128	; 0x80
 800f60a:	dc40      	bgt.n	800f68e <_HandleIncomingPacket+0xaa>
 800f60c:	2b07      	cmp	r3, #7
 800f60e:	dc15      	bgt.n	800f63c <_HandleIncomingPacket+0x58>
 800f610:	2b00      	cmp	r3, #0
 800f612:	dd3c      	ble.n	800f68e <_HandleIncomingPacket+0xaa>
 800f614:	3b01      	subs	r3, #1
 800f616:	2b06      	cmp	r3, #6
 800f618:	d839      	bhi.n	800f68e <_HandleIncomingPacket+0xaa>
 800f61a:	a201      	add	r2, pc, #4	; (adr r2, 800f620 <_HandleIncomingPacket+0x3c>)
 800f61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f620:	0800f643 	.word	0x0800f643
 800f624:	0800f649 	.word	0x0800f649
 800f628:	0800f64f 	.word	0x0800f64f
 800f62c:	0800f655 	.word	0x0800f655
 800f630:	0800f65b 	.word	0x0800f65b
 800f634:	0800f661 	.word	0x0800f661
 800f638:	0800f667 	.word	0x0800f667
 800f63c:	2b7f      	cmp	r3, #127	; 0x7f
 800f63e:	d035      	beq.n	800f6ac <_HandleIncomingPacket+0xc8>
 800f640:	e025      	b.n	800f68e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800f642:	f000 fc2f 	bl	800fea4 <SEGGER_SYSVIEW_Start>
      break;
 800f646:	e036      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800f648:	f000 fce6 	bl	8010018 <SEGGER_SYSVIEW_Stop>
      break;
 800f64c:	e033      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800f64e:	f000 febf 	bl	80103d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800f652:	e030      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800f654:	f000 fe84 	bl	8010360 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800f658:	e02d      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800f65a:	f000 fd03 	bl	8010064 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800f65e:	e02a      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800f660:	f001 f878 	bl	8010754 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800f664:	e027      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800f666:	f001 f857 	bl	8010718 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800f66a:	e024      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f66c:	4b14      	ldr	r3, [pc, #80]	; (800f6c0 <_HandleIncomingPacket+0xdc>)
 800f66e:	7e1b      	ldrb	r3, [r3, #24]
 800f670:	4618      	mov	r0, r3
 800f672:	1cfb      	adds	r3, r7, #3
 800f674:	2201      	movs	r2, #1
 800f676:	4619      	mov	r1, r3
 800f678:	f7ff fe02 	bl	800f280 <SEGGER_RTT_ReadNoLock>
 800f67c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d015      	beq.n	800f6b0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	4618      	mov	r0, r3
 800f688:	f000 ffc6 	bl	8010618 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800f68c:	e010      	b.n	800f6b0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800f68e:	78fb      	ldrb	r3, [r7, #3]
 800f690:	b25b      	sxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	da0e      	bge.n	800f6b4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800f696:	4b0a      	ldr	r3, [pc, #40]	; (800f6c0 <_HandleIncomingPacket+0xdc>)
 800f698:	7e1b      	ldrb	r3, [r3, #24]
 800f69a:	4618      	mov	r0, r3
 800f69c:	1cfb      	adds	r3, r7, #3
 800f69e:	2201      	movs	r2, #1
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	f7ff fded 	bl	800f280 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800f6a6:	e005      	b.n	800f6b4 <_HandleIncomingPacket+0xd0>
    }
  }
 800f6a8:	bf00      	nop
 800f6aa:	e004      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
      break;
 800f6ac:	bf00      	nop
 800f6ae:	e002      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
      break;
 800f6b0:	bf00      	nop
 800f6b2:	e000      	b.n	800f6b6 <_HandleIncomingPacket+0xd2>
      break;
 800f6b4:	bf00      	nop
}
 800f6b6:	bf00      	nop
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	20008a20 	.word	0x20008a20

0800f6c4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b08c      	sub	sp, #48	; 0x30
 800f6c8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800f6ce:	1d3b      	adds	r3, r7, #4
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6d8:	4b31      	ldr	r3, [pc, #196]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f6da:	695b      	ldr	r3, [r3, #20]
 800f6dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6de:	e00b      	b.n	800f6f8 <_TrySendOverflowPacket+0x34>
 800f6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e2:	b2da      	uxtb	r2, r3
 800f6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e6:	1c59      	adds	r1, r3, #1
 800f6e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800f6ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	701a      	strb	r2, [r3, #0]
 800f6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f4:	09db      	lsrs	r3, r3, #7
 800f6f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	2b7f      	cmp	r3, #127	; 0x7f
 800f6fc:	d8f0      	bhi.n	800f6e0 <_TrySendOverflowPacket+0x1c>
 800f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f700:	1c5a      	adds	r2, r3, #1
 800f702:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f706:	b2d2      	uxtb	r2, r2
 800f708:	701a      	strb	r2, [r3, #0]
 800f70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800f70e:	4b25      	ldr	r3, [pc, #148]	; (800f7a4 <_TrySendOverflowPacket+0xe0>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800f714:	4b22      	ldr	r3, [pc, #136]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	69ba      	ldr	r2, [r7, #24]
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	627b      	str	r3, [r7, #36]	; 0x24
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	623b      	str	r3, [r7, #32]
 800f726:	e00b      	b.n	800f740 <_TrySendOverflowPacket+0x7c>
 800f728:	6a3b      	ldr	r3, [r7, #32]
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72e:	1c59      	adds	r1, r3, #1
 800f730:	6279      	str	r1, [r7, #36]	; 0x24
 800f732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f736:	b2d2      	uxtb	r2, r2
 800f738:	701a      	strb	r2, [r3, #0]
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	09db      	lsrs	r3, r3, #7
 800f73e:	623b      	str	r3, [r7, #32]
 800f740:	6a3b      	ldr	r3, [r7, #32]
 800f742:	2b7f      	cmp	r3, #127	; 0x7f
 800f744:	d8f0      	bhi.n	800f728 <_TrySendOverflowPacket+0x64>
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	1c5a      	adds	r2, r3, #1
 800f74a:	627a      	str	r2, [r7, #36]	; 0x24
 800f74c:	6a3a      	ldr	r2, [r7, #32]
 800f74e:	b2d2      	uxtb	r2, r2
 800f750:	701a      	strb	r2, [r3, #0]
 800f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f754:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800f756:	4b12      	ldr	r3, [pc, #72]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f758:	785b      	ldrb	r3, [r3, #1]
 800f75a:	4618      	mov	r0, r3
 800f75c:	1d3b      	adds	r3, r7, #4
 800f75e:	69fa      	ldr	r2, [r7, #28]
 800f760:	1ad3      	subs	r3, r2, r3
 800f762:	461a      	mov	r2, r3
 800f764:	1d3b      	adds	r3, r7, #4
 800f766:	4619      	mov	r1, r3
 800f768:	f7f0 fd42 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800f76c:	4603      	mov	r3, r0
 800f76e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d009      	beq.n	800f78a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800f776:	4a0a      	ldr	r2, [pc, #40]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800f77c:	4b08      	ldr	r3, [pc, #32]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	3b01      	subs	r3, #1
 800f782:	b2da      	uxtb	r2, r3
 800f784:	4b06      	ldr	r3, [pc, #24]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f786:	701a      	strb	r2, [r3, #0]
 800f788:	e004      	b.n	800f794 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800f78a:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f78c:	695b      	ldr	r3, [r3, #20]
 800f78e:	3301      	adds	r3, #1
 800f790:	4a03      	ldr	r2, [pc, #12]	; (800f7a0 <_TrySendOverflowPacket+0xdc>)
 800f792:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800f794:	693b      	ldr	r3, [r7, #16]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3730      	adds	r7, #48	; 0x30
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20008a20 	.word	0x20008a20
 800f7a4:	e0001004 	.word	0xe0001004

0800f7a8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b08a      	sub	sp, #40	; 0x28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800f7b4:	4b98      	ldr	r3, [pc, #608]	; (800fa18 <_SendPacket+0x270>)
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d010      	beq.n	800f7de <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800f7bc:	4b96      	ldr	r3, [pc, #600]	; (800fa18 <_SendPacket+0x270>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	f000 812d 	beq.w	800fa20 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800f7c6:	4b94      	ldr	r3, [pc, #592]	; (800fa18 <_SendPacket+0x270>)
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	2b02      	cmp	r3, #2
 800f7cc:	d109      	bne.n	800f7e2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800f7ce:	f7ff ff79 	bl	800f6c4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800f7d2:	4b91      	ldr	r3, [pc, #580]	; (800fa18 <_SendPacket+0x270>)
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	f040 8124 	bne.w	800fa24 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800f7dc:	e001      	b.n	800f7e2 <_SendPacket+0x3a>
    goto Send;
 800f7de:	bf00      	nop
 800f7e0:	e000      	b.n	800f7e4 <_SendPacket+0x3c>
Send:
 800f7e2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2b1f      	cmp	r3, #31
 800f7e8:	d809      	bhi.n	800f7fe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800f7ea:	4b8b      	ldr	r3, [pc, #556]	; (800fa18 <_SendPacket+0x270>)
 800f7ec:	69da      	ldr	r2, [r3, #28]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f7f4:	f003 0301 	and.w	r3, r3, #1
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f040 8115 	bne.w	800fa28 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2b17      	cmp	r3, #23
 800f802:	d807      	bhi.n	800f814 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	3b01      	subs	r3, #1
 800f808:	60fb      	str	r3, [r7, #12]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	701a      	strb	r2, [r3, #0]
 800f812:	e0c4      	b.n	800f99e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	1ad3      	subs	r3, r2, r3
 800f81a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	2b7f      	cmp	r3, #127	; 0x7f
 800f820:	d912      	bls.n	800f848 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	09da      	lsrs	r2, r3, #7
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	3b01      	subs	r3, #1
 800f82a:	60fb      	str	r3, [r7, #12]
 800f82c:	b2d2      	uxtb	r2, r2
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	b2db      	uxtb	r3, r3
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	3a01      	subs	r2, #1
 800f83a:	60fa      	str	r2, [r7, #12]
 800f83c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f840:	b2da      	uxtb	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	701a      	strb	r2, [r3, #0]
 800f846:	e006      	b.n	800f856 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	60fb      	str	r3, [r7, #12]
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	b2da      	uxtb	r2, r3
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2b7e      	cmp	r3, #126	; 0x7e
 800f85a:	d807      	bhi.n	800f86c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	3b01      	subs	r3, #1
 800f860:	60fb      	str	r3, [r7, #12]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	b2da      	uxtb	r2, r3
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	701a      	strb	r2, [r3, #0]
 800f86a:	e098      	b.n	800f99e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f872:	d212      	bcs.n	800f89a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	09da      	lsrs	r2, r3, #7
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	3b01      	subs	r3, #1
 800f87c:	60fb      	str	r3, [r7, #12]
 800f87e:	b2d2      	uxtb	r2, r2
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	b2db      	uxtb	r3, r3
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	3a01      	subs	r2, #1
 800f88c:	60fa      	str	r2, [r7, #12]
 800f88e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f892:	b2da      	uxtb	r2, r3
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	701a      	strb	r2, [r3, #0]
 800f898:	e081      	b.n	800f99e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f8a0:	d21d      	bcs.n	800f8de <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	0b9a      	lsrs	r2, r3, #14
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	3b01      	subs	r3, #1
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	b2d2      	uxtb	r2, r2
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	09db      	lsrs	r3, r3, #7
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	3a01      	subs	r2, #1
 800f8bc:	60fa      	str	r2, [r7, #12]
 800f8be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f8c2:	b2da      	uxtb	r2, r3
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	3a01      	subs	r2, #1
 800f8d0:	60fa      	str	r2, [r7, #12]
 800f8d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	701a      	strb	r2, [r3, #0]
 800f8dc:	e05f      	b.n	800f99e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8e4:	d228      	bcs.n	800f938 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	0d5a      	lsrs	r2, r3, #21
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	60fb      	str	r3, [r7, #12]
 800f8f0:	b2d2      	uxtb	r2, r2
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	0b9b      	lsrs	r3, r3, #14
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	3a01      	subs	r2, #1
 800f900:	60fa      	str	r2, [r7, #12]
 800f902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f906:	b2da      	uxtb	r2, r3
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	09db      	lsrs	r3, r3, #7
 800f910:	b2db      	uxtb	r3, r3
 800f912:	68fa      	ldr	r2, [r7, #12]
 800f914:	3a01      	subs	r2, #1
 800f916:	60fa      	str	r2, [r7, #12]
 800f918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f91c:	b2da      	uxtb	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	b2db      	uxtb	r3, r3
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	3a01      	subs	r2, #1
 800f92a:	60fa      	str	r2, [r7, #12]
 800f92c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f930:	b2da      	uxtb	r2, r3
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	701a      	strb	r2, [r3, #0]
 800f936:	e032      	b.n	800f99e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	0f1a      	lsrs	r2, r3, #28
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	3b01      	subs	r3, #1
 800f940:	60fb      	str	r3, [r7, #12]
 800f942:	b2d2      	uxtb	r2, r2
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	0d5b      	lsrs	r3, r3, #21
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	68fa      	ldr	r2, [r7, #12]
 800f950:	3a01      	subs	r2, #1
 800f952:	60fa      	str	r2, [r7, #12]
 800f954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f958:	b2da      	uxtb	r2, r3
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	0b9b      	lsrs	r3, r3, #14
 800f962:	b2db      	uxtb	r3, r3
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	3a01      	subs	r2, #1
 800f968:	60fa      	str	r2, [r7, #12]
 800f96a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f96e:	b2da      	uxtb	r2, r3
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	09db      	lsrs	r3, r3, #7
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	3a01      	subs	r2, #1
 800f97e:	60fa      	str	r2, [r7, #12]
 800f980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f984:	b2da      	uxtb	r2, r3
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	3a01      	subs	r2, #1
 800f992:	60fa      	str	r2, [r7, #12]
 800f994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f998:	b2da      	uxtb	r2, r3
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800f99e:	4b1f      	ldr	r3, [pc, #124]	; (800fa1c <_SendPacket+0x274>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800f9a4:	4b1c      	ldr	r3, [pc, #112]	; (800fa18 <_SendPacket+0x270>)
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	69ba      	ldr	r2, [r7, #24]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	627b      	str	r3, [r7, #36]	; 0x24
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	623b      	str	r3, [r7, #32]
 800f9b6:	e00b      	b.n	800f9d0 <_SendPacket+0x228>
 800f9b8:	6a3b      	ldr	r3, [r7, #32]
 800f9ba:	b2da      	uxtb	r2, r3
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9be:	1c59      	adds	r1, r3, #1
 800f9c0:	6279      	str	r1, [r7, #36]	; 0x24
 800f9c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f9c6:	b2d2      	uxtb	r2, r2
 800f9c8:	701a      	strb	r2, [r3, #0]
 800f9ca:	6a3b      	ldr	r3, [r7, #32]
 800f9cc:	09db      	lsrs	r3, r3, #7
 800f9ce:	623b      	str	r3, [r7, #32]
 800f9d0:	6a3b      	ldr	r3, [r7, #32]
 800f9d2:	2b7f      	cmp	r3, #127	; 0x7f
 800f9d4:	d8f0      	bhi.n	800f9b8 <_SendPacket+0x210>
 800f9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	627a      	str	r2, [r7, #36]	; 0x24
 800f9dc:	6a3a      	ldr	r2, [r7, #32]
 800f9de:	b2d2      	uxtb	r2, r2
 800f9e0:	701a      	strb	r2, [r3, #0]
 800f9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800f9e6:	4b0c      	ldr	r3, [pc, #48]	; (800fa18 <_SendPacket+0x270>)
 800f9e8:	785b      	ldrb	r3, [r3, #1]
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	68f9      	ldr	r1, [r7, #12]
 800f9f6:	f7f0 fbfb 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800f9fa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800f9fc:	693b      	ldr	r3, [r7, #16]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d003      	beq.n	800fa0a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800fa02:	4a05      	ldr	r2, [pc, #20]	; (800fa18 <_SendPacket+0x270>)
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	60d3      	str	r3, [r2, #12]
 800fa08:	e00f      	b.n	800fa2a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800fa0a:	4b03      	ldr	r3, [pc, #12]	; (800fa18 <_SendPacket+0x270>)
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	b2da      	uxtb	r2, r3
 800fa12:	4b01      	ldr	r3, [pc, #4]	; (800fa18 <_SendPacket+0x270>)
 800fa14:	701a      	strb	r2, [r3, #0]
 800fa16:	e008      	b.n	800fa2a <_SendPacket+0x282>
 800fa18:	20008a20 	.word	0x20008a20
 800fa1c:	e0001004 	.word	0xe0001004
    goto SendDone;
 800fa20:	bf00      	nop
 800fa22:	e002      	b.n	800fa2a <_SendPacket+0x282>
      goto SendDone;
 800fa24:	bf00      	nop
 800fa26:	e000      	b.n	800fa2a <_SendPacket+0x282>
      goto SendDone;
 800fa28:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800fa2a:	4b14      	ldr	r3, [pc, #80]	; (800fa7c <_SendPacket+0x2d4>)
 800fa2c:	7e1b      	ldrb	r3, [r3, #24]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	4a13      	ldr	r2, [pc, #76]	; (800fa80 <_SendPacket+0x2d8>)
 800fa32:	460b      	mov	r3, r1
 800fa34:	005b      	lsls	r3, r3, #1
 800fa36:	440b      	add	r3, r1
 800fa38:	00db      	lsls	r3, r3, #3
 800fa3a:	4413      	add	r3, r2
 800fa3c:	336c      	adds	r3, #108	; 0x6c
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	4b0e      	ldr	r3, [pc, #56]	; (800fa7c <_SendPacket+0x2d4>)
 800fa42:	7e1b      	ldrb	r3, [r3, #24]
 800fa44:	4618      	mov	r0, r3
 800fa46:	490e      	ldr	r1, [pc, #56]	; (800fa80 <_SendPacket+0x2d8>)
 800fa48:	4603      	mov	r3, r0
 800fa4a:	005b      	lsls	r3, r3, #1
 800fa4c:	4403      	add	r3, r0
 800fa4e:	00db      	lsls	r3, r3, #3
 800fa50:	440b      	add	r3, r1
 800fa52:	3370      	adds	r3, #112	; 0x70
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d00b      	beq.n	800fa72 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800fa5a:	4b08      	ldr	r3, [pc, #32]	; (800fa7c <_SendPacket+0x2d4>)
 800fa5c:	789b      	ldrb	r3, [r3, #2]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d107      	bne.n	800fa72 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800fa62:	4b06      	ldr	r3, [pc, #24]	; (800fa7c <_SendPacket+0x2d4>)
 800fa64:	2201      	movs	r2, #1
 800fa66:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800fa68:	f7ff fdbc 	bl	800f5e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800fa6c:	4b03      	ldr	r3, [pc, #12]	; (800fa7c <_SendPacket+0x2d4>)
 800fa6e:	2200      	movs	r2, #0
 800fa70:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800fa72:	bf00      	nop
 800fa74:	3728      	adds	r7, #40	; 0x28
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	20008a20 	.word	0x20008a20
 800fa80:	20008160 	.word	0x20008160

0800fa84 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b086      	sub	sp, #24
 800fa88:	af02      	add	r7, sp, #8
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
 800fa90:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800fa92:	2300      	movs	r3, #0
 800fa94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa98:	4917      	ldr	r1, [pc, #92]	; (800faf8 <SEGGER_SYSVIEW_Init+0x74>)
 800fa9a:	4818      	ldr	r0, [pc, #96]	; (800fafc <SEGGER_SYSVIEW_Init+0x78>)
 800fa9c:	f7ff fc76 	bl	800f38c <SEGGER_RTT_AllocUpBuffer>
 800faa0:	4603      	mov	r3, r0
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	4b16      	ldr	r3, [pc, #88]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800faa6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800faa8:	4b15      	ldr	r3, [pc, #84]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800faaa:	785a      	ldrb	r2, [r3, #1]
 800faac:	4b14      	ldr	r3, [pc, #80]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800faae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800fab0:	4b13      	ldr	r3, [pc, #76]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800fab2:	7e1b      	ldrb	r3, [r3, #24]
 800fab4:	4618      	mov	r0, r3
 800fab6:	2300      	movs	r3, #0
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	2308      	movs	r3, #8
 800fabc:	4a11      	ldr	r2, [pc, #68]	; (800fb04 <SEGGER_SYSVIEW_Init+0x80>)
 800fabe:	490f      	ldr	r1, [pc, #60]	; (800fafc <SEGGER_SYSVIEW_Init+0x78>)
 800fac0:	f7ff fce8 	bl	800f494 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800fac4:	4b0e      	ldr	r3, [pc, #56]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800fac6:	2200      	movs	r2, #0
 800fac8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800faca:	4b0f      	ldr	r3, [pc, #60]	; (800fb08 <SEGGER_SYSVIEW_Init+0x84>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a0c      	ldr	r2, [pc, #48]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800fad0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800fad2:	4a0b      	ldr	r2, [pc, #44]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800fad8:	4a09      	ldr	r2, [pc, #36]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800fade:	4a08      	ldr	r2, [pc, #32]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800fae4:	4a06      	ldr	r2, [pc, #24]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800faea:	4b05      	ldr	r3, [pc, #20]	; (800fb00 <SEGGER_SYSVIEW_Init+0x7c>)
 800faec:	2200      	movs	r2, #0
 800faee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800faf0:	bf00      	nop
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	20008618 	.word	0x20008618
 800fafc:	08011210 	.word	0x08011210
 800fb00:	20008a20 	.word	0x20008a20
 800fb04:	20008a18 	.word	0x20008a18
 800fb08:	e0001004 	.word	0xe0001004

0800fb0c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800fb14:	4a04      	ldr	r2, [pc, #16]	; (800fb28 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6113      	str	r3, [r2, #16]
}
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	20008a20 	.word	0x20008a20

0800fb2c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800fb34:	f3ef 8311 	mrs	r3, BASEPRI
 800fb38:	f04f 0120 	mov.w	r1, #32
 800fb3c:	f381 8811 	msr	BASEPRI, r1
 800fb40:	60fb      	str	r3, [r7, #12]
 800fb42:	4808      	ldr	r0, [pc, #32]	; (800fb64 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800fb44:	f7ff fd42 	bl	800f5cc <_PreparePacket>
 800fb48:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	68b9      	ldr	r1, [r7, #8]
 800fb4e:	68b8      	ldr	r0, [r7, #8]
 800fb50:	f7ff fe2a 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f383 8811 	msr	BASEPRI, r3
}
 800fb5a:	bf00      	nop
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	20008a50 	.word	0x20008a50

0800fb68 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b088      	sub	sp, #32
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800fb72:	f3ef 8311 	mrs	r3, BASEPRI
 800fb76:	f04f 0120 	mov.w	r1, #32
 800fb7a:	f381 8811 	msr	BASEPRI, r1
 800fb7e:	617b      	str	r3, [r7, #20]
 800fb80:	4816      	ldr	r0, [pc, #88]	; (800fbdc <SEGGER_SYSVIEW_RecordU32+0x74>)
 800fb82:	f7ff fd23 	bl	800f5cc <_PreparePacket>
 800fb86:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	61fb      	str	r3, [r7, #28]
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	61bb      	str	r3, [r7, #24]
 800fb94:	e00b      	b.n	800fbae <SEGGER_SYSVIEW_RecordU32+0x46>
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	1c59      	adds	r1, r3, #1
 800fb9e:	61f9      	str	r1, [r7, #28]
 800fba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fba4:	b2d2      	uxtb	r2, r2
 800fba6:	701a      	strb	r2, [r3, #0]
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	09db      	lsrs	r3, r3, #7
 800fbac:	61bb      	str	r3, [r7, #24]
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	2b7f      	cmp	r3, #127	; 0x7f
 800fbb2:	d8f0      	bhi.n	800fb96 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	1c5a      	adds	r2, r3, #1
 800fbb8:	61fa      	str	r2, [r7, #28]
 800fbba:	69ba      	ldr	r2, [r7, #24]
 800fbbc:	b2d2      	uxtb	r2, r2
 800fbbe:	701a      	strb	r2, [r3, #0]
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	68f9      	ldr	r1, [r7, #12]
 800fbc8:	6938      	ldr	r0, [r7, #16]
 800fbca:	f7ff fded 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	f383 8811 	msr	BASEPRI, r3
}
 800fbd4:	bf00      	nop
 800fbd6:	3720      	adds	r7, #32
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	20008a50 	.word	0x20008a50

0800fbe0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b08c      	sub	sp, #48	; 0x30
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800fbec:	f3ef 8311 	mrs	r3, BASEPRI
 800fbf0:	f04f 0120 	mov.w	r1, #32
 800fbf4:	f381 8811 	msr	BASEPRI, r1
 800fbf8:	61fb      	str	r3, [r7, #28]
 800fbfa:	4825      	ldr	r0, [pc, #148]	; (800fc90 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800fbfc:	f7ff fce6 	bl	800f5cc <_PreparePacket>
 800fc00:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc0e:	e00b      	b.n	800fc28 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800fc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc12:	b2da      	uxtb	r2, r3
 800fc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc16:	1c59      	adds	r1, r3, #1
 800fc18:	62f9      	str	r1, [r7, #44]	; 0x2c
 800fc1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fc1e:	b2d2      	uxtb	r2, r2
 800fc20:	701a      	strb	r2, [r3, #0]
 800fc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc24:	09db      	lsrs	r3, r3, #7
 800fc26:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc2a:	2b7f      	cmp	r3, #127	; 0x7f
 800fc2c:	d8f0      	bhi.n	800fc10 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc30:	1c5a      	adds	r2, r3, #1
 800fc32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc36:	b2d2      	uxtb	r2, r2
 800fc38:	701a      	strb	r2, [r3, #0]
 800fc3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	627b      	str	r3, [r7, #36]	; 0x24
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	623b      	str	r3, [r7, #32]
 800fc46:	e00b      	b.n	800fc60 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800fc48:	6a3b      	ldr	r3, [r7, #32]
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4e:	1c59      	adds	r1, r3, #1
 800fc50:	6279      	str	r1, [r7, #36]	; 0x24
 800fc52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fc56:	b2d2      	uxtb	r2, r2
 800fc58:	701a      	strb	r2, [r3, #0]
 800fc5a:	6a3b      	ldr	r3, [r7, #32]
 800fc5c:	09db      	lsrs	r3, r3, #7
 800fc5e:	623b      	str	r3, [r7, #32]
 800fc60:	6a3b      	ldr	r3, [r7, #32]
 800fc62:	2b7f      	cmp	r3, #127	; 0x7f
 800fc64:	d8f0      	bhi.n	800fc48 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800fc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc68:	1c5a      	adds	r2, r3, #1
 800fc6a:	627a      	str	r2, [r7, #36]	; 0x24
 800fc6c:	6a3a      	ldr	r2, [r7, #32]
 800fc6e:	b2d2      	uxtb	r2, r2
 800fc70:	701a      	strb	r2, [r3, #0]
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800fc76:	68fa      	ldr	r2, [r7, #12]
 800fc78:	6979      	ldr	r1, [r7, #20]
 800fc7a:	69b8      	ldr	r0, [r7, #24]
 800fc7c:	f7ff fd94 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	f383 8811 	msr	BASEPRI, r3
}
 800fc86:	bf00      	nop
 800fc88:	3730      	adds	r7, #48	; 0x30
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	20008a50 	.word	0x20008a50

0800fc94 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b08e      	sub	sp, #56	; 0x38
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
 800fca0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800fca2:	f3ef 8311 	mrs	r3, BASEPRI
 800fca6:	f04f 0120 	mov.w	r1, #32
 800fcaa:	f381 8811 	msr	BASEPRI, r1
 800fcae:	61fb      	str	r3, [r7, #28]
 800fcb0:	4832      	ldr	r0, [pc, #200]	; (800fd7c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800fcb2:	f7ff fc8b 	bl	800f5cc <_PreparePacket>
 800fcb6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	637b      	str	r3, [r7, #52]	; 0x34
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	633b      	str	r3, [r7, #48]	; 0x30
 800fcc4:	e00b      	b.n	800fcde <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	b2da      	uxtb	r2, r3
 800fcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fccc:	1c59      	adds	r1, r3, #1
 800fcce:	6379      	str	r1, [r7, #52]	; 0x34
 800fcd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fcd4:	b2d2      	uxtb	r2, r2
 800fcd6:	701a      	strb	r2, [r3, #0]
 800fcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcda:	09db      	lsrs	r3, r3, #7
 800fcdc:	633b      	str	r3, [r7, #48]	; 0x30
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	2b7f      	cmp	r3, #127	; 0x7f
 800fce2:	d8f0      	bhi.n	800fcc6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800fce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce6:	1c5a      	adds	r2, r3, #1
 800fce8:	637a      	str	r2, [r7, #52]	; 0x34
 800fcea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcec:	b2d2      	uxtb	r2, r2
 800fcee:	701a      	strb	r2, [r3, #0]
 800fcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcfc:	e00b      	b.n	800fd16 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800fcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd00:	b2da      	uxtb	r2, r3
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	1c59      	adds	r1, r3, #1
 800fd06:	62f9      	str	r1, [r7, #44]	; 0x2c
 800fd08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fd0c:	b2d2      	uxtb	r2, r2
 800fd0e:	701a      	strb	r2, [r3, #0]
 800fd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd12:	09db      	lsrs	r3, r3, #7
 800fd14:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd18:	2b7f      	cmp	r3, #127	; 0x7f
 800fd1a:	d8f0      	bhi.n	800fcfe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800fd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd24:	b2d2      	uxtb	r2, r2
 800fd26:	701a      	strb	r2, [r3, #0]
 800fd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	627b      	str	r3, [r7, #36]	; 0x24
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	623b      	str	r3, [r7, #32]
 800fd34:	e00b      	b.n	800fd4e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800fd36:	6a3b      	ldr	r3, [r7, #32]
 800fd38:	b2da      	uxtb	r2, r3
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	1c59      	adds	r1, r3, #1
 800fd3e:	6279      	str	r1, [r7, #36]	; 0x24
 800fd40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fd44:	b2d2      	uxtb	r2, r2
 800fd46:	701a      	strb	r2, [r3, #0]
 800fd48:	6a3b      	ldr	r3, [r7, #32]
 800fd4a:	09db      	lsrs	r3, r3, #7
 800fd4c:	623b      	str	r3, [r7, #32]
 800fd4e:	6a3b      	ldr	r3, [r7, #32]
 800fd50:	2b7f      	cmp	r3, #127	; 0x7f
 800fd52:	d8f0      	bhi.n	800fd36 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800fd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd56:	1c5a      	adds	r2, r3, #1
 800fd58:	627a      	str	r2, [r7, #36]	; 0x24
 800fd5a:	6a3a      	ldr	r2, [r7, #32]
 800fd5c:	b2d2      	uxtb	r2, r2
 800fd5e:	701a      	strb	r2, [r3, #0]
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	6979      	ldr	r1, [r7, #20]
 800fd68:	69b8      	ldr	r0, [r7, #24]
 800fd6a:	f7ff fd1d 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	f383 8811 	msr	BASEPRI, r3
}
 800fd74:	bf00      	nop
 800fd76:	3738      	adds	r7, #56	; 0x38
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20008a50 	.word	0x20008a50

0800fd80 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b090      	sub	sp, #64	; 0x40
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
 800fd8c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800fd8e:	f3ef 8311 	mrs	r3, BASEPRI
 800fd92:	f04f 0120 	mov.w	r1, #32
 800fd96:	f381 8811 	msr	BASEPRI, r1
 800fd9a:	61fb      	str	r3, [r7, #28]
 800fd9c:	4840      	ldr	r0, [pc, #256]	; (800fea0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800fd9e:	f7ff fc15 	bl	800f5cc <_PreparePacket>
 800fda2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdb0:	e00b      	b.n	800fdca <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800fdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb4:	b2da      	uxtb	r2, r3
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb8:	1c59      	adds	r1, r3, #1
 800fdba:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fdbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fdc0:	b2d2      	uxtb	r2, r2
 800fdc2:	701a      	strb	r2, [r3, #0]
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc6:	09db      	lsrs	r3, r3, #7
 800fdc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdcc:	2b7f      	cmp	r3, #127	; 0x7f
 800fdce:	d8f0      	bhi.n	800fdb2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800fdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fdd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdd8:	b2d2      	uxtb	r2, r2
 800fdda:	701a      	strb	r2, [r3, #0]
 800fddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	637b      	str	r3, [r7, #52]	; 0x34
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	633b      	str	r3, [r7, #48]	; 0x30
 800fde8:	e00b      	b.n	800fe02 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf0:	1c59      	adds	r1, r3, #1
 800fdf2:	6379      	str	r1, [r7, #52]	; 0x34
 800fdf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fdf8:	b2d2      	uxtb	r2, r2
 800fdfa:	701a      	strb	r2, [r3, #0]
 800fdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfe:	09db      	lsrs	r3, r3, #7
 800fe00:	633b      	str	r3, [r7, #48]	; 0x30
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	2b7f      	cmp	r3, #127	; 0x7f
 800fe06:	d8f0      	bhi.n	800fdea <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800fe08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe0a:	1c5a      	adds	r2, r3, #1
 800fe0c:	637a      	str	r2, [r7, #52]	; 0x34
 800fe0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe10:	b2d2      	uxtb	r2, r2
 800fe12:	701a      	strb	r2, [r3, #0]
 800fe14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe20:	e00b      	b.n	800fe3a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	b2da      	uxtb	r2, r3
 800fe26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe28:	1c59      	adds	r1, r3, #1
 800fe2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800fe2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fe30:	b2d2      	uxtb	r2, r2
 800fe32:	701a      	strb	r2, [r3, #0]
 800fe34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe36:	09db      	lsrs	r3, r3, #7
 800fe38:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	2b7f      	cmp	r3, #127	; 0x7f
 800fe3e:	d8f0      	bhi.n	800fe22 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800fe40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe42:	1c5a      	adds	r2, r3, #1
 800fe44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe48:	b2d2      	uxtb	r2, r2
 800fe4a:	701a      	strb	r2, [r3, #0]
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	627b      	str	r3, [r7, #36]	; 0x24
 800fe54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe56:	623b      	str	r3, [r7, #32]
 800fe58:	e00b      	b.n	800fe72 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	b2da      	uxtb	r2, r3
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe60:	1c59      	adds	r1, r3, #1
 800fe62:	6279      	str	r1, [r7, #36]	; 0x24
 800fe64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fe68:	b2d2      	uxtb	r2, r2
 800fe6a:	701a      	strb	r2, [r3, #0]
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	09db      	lsrs	r3, r3, #7
 800fe70:	623b      	str	r3, [r7, #32]
 800fe72:	6a3b      	ldr	r3, [r7, #32]
 800fe74:	2b7f      	cmp	r3, #127	; 0x7f
 800fe76:	d8f0      	bhi.n	800fe5a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800fe78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7a:	1c5a      	adds	r2, r3, #1
 800fe7c:	627a      	str	r2, [r7, #36]	; 0x24
 800fe7e:	6a3a      	ldr	r2, [r7, #32]
 800fe80:	b2d2      	uxtb	r2, r2
 800fe82:	701a      	strb	r2, [r3, #0]
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	6979      	ldr	r1, [r7, #20]
 800fe8c:	69b8      	ldr	r0, [r7, #24]
 800fe8e:	f7ff fc8b 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	f383 8811 	msr	BASEPRI, r3
}
 800fe98:	bf00      	nop
 800fe9a:	3740      	adds	r7, #64	; 0x40
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	20008a50 	.word	0x20008a50

0800fea4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b08c      	sub	sp, #48	; 0x30
 800fea8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800feaa:	4b58      	ldr	r3, [pc, #352]	; (801000c <SEGGER_SYSVIEW_Start+0x168>)
 800feac:	2201      	movs	r2, #1
 800feae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800feb0:	f3ef 8311 	mrs	r3, BASEPRI
 800feb4:	f04f 0120 	mov.w	r1, #32
 800feb8:	f381 8811 	msr	BASEPRI, r1
 800febc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800febe:	4b53      	ldr	r3, [pc, #332]	; (801000c <SEGGER_SYSVIEW_Start+0x168>)
 800fec0:	785b      	ldrb	r3, [r3, #1]
 800fec2:	220a      	movs	r2, #10
 800fec4:	4952      	ldr	r1, [pc, #328]	; (8010010 <SEGGER_SYSVIEW_Start+0x16c>)
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7f0 f992 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800fed2:	200a      	movs	r0, #10
 800fed4:	f7ff fe2a 	bl	800fb2c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800fed8:	f3ef 8311 	mrs	r3, BASEPRI
 800fedc:	f04f 0120 	mov.w	r1, #32
 800fee0:	f381 8811 	msr	BASEPRI, r1
 800fee4:	60bb      	str	r3, [r7, #8]
 800fee6:	484b      	ldr	r0, [pc, #300]	; (8010014 <SEGGER_SYSVIEW_Start+0x170>)
 800fee8:	f7ff fb70 	bl	800f5cc <_PreparePacket>
 800feec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fef6:	4b45      	ldr	r3, [pc, #276]	; (801000c <SEGGER_SYSVIEW_Start+0x168>)
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	62bb      	str	r3, [r7, #40]	; 0x28
 800fefc:	e00b      	b.n	800ff16 <SEGGER_SYSVIEW_Start+0x72>
 800fefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff00:	b2da      	uxtb	r2, r3
 800ff02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff04:	1c59      	adds	r1, r3, #1
 800ff06:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ff08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ff0c:	b2d2      	uxtb	r2, r2
 800ff0e:	701a      	strb	r2, [r3, #0]
 800ff10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff12:	09db      	lsrs	r3, r3, #7
 800ff14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff18:	2b7f      	cmp	r3, #127	; 0x7f
 800ff1a:	d8f0      	bhi.n	800fefe <SEGGER_SYSVIEW_Start+0x5a>
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	1c5a      	adds	r2, r3, #1
 800ff20:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff24:	b2d2      	uxtb	r2, r2
 800ff26:	701a      	strb	r2, [r3, #0]
 800ff28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ff30:	4b36      	ldr	r3, [pc, #216]	; (801000c <SEGGER_SYSVIEW_Start+0x168>)
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	623b      	str	r3, [r7, #32]
 800ff36:	e00b      	b.n	800ff50 <SEGGER_SYSVIEW_Start+0xac>
 800ff38:	6a3b      	ldr	r3, [r7, #32]
 800ff3a:	b2da      	uxtb	r2, r3
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3e:	1c59      	adds	r1, r3, #1
 800ff40:	6279      	str	r1, [r7, #36]	; 0x24
 800ff42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ff46:	b2d2      	uxtb	r2, r2
 800ff48:	701a      	strb	r2, [r3, #0]
 800ff4a:	6a3b      	ldr	r3, [r7, #32]
 800ff4c:	09db      	lsrs	r3, r3, #7
 800ff4e:	623b      	str	r3, [r7, #32]
 800ff50:	6a3b      	ldr	r3, [r7, #32]
 800ff52:	2b7f      	cmp	r3, #127	; 0x7f
 800ff54:	d8f0      	bhi.n	800ff38 <SEGGER_SYSVIEW_Start+0x94>
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	1c5a      	adds	r2, r3, #1
 800ff5a:	627a      	str	r2, [r7, #36]	; 0x24
 800ff5c:	6a3a      	ldr	r2, [r7, #32]
 800ff5e:	b2d2      	uxtb	r2, r2
 800ff60:	701a      	strb	r2, [r3, #0]
 800ff62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	61fb      	str	r3, [r7, #28]
 800ff6a:	4b28      	ldr	r3, [pc, #160]	; (801000c <SEGGER_SYSVIEW_Start+0x168>)
 800ff6c:	691b      	ldr	r3, [r3, #16]
 800ff6e:	61bb      	str	r3, [r7, #24]
 800ff70:	e00b      	b.n	800ff8a <SEGGER_SYSVIEW_Start+0xe6>
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	b2da      	uxtb	r2, r3
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	1c59      	adds	r1, r3, #1
 800ff7a:	61f9      	str	r1, [r7, #28]
 800ff7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ff80:	b2d2      	uxtb	r2, r2
 800ff82:	701a      	strb	r2, [r3, #0]
 800ff84:	69bb      	ldr	r3, [r7, #24]
 800ff86:	09db      	lsrs	r3, r3, #7
 800ff88:	61bb      	str	r3, [r7, #24]
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ff8e:	d8f0      	bhi.n	800ff72 <SEGGER_SYSVIEW_Start+0xce>
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	1c5a      	adds	r2, r3, #1
 800ff94:	61fa      	str	r2, [r7, #28]
 800ff96:	69ba      	ldr	r2, [r7, #24]
 800ff98:	b2d2      	uxtb	r2, r2
 800ff9a:	701a      	strb	r2, [r3, #0]
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	617b      	str	r3, [r7, #20]
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	613b      	str	r3, [r7, #16]
 800ffa8:	e00b      	b.n	800ffc2 <SEGGER_SYSVIEW_Start+0x11e>
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	1c59      	adds	r1, r3, #1
 800ffb2:	6179      	str	r1, [r7, #20]
 800ffb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ffb8:	b2d2      	uxtb	r2, r2
 800ffba:	701a      	strb	r2, [r3, #0]
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	09db      	lsrs	r3, r3, #7
 800ffc0:	613b      	str	r3, [r7, #16]
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	2b7f      	cmp	r3, #127	; 0x7f
 800ffc6:	d8f0      	bhi.n	800ffaa <SEGGER_SYSVIEW_Start+0x106>
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	1c5a      	adds	r2, r3, #1
 800ffcc:	617a      	str	r2, [r7, #20]
 800ffce:	693a      	ldr	r2, [r7, #16]
 800ffd0:	b2d2      	uxtb	r2, r2
 800ffd2:	701a      	strb	r2, [r3, #0]
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ffd8:	2218      	movs	r2, #24
 800ffda:	6839      	ldr	r1, [r7, #0]
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7ff fbe3 	bl	800f7a8 <_SendPacket>
      RECORD_END();
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ffe8:	4b08      	ldr	r3, [pc, #32]	; (801000c <SEGGER_SYSVIEW_Start+0x168>)
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d002      	beq.n	800fff6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800fff0:	4b06      	ldr	r3, [pc, #24]	; (801000c <SEGGER_SYSVIEW_Start+0x168>)
 800fff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800fff6:	f000 f9eb 	bl	80103d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800fffa:	f000 f9b1 	bl	8010360 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800fffe:	f000 fba9 	bl	8010754 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8010002:	bf00      	nop
 8010004:	3730      	adds	r7, #48	; 0x30
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	20008a20 	.word	0x20008a20
 8010010:	080113a4 	.word	0x080113a4
 8010014:	20008a50 	.word	0x20008a50

08010018 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801001e:	f3ef 8311 	mrs	r3, BASEPRI
 8010022:	f04f 0120 	mov.w	r1, #32
 8010026:	f381 8811 	msr	BASEPRI, r1
 801002a:	607b      	str	r3, [r7, #4]
 801002c:	480b      	ldr	r0, [pc, #44]	; (801005c <SEGGER_SYSVIEW_Stop+0x44>)
 801002e:	f7ff facd 	bl	800f5cc <_PreparePacket>
 8010032:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8010034:	4b0a      	ldr	r3, [pc, #40]	; (8010060 <SEGGER_SYSVIEW_Stop+0x48>)
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d007      	beq.n	801004c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 801003c:	220b      	movs	r2, #11
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	6838      	ldr	r0, [r7, #0]
 8010042:	f7ff fbb1 	bl	800f7a8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8010046:	4b06      	ldr	r3, [pc, #24]	; (8010060 <SEGGER_SYSVIEW_Stop+0x48>)
 8010048:	2200      	movs	r2, #0
 801004a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f383 8811 	msr	BASEPRI, r3
}
 8010052:	bf00      	nop
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	20008a50 	.word	0x20008a50
 8010060:	20008a20 	.word	0x20008a20

08010064 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8010064:	b580      	push	{r7, lr}
 8010066:	b08c      	sub	sp, #48	; 0x30
 8010068:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801006a:	f3ef 8311 	mrs	r3, BASEPRI
 801006e:	f04f 0120 	mov.w	r1, #32
 8010072:	f381 8811 	msr	BASEPRI, r1
 8010076:	60fb      	str	r3, [r7, #12]
 8010078:	4845      	ldr	r0, [pc, #276]	; (8010190 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 801007a:	f7ff faa7 	bl	800f5cc <_PreparePacket>
 801007e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010088:	4b42      	ldr	r3, [pc, #264]	; (8010194 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	62bb      	str	r3, [r7, #40]	; 0x28
 801008e:	e00b      	b.n	80100a8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8010090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010092:	b2da      	uxtb	r2, r3
 8010094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010096:	1c59      	adds	r1, r3, #1
 8010098:	62f9      	str	r1, [r7, #44]	; 0x2c
 801009a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801009e:	b2d2      	uxtb	r2, r2
 80100a0:	701a      	strb	r2, [r3, #0]
 80100a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a4:	09db      	lsrs	r3, r3, #7
 80100a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80100a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100aa:	2b7f      	cmp	r3, #127	; 0x7f
 80100ac:	d8f0      	bhi.n	8010090 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80100ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b0:	1c5a      	adds	r2, r3, #1
 80100b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80100b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100b6:	b2d2      	uxtb	r2, r2
 80100b8:	701a      	strb	r2, [r3, #0]
 80100ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	627b      	str	r3, [r7, #36]	; 0x24
 80100c2:	4b34      	ldr	r3, [pc, #208]	; (8010194 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80100c4:	689b      	ldr	r3, [r3, #8]
 80100c6:	623b      	str	r3, [r7, #32]
 80100c8:	e00b      	b.n	80100e2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80100ca:	6a3b      	ldr	r3, [r7, #32]
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d0:	1c59      	adds	r1, r3, #1
 80100d2:	6279      	str	r1, [r7, #36]	; 0x24
 80100d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80100d8:	b2d2      	uxtb	r2, r2
 80100da:	701a      	strb	r2, [r3, #0]
 80100dc:	6a3b      	ldr	r3, [r7, #32]
 80100de:	09db      	lsrs	r3, r3, #7
 80100e0:	623b      	str	r3, [r7, #32]
 80100e2:	6a3b      	ldr	r3, [r7, #32]
 80100e4:	2b7f      	cmp	r3, #127	; 0x7f
 80100e6:	d8f0      	bhi.n	80100ca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80100e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ea:	1c5a      	adds	r2, r3, #1
 80100ec:	627a      	str	r2, [r7, #36]	; 0x24
 80100ee:	6a3a      	ldr	r2, [r7, #32]
 80100f0:	b2d2      	uxtb	r2, r2
 80100f2:	701a      	strb	r2, [r3, #0]
 80100f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	61fb      	str	r3, [r7, #28]
 80100fc:	4b25      	ldr	r3, [pc, #148]	; (8010194 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80100fe:	691b      	ldr	r3, [r3, #16]
 8010100:	61bb      	str	r3, [r7, #24]
 8010102:	e00b      	b.n	801011c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	b2da      	uxtb	r2, r3
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	1c59      	adds	r1, r3, #1
 801010c:	61f9      	str	r1, [r7, #28]
 801010e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010112:	b2d2      	uxtb	r2, r2
 8010114:	701a      	strb	r2, [r3, #0]
 8010116:	69bb      	ldr	r3, [r7, #24]
 8010118:	09db      	lsrs	r3, r3, #7
 801011a:	61bb      	str	r3, [r7, #24]
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	2b7f      	cmp	r3, #127	; 0x7f
 8010120:	d8f0      	bhi.n	8010104 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	61fa      	str	r2, [r7, #28]
 8010128:	69ba      	ldr	r2, [r7, #24]
 801012a:	b2d2      	uxtb	r2, r2
 801012c:	701a      	strb	r2, [r3, #0]
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	617b      	str	r3, [r7, #20]
 8010136:	2300      	movs	r3, #0
 8010138:	613b      	str	r3, [r7, #16]
 801013a:	e00b      	b.n	8010154 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	b2da      	uxtb	r2, r3
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	1c59      	adds	r1, r3, #1
 8010144:	6179      	str	r1, [r7, #20]
 8010146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801014a:	b2d2      	uxtb	r2, r2
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	09db      	lsrs	r3, r3, #7
 8010152:	613b      	str	r3, [r7, #16]
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	2b7f      	cmp	r3, #127	; 0x7f
 8010158:	d8f0      	bhi.n	801013c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	1c5a      	adds	r2, r3, #1
 801015e:	617a      	str	r2, [r7, #20]
 8010160:	693a      	ldr	r2, [r7, #16]
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	701a      	strb	r2, [r3, #0]
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 801016a:	2218      	movs	r2, #24
 801016c:	6879      	ldr	r1, [r7, #4]
 801016e:	68b8      	ldr	r0, [r7, #8]
 8010170:	f7ff fb1a 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 801017a:	4b06      	ldr	r3, [pc, #24]	; (8010194 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 801017c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801017e:	2b00      	cmp	r3, #0
 8010180:	d002      	beq.n	8010188 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8010182:	4b04      	ldr	r3, [pc, #16]	; (8010194 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010186:	4798      	blx	r3
  }
}
 8010188:	bf00      	nop
 801018a:	3730      	adds	r7, #48	; 0x30
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	20008a50 	.word	0x20008a50
 8010194:	20008a20 	.word	0x20008a20

08010198 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8010198:	b580      	push	{r7, lr}
 801019a:	b092      	sub	sp, #72	; 0x48
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80101a0:	f3ef 8311 	mrs	r3, BASEPRI
 80101a4:	f04f 0120 	mov.w	r1, #32
 80101a8:	f381 8811 	msr	BASEPRI, r1
 80101ac:	617b      	str	r3, [r7, #20]
 80101ae:	486a      	ldr	r0, [pc, #424]	; (8010358 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80101b0:	f7ff fa0c 	bl	800f5cc <_PreparePacket>
 80101b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	647b      	str	r3, [r7, #68]	; 0x44
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681a      	ldr	r2, [r3, #0]
 80101c2:	4b66      	ldr	r3, [pc, #408]	; (801035c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	643b      	str	r3, [r7, #64]	; 0x40
 80101ca:	e00b      	b.n	80101e4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80101cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101d2:	1c59      	adds	r1, r3, #1
 80101d4:	6479      	str	r1, [r7, #68]	; 0x44
 80101d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80101da:	b2d2      	uxtb	r2, r2
 80101dc:	701a      	strb	r2, [r3, #0]
 80101de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101e0:	09db      	lsrs	r3, r3, #7
 80101e2:	643b      	str	r3, [r7, #64]	; 0x40
 80101e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101e6:	2b7f      	cmp	r3, #127	; 0x7f
 80101e8:	d8f0      	bhi.n	80101cc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80101ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101ec:	1c5a      	adds	r2, r3, #1
 80101ee:	647a      	str	r2, [r7, #68]	; 0x44
 80101f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80101f2:	b2d2      	uxtb	r2, r2
 80101f4:	701a      	strb	r2, [r3, #0]
 80101f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	63bb      	str	r3, [r7, #56]	; 0x38
 8010204:	e00b      	b.n	801021e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8010206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010208:	b2da      	uxtb	r2, r3
 801020a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020c:	1c59      	adds	r1, r3, #1
 801020e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010210:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010214:	b2d2      	uxtb	r2, r2
 8010216:	701a      	strb	r2, [r3, #0]
 8010218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021a:	09db      	lsrs	r3, r3, #7
 801021c:	63bb      	str	r3, [r7, #56]	; 0x38
 801021e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010220:	2b7f      	cmp	r3, #127	; 0x7f
 8010222:	d8f0      	bhi.n	8010206 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8010224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010226:	1c5a      	adds	r2, r3, #1
 8010228:	63fa      	str	r2, [r7, #60]	; 0x3c
 801022a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801022c:	b2d2      	uxtb	r2, r2
 801022e:	701a      	strb	r2, [r3, #0]
 8010230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010232:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	2220      	movs	r2, #32
 801023a:	4619      	mov	r1, r3
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f7ff f975 	bl	800f52c <_EncodeStr>
 8010242:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8010244:	2209      	movs	r2, #9
 8010246:	68f9      	ldr	r1, [r7, #12]
 8010248:	6938      	ldr	r0, [r7, #16]
 801024a:	f7ff faad 	bl	800f7a8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	637b      	str	r3, [r7, #52]	; 0x34
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	4b40      	ldr	r3, [pc, #256]	; (801035c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 801025c:	691b      	ldr	r3, [r3, #16]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	633b      	str	r3, [r7, #48]	; 0x30
 8010262:	e00b      	b.n	801027c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	b2da      	uxtb	r2, r3
 8010268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801026a:	1c59      	adds	r1, r3, #1
 801026c:	6379      	str	r1, [r7, #52]	; 0x34
 801026e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010272:	b2d2      	uxtb	r2, r2
 8010274:	701a      	strb	r2, [r3, #0]
 8010276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010278:	09db      	lsrs	r3, r3, #7
 801027a:	633b      	str	r3, [r7, #48]	; 0x30
 801027c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027e:	2b7f      	cmp	r3, #127	; 0x7f
 8010280:	d8f0      	bhi.n	8010264 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8010282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010284:	1c5a      	adds	r2, r3, #1
 8010286:	637a      	str	r2, [r7, #52]	; 0x34
 8010288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801028a:	b2d2      	uxtb	r2, r2
 801028c:	701a      	strb	r2, [r3, #0]
 801028e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010290:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	62bb      	str	r3, [r7, #40]	; 0x28
 801029c:	e00b      	b.n	80102b6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 801029e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a0:	b2da      	uxtb	r2, r3
 80102a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a4:	1c59      	adds	r1, r3, #1
 80102a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80102a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80102ac:	b2d2      	uxtb	r2, r2
 80102ae:	701a      	strb	r2, [r3, #0]
 80102b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b2:	09db      	lsrs	r3, r3, #7
 80102b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	2b7f      	cmp	r3, #127	; 0x7f
 80102ba:	d8f0      	bhi.n	801029e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80102bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102be:	1c5a      	adds	r2, r3, #1
 80102c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80102c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102c4:	b2d2      	uxtb	r2, r2
 80102c6:	701a      	strb	r2, [r3, #0]
 80102c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	627b      	str	r3, [r7, #36]	; 0x24
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	691b      	ldr	r3, [r3, #16]
 80102d4:	623b      	str	r3, [r7, #32]
 80102d6:	e00b      	b.n	80102f0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80102d8:	6a3b      	ldr	r3, [r7, #32]
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102de:	1c59      	adds	r1, r3, #1
 80102e0:	6279      	str	r1, [r7, #36]	; 0x24
 80102e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80102e6:	b2d2      	uxtb	r2, r2
 80102e8:	701a      	strb	r2, [r3, #0]
 80102ea:	6a3b      	ldr	r3, [r7, #32]
 80102ec:	09db      	lsrs	r3, r3, #7
 80102ee:	623b      	str	r3, [r7, #32]
 80102f0:	6a3b      	ldr	r3, [r7, #32]
 80102f2:	2b7f      	cmp	r3, #127	; 0x7f
 80102f4:	d8f0      	bhi.n	80102d8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	1c5a      	adds	r2, r3, #1
 80102fa:	627a      	str	r2, [r7, #36]	; 0x24
 80102fc:	6a3a      	ldr	r2, [r7, #32]
 80102fe:	b2d2      	uxtb	r2, r2
 8010300:	701a      	strb	r2, [r3, #0]
 8010302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010304:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	61fb      	str	r3, [r7, #28]
 801030a:	2300      	movs	r3, #0
 801030c:	61bb      	str	r3, [r7, #24]
 801030e:	e00b      	b.n	8010328 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	b2da      	uxtb	r2, r3
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	1c59      	adds	r1, r3, #1
 8010318:	61f9      	str	r1, [r7, #28]
 801031a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801031e:	b2d2      	uxtb	r2, r2
 8010320:	701a      	strb	r2, [r3, #0]
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	09db      	lsrs	r3, r3, #7
 8010326:	61bb      	str	r3, [r7, #24]
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	2b7f      	cmp	r3, #127	; 0x7f
 801032c:	d8f0      	bhi.n	8010310 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	61fa      	str	r2, [r7, #28]
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	b2d2      	uxtb	r2, r2
 8010338:	701a      	strb	r2, [r3, #0]
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 801033e:	2215      	movs	r2, #21
 8010340:	68f9      	ldr	r1, [r7, #12]
 8010342:	6938      	ldr	r0, [r7, #16]
 8010344:	f7ff fa30 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	f383 8811 	msr	BASEPRI, r3
}
 801034e:	bf00      	nop
 8010350:	3748      	adds	r7, #72	; 0x48
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	20008a50 	.word	0x20008a50
 801035c:	20008a20 	.word	0x20008a20

08010360 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8010360:	b580      	push	{r7, lr}
 8010362:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8010364:	4b07      	ldr	r3, [pc, #28]	; (8010384 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010366:	6a1b      	ldr	r3, [r3, #32]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d008      	beq.n	801037e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 801036c:	4b05      	ldr	r3, [pc, #20]	; (8010384 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 801036e:	6a1b      	ldr	r3, [r3, #32]
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d003      	beq.n	801037e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8010376:	4b03      	ldr	r3, [pc, #12]	; (8010384 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010378:	6a1b      	ldr	r3, [r3, #32]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	4798      	blx	r3
  }
}
 801037e:	bf00      	nop
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	20008a20 	.word	0x20008a20

08010388 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8010388:	b580      	push	{r7, lr}
 801038a:	b086      	sub	sp, #24
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010390:	f3ef 8311 	mrs	r3, BASEPRI
 8010394:	f04f 0120 	mov.w	r1, #32
 8010398:	f381 8811 	msr	BASEPRI, r1
 801039c:	617b      	str	r3, [r7, #20]
 801039e:	480b      	ldr	r0, [pc, #44]	; (80103cc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80103a0:	f7ff f914 	bl	800f5cc <_PreparePacket>
 80103a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80103a6:	2280      	movs	r2, #128	; 0x80
 80103a8:	6879      	ldr	r1, [r7, #4]
 80103aa:	6938      	ldr	r0, [r7, #16]
 80103ac:	f7ff f8be 	bl	800f52c <_EncodeStr>
 80103b0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80103b2:	220e      	movs	r2, #14
 80103b4:	68f9      	ldr	r1, [r7, #12]
 80103b6:	6938      	ldr	r0, [r7, #16]
 80103b8:	f7ff f9f6 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	f383 8811 	msr	BASEPRI, r3
}
 80103c2:	bf00      	nop
 80103c4:	3718      	adds	r7, #24
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	20008a50 	.word	0x20008a50

080103d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80103d0:	b590      	push	{r4, r7, lr}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80103d6:	4b15      	ldr	r3, [pc, #84]	; (801042c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80103d8:	6a1b      	ldr	r3, [r3, #32]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d01a      	beq.n	8010414 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80103de:	4b13      	ldr	r3, [pc, #76]	; (801042c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80103e0:	6a1b      	ldr	r3, [r3, #32]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d015      	beq.n	8010414 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80103e8:	4b10      	ldr	r3, [pc, #64]	; (801042c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80103ea:	6a1b      	ldr	r3, [r3, #32]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	4798      	blx	r3
 80103f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80103f4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80103f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80103fa:	f04f 0200 	mov.w	r2, #0
 80103fe:	f04f 0300 	mov.w	r3, #0
 8010402:	000a      	movs	r2, r1
 8010404:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010406:	4613      	mov	r3, r2
 8010408:	461a      	mov	r2, r3
 801040a:	4621      	mov	r1, r4
 801040c:	200d      	movs	r0, #13
 801040e:	f7ff fbe7 	bl	800fbe0 <SEGGER_SYSVIEW_RecordU32x2>
 8010412:	e006      	b.n	8010422 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8010414:	4b06      	ldr	r3, [pc, #24]	; (8010430 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4619      	mov	r1, r3
 801041a:	200c      	movs	r0, #12
 801041c:	f7ff fba4 	bl	800fb68 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8010420:	bf00      	nop
 8010422:	bf00      	nop
 8010424:	370c      	adds	r7, #12
 8010426:	46bd      	mov	sp, r7
 8010428:	bd90      	pop	{r4, r7, pc}
 801042a:	bf00      	nop
 801042c:	20008a20 	.word	0x20008a20
 8010430:	e0001004 	.word	0xe0001004

08010434 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 801043a:	f3ef 8311 	mrs	r3, BASEPRI
 801043e:	f04f 0120 	mov.w	r1, #32
 8010442:	f381 8811 	msr	BASEPRI, r1
 8010446:	607b      	str	r3, [r7, #4]
 8010448:	4807      	ldr	r0, [pc, #28]	; (8010468 <SEGGER_SYSVIEW_OnIdle+0x34>)
 801044a:	f7ff f8bf 	bl	800f5cc <_PreparePacket>
 801044e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8010450:	2211      	movs	r2, #17
 8010452:	6839      	ldr	r1, [r7, #0]
 8010454:	6838      	ldr	r0, [r7, #0]
 8010456:	f7ff f9a7 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f383 8811 	msr	BASEPRI, r3
}
 8010460:	bf00      	nop
 8010462:	3708      	adds	r7, #8
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	20008a50 	.word	0x20008a50

0801046c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 801046c:	b580      	push	{r7, lr}
 801046e:	b088      	sub	sp, #32
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010474:	f3ef 8311 	mrs	r3, BASEPRI
 8010478:	f04f 0120 	mov.w	r1, #32
 801047c:	f381 8811 	msr	BASEPRI, r1
 8010480:	617b      	str	r3, [r7, #20]
 8010482:	4819      	ldr	r0, [pc, #100]	; (80104e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8010484:	f7ff f8a2 	bl	800f5cc <_PreparePacket>
 8010488:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801048e:	4b17      	ldr	r3, [pc, #92]	; (80104ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	1ad3      	subs	r3, r2, r3
 8010496:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	61fb      	str	r3, [r7, #28]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	61bb      	str	r3, [r7, #24]
 80104a0:	e00b      	b.n	80104ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	b2da      	uxtb	r2, r3
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	1c59      	adds	r1, r3, #1
 80104aa:	61f9      	str	r1, [r7, #28]
 80104ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80104b0:	b2d2      	uxtb	r2, r2
 80104b2:	701a      	strb	r2, [r3, #0]
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	09db      	lsrs	r3, r3, #7
 80104b8:	61bb      	str	r3, [r7, #24]
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	2b7f      	cmp	r3, #127	; 0x7f
 80104be:	d8f0      	bhi.n	80104a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	61fa      	str	r2, [r7, #28]
 80104c6:	69ba      	ldr	r2, [r7, #24]
 80104c8:	b2d2      	uxtb	r2, r2
 80104ca:	701a      	strb	r2, [r3, #0]
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80104d0:	2208      	movs	r2, #8
 80104d2:	68f9      	ldr	r1, [r7, #12]
 80104d4:	6938      	ldr	r0, [r7, #16]
 80104d6:	f7ff f967 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	f383 8811 	msr	BASEPRI, r3
}
 80104e0:	bf00      	nop
 80104e2:	3720      	adds	r7, #32
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	20008a50 	.word	0x20008a50
 80104ec:	20008a20 	.word	0x20008a20

080104f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b088      	sub	sp, #32
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80104f8:	f3ef 8311 	mrs	r3, BASEPRI
 80104fc:	f04f 0120 	mov.w	r1, #32
 8010500:	f381 8811 	msr	BASEPRI, r1
 8010504:	617b      	str	r3, [r7, #20]
 8010506:	4819      	ldr	r0, [pc, #100]	; (801056c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8010508:	f7ff f860 	bl	800f5cc <_PreparePacket>
 801050c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8010512:	4b17      	ldr	r3, [pc, #92]	; (8010570 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8010514:	691b      	ldr	r3, [r3, #16]
 8010516:	687a      	ldr	r2, [r7, #4]
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	61fb      	str	r3, [r7, #28]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	61bb      	str	r3, [r7, #24]
 8010524:	e00b      	b.n	801053e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	b2da      	uxtb	r2, r3
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	1c59      	adds	r1, r3, #1
 801052e:	61f9      	str	r1, [r7, #28]
 8010530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010534:	b2d2      	uxtb	r2, r2
 8010536:	701a      	strb	r2, [r3, #0]
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	09db      	lsrs	r3, r3, #7
 801053c:	61bb      	str	r3, [r7, #24]
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	2b7f      	cmp	r3, #127	; 0x7f
 8010542:	d8f0      	bhi.n	8010526 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	1c5a      	adds	r2, r3, #1
 8010548:	61fa      	str	r2, [r7, #28]
 801054a:	69ba      	ldr	r2, [r7, #24]
 801054c:	b2d2      	uxtb	r2, r2
 801054e:	701a      	strb	r2, [r3, #0]
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8010554:	2204      	movs	r2, #4
 8010556:	68f9      	ldr	r1, [r7, #12]
 8010558:	6938      	ldr	r0, [r7, #16]
 801055a:	f7ff f925 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	f383 8811 	msr	BASEPRI, r3
}
 8010564:	bf00      	nop
 8010566:	3720      	adds	r7, #32
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	20008a50 	.word	0x20008a50
 8010570:	20008a20 	.word	0x20008a20

08010574 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8010574:	b580      	push	{r7, lr}
 8010576:	b088      	sub	sp, #32
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801057c:	f3ef 8311 	mrs	r3, BASEPRI
 8010580:	f04f 0120 	mov.w	r1, #32
 8010584:	f381 8811 	msr	BASEPRI, r1
 8010588:	617b      	str	r3, [r7, #20]
 801058a:	4819      	ldr	r0, [pc, #100]	; (80105f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 801058c:	f7ff f81e 	bl	800f5cc <_PreparePacket>
 8010590:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8010596:	4b17      	ldr	r3, [pc, #92]	; (80105f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8010598:	691b      	ldr	r3, [r3, #16]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	61fb      	str	r3, [r7, #28]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	61bb      	str	r3, [r7, #24]
 80105a8:	e00b      	b.n	80105c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	b2da      	uxtb	r2, r3
 80105ae:	69fb      	ldr	r3, [r7, #28]
 80105b0:	1c59      	adds	r1, r3, #1
 80105b2:	61f9      	str	r1, [r7, #28]
 80105b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80105b8:	b2d2      	uxtb	r2, r2
 80105ba:	701a      	strb	r2, [r3, #0]
 80105bc:	69bb      	ldr	r3, [r7, #24]
 80105be:	09db      	lsrs	r3, r3, #7
 80105c0:	61bb      	str	r3, [r7, #24]
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	2b7f      	cmp	r3, #127	; 0x7f
 80105c6:	d8f0      	bhi.n	80105aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	1c5a      	adds	r2, r3, #1
 80105cc:	61fa      	str	r2, [r7, #28]
 80105ce:	69ba      	ldr	r2, [r7, #24]
 80105d0:	b2d2      	uxtb	r2, r2
 80105d2:	701a      	strb	r2, [r3, #0]
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80105d8:	2206      	movs	r2, #6
 80105da:	68f9      	ldr	r1, [r7, #12]
 80105dc:	6938      	ldr	r0, [r7, #16]
 80105de:	f7ff f8e3 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	f383 8811 	msr	BASEPRI, r3
}
 80105e8:	bf00      	nop
 80105ea:	3720      	adds	r7, #32
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	20008a50 	.word	0x20008a50
 80105f4:	20008a20 	.word	0x20008a20

080105f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8010600:	4b04      	ldr	r3, [pc, #16]	; (8010614 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	1ad3      	subs	r3, r2, r3
}
 8010608:	4618      	mov	r0, r3
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr
 8010614:	20008a20 	.word	0x20008a20

08010618 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8010618:	b580      	push	{r7, lr}
 801061a:	b08c      	sub	sp, #48	; 0x30
 801061c:	af00      	add	r7, sp, #0
 801061e:	4603      	mov	r3, r0
 8010620:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8010622:	4b3b      	ldr	r3, [pc, #236]	; (8010710 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d06d      	beq.n	8010706 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 801062a:	4b39      	ldr	r3, [pc, #228]	; (8010710 <SEGGER_SYSVIEW_SendModule+0xf8>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8010630:	2300      	movs	r3, #0
 8010632:	62bb      	str	r3, [r7, #40]	; 0x28
 8010634:	e008      	b.n	8010648 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8010636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 801063c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063e:	2b00      	cmp	r3, #0
 8010640:	d007      	beq.n	8010652 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	3301      	adds	r3, #1
 8010646:	62bb      	str	r3, [r7, #40]	; 0x28
 8010648:	79fb      	ldrb	r3, [r7, #7]
 801064a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801064c:	429a      	cmp	r2, r3
 801064e:	d3f2      	bcc.n	8010636 <SEGGER_SYSVIEW_SendModule+0x1e>
 8010650:	e000      	b.n	8010654 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8010652:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8010654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010656:	2b00      	cmp	r3, #0
 8010658:	d055      	beq.n	8010706 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801065a:	f3ef 8311 	mrs	r3, BASEPRI
 801065e:	f04f 0120 	mov.w	r1, #32
 8010662:	f381 8811 	msr	BASEPRI, r1
 8010666:	617b      	str	r3, [r7, #20]
 8010668:	482a      	ldr	r0, [pc, #168]	; (8010714 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801066a:	f7fe ffaf 	bl	800f5cc <_PreparePacket>
 801066e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	627b      	str	r3, [r7, #36]	; 0x24
 8010678:	79fb      	ldrb	r3, [r7, #7]
 801067a:	623b      	str	r3, [r7, #32]
 801067c:	e00b      	b.n	8010696 <SEGGER_SYSVIEW_SendModule+0x7e>
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	b2da      	uxtb	r2, r3
 8010682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010684:	1c59      	adds	r1, r3, #1
 8010686:	6279      	str	r1, [r7, #36]	; 0x24
 8010688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801068c:	b2d2      	uxtb	r2, r2
 801068e:	701a      	strb	r2, [r3, #0]
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	09db      	lsrs	r3, r3, #7
 8010694:	623b      	str	r3, [r7, #32]
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	2b7f      	cmp	r3, #127	; 0x7f
 801069a:	d8f0      	bhi.n	801067e <SEGGER_SYSVIEW_SendModule+0x66>
 801069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069e:	1c5a      	adds	r2, r3, #1
 80106a0:	627a      	str	r2, [r7, #36]	; 0x24
 80106a2:	6a3a      	ldr	r2, [r7, #32]
 80106a4:	b2d2      	uxtb	r2, r2
 80106a6:	701a      	strb	r2, [r3, #0]
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	61fb      	str	r3, [r7, #28]
 80106b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b2:	689b      	ldr	r3, [r3, #8]
 80106b4:	61bb      	str	r3, [r7, #24]
 80106b6:	e00b      	b.n	80106d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	b2da      	uxtb	r2, r3
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	1c59      	adds	r1, r3, #1
 80106c0:	61f9      	str	r1, [r7, #28]
 80106c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80106c6:	b2d2      	uxtb	r2, r2
 80106c8:	701a      	strb	r2, [r3, #0]
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	09db      	lsrs	r3, r3, #7
 80106ce:	61bb      	str	r3, [r7, #24]
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	2b7f      	cmp	r3, #127	; 0x7f
 80106d4:	d8f0      	bhi.n	80106b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	1c5a      	adds	r2, r3, #1
 80106da:	61fa      	str	r2, [r7, #28]
 80106dc:	69ba      	ldr	r2, [r7, #24]
 80106de:	b2d2      	uxtb	r2, r2
 80106e0:	701a      	strb	r2, [r3, #0]
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80106e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2280      	movs	r2, #128	; 0x80
 80106ec:	4619      	mov	r1, r3
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7fe ff1c 	bl	800f52c <_EncodeStr>
 80106f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80106f6:	2216      	movs	r2, #22
 80106f8:	68f9      	ldr	r1, [r7, #12]
 80106fa:	6938      	ldr	r0, [r7, #16]
 80106fc:	f7ff f854 	bl	800f7a8 <_SendPacket>
      RECORD_END();
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8010706:	bf00      	nop
 8010708:	3730      	adds	r7, #48	; 0x30
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	20008a48 	.word	0x20008a48
 8010714:	20008a50 	.word	0x20008a50

08010718 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 801071e:	4b0c      	ldr	r3, [pc, #48]	; (8010750 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00f      	beq.n	8010746 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8010726:	4b0a      	ldr	r3, [pc, #40]	; (8010750 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	691b      	ldr	r3, [r3, #16]
 801073e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1f2      	bne.n	801072c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8010746:	bf00      	nop
 8010748:	3708      	adds	r7, #8
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	20008a48 	.word	0x20008a48

08010754 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8010754:	b580      	push	{r7, lr}
 8010756:	b086      	sub	sp, #24
 8010758:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801075a:	f3ef 8311 	mrs	r3, BASEPRI
 801075e:	f04f 0120 	mov.w	r1, #32
 8010762:	f381 8811 	msr	BASEPRI, r1
 8010766:	60fb      	str	r3, [r7, #12]
 8010768:	4817      	ldr	r0, [pc, #92]	; (80107c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801076a:	f7fe ff2f 	bl	800f5cc <_PreparePacket>
 801076e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	617b      	str	r3, [r7, #20]
 8010778:	4b14      	ldr	r3, [pc, #80]	; (80107cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	613b      	str	r3, [r7, #16]
 801077e:	e00b      	b.n	8010798 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	b2da      	uxtb	r2, r3
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	1c59      	adds	r1, r3, #1
 8010788:	6179      	str	r1, [r7, #20]
 801078a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801078e:	b2d2      	uxtb	r2, r2
 8010790:	701a      	strb	r2, [r3, #0]
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	09db      	lsrs	r3, r3, #7
 8010796:	613b      	str	r3, [r7, #16]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	2b7f      	cmp	r3, #127	; 0x7f
 801079c:	d8f0      	bhi.n	8010780 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	1c5a      	adds	r2, r3, #1
 80107a2:	617a      	str	r2, [r7, #20]
 80107a4:	693a      	ldr	r2, [r7, #16]
 80107a6:	b2d2      	uxtb	r2, r2
 80107a8:	701a      	strb	r2, [r3, #0]
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80107ae:	221b      	movs	r2, #27
 80107b0:	6879      	ldr	r1, [r7, #4]
 80107b2:	68b8      	ldr	r0, [r7, #8]
 80107b4:	f7fe fff8 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f383 8811 	msr	BASEPRI, r3
}
 80107be:	bf00      	nop
 80107c0:	3718      	adds	r7, #24
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	20008a50 	.word	0x20008a50
 80107cc:	20008a4c 	.word	0x20008a4c

080107d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b08a      	sub	sp, #40	; 0x28
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80107d8:	f3ef 8311 	mrs	r3, BASEPRI
 80107dc:	f04f 0120 	mov.w	r1, #32
 80107e0:	f381 8811 	msr	BASEPRI, r1
 80107e4:	617b      	str	r3, [r7, #20]
 80107e6:	4827      	ldr	r0, [pc, #156]	; (8010884 <SEGGER_SYSVIEW_Warn+0xb4>)
 80107e8:	f7fe fef0 	bl	800f5cc <_PreparePacket>
 80107ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80107ee:	2280      	movs	r2, #128	; 0x80
 80107f0:	6879      	ldr	r1, [r7, #4]
 80107f2:	6938      	ldr	r0, [r7, #16]
 80107f4:	f7fe fe9a 	bl	800f52c <_EncodeStr>
 80107f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	627b      	str	r3, [r7, #36]	; 0x24
 80107fe:	2301      	movs	r3, #1
 8010800:	623b      	str	r3, [r7, #32]
 8010802:	e00b      	b.n	801081c <SEGGER_SYSVIEW_Warn+0x4c>
 8010804:	6a3b      	ldr	r3, [r7, #32]
 8010806:	b2da      	uxtb	r2, r3
 8010808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080a:	1c59      	adds	r1, r3, #1
 801080c:	6279      	str	r1, [r7, #36]	; 0x24
 801080e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010812:	b2d2      	uxtb	r2, r2
 8010814:	701a      	strb	r2, [r3, #0]
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	09db      	lsrs	r3, r3, #7
 801081a:	623b      	str	r3, [r7, #32]
 801081c:	6a3b      	ldr	r3, [r7, #32]
 801081e:	2b7f      	cmp	r3, #127	; 0x7f
 8010820:	d8f0      	bhi.n	8010804 <SEGGER_SYSVIEW_Warn+0x34>
 8010822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010824:	1c5a      	adds	r2, r3, #1
 8010826:	627a      	str	r2, [r7, #36]	; 0x24
 8010828:	6a3a      	ldr	r2, [r7, #32]
 801082a:	b2d2      	uxtb	r2, r2
 801082c:	701a      	strb	r2, [r3, #0]
 801082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010830:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	61fb      	str	r3, [r7, #28]
 8010836:	2300      	movs	r3, #0
 8010838:	61bb      	str	r3, [r7, #24]
 801083a:	e00b      	b.n	8010854 <SEGGER_SYSVIEW_Warn+0x84>
 801083c:	69bb      	ldr	r3, [r7, #24]
 801083e:	b2da      	uxtb	r2, r3
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	1c59      	adds	r1, r3, #1
 8010844:	61f9      	str	r1, [r7, #28]
 8010846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801084a:	b2d2      	uxtb	r2, r2
 801084c:	701a      	strb	r2, [r3, #0]
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	09db      	lsrs	r3, r3, #7
 8010852:	61bb      	str	r3, [r7, #24]
 8010854:	69bb      	ldr	r3, [r7, #24]
 8010856:	2b7f      	cmp	r3, #127	; 0x7f
 8010858:	d8f0      	bhi.n	801083c <SEGGER_SYSVIEW_Warn+0x6c>
 801085a:	69fb      	ldr	r3, [r7, #28]
 801085c:	1c5a      	adds	r2, r3, #1
 801085e:	61fa      	str	r2, [r7, #28]
 8010860:	69ba      	ldr	r2, [r7, #24]
 8010862:	b2d2      	uxtb	r2, r2
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801086a:	221a      	movs	r2, #26
 801086c:	68f9      	ldr	r1, [r7, #12]
 801086e:	6938      	ldr	r0, [r7, #16]
 8010870:	f7fe ff9a 	bl	800f7a8 <_SendPacket>
  RECORD_END();
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	f383 8811 	msr	BASEPRI, r3
}
 801087a:	bf00      	nop
 801087c:	3728      	adds	r7, #40	; 0x28
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	20008a50 	.word	0x20008a50

08010888 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 801088c:	4803      	ldr	r0, [pc, #12]	; (801089c <_cbSendSystemDesc+0x14>)
 801088e:	f7ff fd7b 	bl	8010388 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8010892:	4803      	ldr	r0, [pc, #12]	; (80108a0 <_cbSendSystemDesc+0x18>)
 8010894:	f7ff fd78 	bl	8010388 <SEGGER_SYSVIEW_SendSysDesc>
}
 8010898:	bf00      	nop
 801089a:	bd80      	pop	{r7, pc}
 801089c:	08011218 	.word	0x08011218
 80108a0:	0801124c 	.word	0x0801124c

080108a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80108a4:	b580      	push	{r7, lr}
 80108a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80108a8:	4b06      	ldr	r3, [pc, #24]	; (80108c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80108aa:	6818      	ldr	r0, [r3, #0]
 80108ac:	4b05      	ldr	r3, [pc, #20]	; (80108c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80108ae:	6819      	ldr	r1, [r3, #0]
 80108b0:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80108b2:	4a06      	ldr	r2, [pc, #24]	; (80108cc <SEGGER_SYSVIEW_Conf+0x28>)
 80108b4:	f7ff f8e6 	bl	800fa84 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80108b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80108bc:	f7ff f926 	bl	800fb0c <SEGGER_SYSVIEW_SetRAMBase>
}
 80108c0:	bf00      	nop
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	20000000 	.word	0x20000000
 80108c8:	08010889 	.word	0x08010889
 80108cc:	080113b0 	.word	0x080113b0

080108d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80108d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80108d6:	2300      	movs	r3, #0
 80108d8:	607b      	str	r3, [r7, #4]
 80108da:	e033      	b.n	8010944 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80108dc:	491e      	ldr	r1, [pc, #120]	; (8010958 <_cbSendTaskList+0x88>)
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	4613      	mov	r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4413      	add	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	440b      	add	r3, r1
 80108ea:	6818      	ldr	r0, [r3, #0]
 80108ec:	491a      	ldr	r1, [pc, #104]	; (8010958 <_cbSendTaskList+0x88>)
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	4613      	mov	r3, r2
 80108f2:	009b      	lsls	r3, r3, #2
 80108f4:	4413      	add	r3, r2
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	440b      	add	r3, r1
 80108fa:	3304      	adds	r3, #4
 80108fc:	6819      	ldr	r1, [r3, #0]
 80108fe:	4c16      	ldr	r4, [pc, #88]	; (8010958 <_cbSendTaskList+0x88>)
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	4613      	mov	r3, r2
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	4413      	add	r3, r2
 8010908:	009b      	lsls	r3, r3, #2
 801090a:	4423      	add	r3, r4
 801090c:	3308      	adds	r3, #8
 801090e:	681c      	ldr	r4, [r3, #0]
 8010910:	4d11      	ldr	r5, [pc, #68]	; (8010958 <_cbSendTaskList+0x88>)
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	4613      	mov	r3, r2
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	442b      	add	r3, r5
 801091e:	330c      	adds	r3, #12
 8010920:	681d      	ldr	r5, [r3, #0]
 8010922:	4e0d      	ldr	r6, [pc, #52]	; (8010958 <_cbSendTaskList+0x88>)
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	4613      	mov	r3, r2
 8010928:	009b      	lsls	r3, r3, #2
 801092a:	4413      	add	r3, r2
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	4433      	add	r3, r6
 8010930:	3310      	adds	r3, #16
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	462b      	mov	r3, r5
 8010938:	4622      	mov	r2, r4
 801093a:	f000 f979 	bl	8010c30 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3301      	adds	r3, #1
 8010942:	607b      	str	r3, [r7, #4]
 8010944:	4b05      	ldr	r3, [pc, #20]	; (801095c <_cbSendTaskList+0x8c>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	429a      	cmp	r2, r3
 801094c:	d3c6      	bcc.n	80108dc <_cbSendTaskList+0xc>
  }
}
 801094e:	bf00      	nop
 8010950:	bf00      	nop
 8010952:	370c      	adds	r7, #12
 8010954:	46bd      	mov	sp, r7
 8010956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010958:	20008b34 	.word	0x20008b34
 801095c:	20008bd4 	.word	0x20008bd4

08010960 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8010960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010964:	b082      	sub	sp, #8
 8010966:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8010968:	f7fd fa94 	bl	800de94 <xTaskGetTickCountFromISR>
 801096c:	4603      	mov	r3, r0
 801096e:	2200      	movs	r2, #0
 8010970:	469a      	mov	sl, r3
 8010972:	4693      	mov	fp, r2
 8010974:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8010978:	e9d7 0100 	ldrd	r0, r1, [r7]
 801097c:	4602      	mov	r2, r0
 801097e:	460b      	mov	r3, r1
 8010980:	f04f 0a00 	mov.w	sl, #0
 8010984:	f04f 0b00 	mov.w	fp, #0
 8010988:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 801098c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8010990:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8010994:	4652      	mov	r2, sl
 8010996:	465b      	mov	r3, fp
 8010998:	1a14      	subs	r4, r2, r0
 801099a:	eb63 0501 	sbc.w	r5, r3, r1
 801099e:	f04f 0200 	mov.w	r2, #0
 80109a2:	f04f 0300 	mov.w	r3, #0
 80109a6:	00ab      	lsls	r3, r5, #2
 80109a8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80109ac:	00a2      	lsls	r2, r4, #2
 80109ae:	4614      	mov	r4, r2
 80109b0:	461d      	mov	r5, r3
 80109b2:	eb14 0800 	adds.w	r8, r4, r0
 80109b6:	eb45 0901 	adc.w	r9, r5, r1
 80109ba:	f04f 0200 	mov.w	r2, #0
 80109be:	f04f 0300 	mov.w	r3, #0
 80109c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80109c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80109ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80109ce:	4690      	mov	r8, r2
 80109d0:	4699      	mov	r9, r3
 80109d2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80109d6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80109da:	4610      	mov	r0, r2
 80109dc:	4619      	mov	r1, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080109e8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b086      	sub	sp, #24
 80109ec:	af02      	add	r7, sp, #8
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
 80109f4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80109f6:	2205      	movs	r2, #5
 80109f8:	492b      	ldr	r1, [pc, #172]	; (8010aa8 <SYSVIEW_AddTask+0xc0>)
 80109fa:	68b8      	ldr	r0, [r7, #8]
 80109fc:	f000 f960 	bl	8010cc0 <memcmp>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d04b      	beq.n	8010a9e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8010a06:	4b29      	ldr	r3, [pc, #164]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b07      	cmp	r3, #7
 8010a0c:	d903      	bls.n	8010a16 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8010a0e:	4828      	ldr	r0, [pc, #160]	; (8010ab0 <SYSVIEW_AddTask+0xc8>)
 8010a10:	f7ff fede 	bl	80107d0 <SEGGER_SYSVIEW_Warn>
    return;
 8010a14:	e044      	b.n	8010aa0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8010a16:	4b25      	ldr	r3, [pc, #148]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a18:	681a      	ldr	r2, [r3, #0]
 8010a1a:	4926      	ldr	r1, [pc, #152]	; (8010ab4 <SYSVIEW_AddTask+0xcc>)
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	4413      	add	r3, r2
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	440b      	add	r3, r1
 8010a26:	68fa      	ldr	r2, [r7, #12]
 8010a28:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8010a2a:	4b20      	ldr	r3, [pc, #128]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	4921      	ldr	r1, [pc, #132]	; (8010ab4 <SYSVIEW_AddTask+0xcc>)
 8010a30:	4613      	mov	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	440b      	add	r3, r1
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8010a40:	4b1a      	ldr	r3, [pc, #104]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	491b      	ldr	r1, [pc, #108]	; (8010ab4 <SYSVIEW_AddTask+0xcc>)
 8010a46:	4613      	mov	r3, r2
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	4413      	add	r3, r2
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	440b      	add	r3, r1
 8010a50:	3308      	adds	r3, #8
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8010a56:	4b15      	ldr	r3, [pc, #84]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	4916      	ldr	r1, [pc, #88]	; (8010ab4 <SYSVIEW_AddTask+0xcc>)
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	4413      	add	r3, r2
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	440b      	add	r3, r1
 8010a66:	330c      	adds	r3, #12
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8010a6c:	4b0f      	ldr	r3, [pc, #60]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	4910      	ldr	r1, [pc, #64]	; (8010ab4 <SYSVIEW_AddTask+0xcc>)
 8010a72:	4613      	mov	r3, r2
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	4413      	add	r3, r2
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	440b      	add	r3, r1
 8010a7c:	3310      	adds	r3, #16
 8010a7e:	69ba      	ldr	r2, [r7, #24]
 8010a80:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8010a82:	4b0a      	ldr	r3, [pc, #40]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	3301      	adds	r3, #1
 8010a88:	4a08      	ldr	r2, [pc, #32]	; (8010aac <SYSVIEW_AddTask+0xc4>)
 8010a8a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	68b9      	ldr	r1, [r7, #8]
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	f000 f8ca 	bl	8010c30 <SYSVIEW_SendTaskInfo>
 8010a9c:	e000      	b.n	8010aa0 <SYSVIEW_AddTask+0xb8>
    return;
 8010a9e:	bf00      	nop

}
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	0801125c 	.word	0x0801125c
 8010aac:	20008bd4 	.word	0x20008bd4
 8010ab0:	08011264 	.word	0x08011264
 8010ab4:	20008b34 	.word	0x20008b34

08010ab8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8010ac0:	4b59      	ldr	r3, [pc, #356]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f000 80ab 	beq.w	8010c20 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8010aca:	2300      	movs	r3, #0
 8010acc:	60fb      	str	r3, [r7, #12]
 8010ace:	e00d      	b.n	8010aec <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8010ad0:	4956      	ldr	r1, [pc, #344]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	4413      	add	r3, r2
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	440b      	add	r3, r1
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d008      	beq.n	8010af8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	3301      	adds	r3, #1
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	4b4e      	ldr	r3, [pc, #312]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d3ec      	bcc.n	8010ad0 <SYSVIEW_DeleteTask+0x18>
 8010af6:	e000      	b.n	8010afa <SYSVIEW_DeleteTask+0x42>
      break;
 8010af8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8010afa:	4b4b      	ldr	r3, [pc, #300]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	3b01      	subs	r3, #1
 8010b00:	68fa      	ldr	r2, [r7, #12]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d111      	bne.n	8010b2a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	4613      	mov	r3, r2
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	4413      	add	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	4a46      	ldr	r2, [pc, #280]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010b12:	4413      	add	r3, r2
 8010b14:	2214      	movs	r2, #20
 8010b16:	2100      	movs	r1, #0
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f000 f8ef 	bl	8010cfc <memset>
    _NumTasks--;
 8010b1e:	4b42      	ldr	r3, [pc, #264]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	3b01      	subs	r3, #1
 8010b24:	4a40      	ldr	r2, [pc, #256]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010b26:	6013      	str	r3, [r2, #0]
 8010b28:	e07b      	b.n	8010c22 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8010b2a:	4b3f      	ldr	r3, [pc, #252]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d276      	bcs.n	8010c22 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8010b34:	4b3c      	ldr	r3, [pc, #240]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	1e5a      	subs	r2, r3, #1
 8010b3a:	493c      	ldr	r1, [pc, #240]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	4413      	add	r3, r2
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	440b      	add	r3, r1
 8010b46:	6819      	ldr	r1, [r3, #0]
 8010b48:	4838      	ldr	r0, [pc, #224]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	4413      	add	r3, r2
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	4403      	add	r3, r0
 8010b56:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8010b58:	4b33      	ldr	r3, [pc, #204]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	1e5a      	subs	r2, r3, #1
 8010b5e:	4933      	ldr	r1, [pc, #204]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010b60:	4613      	mov	r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	4413      	add	r3, r2
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	440b      	add	r3, r1
 8010b6a:	3304      	adds	r3, #4
 8010b6c:	6819      	ldr	r1, [r3, #0]
 8010b6e:	482f      	ldr	r0, [pc, #188]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010b70:	68fa      	ldr	r2, [r7, #12]
 8010b72:	4613      	mov	r3, r2
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	4413      	add	r3, r2
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	4403      	add	r3, r0
 8010b7c:	3304      	adds	r3, #4
 8010b7e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8010b80:	4b29      	ldr	r3, [pc, #164]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	1e5a      	subs	r2, r3, #1
 8010b86:	4929      	ldr	r1, [pc, #164]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010b88:	4613      	mov	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4413      	add	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	440b      	add	r3, r1
 8010b92:	3308      	adds	r3, #8
 8010b94:	6819      	ldr	r1, [r3, #0]
 8010b96:	4825      	ldr	r0, [pc, #148]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010b98:	68fa      	ldr	r2, [r7, #12]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4413      	add	r3, r2
 8010ba0:	009b      	lsls	r3, r3, #2
 8010ba2:	4403      	add	r3, r0
 8010ba4:	3308      	adds	r3, #8
 8010ba6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8010ba8:	4b1f      	ldr	r3, [pc, #124]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	1e5a      	subs	r2, r3, #1
 8010bae:	491f      	ldr	r1, [pc, #124]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010bb0:	4613      	mov	r3, r2
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	4413      	add	r3, r2
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	440b      	add	r3, r1
 8010bba:	330c      	adds	r3, #12
 8010bbc:	6819      	ldr	r1, [r3, #0]
 8010bbe:	481b      	ldr	r0, [pc, #108]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	4413      	add	r3, r2
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	4403      	add	r3, r0
 8010bcc:	330c      	adds	r3, #12
 8010bce:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8010bd0:	4b15      	ldr	r3, [pc, #84]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	1e5a      	subs	r2, r3, #1
 8010bd6:	4915      	ldr	r1, [pc, #84]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010bd8:	4613      	mov	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	440b      	add	r3, r1
 8010be2:	3310      	adds	r3, #16
 8010be4:	6819      	ldr	r1, [r3, #0]
 8010be6:	4811      	ldr	r0, [pc, #68]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	4613      	mov	r3, r2
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	4413      	add	r3, r2
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4403      	add	r3, r0
 8010bf4:	3310      	adds	r3, #16
 8010bf6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8010bf8:	4b0b      	ldr	r3, [pc, #44]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	1e5a      	subs	r2, r3, #1
 8010bfe:	4613      	mov	r3, r2
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	4413      	add	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4a09      	ldr	r2, [pc, #36]	; (8010c2c <SYSVIEW_DeleteTask+0x174>)
 8010c08:	4413      	add	r3, r2
 8010c0a:	2214      	movs	r2, #20
 8010c0c:	2100      	movs	r1, #0
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 f874 	bl	8010cfc <memset>
    _NumTasks--;
 8010c14:	4b04      	ldr	r3, [pc, #16]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	4a03      	ldr	r2, [pc, #12]	; (8010c28 <SYSVIEW_DeleteTask+0x170>)
 8010c1c:	6013      	str	r3, [r2, #0]
 8010c1e:	e000      	b.n	8010c22 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8010c20:	bf00      	nop
  }
}
 8010c22:	3710      	adds	r7, #16
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	20008bd4 	.word	0x20008bd4
 8010c2c:	20008b34 	.word	0x20008b34

08010c30 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b08a      	sub	sp, #40	; 0x28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	607a      	str	r2, [r7, #4]
 8010c3c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8010c3e:	f107 0314 	add.w	r3, r7, #20
 8010c42:	2214      	movs	r2, #20
 8010c44:	2100      	movs	r1, #0
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 f858 	bl	8010cfc <memset>
  TaskInfo.TaskID     = TaskID;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8010c60:	f107 0314 	add.w	r3, r7, #20
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ff fa97 	bl	8010198 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8010c6a:	bf00      	nop
 8010c6c:	3728      	adds	r7, #40	; 0x28
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <__libc_init_array>:
 8010c74:	b570      	push	{r4, r5, r6, lr}
 8010c76:	4d0d      	ldr	r5, [pc, #52]	; (8010cac <__libc_init_array+0x38>)
 8010c78:	4c0d      	ldr	r4, [pc, #52]	; (8010cb0 <__libc_init_array+0x3c>)
 8010c7a:	1b64      	subs	r4, r4, r5
 8010c7c:	10a4      	asrs	r4, r4, #2
 8010c7e:	2600      	movs	r6, #0
 8010c80:	42a6      	cmp	r6, r4
 8010c82:	d109      	bne.n	8010c98 <__libc_init_array+0x24>
 8010c84:	4d0b      	ldr	r5, [pc, #44]	; (8010cb4 <__libc_init_array+0x40>)
 8010c86:	4c0c      	ldr	r4, [pc, #48]	; (8010cb8 <__libc_init_array+0x44>)
 8010c88:	f000 f902 	bl	8010e90 <_init>
 8010c8c:	1b64      	subs	r4, r4, r5
 8010c8e:	10a4      	asrs	r4, r4, #2
 8010c90:	2600      	movs	r6, #0
 8010c92:	42a6      	cmp	r6, r4
 8010c94:	d105      	bne.n	8010ca2 <__libc_init_array+0x2e>
 8010c96:	bd70      	pop	{r4, r5, r6, pc}
 8010c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c9c:	4798      	blx	r3
 8010c9e:	3601      	adds	r6, #1
 8010ca0:	e7ee      	b.n	8010c80 <__libc_init_array+0xc>
 8010ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ca6:	4798      	blx	r3
 8010ca8:	3601      	adds	r6, #1
 8010caa:	e7f2      	b.n	8010c92 <__libc_init_array+0x1e>
 8010cac:	08011420 	.word	0x08011420
 8010cb0:	08011420 	.word	0x08011420
 8010cb4:	08011420 	.word	0x08011420
 8010cb8:	08011424 	.word	0x08011424

08010cbc <__retarget_lock_acquire_recursive>:
 8010cbc:	4770      	bx	lr

08010cbe <__retarget_lock_release_recursive>:
 8010cbe:	4770      	bx	lr

08010cc0 <memcmp>:
 8010cc0:	b510      	push	{r4, lr}
 8010cc2:	3901      	subs	r1, #1
 8010cc4:	4402      	add	r2, r0
 8010cc6:	4290      	cmp	r0, r2
 8010cc8:	d101      	bne.n	8010cce <memcmp+0xe>
 8010cca:	2000      	movs	r0, #0
 8010ccc:	e005      	b.n	8010cda <memcmp+0x1a>
 8010cce:	7803      	ldrb	r3, [r0, #0]
 8010cd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010cd4:	42a3      	cmp	r3, r4
 8010cd6:	d001      	beq.n	8010cdc <memcmp+0x1c>
 8010cd8:	1b18      	subs	r0, r3, r4
 8010cda:	bd10      	pop	{r4, pc}
 8010cdc:	3001      	adds	r0, #1
 8010cde:	e7f2      	b.n	8010cc6 <memcmp+0x6>

08010ce0 <memcpy>:
 8010ce0:	440a      	add	r2, r1
 8010ce2:	4291      	cmp	r1, r2
 8010ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ce8:	d100      	bne.n	8010cec <memcpy+0xc>
 8010cea:	4770      	bx	lr
 8010cec:	b510      	push	{r4, lr}
 8010cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cf6:	4291      	cmp	r1, r2
 8010cf8:	d1f9      	bne.n	8010cee <memcpy+0xe>
 8010cfa:	bd10      	pop	{r4, pc}

08010cfc <memset>:
 8010cfc:	4402      	add	r2, r0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	4293      	cmp	r3, r2
 8010d02:	d100      	bne.n	8010d06 <memset+0xa>
 8010d04:	4770      	bx	lr
 8010d06:	f803 1b01 	strb.w	r1, [r3], #1
 8010d0a:	e7f9      	b.n	8010d00 <memset+0x4>

08010d0c <cleanup_glue>:
 8010d0c:	b538      	push	{r3, r4, r5, lr}
 8010d0e:	460c      	mov	r4, r1
 8010d10:	6809      	ldr	r1, [r1, #0]
 8010d12:	4605      	mov	r5, r0
 8010d14:	b109      	cbz	r1, 8010d1a <cleanup_glue+0xe>
 8010d16:	f7ff fff9 	bl	8010d0c <cleanup_glue>
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d22:	f000 b869 	b.w	8010df8 <_free_r>
	...

08010d28 <_reclaim_reent>:
 8010d28:	4b2c      	ldr	r3, [pc, #176]	; (8010ddc <_reclaim_reent+0xb4>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4283      	cmp	r3, r0
 8010d2e:	b570      	push	{r4, r5, r6, lr}
 8010d30:	4604      	mov	r4, r0
 8010d32:	d051      	beq.n	8010dd8 <_reclaim_reent+0xb0>
 8010d34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010d36:	b143      	cbz	r3, 8010d4a <_reclaim_reent+0x22>
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d14a      	bne.n	8010dd4 <_reclaim_reent+0xac>
 8010d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d40:	6819      	ldr	r1, [r3, #0]
 8010d42:	b111      	cbz	r1, 8010d4a <_reclaim_reent+0x22>
 8010d44:	4620      	mov	r0, r4
 8010d46:	f000 f857 	bl	8010df8 <_free_r>
 8010d4a:	6961      	ldr	r1, [r4, #20]
 8010d4c:	b111      	cbz	r1, 8010d54 <_reclaim_reent+0x2c>
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f000 f852 	bl	8010df8 <_free_r>
 8010d54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010d56:	b111      	cbz	r1, 8010d5e <_reclaim_reent+0x36>
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f000 f84d 	bl	8010df8 <_free_r>
 8010d5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010d60:	b111      	cbz	r1, 8010d68 <_reclaim_reent+0x40>
 8010d62:	4620      	mov	r0, r4
 8010d64:	f000 f848 	bl	8010df8 <_free_r>
 8010d68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010d6a:	b111      	cbz	r1, 8010d72 <_reclaim_reent+0x4a>
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f000 f843 	bl	8010df8 <_free_r>
 8010d72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010d74:	b111      	cbz	r1, 8010d7c <_reclaim_reent+0x54>
 8010d76:	4620      	mov	r0, r4
 8010d78:	f000 f83e 	bl	8010df8 <_free_r>
 8010d7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010d7e:	b111      	cbz	r1, 8010d86 <_reclaim_reent+0x5e>
 8010d80:	4620      	mov	r0, r4
 8010d82:	f000 f839 	bl	8010df8 <_free_r>
 8010d86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010d88:	b111      	cbz	r1, 8010d90 <_reclaim_reent+0x68>
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f000 f834 	bl	8010df8 <_free_r>
 8010d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d92:	b111      	cbz	r1, 8010d9a <_reclaim_reent+0x72>
 8010d94:	4620      	mov	r0, r4
 8010d96:	f000 f82f 	bl	8010df8 <_free_r>
 8010d9a:	69a3      	ldr	r3, [r4, #24]
 8010d9c:	b1e3      	cbz	r3, 8010dd8 <_reclaim_reent+0xb0>
 8010d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010da0:	4620      	mov	r0, r4
 8010da2:	4798      	blx	r3
 8010da4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010da6:	b1b9      	cbz	r1, 8010dd8 <_reclaim_reent+0xb0>
 8010da8:	4620      	mov	r0, r4
 8010daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dae:	f7ff bfad 	b.w	8010d0c <cleanup_glue>
 8010db2:	5949      	ldr	r1, [r1, r5]
 8010db4:	b941      	cbnz	r1, 8010dc8 <_reclaim_reent+0xa0>
 8010db6:	3504      	adds	r5, #4
 8010db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010dba:	2d80      	cmp	r5, #128	; 0x80
 8010dbc:	68d9      	ldr	r1, [r3, #12]
 8010dbe:	d1f8      	bne.n	8010db2 <_reclaim_reent+0x8a>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f000 f819 	bl	8010df8 <_free_r>
 8010dc6:	e7ba      	b.n	8010d3e <_reclaim_reent+0x16>
 8010dc8:	680e      	ldr	r6, [r1, #0]
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f000 f814 	bl	8010df8 <_free_r>
 8010dd0:	4631      	mov	r1, r6
 8010dd2:	e7ef      	b.n	8010db4 <_reclaim_reent+0x8c>
 8010dd4:	2500      	movs	r5, #0
 8010dd6:	e7ef      	b.n	8010db8 <_reclaim_reent+0x90>
 8010dd8:	bd70      	pop	{r4, r5, r6, pc}
 8010dda:	bf00      	nop
 8010ddc:	20000010 	.word	0x20000010

08010de0 <__malloc_lock>:
 8010de0:	4801      	ldr	r0, [pc, #4]	; (8010de8 <__malloc_lock+0x8>)
 8010de2:	f7ff bf6b 	b.w	8010cbc <__retarget_lock_acquire_recursive>
 8010de6:	bf00      	nop
 8010de8:	20008bd8 	.word	0x20008bd8

08010dec <__malloc_unlock>:
 8010dec:	4801      	ldr	r0, [pc, #4]	; (8010df4 <__malloc_unlock+0x8>)
 8010dee:	f7ff bf66 	b.w	8010cbe <__retarget_lock_release_recursive>
 8010df2:	bf00      	nop
 8010df4:	20008bd8 	.word	0x20008bd8

08010df8 <_free_r>:
 8010df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010dfa:	2900      	cmp	r1, #0
 8010dfc:	d044      	beq.n	8010e88 <_free_r+0x90>
 8010dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e02:	9001      	str	r0, [sp, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f1a1 0404 	sub.w	r4, r1, #4
 8010e0a:	bfb8      	it	lt
 8010e0c:	18e4      	addlt	r4, r4, r3
 8010e0e:	f7ff ffe7 	bl	8010de0 <__malloc_lock>
 8010e12:	4a1e      	ldr	r2, [pc, #120]	; (8010e8c <_free_r+0x94>)
 8010e14:	9801      	ldr	r0, [sp, #4]
 8010e16:	6813      	ldr	r3, [r2, #0]
 8010e18:	b933      	cbnz	r3, 8010e28 <_free_r+0x30>
 8010e1a:	6063      	str	r3, [r4, #4]
 8010e1c:	6014      	str	r4, [r2, #0]
 8010e1e:	b003      	add	sp, #12
 8010e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e24:	f7ff bfe2 	b.w	8010dec <__malloc_unlock>
 8010e28:	42a3      	cmp	r3, r4
 8010e2a:	d908      	bls.n	8010e3e <_free_r+0x46>
 8010e2c:	6825      	ldr	r5, [r4, #0]
 8010e2e:	1961      	adds	r1, r4, r5
 8010e30:	428b      	cmp	r3, r1
 8010e32:	bf01      	itttt	eq
 8010e34:	6819      	ldreq	r1, [r3, #0]
 8010e36:	685b      	ldreq	r3, [r3, #4]
 8010e38:	1949      	addeq	r1, r1, r5
 8010e3a:	6021      	streq	r1, [r4, #0]
 8010e3c:	e7ed      	b.n	8010e1a <_free_r+0x22>
 8010e3e:	461a      	mov	r2, r3
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	b10b      	cbz	r3, 8010e48 <_free_r+0x50>
 8010e44:	42a3      	cmp	r3, r4
 8010e46:	d9fa      	bls.n	8010e3e <_free_r+0x46>
 8010e48:	6811      	ldr	r1, [r2, #0]
 8010e4a:	1855      	adds	r5, r2, r1
 8010e4c:	42a5      	cmp	r5, r4
 8010e4e:	d10b      	bne.n	8010e68 <_free_r+0x70>
 8010e50:	6824      	ldr	r4, [r4, #0]
 8010e52:	4421      	add	r1, r4
 8010e54:	1854      	adds	r4, r2, r1
 8010e56:	42a3      	cmp	r3, r4
 8010e58:	6011      	str	r1, [r2, #0]
 8010e5a:	d1e0      	bne.n	8010e1e <_free_r+0x26>
 8010e5c:	681c      	ldr	r4, [r3, #0]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	6053      	str	r3, [r2, #4]
 8010e62:	4421      	add	r1, r4
 8010e64:	6011      	str	r1, [r2, #0]
 8010e66:	e7da      	b.n	8010e1e <_free_r+0x26>
 8010e68:	d902      	bls.n	8010e70 <_free_r+0x78>
 8010e6a:	230c      	movs	r3, #12
 8010e6c:	6003      	str	r3, [r0, #0]
 8010e6e:	e7d6      	b.n	8010e1e <_free_r+0x26>
 8010e70:	6825      	ldr	r5, [r4, #0]
 8010e72:	1961      	adds	r1, r4, r5
 8010e74:	428b      	cmp	r3, r1
 8010e76:	bf04      	itt	eq
 8010e78:	6819      	ldreq	r1, [r3, #0]
 8010e7a:	685b      	ldreq	r3, [r3, #4]
 8010e7c:	6063      	str	r3, [r4, #4]
 8010e7e:	bf04      	itt	eq
 8010e80:	1949      	addeq	r1, r1, r5
 8010e82:	6021      	streq	r1, [r4, #0]
 8010e84:	6054      	str	r4, [r2, #4]
 8010e86:	e7ca      	b.n	8010e1e <_free_r+0x26>
 8010e88:	b003      	add	sp, #12
 8010e8a:	bd30      	pop	{r4, r5, pc}
 8010e8c:	20008bdc 	.word	0x20008bdc

08010e90 <_init>:
 8010e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e92:	bf00      	nop
 8010e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e96:	bc08      	pop	{r3}
 8010e98:	469e      	mov	lr, r3
 8010e9a:	4770      	bx	lr

08010e9c <_fini>:
 8010e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e9e:	bf00      	nop
 8010ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ea2:	bc08      	pop	{r3}
 8010ea4:	469e      	mov	lr, r3
 8010ea6:	4770      	bx	lr
