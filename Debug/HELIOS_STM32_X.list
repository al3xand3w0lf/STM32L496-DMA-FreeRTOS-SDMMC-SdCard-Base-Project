
HELIOS_STM32_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011688  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08011838  08011838  00021838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011de0  08011de0  00030074  2**0
                  CONTENTS
  4 .ARM          00000008  08011de0  08011de0  00021de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011de8  08011de8  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011de8  08011de8  00021de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011dec  08011dec  00021dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08011df0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009078  20000074  08011e64  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200090ec  08011e64  000390ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e6eb  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006323  00000000  00000000  0005e78f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002500  00000000  00000000  00064ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002228  00000000  00000000  00066fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031710  00000000  00000000  000691e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033235  00000000  00000000  0009a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b97e  00000000  00000000  000cdb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e94a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cbc  00000000  00000000  001e94f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011820 	.word	0x08011820

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08011820 	.word	0x08011820

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2000866c 	.word	0x2000866c

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_DMA_Init+0x38>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <MX_DMA_Init+0x38>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6493      	str	r3, [r2, #72]	; 0x48
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_DMA_Init+0x38>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2105      	movs	r1, #5
 80005aa:	203b      	movs	r0, #59	; 0x3b
 80005ac:	f001 f82c 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80005b0:	203b      	movs	r0, #59	; 0x3b
 80005b2:	f001 f855 	bl	8001660 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000009c 	.word	0x2000009c
 80005f4:	20000150 	.word	0x20000150

080005f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of startTask */
  osThreadDef(startTask, StartDefaultTask, osPriorityNormal, 0, 1000);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_FREERTOS_Init+0x30>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  startTaskHandle = osThreadCreate(osThread(startTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f00c fa4b 	bl	800cab0 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <MX_FREERTOS_Init+0x34>)
 800061e:	6013      	str	r3, [r2, #0]
  // Create main app task


  /* USER CODE END RTOS_THREADS */

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	08011844 	.word	0x08011844
 800062c:	20000090 	.word	0x20000090

08000630 <StartDefaultTask>:

uint8_t SD_FileOperationsTest();

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//static int cnt = 0;
  volatile uint8_t result = 10;
 8000638:	230a      	movs	r3, #10
 800063a:	72fb      	strb	r3, [r7, #11]

  result = SD_FileOperationsTest();
 800063c:	f000 f83e 	bl	80006bc <SD_FileOperationsTest>
 8000640:	4603      	mov	r3, r0
 8000642:	72fb      	strb	r3, [r7, #11]


  if(result == FR_OK){
 8000644:	7afb      	ldrb	r3, [r7, #11]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d121      	bne.n	8000690 <StartDefaultTask+0x60>


	  BaseType_t ret;
	  ret = xTaskCreate( LedBlueTask, "Led Blue task", MAINAPP_STACK_SIZE, NULL, 1, &LedBlueTaskHandle );
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <StartDefaultTask+0x74>)
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2301      	movs	r3, #1
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065a:	4913      	ldr	r1, [pc, #76]	; (80006a8 <StartDefaultTask+0x78>)
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <StartDefaultTask+0x7c>)
 800065e:	f00d fd5c 	bl	800e11a <xTaskCreate>
 8000662:	60f8      	str	r0, [r7, #12]
	  if ( ret != pdPASS ) for ( ;; ) {
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d000      	beq.n	800066c <StartDefaultTask+0x3c>
 800066a:	e7fe      	b.n	800066a <StartDefaultTask+0x3a>
	  }

	  // Create RTC synchronization task
	  ret = xTaskCreate( LedGreenTask, "Led Green task", SYNCRTC_STACK_SIZE, NULL, 1, &LedGreenTaskHandle );
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <StartDefaultTask+0x80>)
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2301      	movs	r3, #1
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	490e      	ldr	r1, [pc, #56]	; (80006b4 <StartDefaultTask+0x84>)
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <StartDefaultTask+0x88>)
 800067c:	f00d fd4d 	bl	800e11a <xTaskCreate>
 8000680:	60f8      	str	r0, [r7, #12]
	  if ( ret != pdPASS ) for ( ;; ) {
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d000      	beq.n	800068a <StartDefaultTask+0x5a>
 8000688:	e7fe      	b.n	8000688 <StartDefaultTask+0x58>
	  }

	  vTaskDelete( NULL );
 800068a:	2000      	movs	r0, #0
 800068c:	f00d feb0 	bl	800e3f0 <vTaskDelete>
  }

  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f001 ff4d 	bl	8002534 <HAL_GPIO_TogglePin>
    osDelay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f00c fa54 	bl	800cb48 <osDelay>
    HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
 80006a0:	e7f6      	b.n	8000690 <StartDefaultTask+0x60>
 80006a2:	bf00      	nop
 80006a4:	20000098 	.word	0x20000098
 80006a8:	08011860 	.word	0x08011860
 80006ac:	080007c9 	.word	0x080007c9
 80006b0:	20000094 	.word	0x20000094
 80006b4:	08011870 	.word	0x08011870
 80006b8:	080007e9 	.word	0x080007e9

080006bc <SD_FileOperationsTest>:
  * @retval 0 == all fine
  * 		1+ == errors
  */

uint8_t SD_FileOperationsTest()
{
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b0b8      	sub	sp, #224	; 0xe0
 80006c0:	af00      	add	r7, sp, #0
  FRESULT res;
  uint32_t byteswritten, bytesread;                     // File write/read counts
  uint8_t wtext[] = "STM32L496 AW: This is AW working with FatFs uSD + DMA + FreeRTOS + USB"; // File write buffer
 80006c2:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <SD_FileOperationsTest+0xf8>)
 80006c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006c8:	4611      	mov	r1, r2
 80006ca:	2247      	movs	r2, #71	; 0x47
 80006cc:	4618      	mov	r0, r3
 80006ce:	f010 ffcf 	bl	8011670 <memcpy>
  uint8_t rtext[100];                                   // File read buffer
  char fileNameIntern[40] = "STM32_AW_extendendFilename.TXT";
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <SD_FileOperationsTest+0xfc>)
 80006d4:	463c      	mov	r4, r7
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e0:	c407      	stmia	r4!, {r0, r1, r2}
 80006e2:	8023      	strh	r3, [r4, #0]
 80006e4:	3402      	adds	r4, #2
 80006e6:	0c1b      	lsrs	r3, r3, #16
 80006e8:	7023      	strb	r3, [r4, #0]
 80006ea:	f107 031f 	add.w	r3, r7, #31
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	721a      	strb	r2, [r3, #8]


  // Register the file system object to the FatFs module /
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) == FR_OK)
 80006f6:	2200      	movs	r2, #0
 80006f8:	4930      	ldr	r1, [pc, #192]	; (80007bc <SD_FileOperationsTest+0x100>)
 80006fa:	4831      	ldr	r0, [pc, #196]	; (80007c0 <SD_FileOperationsTest+0x104>)
 80006fc:	f00b faf0 	bl	800bce0 <f_mount>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d150      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
  {
    // Create and Open a new text file object with write access
    //if(f_open(&SDFile, "STM32_AW.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
    if(f_open(&SDFile, fileNameIntern, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	220a      	movs	r2, #10
 800070a:	4619      	mov	r1, r3
 800070c:	482d      	ldr	r0, [pc, #180]	; (80007c4 <SD_FileOperationsTest+0x108>)
 800070e:	f00b fb4b 	bl	800bda8 <f_open>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d147      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
    {
      // Write data to the text file
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8000718:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800071c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000720:	2247      	movs	r2, #71	; 0x47
 8000722:	4828      	ldr	r0, [pc, #160]	; (80007c4 <SD_FileOperationsTest+0x108>)
 8000724:	f00b fe73 	bl	800c40e <f_write>
 8000728:	4603      	mov	r3, r0
 800072a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

      if((byteswritten > 0) && (res == FR_OK))
 800072e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000732:	2b00      	cmp	r3, #0
 8000734:	d038      	beq.n	80007a8 <SD_FileOperationsTest+0xec>
 8000736:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800073a:	2b00      	cmp	r3, #0
 800073c:	d134      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
      {
        // Close the open text file
        f_close(&SDFile);
 800073e:	4821      	ldr	r0, [pc, #132]	; (80007c4 <SD_FileOperationsTest+0x108>)
 8000740:	f00c f892 	bl	800c868 <f_close>

        // Open the text file object with read access
        if(f_open(&SDFile, fileNameIntern, FA_READ) == FR_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	2201      	movs	r2, #1
 8000748:	4619      	mov	r1, r3
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <SD_FileOperationsTest+0x108>)
 800074c:	f00b fb2c 	bl	800bda8 <f_open>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d128      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
        {
          // Read data from the text file
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000756:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800075a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800075e:	2264      	movs	r2, #100	; 0x64
 8000760:	4818      	ldr	r0, [pc, #96]	; (80007c4 <SD_FileOperationsTest+0x108>)
 8000762:	f00b fce6 	bl	800c132 <f_read>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

          if((bytesread > 0) && (res == FR_OK))
 800076c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000770:	2b00      	cmp	r3, #0
 8000772:	d019      	beq.n	80007a8 <SD_FileOperationsTest+0xec>
 8000774:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8000778:	2b00      	cmp	r3, #0
 800077a:	d115      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
          {
            // Close the open text file
           res = f_close(&SDFile);
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <SD_FileOperationsTest+0x108>)
 800077e:	f00c f873 	bl	800c868 <f_close>
 8000782:	4603      	mov	r3, r0
 8000784:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
           if(res == FR_OK)
 8000788:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10b      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
        	 // res = f_unlink( fileNameIntern);	// deleting File

            // Compare read data with the expected data
            if((bytesread == byteswritten)  && (res == FR_OK) )
 8000790:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000798:	429a      	cmp	r2, r3
 800079a:	d105      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
 800079c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <SD_FileOperationsTest+0xec>
            {
              // Success of the demo: no error occurrence
              return FR_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e001      	b.n	80007ac <SD_FileOperationsTest+0xf0>
      }
    }
  }
  // Error
  // FATFS_UnLinkDriver(USERPath);
  return res;
 80007a8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	37e0      	adds	r7, #224	; 0xe0
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bdb0      	pop	{r4, r5, r7, pc}
 80007b4:	08011880 	.word	0x08011880
 80007b8:	080118c8 	.word	0x080118c8
 80007bc:	20000b08 	.word	0x20000b08
 80007c0:	20000b0c 	.word	0x20000b0c
 80007c4:	20000d40 	.word	0x20000d40

080007c8 <LedBlueTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedBlueTask( void * pvParameters )
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
 80007d0:	2101      	movs	r1, #1
 80007d2:	4804      	ldr	r0, [pc, #16]	; (80007e4 <LedBlueTask+0x1c>)
 80007d4:	f001 feae 	bl	8002534 <HAL_GPIO_TogglePin>

	  osDelay(300);
 80007d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007dc:	f00c f9b4 	bl	800cb48 <osDelay>
	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
 80007e0:	e7f6      	b.n	80007d0 <LedBlueTask+0x8>
 80007e2:	bf00      	nop
 80007e4:	48000400 	.word	0x48000400

080007e8 <LedGreenTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedGreenTask( void * pvParameters )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {

	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f001 fe9d 	bl	8002534 <HAL_GPIO_TogglePin>
	  osDelay(100);
 80007fa:	2064      	movs	r0, #100	; 0x64
 80007fc:	f00c f9a4 	bl	800cb48 <osDelay>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
 8000800:	e7f6      	b.n	80007f0 <LedGreenTask+0x8>
	...

08000804 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081a:	4b67      	ldr	r3, [pc, #412]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a66      	ldr	r2, [pc, #408]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b64      	ldr	r3, [pc, #400]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b61      	ldr	r3, [pc, #388]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a60      	ldr	r2, [pc, #384]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b5e      	ldr	r3, [pc, #376]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b5b      	ldr	r3, [pc, #364]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a5a      	ldr	r2, [pc, #360]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b58      	ldr	r3, [pc, #352]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a54      	ldr	r2, [pc, #336]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b52      	ldr	r3, [pc, #328]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b4f      	ldr	r3, [pc, #316]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a4e      	ldr	r2, [pc, #312]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b4c      	ldr	r3, [pc, #304]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a48      	ldr	r2, [pc, #288]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b46      	ldr	r3, [pc, #280]	; (80009b8 <MX_GPIO_Init+0x1b4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	21c0      	movs	r1, #192	; 0xc0
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f001 fe0f 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2101      	movs	r1, #1
 80008ba:	4840      	ldr	r0, [pc, #256]	; (80009bc <MX_GPIO_Init+0x1b8>)
 80008bc:	f001 fe0a 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c6:	2303      	movs	r3, #3
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	483a      	ldr	r0, [pc, #232]	; (80009c0 <MX_GPIO_Init+0x1bc>)
 80008d6:	f001 fb59 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80008da:	f24e 03cf 	movw	r3, #57551	; 0xe0cf
 80008de:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4835      	ldr	r0, [pc, #212]	; (80009c4 <MX_GPIO_Init+0x1c0>)
 80008f0:	f001 fb4c 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80008f4:	230b      	movs	r3, #11
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4830      	ldr	r0, [pc, #192]	; (80009c8 <MX_GPIO_Init+0x1c4>)
 8000908:	f001 fb40 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA5 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800090c:	f248 7337 	movw	r3, #34615	; 0x8737
 8000910:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f001 fb32 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 8000928:	23c0      	movs	r3, #192	; 0xc0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f001 fb23 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4817      	ldr	r0, [pc, #92]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800095e:	f001 fb15 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000962:	f64f 7336 	movw	r3, #65334	; 0xff36
 8000966:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000978:	f001 fb08 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD3 PD4 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800097c:	f64f 73d9 	movw	r3, #65497	; 0xffd9
 8000980:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	480e      	ldr	r0, [pc, #56]	; (80009cc <MX_GPIO_Init+0x1c8>)
 8000992:	f001 fafb 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000996:	2302      	movs	r3, #2
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <MX_GPIO_Init+0x1c8>)
 80009aa:	f001 faef 	bl	8001f8c <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3730      	adds	r7, #48	; 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400
 80009c0:	48001000 	.word	0x48001000
 80009c4:	48000800 	.word	0x48000800
 80009c8:	48001c00 	.word	0x48001c00
 80009cc:	48000c00 	.word	0x48000c00

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fced 	bl	80013b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f817 	bl	8000a0a <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SEGGER_SYSVIEW_Conf();
 80009dc:	f010 fc2a 	bl	8011234 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f7ff ff10 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e4:	f7ff fdd0 	bl	8000588 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80009e8:	f000 f884 	bl	8000af4 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 80009ec:	f000 fa5e 	bl	8000eac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009f0:	f000 fa8c 	bl	8000f0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80009f4:	f000 faba 	bl	8000f6c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80009f8:	f009 f92e 	bl	8009c58 <MX_FATFS_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009fc:	f000 fc08 	bl	8001210 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a00:	f7ff fdfa 	bl	80005f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a04:	f00c f831 	bl	800ca6a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x38>

08000a0a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b096      	sub	sp, #88	; 0x58
 8000a0e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2244      	movs	r2, #68	; 0x44
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f010 fe37 	bl	801168c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a30:	f001 ff0a 	bl	8002848 <HAL_PWREx_ControlVoltageScaling>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a3a:	f000 f84b 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a3e:	2322      	movs	r3, #34	; 0x22
 8000a40:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2340      	movs	r3, #64	; 0x40
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a50:	2302      	movs	r3, #2
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 ff5b 	bl	800292c <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a7c:	f000 f82a 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2303      	movs	r3, #3
 8000a86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	2104      	movs	r1, #4
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fc99 	bl	80033d0 <HAL_RCC_ClockConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa4:	f000 f816 	bl	8000ad4 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	3758      	adds	r7, #88	; 0x58
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ac2:	f000 fc8f 	bl	80013e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40012c00 	.word	0x40012c00

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>

08000ade <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_SDMMC1_SD_Init+0x38>)
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <MX_SDMMC1_SD_Init+0x3c>)
 8000afc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_SDMMC1_SD_Init+0x38>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_SDMMC1_SD_Init+0x38>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_SDMMC1_SD_Init+0x38>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_SDMMC1_SD_Init+0x38>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <MX_SDMMC1_SD_Init+0x38>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <MX_SDMMC1_SD_Init+0x38>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	20000350 	.word	0x20000350
 8000b30:	40012800 	.word	0x40012800

08000b34 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ae      	sub	sp, #184	; 0xb8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b4c:	f107 0318 	add.w	r3, r7, #24
 8000b50:	228c      	movs	r2, #140	; 0x8c
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f010 fd99 	bl	801168c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a50      	ldr	r2, [pc, #320]	; (8000ca0 <HAL_SD_MspInit+0x16c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	f040 8098 	bne.w	8000c96 <HAL_SD_MspInit+0x162>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000b66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 ff30 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000b82:	f7ff ffa7 	bl	8000ad4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b86:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a46      	ldr	r2, [pc, #280]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b44      	ldr	r3, [pc, #272]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b41      	ldr	r3, [pc, #260]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a40      	ldr	r2, [pc, #256]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a3a      	ldr	r2, [pc, #232]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <HAL_SD_MspInit+0x170>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be8:	230c      	movs	r3, #12
 8000bea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	482c      	ldr	r0, [pc, #176]	; (8000ca8 <HAL_SD_MspInit+0x174>)
 8000bf6:	f001 f9c9 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c12:	230c      	movs	r3, #12
 8000c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4823      	ldr	r0, [pc, #140]	; (8000cac <HAL_SD_MspInit+0x178>)
 8000c20:	f001 f9b4 	bl	8001f8c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <HAL_SD_MspInit+0x180>)
 8000c28:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c50:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c60:	f000 fd16 	bl	8001690 <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8000c6a:	f7ff ff33 	bl	8000ad4 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_SD_MspInit+0x17c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2105      	movs	r1, #5
 8000c8a:	2031      	movs	r0, #49	; 0x31
 8000c8c:	f000 fcbc 	bl	8001608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000c90:	2031      	movs	r0, #49	; 0x31
 8000c92:	f000 fce5 	bl	8001660 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000c96:	bf00      	nop
 8000c98:	37b8      	adds	r7, #184	; 0xb8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012800 	.word	0x40012800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000800 	.word	0x48000800
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	200003d4 	.word	0x200003d4
 8000cb4:	40020444 	.word	0x40020444

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	f06f 0001 	mvn.w	r0, #1
 8000cf6:	f000 fc87 	bl	8001608 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	; 0x30
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_InitTick+0xc8>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <HAL_InitTick+0xc8>)
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	6613      	str	r3, [r2, #96]	; 0x60
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_InitTick+0xc8>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2e:	f107 020c 	add.w	r2, r7, #12
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fdad 	bl	8003898 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d3e:	f002 fd95 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8000d42:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_InitTick+0xcc>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_InitTick+0xd4>)
 8000d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d7a:	f006 f847 	bl	8006e0c <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d11b      	bne.n	8000dc4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <HAL_InitTick+0xd0>)
 8000d8e:	f006 f951 	bl	8007034 <HAL_TIM_Base_Start_IT>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d111      	bne.n	8000dc4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000da0:	2019      	movs	r0, #25
 8000da2:	f000 fc5d 	bl	8001660 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d808      	bhi.n	8000dbe <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	2019      	movs	r0, #25
 8000db2:	f000 fc29 	bl	8001608 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_InitTick+0xd8>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e002      	b.n	8000dc4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	2000041c 	.word	0x2000041c
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	20000004 	.word	0x20000004

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e16:	f006 f9c1 	bl	800719c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000041c 	.word	0x2000041c

08000e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USART1_IRQHandler+0x10>)
 8000e2a:	f006 fc5f 	bl	80076ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000468 	.word	0x20000468

08000e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <USART2_IRQHandler+0x10>)
 8000e3e:	f006 fc55 	bl	80076ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200004ec 	.word	0x200004ec

08000e4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <USART3_IRQHandler+0x10>)
 8000e52:	f006 fc4b 	bl	80076ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000570 	.word	0x20000570

08000e60 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */
  //__HAL_SD_GET_FLAG(&hsd1, SDMMC_FLAG_RXFIFOHF);
  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <SDMMC1_IRQHandler+0x10>)
 8000e66:	f004 ff01 	bl	8005c6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000350 	.word	0x20000350

08000e74 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <DMA2_Channel4_IRQHandler+0x10>)
 8000e7a:	f000 ffa8 	bl	8001dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200003d4 	.word	0x200003d4

08000e88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MX_USART1_UART_Init+0x5c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART1_UART_Init+0x58>)
 8000ef0:	f006 fb54 	bl	800759c <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000efa:	f7ff fdeb 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000468 	.word	0x20000468
 8000f08:	40013800 	.word	0x40013800

08000f0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <MX_USART2_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f50:	f006 fb24 	bl	800759c <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f7ff fdbb 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200004ec 	.word	0x200004ec
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f72:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <MX_USART3_UART_Init+0x5c>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_USART3_UART_Init+0x58>)
 8000fb0:	f006 faf4 	bl	800759c <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fba:	f7ff fd8b 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000570 	.word	0x20000570
 8000fc8:	40004800 	.word	0x40004800

08000fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b0b2      	sub	sp, #200	; 0xc8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe8:	228c      	movs	r2, #140	; 0x8c
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f010 fb4d 	bl	801168c <memset>
  if(uartHandle->Instance==USART1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a7f      	ldr	r2, [pc, #508]	; (80011f4 <HAL_UART_MspInit+0x228>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d143      	bne.n	8001084 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001000:	2300      	movs	r3, #0
 8001002:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fce7 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001014:	f7ff fd5e 	bl	8000ad4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001018:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 800101a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101c:	4a76      	ldr	r2, [pc, #472]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6613      	str	r3, [r2, #96]	; 0x60
 8001024:	4b74      	ldr	r3, [pc, #464]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 8001026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b71      	ldr	r3, [pc, #452]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a70      	ldr	r2, [pc, #448]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b6e      	ldr	r3, [pc, #440]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001048:	23c0      	movs	r3, #192	; 0xc0
 800104a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001060:	2307      	movs	r3, #7
 8001062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800106a:	4619      	mov	r1, r3
 800106c:	4863      	ldr	r0, [pc, #396]	; (80011fc <HAL_UART_MspInit+0x230>)
 800106e:	f000 ff8d 	bl	8001f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	2025      	movs	r0, #37	; 0x25
 8001078:	f000 fac6 	bl	8001608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800107c:	2025      	movs	r0, #37	; 0x25
 800107e:	f000 faef 	bl	8001660 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001082:	e0b2      	b.n	80011ea <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a5d      	ldr	r2, [pc, #372]	; (8001200 <HAL_UART_MspInit+0x234>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d165      	bne.n	800115a <HAL_UART_MspInit+0x18e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800108e:	2302      	movs	r3, #2
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001092:	2300      	movs	r3, #0
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fc9e 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_UART_MspInit+0xde>
      Error_Handler();
 80010a6:	f7ff fd15 	bl	8000ad4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	6593      	str	r3, [r2, #88]	; 0x58
 80010b6:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a4c      	ldr	r2, [pc, #304]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010f2:	2308      	movs	r3, #8
 80010f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110a:	2307      	movs	r3, #7
 800110c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f000 ff37 	bl	8001f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800111e:	2320      	movs	r3, #32
 8001120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001136:	2307      	movs	r3, #7
 8001138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001140:	4619      	mov	r1, r3
 8001142:	4830      	ldr	r0, [pc, #192]	; (8001204 <HAL_UART_MspInit+0x238>)
 8001144:	f000 ff22 	bl	8001f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2105      	movs	r1, #5
 800114c:	2026      	movs	r0, #38	; 0x26
 800114e:	f000 fa5b 	bl	8001608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001152:	2026      	movs	r0, #38	; 0x26
 8001154:	f000 fa84 	bl	8001660 <HAL_NVIC_EnableIRQ>
}
 8001158:	e047      	b.n	80011ea <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <HAL_UART_MspInit+0x23c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d142      	bne.n	80011ea <HAL_UART_MspInit+0x21e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001164:	2304      	movs	r3, #4
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fc33 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 800117c:	f7ff fcaa 	bl	8000ad4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 8001186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_UART_MspInit+0x22c>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011b0:	2330      	movs	r3, #48	; 0x30
 80011b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c8:	2307      	movs	r3, #7
 80011ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80011d2:	4619      	mov	r1, r3
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <HAL_UART_MspInit+0x240>)
 80011d6:	f000 fed9 	bl	8001f8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2105      	movs	r1, #5
 80011de:	2027      	movs	r0, #39	; 0x27
 80011e0:	f000 fa12 	bl	8001608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011e4:	2027      	movs	r0, #39	; 0x27
 80011e6:	f000 fa3b 	bl	8001660 <HAL_NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	37c8      	adds	r7, #200	; 0xc8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48000400 	.word	0x48000400
 8001200:	40004400 	.word	0x40004400
 8001204:	48000c00 	.word	0x48000c00
 8001208:	40004800 	.word	0x40004800
 800120c:	48000800 	.word	0x48000800

08001210 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001216:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800121a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800121e:	2206      	movs	r2, #6
 8001220:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001224:	2202      	movs	r2, #2
 8001226:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122a:	2202      	movs	r2, #2
 800122c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001254:	f001 f996 	bl	8002584 <HAL_PCD_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800125e:	f7ff fc39 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200005f4 	.word	0x200005f4

0800126c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0ae      	sub	sp, #184	; 0xb8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0318 	add.w	r3, r7, #24
 8001288:	228c      	movs	r2, #140	; 0x8c
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f010 f9fd 	bl	801168c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129a:	d15b      	bne.n	8001354 <HAL_PCD_MspInit+0xe8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800129c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fb95 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012b8:	f7ff fc0c 	bl	8000ad4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_PCD_MspInit+0xf0>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_PCD_MspInit+0xf0>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c8:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_PCD_MspInit+0xf0>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012ee:	230a      	movs	r3, #10
 80012f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fe45 	bl	8001f8c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_PCD_MspInit+0xf0>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <HAL_PCD_MspInit+0xf0>)
 8001308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_PCD_MspInit+0xf0>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_PCD_MspInit+0xf0>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d114      	bne.n	8001350 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_PCD_MspInit+0xf0>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <HAL_PCD_MspInit+0xf0>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6593      	str	r3, [r2, #88]	; 0x58
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_PCD_MspInit+0xf0>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800133e:	f001 fae5 	bl	800290c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_PCD_MspInit+0xf0>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <HAL_PCD_MspInit+0xf0>)
 8001348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800134e:	e001      	b.n	8001354 <HAL_PCD_MspInit+0xe8>
      HAL_PWREx_EnableVddUSB();
 8001350:	f001 fadc 	bl	800290c <HAL_PWREx_EnableVddUSB>
}
 8001354:	bf00      	nop
 8001356:	37b8      	adds	r7, #184	; 0xb8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000

08001360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001364:	f7ff fd90 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <LoopForever+0x6>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <LoopForever+0xe>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <LoopForever+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138e:	f010 f939 	bl	8011604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001392:	f7ff fb1d 	bl	80009d0 <main>

08001396 <LoopForever>:

LoopForever:
    b LoopForever
 8001396:	e7fe      	b.n	8001396 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001398:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013a4:	08011df0 	.word	0x08011df0
  ldr r2, =_sbss
 80013a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013ac:	200090ec 	.word	0x200090ec

080013b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC1_2_IRQHandler>

080013b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f903 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c2:	200f      	movs	r0, #15
 80013c4:	f7ff fca0 	bl	8000d08 <HAL_InitTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	e001      	b.n	80013d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d4:	f7ff fc70 	bl	8000cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d8:	79fb      	ldrb	r3, [r7, #7]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	20000b00 	.word	0x20000b00

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000b00 	.word	0x20000b00

08001424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800142c:	f7ff ffee 	bl	800140c <HAL_GetTick>
 8001430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143c:	d005      	beq.n	800144a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_Delay+0x44>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144a:	bf00      	nop
 800144c:	f7ff ffde 	bl	800140c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	429a      	cmp	r2, r3
 800145a:	d8f7      	bhi.n	800144c <HAL_Delay+0x28>
  {
  }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <__NVIC_EnableIRQ+0x38>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b07      	cmp	r3, #7
 80015d4:	d00f      	beq.n	80015f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b06      	cmp	r3, #6
 80015da:	d00c      	beq.n	80015f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d009      	beq.n	80015f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d006      	beq.n	80015f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d003      	beq.n	80015f6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80015ee:	21a6      	movs	r1, #166	; 0xa6
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80015f2:	f7ff fa74 	bl	8000ade <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff38 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	080118f0 	.word	0x080118f0

08001608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d903      	bls.n	8001628 <HAL_NVIC_SetPriority+0x20>
 8001620:	21be      	movs	r1, #190	; 0xbe
 8001622:	480e      	ldr	r0, [pc, #56]	; (800165c <HAL_NVIC_SetPriority+0x54>)
 8001624:	f7ff fa5b 	bl	8000ade <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	d903      	bls.n	8001636 <HAL_NVIC_SetPriority+0x2e>
 800162e:	21bf      	movs	r1, #191	; 0xbf
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <HAL_NVIC_SetPriority+0x54>)
 8001632:	f7ff fa54 	bl	8000ade <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001636:	f7ff ff3d 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 800163a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	6978      	ldr	r0, [r7, #20]
 8001642:	f7ff ff8d 	bl	8001560 <NVIC_EncodePriority>
 8001646:	4602      	mov	r2, r0
 8001648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff5c 	bl	800150c <__NVIC_SetPriority>
}
 8001654:	bf00      	nop
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	080118f0 	.word	0x080118f0

08001660 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	da03      	bge.n	800167a <HAL_NVIC_EnableIRQ+0x1a>
 8001672:	21d2      	movs	r1, #210	; 0xd2
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_NVIC_EnableIRQ+0x2c>)
 8001676:	f7ff fa32 	bl	8000ade <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff26 	bl	80014d0 <__NVIC_EnableIRQ>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	080118f0 	.word	0x080118f0

08001690 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e19d      	b.n	80019de <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a79      	ldr	r2, [pc, #484]	; (800188c <HAL_DMA_Init+0x1fc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d044      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a77      	ldr	r2, [pc, #476]	; (8001890 <HAL_DMA_Init+0x200>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d03f      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a76      	ldr	r2, [pc, #472]	; (8001894 <HAL_DMA_Init+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d03a      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a74      	ldr	r2, [pc, #464]	; (8001898 <HAL_DMA_Init+0x208>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d035      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a73      	ldr	r2, [pc, #460]	; (800189c <HAL_DMA_Init+0x20c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d030      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a71      	ldr	r2, [pc, #452]	; (80018a0 <HAL_DMA_Init+0x210>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d02b      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a70      	ldr	r2, [pc, #448]	; (80018a4 <HAL_DMA_Init+0x214>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d026      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_DMA_Init+0x218>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d021      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6d      	ldr	r2, [pc, #436]	; (80018ac <HAL_DMA_Init+0x21c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d01c      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6b      	ldr	r2, [pc, #428]	; (80018b0 <HAL_DMA_Init+0x220>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d017      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <HAL_DMA_Init+0x224>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d012      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a68      	ldr	r2, [pc, #416]	; (80018b8 <HAL_DMA_Init+0x228>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a67      	ldr	r2, [pc, #412]	; (80018bc <HAL_DMA_Init+0x22c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d008      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a65      	ldr	r2, [pc, #404]	; (80018c0 <HAL_DMA_Init+0x230>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d003      	beq.n	8001736 <HAL_DMA_Init+0xa6>
 800172e:	21a5      	movs	r1, #165	; 0xa5
 8001730:	4864      	ldr	r0, [pc, #400]	; (80018c4 <HAL_DMA_Init+0x234>)
 8001732:	f7ff f9d4 	bl	8000ade <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00c      	beq.n	8001758 <HAL_DMA_Init+0xc8>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b10      	cmp	r3, #16
 8001744:	d008      	beq.n	8001758 <HAL_DMA_Init+0xc8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800174e:	d003      	beq.n	8001758 <HAL_DMA_Init+0xc8>
 8001750:	21a6      	movs	r1, #166	; 0xa6
 8001752:	485c      	ldr	r0, [pc, #368]	; (80018c4 <HAL_DMA_Init+0x234>)
 8001754:	f7ff f9c3 	bl	8000ade <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b40      	cmp	r3, #64	; 0x40
 800175e:	d007      	beq.n	8001770 <HAL_DMA_Init+0xe0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_DMA_Init+0xe0>
 8001768:	21a7      	movs	r1, #167	; 0xa7
 800176a:	4856      	ldr	r0, [pc, #344]	; (80018c4 <HAL_DMA_Init+0x234>)
 800176c:	f7ff f9b7 	bl	8000ade <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b80      	cmp	r3, #128	; 0x80
 8001776:	d007      	beq.n	8001788 <HAL_DMA_Init+0xf8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_DMA_Init+0xf8>
 8001780:	21a8      	movs	r1, #168	; 0xa8
 8001782:	4850      	ldr	r0, [pc, #320]	; (80018c4 <HAL_DMA_Init+0x234>)
 8001784:	f7ff f9ab 	bl	8000ade <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <HAL_DMA_Init+0x11c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001798:	d008      	beq.n	80017ac <HAL_DMA_Init+0x11c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_Init+0x11c>
 80017a4:	21a9      	movs	r1, #169	; 0xa9
 80017a6:	4847      	ldr	r0, [pc, #284]	; (80018c4 <HAL_DMA_Init+0x234>)
 80017a8:	f7ff f999 	bl	8000ade <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <HAL_DMA_Init+0x140>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017bc:	d008      	beq.n	80017d0 <HAL_DMA_Init+0x140>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017c6:	d003      	beq.n	80017d0 <HAL_DMA_Init+0x140>
 80017c8:	21aa      	movs	r1, #170	; 0xaa
 80017ca:	483e      	ldr	r0, [pc, #248]	; (80018c4 <HAL_DMA_Init+0x234>)
 80017cc:	f7ff f987 	bl	8000ade <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_DMA_Init+0x158>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d003      	beq.n	80017e8 <HAL_DMA_Init+0x158>
 80017e0:	21ab      	movs	r1, #171	; 0xab
 80017e2:	4838      	ldr	r0, [pc, #224]	; (80018c4 <HAL_DMA_Init+0x234>)
 80017e4:	f7ff f97b 	bl	8000ade <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d012      	beq.n	8001816 <HAL_DMA_Init+0x186>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f8:	d00d      	beq.n	8001816 <HAL_DMA_Init+0x186>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001802:	d008      	beq.n	8001816 <HAL_DMA_Init+0x186>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800180c:	d003      	beq.n	8001816 <HAL_DMA_Init+0x186>
 800180e:	21ac      	movs	r1, #172	; 0xac
 8001810:	482c      	ldr	r0, [pc, #176]	; (80018c4 <HAL_DMA_Init+0x234>)
 8001812:	f7ff f964 	bl	8000ade <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01f      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d01b      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d017      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d013      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b04      	cmp	r3, #4
 800183c:	d00f      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d00b      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b06      	cmp	r3, #6
 800184c:	d007      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b07      	cmp	r3, #7
 8001854:	d003      	beq.n	800185e <HAL_DMA_Init+0x1ce>
 8001856:	21ae      	movs	r1, #174	; 0xae
 8001858:	481a      	ldr	r0, [pc, #104]	; (80018c4 <HAL_DMA_Init+0x234>)
 800185a:	f7ff f940 	bl	8000ade <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_DMA_Init+0x238>)
 8001866:	429a      	cmp	r2, r3
 8001868:	d836      	bhi.n	80018d8 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_DMA_Init+0x23c>)
 8001872:	4413      	add	r3, r2
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_DMA_Init+0x240>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	009a      	lsls	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_DMA_Init+0x244>)
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
 8001888:	e035      	b.n	80018f6 <HAL_DMA_Init+0x266>
 800188a:	bf00      	nop
 800188c:	40020008 	.word	0x40020008
 8001890:	4002001c 	.word	0x4002001c
 8001894:	40020030 	.word	0x40020030
 8001898:	40020044 	.word	0x40020044
 800189c:	40020058 	.word	0x40020058
 80018a0:	4002006c 	.word	0x4002006c
 80018a4:	40020080 	.word	0x40020080
 80018a8:	40020408 	.word	0x40020408
 80018ac:	4002041c 	.word	0x4002041c
 80018b0:	40020430 	.word	0x40020430
 80018b4:	40020444 	.word	0x40020444
 80018b8:	40020458 	.word	0x40020458
 80018bc:	4002046c 	.word	0x4002046c
 80018c0:	40020480 	.word	0x40020480
 80018c4:	0801192c 	.word	0x0801192c
 80018c8:	40020407 	.word	0x40020407
 80018cc:	bffdfff8 	.word	0xbffdfff8
 80018d0:	cccccccd 	.word	0xcccccccd
 80018d4:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_DMA_Init+0x358>)
 80018e0:	4413      	add	r3, r2
 80018e2:	4a42      	ldr	r2, [pc, #264]	; (80019ec <HAL_DMA_Init+0x35c>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	009a      	lsls	r2, r3, #2
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <HAL_DMA_Init+0x360>)
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2202      	movs	r2, #2
 80018fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800190c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001910:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800191a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001950:	d039      	beq.n	80019c6 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_DMA_Init+0x364>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d11a      	bne.n	8001992 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_DMA_Init+0x368>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f003 031c 	and.w	r3, r3, #28
 8001968:	210f      	movs	r1, #15
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	4921      	ldr	r1, [pc, #132]	; (80019f8 <HAL_DMA_Init+0x368>)
 8001972:	4013      	ands	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_DMA_Init+0x368>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f003 031c 	and.w	r3, r3, #28
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	491b      	ldr	r1, [pc, #108]	; (80019f8 <HAL_DMA_Init+0x368>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e019      	b.n	80019c6 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_DMA_Init+0x36c>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f003 031c 	and.w	r3, r3, #28
 800199e:	210f      	movs	r1, #15
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4915      	ldr	r1, [pc, #84]	; (80019fc <HAL_DMA_Init+0x36c>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_DMA_Init+0x36c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f003 031c 	and.w	r3, r3, #28
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_DMA_Init+0x36c>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	bffdfbf8 	.word	0xbffdfbf8
 80019ec:	cccccccd 	.word	0xcccccccd
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020000 	.word	0x40020000
 80019f8:	400200a8 	.word	0x400200a8
 80019fc:	400204a8 	.word	0x400204a8

08001a00 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e0bd      	b.n	8001b8e <HAL_DMA_DeInit+0x18e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_DMA_DeInit+0x198>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d045      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a5e      	ldr	r2, [pc, #376]	; (8001b9c <HAL_DMA_DeInit+0x19c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d040      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a5d      	ldr	r2, [pc, #372]	; (8001ba0 <HAL_DMA_DeInit+0x1a0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d03b      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <HAL_DMA_DeInit+0x1a4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d036      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ba8 <HAL_DMA_DeInit+0x1a8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d031      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_DMA_DeInit+0x1ac>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d02c      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a57      	ldr	r2, [pc, #348]	; (8001bb0 <HAL_DMA_DeInit+0x1b0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d027      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_DMA_DeInit+0x1b4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d022      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_DMA_DeInit+0x1b8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d01d      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <HAL_DMA_DeInit+0x1bc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d018      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a51      	ldr	r2, [pc, #324]	; (8001bc0 <HAL_DMA_DeInit+0x1c0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d013      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_DMA_DeInit+0x1c4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00e      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_DMA_DeInit+0x1c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d009      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a4c      	ldr	r2, [pc, #304]	; (8001bcc <HAL_DMA_DeInit+0x1cc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d004      	beq.n	8001aa8 <HAL_DMA_DeInit+0xa8>
 8001a9e:	f240 1131 	movw	r1, #305	; 0x131
 8001aa2:	484b      	ldr	r0, [pc, #300]	; (8001bd0 <HAL_DMA_DeInit+0x1d0>)
 8001aa4:	f7ff f81b 	bl	8000ade <assert_failed>

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <HAL_DMA_DeInit+0x1d4>)
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d80f      	bhi.n	8001ae4 <HAL_DMA_DeInit+0xe4>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <HAL_DMA_DeInit+0x1d8>)
 8001acc:	4413      	add	r3, r2
 8001ace:	4a43      	ldr	r2, [pc, #268]	; (8001bdc <HAL_DMA_DeInit+0x1dc>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	009a      	lsls	r2, r3, #2
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a40      	ldr	r2, [pc, #256]	; (8001be0 <HAL_DMA_DeInit+0x1e0>)
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae2:	e00e      	b.n	8001b02 <HAL_DMA_DeInit+0x102>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b3e      	ldr	r3, [pc, #248]	; (8001be4 <HAL_DMA_DeInit+0x1e4>)
 8001aec:	4413      	add	r3, r2
 8001aee:	4a3b      	ldr	r2, [pc, #236]	; (8001bdc <HAL_DMA_DeInit+0x1dc>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	009a      	lsls	r2, r3, #2
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <HAL_DMA_DeInit+0x1e8>)
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f003 021c 	and.w	r2, r3, #28
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <HAL_DMA_DeInit+0x1e0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10d      	bne.n	8001b44 <HAL_DMA_DeInit+0x144>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_DMA_DeInit+0x1ec>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f003 031c 	and.w	r3, r3, #28
 8001b34:	210f      	movs	r1, #15
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	492b      	ldr	r1, [pc, #172]	; (8001bec <HAL_DMA_DeInit+0x1ec>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
 8001b42:	e00c      	b.n	8001b5e <HAL_DMA_DeInit+0x15e>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_DMA_DeInit+0x1f0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	f003 031c 	and.w	r3, r3, #28
 8001b50:	210f      	movs	r1, #15
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	4925      	ldr	r1, [pc, #148]	; (8001bf0 <HAL_DMA_DeInit+0x1f0>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40020008 	.word	0x40020008
 8001b9c:	4002001c 	.word	0x4002001c
 8001ba0:	40020030 	.word	0x40020030
 8001ba4:	40020044 	.word	0x40020044
 8001ba8:	40020058 	.word	0x40020058
 8001bac:	4002006c 	.word	0x4002006c
 8001bb0:	40020080 	.word	0x40020080
 8001bb4:	40020408 	.word	0x40020408
 8001bb8:	4002041c 	.word	0x4002041c
 8001bbc:	40020430 	.word	0x40020430
 8001bc0:	40020444 	.word	0x40020444
 8001bc4:	40020458 	.word	0x40020458
 8001bc8:	4002046c 	.word	0x4002046c
 8001bcc:	40020480 	.word	0x40020480
 8001bd0:	0801192c 	.word	0x0801192c
 8001bd4:	40020407 	.word	0x40020407
 8001bd8:	bffdfff8 	.word	0xbffdfff8
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	40020000 	.word	0x40020000
 8001be4:	bffdfbf8 	.word	0xbffdfbf8
 8001be8:	40020400 	.word	0x40020400
 8001bec:	400200a8 	.word	0x400200a8
 8001bf0:	400204a8 	.word	0x400204a8

08001bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_DMA_Start_IT+0x20>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c12:	d304      	bcc.n	8001c1e <HAL_DMA_Start_IT+0x2a>
 8001c14:	f240 11df 	movw	r1, #479	; 0x1df
 8001c18:	482c      	ldr	r0, [pc, #176]	; (8001ccc <HAL_DMA_Start_IT+0xd8>)
 8001c1a:	f7fe ff60 	bl	8000ade <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_DMA_Start_IT+0x38>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e04b      	b.n	8001cc4 <HAL_DMA_Start_IT+0xd0>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d13a      	bne.n	8001cb6 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f961 	bl	8001f2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 020e 	orr.w	r2, r2, #14
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e00f      	b.n	8001ca4 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0204 	bic.w	r2, r2, #4
 8001c92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 020a 	orr.w	r2, r2, #10
 8001ca2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e005      	b.n	8001cc2 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	0801192c 	.word	0x0801192c

08001cd0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2204      	movs	r2, #4
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e022      	b.n	8001d40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 020e 	bic.w	r2, r2, #14
 8001d08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f003 021c 	and.w	r2, r3, #28
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d005      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2204      	movs	r2, #4
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e029      	b.n	8001dc4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 020e 	bic.w	r2, r2, #14
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f003 021c 	and.w	r2, r3, #28
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
    }
  }
  return status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f003 031c 	and.w	r3, r3, #28
 8001dee:	2204      	movs	r2, #4
 8001df0:	409a      	lsls	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d026      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x7a>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d021      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d107      	bne.n	8001e22 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0204 	bic.w	r2, r2, #4
 8001e20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f003 021c 	and.w	r2, r3, #28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2104      	movs	r1, #4
 8001e30:	fa01 f202 	lsl.w	r2, r1, r2
 8001e34:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d071      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e46:	e06c      	b.n	8001f22 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f003 031c 	and.w	r3, r3, #28
 8001e50:	2202      	movs	r2, #2
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02e      	beq.n	8001eba <HAL_DMA_IRQHandler+0xec>
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d029      	beq.n	8001eba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0320 	and.w	r3, r3, #32
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10b      	bne.n	8001e8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020a 	bic.w	r2, r2, #10
 8001e82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f003 021c 	and.w	r2, r3, #28
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2102      	movs	r1, #2
 8001e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d038      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001eb8:	e033      	b.n	8001f22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f003 031c 	and.w	r3, r3, #28
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d02a      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x156>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d025      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	f003 021c 	and.w	r2, r3, #28
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f22:	bf00      	nop
 8001f24:	bf00      	nop
}
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f003 021c 	and.w	r2, r3, #28
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d108      	bne.n	8001f70 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f6e:	e007      	b.n	8001f80 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa0:	d023      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <HAL_GPIO_Init+0x114>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <HAL_GPIO_Init+0x118>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01b      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <HAL_GPIO_Init+0x11c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d017      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_GPIO_Init+0x120>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <HAL_GPIO_Init+0x124>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00f      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <HAL_GPIO_Init+0x128>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00b      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x12c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <HAL_GPIO_Init+0x130>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fe2:	21aa      	movs	r1, #170	; 0xaa
 8001fe4:	4836      	ldr	r0, [pc, #216]	; (80020c0 <HAL_GPIO_Init+0x134>)
 8001fe6:	f7fe fd7a 	bl	8000ade <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_GPIO_Init+0x74>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x7c>
 8002000:	21ab      	movs	r1, #171	; 0xab
 8002002:	482f      	ldr	r0, [pc, #188]	; (80020c0 <HAL_GPIO_Init+0x134>)
 8002004:	f7fe fd6b 	bl	8000ade <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 822a 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	f000 8225 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b11      	cmp	r3, #17
 8002022:	f000 8220 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	f000 821b 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b12      	cmp	r3, #18
 8002036:	f000 8216 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002042:	f000 8210 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800204e:	f000 820a 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800205a:	f000 8204 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002066:	f000 81fe 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002072:	f000 81f8 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800207e:	f000 81f2 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b03      	cmp	r3, #3
 8002088:	f000 81ed 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b0b      	cmp	r3, #11
 8002092:	f000 81e8 	beq.w	8002466 <HAL_GPIO_Init+0x4da>
 8002096:	21ac      	movs	r1, #172	; 0xac
 8002098:	4809      	ldr	r0, [pc, #36]	; (80020c0 <HAL_GPIO_Init+0x134>)
 800209a:	f7fe fd20 	bl	8000ade <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	e1e2      	b.n	8002466 <HAL_GPIO_Init+0x4da>
 80020a0:	48000400 	.word	0x48000400
 80020a4:	48000800 	.word	0x48000800
 80020a8:	48000c00 	.word	0x48000c00
 80020ac:	48001000 	.word	0x48001000
 80020b0:	48001400 	.word	0x48001400
 80020b4:	48001800 	.word	0x48001800
 80020b8:	48001c00 	.word	0x48001c00
 80020bc:	48002000 	.word	0x48002000
 80020c0:	08011964 	.word	0x08011964
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 81c2 	beq.w	8002460 <HAL_GPIO_Init+0x4d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d005      	beq.n	80020f4 <HAL_GPIO_Init+0x168>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d144      	bne.n	800217e <HAL_GPIO_Init+0x1f2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00f      	beq.n	800211c <HAL_GPIO_Init+0x190>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d00b      	beq.n	800211c <HAL_GPIO_Init+0x190>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d007      	beq.n	800211c <HAL_GPIO_Init+0x190>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x190>
 8002114:	21bb      	movs	r1, #187	; 0xbb
 8002116:	4895      	ldr	r0, [pc, #596]	; (800236c <HAL_GPIO_Init+0x3e0>)
 8002118:	f7fe fce1 	bl	8000ade <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002152:	2201      	movs	r2, #1
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	4013      	ands	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 0201 	and.w	r2, r3, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b03      	cmp	r3, #3
 8002188:	d027      	beq.n	80021da <HAL_GPIO_Init+0x24e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 80021a2:	21dc      	movs	r1, #220	; 0xdc
 80021a4:	4871      	ldr	r0, [pc, #452]	; (800236c <HAL_GPIO_Init+0x3e0>)
 80021a6:	f7fe fc9a 	bl	8000ade <assert_failed>

        temp = GPIOx->PUPDR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d153      	bne.n	800228e <HAL_GPIO_Init+0x302>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021ec:	d023      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a5f      	ldr	r2, [pc, #380]	; (8002370 <HAL_GPIO_Init+0x3e4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a5e      	ldr	r2, [pc, #376]	; (8002374 <HAL_GPIO_Init+0x3e8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01b      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <HAL_GPIO_Init+0x3ec>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a5c      	ldr	r2, [pc, #368]	; (800237c <HAL_GPIO_Init+0x3f0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <HAL_GPIO_Init+0x3f4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00f      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <HAL_GPIO_Init+0x3f8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00b      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a59      	ldr	r2, [pc, #356]	; (8002388 <HAL_GPIO_Init+0x3fc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_GPIO_Init+0x400>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x2aa>
 800222e:	21e8      	movs	r1, #232	; 0xe8
 8002230:	484e      	ldr	r0, [pc, #312]	; (800236c <HAL_GPIO_Init+0x3e0>)
 8002232:	f7fe fc54 	bl	8000ade <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	d903      	bls.n	8002246 <HAL_GPIO_Init+0x2ba>
 800223e:	21e9      	movs	r1, #233	; 0xe9
 8002240:	484a      	ldr	r0, [pc, #296]	; (800236c <HAL_GPIO_Init+0x3e0>)
 8002242:	f7fe fc4c 	bl	8000ade <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	6939      	ldr	r1, [r7, #16]
 800228a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0203 	and.w	r2, r3, #3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80c8 	beq.w	8002460 <HAL_GPIO_Init+0x4d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_GPIO_Init+0x404>)
 80022d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d4:	4a2e      	ldr	r2, [pc, #184]	; (8002390 <HAL_GPIO_Init+0x404>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6613      	str	r3, [r2, #96]	; 0x60
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_GPIO_Init+0x404>)
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022e8:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <HAL_GPIO_Init+0x408>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002312:	d041      	beq.n	8002398 <HAL_GPIO_Init+0x40c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_GPIO_Init+0x3e4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d025      	beq.n	8002368 <HAL_GPIO_Init+0x3dc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a15      	ldr	r2, [pc, #84]	; (8002374 <HAL_GPIO_Init+0x3e8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d01f      	beq.n	8002364 <HAL_GPIO_Init+0x3d8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <HAL_GPIO_Init+0x3ec>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d019      	beq.n	8002360 <HAL_GPIO_Init+0x3d4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <HAL_GPIO_Init+0x3f0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_Init+0x3d0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <HAL_GPIO_Init+0x3f4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_Init+0x3cc>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_GPIO_Init+0x3f8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0x3c8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_GPIO_Init+0x3fc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_Init+0x3c4>
 800234c:	2307      	movs	r3, #7
 800234e:	e024      	b.n	800239a <HAL_GPIO_Init+0x40e>
 8002350:	2308      	movs	r3, #8
 8002352:	e022      	b.n	800239a <HAL_GPIO_Init+0x40e>
 8002354:	2306      	movs	r3, #6
 8002356:	e020      	b.n	800239a <HAL_GPIO_Init+0x40e>
 8002358:	2305      	movs	r3, #5
 800235a:	e01e      	b.n	800239a <HAL_GPIO_Init+0x40e>
 800235c:	2304      	movs	r3, #4
 800235e:	e01c      	b.n	800239a <HAL_GPIO_Init+0x40e>
 8002360:	2303      	movs	r3, #3
 8002362:	e01a      	b.n	800239a <HAL_GPIO_Init+0x40e>
 8002364:	2302      	movs	r3, #2
 8002366:	e018      	b.n	800239a <HAL_GPIO_Init+0x40e>
 8002368:	2301      	movs	r3, #1
 800236a:	e016      	b.n	800239a <HAL_GPIO_Init+0x40e>
 800236c:	08011964 	.word	0x08011964
 8002370:	48000400 	.word	0x48000400
 8002374:	48000800 	.word	0x48000800
 8002378:	48000c00 	.word	0x48000c00
 800237c:	48001000 	.word	0x48001000
 8002380:	48001400 	.word	0x48001400
 8002384:	48001800 	.word	0x48001800
 8002388:	48001c00 	.word	0x48001c00
 800238c:	48002000 	.word	0x48002000
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000
 8002398:	2300      	movs	r3, #0
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023aa:	4935      	ldr	r1, [pc, #212]	; (8002480 <HAL_GPIO_Init+0x4f4>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x4a4>
        {
          temp |= iocurrent;
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x4ce>
        {
          temp |= iocurrent;
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_GPIO_Init+0x4f8>)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f ae27 	bne.w	80020c4 <HAL_GPIO_Init+0x138>
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40010000 	.word	0x40010000
 8002484:	40010400 	.word	0x40010400

08002488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <HAL_GPIO_ReadPin+0x1c>
 800249a:	887b      	ldrh	r3, [r7, #2]
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_GPIO_ReadPin+0x26>
 80024a4:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80024a8:	4809      	ldr	r0, [pc, #36]	; (80024d0 <HAL_GPIO_ReadPin+0x48>)
 80024aa:	f7fe fb18 	bl	8000ade <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e001      	b.n	80024c4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	08011964 	.word	0x08011964

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <HAL_GPIO_WritePin+0x20>
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_GPIO_WritePin+0x2a>
 80024f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <HAL_GPIO_WritePin+0x5c>)
 80024fa:	f7fe faf0 	bl	8000ade <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024fe:	787b      	ldrb	r3, [r7, #1]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_GPIO_WritePin+0x40>
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d004      	beq.n	8002514 <HAL_GPIO_WritePin+0x40>
 800250a:	f240 11af 	movw	r1, #431	; 0x1af
 800250e:	4808      	ldr	r0, [pc, #32]	; (8002530 <HAL_GPIO_WritePin+0x5c>)
 8002510:	f7fe fae5 	bl	8000ade <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002520:	e002      	b.n	8002528 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	08011964 	.word	0x08011964

08002534 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_GPIO_TogglePin+0x1c>
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_GPIO_TogglePin+0x26>
 8002550:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <HAL_GPIO_TogglePin+0x4c>)
 8002556:	f7fe fac2 	bl	8000ade <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4013      	ands	r3, r2
 8002566:	041a      	lsls	r2, r3, #16
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43d9      	mvns	r1, r3
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	400b      	ands	r3, r1
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	08011964 	.word	0x08011964

08002584 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002586:	b08f      	sub	sp, #60	; 0x3c
 8002588:	af0a      	add	r7, sp, #40	; 0x28
 800258a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e11f      	b.n	80027d6 <HAL_PCD_Init+0x252>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800259e:	d003      	beq.n	80025a8 <HAL_PCD_Init+0x24>
 80025a0:	2190      	movs	r1, #144	; 0x90
 80025a2:	488f      	ldr	r0, [pc, #572]	; (80027e0 <HAL_PCD_Init+0x25c>)
 80025a4:	f7fe fa9b 	bl	8000ade <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_PCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fe52 	bl	800126c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2203      	movs	r2, #3
 80025cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_PCD_Init+0x5e>
  {
    hpcd->Init.dma_enable = 0U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f007 f8ac 	bl	8009744 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	687e      	ldr	r6, [r7, #4]
 80025f4:	466d      	mov	r5, sp
 80025f6:	f106 0410 	add.w	r4, r6, #16
 80025fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002606:	e885 0003 	stmia.w	r5, {r0, r1}
 800260a:	1d33      	adds	r3, r6, #4
 800260c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f007 f86c 	bl	80096ec <USB_CoreInit>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_PCD_Init+0xa2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0d7      	b.n	80027d6 <HAL_PCD_Init+0x252>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f007 f89a 	bl	8009766 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e04a      	b.n	80026ce <HAL_PCD_Init+0x14a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	333d      	adds	r3, #61	; 0x3d
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	333c      	adds	r3, #60	; 0x3c
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	b298      	uxth	r0, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3344      	adds	r3, #68	; 0x44
 8002674:	4602      	mov	r2, r0
 8002676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3340      	adds	r3, #64	; 0x40
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3348      	adds	r3, #72	; 0x48
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334c      	adds	r3, #76	; 0x4c
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3354      	adds	r3, #84	; 0x54
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3301      	adds	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3af      	bcc.n	8002638 <HAL_PCD_Init+0xb4>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e044      	b.n	8002768 <HAL_PCD_Init+0x1e4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3b5      	bcc.n	80026de <HAL_PCD_Init+0x15a>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	687e      	ldr	r6, [r7, #4]
 800277a:	466d      	mov	r5, sp
 800277c:	f106 0410 	add.w	r4, r6, #16
 8002780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800278c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002790:	1d33      	adds	r3, r6, #4
 8002792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	f007 f833 	bl	8009800 <USB_DevInit>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_PCD_Init+0x228>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e014      	b.n	80027d6 <HAL_PCD_Init+0x252>
  }

  hpcd->USB_Address = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d102      	bne.n	80027ca <HAL_PCD_Init+0x246>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f80d 	bl	80027e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f007 f9df 	bl	8009b92 <USB_DevDisconnect>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	bf00      	nop
 80027e0:	080119a0 	.word	0x080119a0

080027e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002816:	f043 0303 	orr.w	r3, r3, #3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_PWREx_GetVoltageRange+0x18>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40007000 	.word	0x40007000

08002848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002856:	d007      	beq.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285e:	d003      	beq.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x20>
 8002860:	21a7      	movs	r1, #167	; 0xa7
 8002862:	4826      	ldr	r0, [pc, #152]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002864:	f7fe f93b 	bl	8000ade <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800286e:	d130      	bne.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002870:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800287c:	d038      	beq.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002886:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8002888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2232      	movs	r2, #50	; 0x32
 8002894:	fb02 f303 	mul.w	r3, r2, r3
 8002898:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9b      	lsrs	r3, r3, #18
 80028a0:	3301      	adds	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a4:	e002      	b.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b8:	d102      	bne.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x78>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f2      	bne.n	80028a6 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028cc:	d110      	bne.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e00f      	b.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028de:	d007      	beq.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80028ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	080119d8 	.word	0x080119d8
 8002900:	40007000 	.word	0x40007000
 8002904:	20000000 	.word	0x20000000
 8002908:	431bde83 	.word	0x431bde83

0800290c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291a:	6053      	str	r3, [r2, #4]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d102      	bne.n	8002940 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f000 bd40 	b.w	80033c0 <HAL_RCC_OscConfig+0xa94>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCC_OscConfig+0x32>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <HAL_RCC_OscConfig+0x32>
 8002954:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002958:	489b      	ldr	r0, [pc, #620]	; (8002bc8 <HAL_RCC_OscConfig+0x29c>)
 800295a:	f7fe f8c0 	bl	8000ade <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295e:	4b9b      	ldr	r3, [pc, #620]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002968:	4b98      	ldr	r3, [pc, #608]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 813f 	beq.w	8002bfe <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_OscConfig+0x6e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d004      	beq.n	800299a <HAL_RCC_OscConfig+0x6e>
 8002990:	f240 11a9 	movw	r1, #425	; 0x1a9
 8002994:	488c      	ldr	r0, [pc, #560]	; (8002bc8 <HAL_RCC_OscConfig+0x29c>)
 8002996:	f7fe f8a2 	bl	8000ade <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	2bff      	cmp	r3, #255	; 0xff
 80029a0:	d904      	bls.n	80029ac <HAL_RCC_OscConfig+0x80>
 80029a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80029a6:	4888      	ldr	r0, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x29c>)
 80029a8:	f7fe f899 	bl	8000ade <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d030      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d02c      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d028      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	2b30      	cmp	r3, #48	; 0x30
 80029ca:	d024      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	2b40      	cmp	r3, #64	; 0x40
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	2b50      	cmp	r3, #80	; 0x50
 80029da:	d01c      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	2b60      	cmp	r3, #96	; 0x60
 80029e2:	d018      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	2b70      	cmp	r3, #112	; 0x70
 80029ea:	d014      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	2b80      	cmp	r3, #128	; 0x80
 80029f2:	d010      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	2b90      	cmp	r3, #144	; 0x90
 80029fa:	d00c      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	2ba0      	cmp	r3, #160	; 0xa0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	2bb0      	cmp	r3, #176	; 0xb0
 8002a0a:	d004      	beq.n	8002a16 <HAL_RCC_OscConfig+0xea>
 8002a0c:	f240 11ab 	movw	r1, #427	; 0x1ab
 8002a10:	486d      	ldr	r0, [pc, #436]	; (8002bc8 <HAL_RCC_OscConfig+0x29c>)
 8002a12:	f7fe f864 	bl	8000ade <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_RCC_OscConfig+0x100>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	f040 808f 	bne.w	8002b42 <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 808b 	bne.w	8002b42 <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2c:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_RCC_OscConfig+0x11a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f000 bcbd 	b.w	80033c0 <HAL_RCC_OscConfig+0xa94>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	4b60      	ldr	r3, [pc, #384]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCC_OscConfig+0x134>
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5e:	e005      	b.n	8002a6c <HAL_RCC_OscConfig+0x140>
 8002a60:	4b5a      	ldr	r3, [pc, #360]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d224      	bcs.n	8002aba <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 ff51 	bl	800391c <RCC_SetFlashLatencyFromMSIRange>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f000 bc9d 	b.w	80033c0 <HAL_RCC_OscConfig+0xa94>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a86:	4b51      	ldr	r3, [pc, #324]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b4e      	ldr	r3, [pc, #312]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	494b      	ldr	r1, [pc, #300]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	4946      	ldr	r1, [pc, #280]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e026      	b.n	8002b08 <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002ac0:	f043 0308 	orr.w	r3, r3, #8
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	493e      	ldr	r1, [pc, #248]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad8:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	4939      	ldr	r1, [pc, #228]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 ff10 	bl	800391c <RCC_SetFlashLatencyFromMSIRange>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f000 bc5c 	b.w	80033c0 <HAL_RCC_OscConfig+0xa94>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b08:	f000 fe02 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	492d      	ldr	r1, [pc, #180]	; (8002bd0 <HAL_RCC_OscConfig+0x2a4>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x2a8>)
 8002b26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b28:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe f8eb 	bl	8000d08 <HAL_InitTick>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d05f      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	f000 bc3f 	b.w	80033c0 <HAL_RCC_OscConfig+0xa94>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d033      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b56:	f7fe fc59 	bl	800140c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5c:	e009      	b.n	8002b72 <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fc55 	bl	800140c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d902      	bls.n	8002b72 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	f000 bc27 	b.w	80033c0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ef      	beq.n	8002b5e <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b7e:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	490d      	ldr	r1, [pc, #52]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e025      	b.n	8002bfe <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <HAL_RCC_OscConfig+0x2a0>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fc25 	bl	800140c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc4:	e013      	b.n	8002bee <HAL_RCC_OscConfig+0x2c2>
 8002bc6:	bf00      	nop
 8002bc8:	08011a14 	.word	0x08011a14
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08011c7c 	.word	0x08011c7c
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bdc:	f7fe fc16 	bl	800140c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e3e8      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bee:	4b97      	ldr	r3, [pc, #604]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2b0>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d07e      	beq.n	8002d08 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00e      	beq.n	8002c30 <HAL_RCC_OscConfig+0x304>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d009      	beq.n	8002c30 <HAL_RCC_OscConfig+0x304>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d004      	beq.n	8002c30 <HAL_RCC_OscConfig+0x304>
 8002c26:	f240 2117 	movw	r1, #535	; 0x217
 8002c2a:	4889      	ldr	r0, [pc, #548]	; (8002e50 <HAL_RCC_OscConfig+0x524>)
 8002c2c:	f7fd ff57 	bl	8000ade <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x316>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d10e      	bne.n	8002c5a <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d10b      	bne.n	8002c5a <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c42:	4b82      	ldr	r3, [pc, #520]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d05b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x3da>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d157      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e3b2      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x346>
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a78      	ldr	r2, [pc, #480]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	e01d      	b.n	8002cae <HAL_RCC_OscConfig+0x382>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x36a>
 8002c7c:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a72      	ldr	r2, [pc, #456]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b70      	ldr	r3, [pc, #448]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6f      	ldr	r2, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x382>
 8002c96:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6c      	ldr	r2, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d013      	beq.n	8002cde <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7fe fba9 	bl	800140c <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fba5 	bl	800140c <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b64      	cmp	r3, #100	; 0x64
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e377      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd0:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x392>
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fb95 	bl	800140c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fb91 	bl	800140c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e363      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf8:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x3ba>
 8002d04:	e000      	b.n	8002d08 <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d077      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_RCC_OscConfig+0x404>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d24:	d004      	beq.n	8002d30 <HAL_RCC_OscConfig+0x404>
 8002d26:	f240 214a 	movw	r1, #586	; 0x24a
 8002d2a:	4849      	ldr	r0, [pc, #292]	; (8002e50 <HAL_RCC_OscConfig+0x524>)
 8002d2c:	f7fd fed7 	bl	8000ade <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b7f      	cmp	r3, #127	; 0x7f
 8002d36:	d904      	bls.n	8002d42 <HAL_RCC_OscConfig+0x416>
 8002d38:	f240 214b 	movw	r1, #587	; 0x24b
 8002d3c:	4844      	ldr	r0, [pc, #272]	; (8002e50 <HAL_RCC_OscConfig+0x524>)
 8002d3e:	f7fd fece 	bl	8000ade <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_OscConfig+0x428>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d119      	bne.n	8002d82 <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d116      	bne.n	8002d82 <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d54:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_OscConfig+0x440>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e329      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	4934      	ldr	r1, [pc, #208]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d80:	e040      	b.n	8002e04 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d023      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe fb39 	bl	800140c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe fb35 	bl	800140c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e307      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	4920      	ldr	r1, [pc, #128]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	604b      	str	r3, [r1, #4]
 8002dd0:	e018      	b.n	8002e04 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe fb15 	bl	800140c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de6:	f7fe fb11 	bl	800140c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e2e3      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d04e      	beq.n	8002eae <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_OscConfig+0x4fe>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d004      	beq.n	8002e2a <HAL_RCC_OscConfig+0x4fe>
 8002e20:	f240 218b 	movw	r1, #651	; 0x28b
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <HAL_RCC_OscConfig+0x524>)
 8002e26:	f7fd fe5a 	bl	8000ade <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <HAL_RCC_OscConfig+0x54a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_RCC_OscConfig+0x520>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe fae3 	bl	800140c <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e48:	e00d      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08011a14 	.word	0x08011a14
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe fada 	bl	800140c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e2ac      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e66:	4b93      	ldr	r3, [pc, #588]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ef      	beq.n	8002e54 <HAL_RCC_OscConfig+0x528>
 8002e74:	e01b      	b.n	8002eae <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e76:	4b8f      	ldr	r3, [pc, #572]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7c:	4a8d      	ldr	r2, [pc, #564]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fe fac1 	bl	800140c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fabd 	bl	800140c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e28f      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ef      	bne.n	8002e8e <HAL_RCC_OscConfig+0x562>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80b2 	beq.w	8003020 <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x5b6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x5b6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d004      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x5b6>
 8002ed8:	f240 21de 	movw	r1, #734	; 0x2de
 8002edc:	4876      	ldr	r0, [pc, #472]	; (80030b8 <HAL_RCC_OscConfig+0x78c>)
 8002ede:	f7fd fdfe 	bl	8000ade <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ee2:	4b74      	ldr	r3, [pc, #464]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b71      	ldr	r3, [pc, #452]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	4a70      	ldr	r2, [pc, #448]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8002efa:	4b6e      	ldr	r3, [pc, #440]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f06:	2301      	movs	r3, #1
 8002f08:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0a:	4b6c      	ldr	r3, [pc, #432]	; (80030bc <HAL_RCC_OscConfig+0x790>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f16:	4b69      	ldr	r3, [pc, #420]	; (80030bc <HAL_RCC_OscConfig+0x790>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a68      	ldr	r2, [pc, #416]	; (80030bc <HAL_RCC_OscConfig+0x790>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fa73 	bl	800140c <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7fe fa6f 	bl	800140c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e241      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3c:	4b5f      	ldr	r3, [pc, #380]	; (80030bc <HAL_RCC_OscConfig+0x790>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d108      	bne.n	8002f62 <HAL_RCC_OscConfig+0x636>
 8002f50:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	4a57      	ldr	r2, [pc, #348]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f60:	e024      	b.n	8002fac <HAL_RCC_OscConfig+0x680>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d110      	bne.n	8002f8c <HAL_RCC_OscConfig+0x660>
 8002f6a:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	4a50      	ldr	r2, [pc, #320]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7a:	4b4e      	ldr	r3, [pc, #312]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	4a4c      	ldr	r2, [pc, #304]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8a:	e00f      	b.n	8002fac <HAL_RCC_OscConfig+0x680>
 8002f8c:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	4a48      	ldr	r2, [pc, #288]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f9c:	4b45      	ldr	r3, [pc, #276]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	4a44      	ldr	r2, [pc, #272]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d016      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fa2a 	bl	800140c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fa26 	bl	800140c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1f6      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd2:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ed      	beq.n	8002fbc <HAL_RCC_OscConfig+0x690>
 8002fe0:	e015      	b.n	800300e <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fa13 	bl	800140c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fa0f 	bl	800140c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1df      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ed      	bne.n	8002fea <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300e:	7ffb      	ldrb	r3, [r7, #31]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d050      	beq.n	80030ce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_OscConfig+0x71a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2b01      	cmp	r3, #1
 800303a:	d004      	beq.n	8003046 <HAL_RCC_OscConfig+0x71a>
 800303c:	f240 3143 	movw	r1, #835	; 0x343
 8003040:	481d      	ldr	r0, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x78c>)
 8003042:	f7fd fd4c 	bl	8000ade <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d01c      	beq.n	8003088 <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800304e:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8003050:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fe f9d5 	bl	800140c <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003066:	f7fe f9d1 	bl	800140c <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1a3      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003078:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 800307a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ef      	beq.n	8003066 <HAL_RCC_OscConfig+0x73a>
 8003086:	e022      	b.n	80030ce <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 800308a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x788>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe f9b8 	bl	800140c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800309e:	e00f      	b.n	80030c0 <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030a0:	f7fe f9b4 	bl	800140c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d908      	bls.n	80030c0 <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e186      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	08011a14 	.word	0x08011a14
 80030bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030c0:	4b96      	ldr	r3, [pc, #600]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 80030c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e8      	bne.n	80030a0 <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x7c4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d008      	beq.n	80030f0 <HAL_RCC_OscConfig+0x7c4>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d004      	beq.n	80030f0 <HAL_RCC_OscConfig+0x7c4>
 80030e6:	f44f 715b 	mov.w	r1, #876	; 0x36c
 80030ea:	488d      	ldr	r0, [pc, #564]	; (8003320 <HAL_RCC_OscConfig+0x9f4>)
 80030ec:	f7fd fcf7 	bl	8000ade <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8162 	beq.w	80033be <HAL_RCC_OscConfig+0xa92>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	2b02      	cmp	r3, #2
 8003100:	f040 8138 	bne.w	8003374 <HAL_RCC_OscConfig+0xa48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <HAL_RCC_OscConfig+0x802>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	2b01      	cmp	r3, #1
 8003112:	d00c      	beq.n	800312e <HAL_RCC_OscConfig+0x802>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2b02      	cmp	r3, #2
 800311a:	d008      	beq.n	800312e <HAL_RCC_OscConfig+0x802>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	2b03      	cmp	r3, #3
 8003122:	d004      	beq.n	800312e <HAL_RCC_OscConfig+0x802>
 8003124:	f44f 715d 	mov.w	r1, #884	; 0x374
 8003128:	487d      	ldr	r0, [pc, #500]	; (8003320 <HAL_RCC_OscConfig+0x9f4>)
 800312a:	f7fd fcd8 	bl	8000ade <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_RCC_OscConfig+0x812>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	2b08      	cmp	r3, #8
 800313c:	d904      	bls.n	8003148 <HAL_RCC_OscConfig+0x81c>
 800313e:	f240 3175 	movw	r1, #885	; 0x375
 8003142:	4877      	ldr	r0, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x9f4>)
 8003144:	f7fd fccb 	bl	8000ade <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	2b07      	cmp	r3, #7
 800314e:	d903      	bls.n	8003158 <HAL_RCC_OscConfig+0x82c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	2b56      	cmp	r3, #86	; 0x56
 8003156:	d904      	bls.n	8003162 <HAL_RCC_OscConfig+0x836>
 8003158:	f240 3176 	movw	r1, #886	; 0x376
 800315c:	4870      	ldr	r0, [pc, #448]	; (8003320 <HAL_RCC_OscConfig+0x9f4>)
 800315e:	f7fd fcbe 	bl	8000ade <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	2b01      	cmp	r3, #1
 8003168:	d903      	bls.n	8003172 <HAL_RCC_OscConfig+0x846>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	2b1f      	cmp	r3, #31
 8003170:	d904      	bls.n	800317c <HAL_RCC_OscConfig+0x850>
 8003172:	f44f 715e 	mov.w	r1, #888	; 0x378
 8003176:	486a      	ldr	r0, [pc, #424]	; (8003320 <HAL_RCC_OscConfig+0x9f4>)
 8003178:	f7fd fcb1 	bl	8000ade <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	2b02      	cmp	r3, #2
 8003182:	d010      	beq.n	80031a6 <HAL_RCC_OscConfig+0x87a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	2b04      	cmp	r3, #4
 800318a:	d00c      	beq.n	80031a6 <HAL_RCC_OscConfig+0x87a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003190:	2b06      	cmp	r3, #6
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_OscConfig+0x87a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	2b08      	cmp	r3, #8
 800319a:	d004      	beq.n	80031a6 <HAL_RCC_OscConfig+0x87a>
 800319c:	f240 317a 	movw	r1, #890	; 0x37a
 80031a0:	485f      	ldr	r0, [pc, #380]	; (8003320 <HAL_RCC_OscConfig+0x9f4>)
 80031a2:	f7fd fc9c 	bl	8000ade <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d010      	beq.n	80031d0 <HAL_RCC_OscConfig+0x8a4>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x8a4>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d008      	beq.n	80031d0 <HAL_RCC_OscConfig+0x8a4>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d004      	beq.n	80031d0 <HAL_RCC_OscConfig+0x8a4>
 80031c6:	f240 317b 	movw	r1, #891	; 0x37b
 80031ca:	4855      	ldr	r0, [pc, #340]	; (8003320 <HAL_RCC_OscConfig+0x9f4>)
 80031cc:	f7fd fc87 	bl	8000ade <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031d0:	4b52      	ldr	r3, [pc, #328]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0203 	and.w	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d12c      	bne.n	800323e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	3b01      	subs	r3, #1
 80031f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d123      	bne.n	800323e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d11b      	bne.n	800323e <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d113      	bne.n	800323e <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	3b01      	subs	r3, #1
 8003224:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d109      	bne.n	800323e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	3b01      	subs	r3, #1
 8003238:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d074      	beq.n	8003328 <HAL_RCC_OscConfig+0x9fc>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	2b0c      	cmp	r3, #12
 8003242:	d068      	beq.n	8003316 <HAL_RCC_OscConfig+0x9ea>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_RCC_OscConfig+0x930>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_RCC_OscConfig+0x934>
#endif
            )
          {
            return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0af      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003260:	4b2e      	ldr	r3, [pc, #184]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2d      	ldr	r2, [pc, #180]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 8003266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800326a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800326c:	f7fe f8ce 	bl	800140c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x95a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe f8ca 	bl	800140c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x95a>
              {
                return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e09c      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003286:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x948>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_RCC_OscConfig+0x9f8>)
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032a2:	3a01      	subs	r2, #1
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ac:	0212      	lsls	r2, r2, #8
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032b4:	0852      	lsrs	r2, r2, #1
 80032b6:	3a01      	subs	r2, #1
 80032b8:	0552      	lsls	r2, r2, #21
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032c0:	0852      	lsrs	r2, r2, #1
 80032c2:	3a01      	subs	r2, #1
 80032c4:	0652      	lsls	r2, r2, #25
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032cc:	06d2      	lsls	r2, r2, #27
 80032ce:	430a      	orrs	r2, r1
 80032d0:	4912      	ldr	r1, [pc, #72]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a10      	ldr	r2, [pc, #64]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 80032dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a0d      	ldr	r2, [pc, #52]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 80032e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ec:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ee:	f7fe f88d 	bl	800140c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x9dc>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe f889 	bl	800140c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x9dc>
              {
                return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e05b      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_RCC_OscConfig+0x9f0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x9ca>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003314:	e053      	b.n	80033be <HAL_RCC_OscConfig+0xa92>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e052      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	08011a14 	.word	0x08011a14
 8003324:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d144      	bne.n	80033be <HAL_RCC_OscConfig+0xa92>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a23      	ldr	r2, [pc, #140]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 8003346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800334a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800334c:	f7fe f85e 	bl	800140c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xa3a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe f85a 	bl	800140c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xa3a>
            {
              return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e02c      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xa28>
 8003372:	e024      	b.n	80033be <HAL_RCC_OscConfig+0xa92>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d01f      	beq.n	80033ba <HAL_RCC_OscConfig+0xa8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 8003380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe f841 	bl	800140c <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0xa74>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338e:	f7fe f83d 	bl	800140c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0xa74>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e00f      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0xa62>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4905      	ldr	r1, [pc, #20]	; (80033c8 <HAL_RCC_OscConfig+0xa9c>)
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_OscConfig+0xaa0>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
 80033b8:	e001      	b.n	80033be <HAL_RCC_OscConfig+0xa92>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0xa94>
      }
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000
 80033cc:	feeefffc 	.word	0xfeeefffc

080033d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e186      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x24>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d904      	bls.n	80033fe <HAL_RCC_ClockConfig+0x2e>
 80033f4:	f240 4157 	movw	r1, #1111	; 0x457
 80033f8:	4882      	ldr	r0, [pc, #520]	; (8003604 <HAL_RCC_ClockConfig+0x234>)
 80033fa:	f7fd fb70 	bl	8000ade <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <HAL_RCC_ClockConfig+0x56>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d00d      	beq.n	8003426 <HAL_RCC_ClockConfig+0x56>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d00a      	beq.n	8003426 <HAL_RCC_ClockConfig+0x56>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d007      	beq.n	8003426 <HAL_RCC_ClockConfig+0x56>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d004      	beq.n	8003426 <HAL_RCC_ClockConfig+0x56>
 800341c:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8003420:	4878      	ldr	r0, [pc, #480]	; (8003604 <HAL_RCC_ClockConfig+0x234>)
 8003422:	f7fd fb5c 	bl	8000ade <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003426:	4b78      	ldr	r3, [pc, #480]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d910      	bls.n	8003456 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003434:	4b74      	ldr	r3, [pc, #464]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 0207 	bic.w	r2, r3, #7
 800343c:	4972      	ldr	r1, [pc, #456]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003444:	4b70      	ldr	r3, [pc, #448]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d001      	beq.n	8003456 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e14d      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d039      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d024      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d020      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b90      	cmp	r3, #144	; 0x90
 8003478:	d01c      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2ba0      	cmp	r3, #160	; 0xa0
 8003480:	d018      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2bb0      	cmp	r3, #176	; 0xb0
 8003488:	d014      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2bc0      	cmp	r3, #192	; 0xc0
 8003490:	d010      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2bd0      	cmp	r3, #208	; 0xd0
 8003498:	d00c      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2be0      	cmp	r3, #224	; 0xe0
 80034a0:	d008      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2bf0      	cmp	r3, #240	; 0xf0
 80034a8:	d004      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xe4>
 80034aa:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80034ae:	4855      	ldr	r0, [pc, #340]	; (8003604 <HAL_RCC_ClockConfig+0x234>)
 80034b0:	f7fd fb15 	bl	8000ade <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	4b54      	ldr	r3, [pc, #336]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d908      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c4:	4b51      	ldr	r3, [pc, #324]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	494e      	ldr	r1, [pc, #312]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d061      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <HAL_RCC_ClockConfig+0x13c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d00c      	beq.n	800350c <HAL_RCC_ClockConfig+0x13c>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d008      	beq.n	800350c <HAL_RCC_ClockConfig+0x13c>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d004      	beq.n	800350c <HAL_RCC_ClockConfig+0x13c>
 8003502:	f240 417b 	movw	r1, #1147	; 0x47b
 8003506:	483f      	ldr	r0, [pc, #252]	; (8003604 <HAL_RCC_ClockConfig+0x234>)
 8003508:	f7fd fae9 	bl	8000ade <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d107      	bne.n	8003524 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003514:	4b3d      	ldr	r3, [pc, #244]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d121      	bne.n	8003564 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0e6      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d107      	bne.n	800353c <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352c:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d115      	bne.n	8003564 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0da      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d107      	bne.n	8003554 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0ce      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0c6      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003564:	4b29      	ldr	r3, [pc, #164]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 0203 	bic.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4926      	ldr	r1, [pc, #152]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003576:	f7fd ff49 	bl	800140c <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357c:	e00a      	b.n	8003594 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357e:	f7fd ff45 	bl	800140c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e0ae      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 020c 	and.w	r2, r3, #12
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d1eb      	bne.n	800357e <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035be:	429a      	cmp	r2, r3
 80035c0:	d208      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c2:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	490f      	ldr	r1, [pc, #60]	; (800360c <HAL_RCC_ClockConfig+0x23c>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d216      	bcs.n	8003610 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0207 	bic.w	r2, r3, #7
 80035ea:	4907      	ldr	r1, [pc, #28]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_ClockConfig+0x238>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d007      	beq.n	8003610 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e076      	b.n	80036f2 <HAL_RCC_ClockConfig+0x322>
 8003604:	08011a14 	.word	0x08011a14
 8003608:	40022000 	.word	0x40022000
 800360c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d025      	beq.n	8003668 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d018      	beq.n	8003656 <HAL_RCC_ClockConfig+0x286>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362c:	d013      	beq.n	8003656 <HAL_RCC_ClockConfig+0x286>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003636:	d00e      	beq.n	8003656 <HAL_RCC_ClockConfig+0x286>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x286>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800364a:	d004      	beq.n	8003656 <HAL_RCC_ClockConfig+0x286>
 800364c:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8003650:	482a      	ldr	r0, [pc, #168]	; (80036fc <HAL_RCC_ClockConfig+0x32c>)
 8003652:	f7fd fa44 	bl	8000ade <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003656:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <HAL_RCC_ClockConfig+0x330>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4927      	ldr	r1, [pc, #156]	; (8003700 <HAL_RCC_ClockConfig+0x330>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d026      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2de>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d013      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2de>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800368e:	d00e      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2de>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2de>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036a2:	d004      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2de>
 80036a4:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80036a8:	4814      	ldr	r0, [pc, #80]	; (80036fc <HAL_RCC_ClockConfig+0x32c>)
 80036aa:	f7fd fa18 	bl	8000ade <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCC_ClockConfig+0x330>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4910      	ldr	r1, [pc, #64]	; (8003700 <HAL_RCC_ClockConfig+0x330>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c2:	f000 f825 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036c6:	4602      	mov	r2, r0
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_ClockConfig+0x330>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	091b      	lsrs	r3, r3, #4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	490c      	ldr	r1, [pc, #48]	; (8003704 <HAL_RCC_ClockConfig+0x334>)
 80036d4:	5ccb      	ldrb	r3, [r1, r3]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x338>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <HAL_RCC_ClockConfig+0x33c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fb0e 	bl	8000d08 <HAL_InitTick>
 80036ec:	4603      	mov	r3, r0
 80036ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80036f0:	7afb      	ldrb	r3, [r7, #11]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	08011a14 	.word	0x08011a14
 8003700:	40021000 	.word	0x40021000
 8003704:	08011c7c 	.word	0x08011c7c
 8003708:	20000000 	.word	0x20000000
 800370c:	20000004 	.word	0x20000004

08003710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003728:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x34>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d121      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d11e      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003744:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <HAL_RCC_GetSysClockFreq+0x10c>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d102      	bne.n	800378e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e004      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d101      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 8003796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d134      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d003      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xac>
 80037b4:	e005      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 80037b8:	617b      	str	r3, [r7, #20]
      break;
 80037ba:	e005      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 80037be:	617b      	str	r3, [r7, #20]
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	617b      	str	r3, [r7, #20]
      break;
 80037c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	fb03 f202 	mul.w	r2, r3, r2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	0e5b      	lsrs	r3, r3, #25
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	3301      	adds	r3, #1
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003808:	69bb      	ldr	r3, [r7, #24]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3724      	adds	r7, #36	; 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	08011c94 	.word	0x08011c94
 8003820:	00f42400 	.word	0x00f42400
 8003824:	007a1200 	.word	0x007a1200

08003828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_RCC_GetHCLKFreq+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000000 	.word	0x20000000

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003844:	f7ff fff0 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4904      	ldr	r1, [pc, #16]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	08011c8c 	.word	0x08011c8c

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003870:	f7ff ffda 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0adb      	lsrs	r3, r3, #11
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4904      	ldr	r1, [pc, #16]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08011c8c 	.word	0x08011c8c

08003898 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_RCC_GetClockConfig+0x1a>
 80038a8:	f240 6192 	movw	r1, #1682	; 0x692
 80038ac:	4818      	ldr	r0, [pc, #96]	; (8003910 <HAL_RCC_GetClockConfig+0x78>)
 80038ae:	f7fd f916 	bl	8000ade <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_RCC_GetClockConfig+0x2a>
 80038b8:	f240 6193 	movw	r1, #1683	; 0x693
 80038bc:	4814      	ldr	r0, [pc, #80]	; (8003910 <HAL_RCC_GetClockConfig+0x78>)
 80038be:	f7fd f90e 	bl	8000ade <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	220f      	movs	r2, #15
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_GetClockConfig+0x7c>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_RCC_GetClockConfig+0x7c>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCC_GetClockConfig+0x7c>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_GetClockConfig+0x7c>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCC_GetClockConfig+0x80>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0207 	and.w	r2, r3, #7
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	08011a14 	.word	0x08011a14
 8003914:	40021000 	.word	0x40021000
 8003918:	40022000 	.word	0x40022000

0800391c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003934:	f7fe ff7a 	bl	800282c <HAL_PWREx_GetVoltageRange>
 8003938:	6178      	str	r0, [r7, #20]
 800393a:	e014      	b.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6593      	str	r3, [r2, #88]	; 0x58
 8003948:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003954:	f7fe ff6a 	bl	800282c <HAL_PWREx_GetVoltageRange>
 8003958:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003964:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396c:	d10b      	bne.n	8003986 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d919      	bls.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2ba0      	cmp	r3, #160	; 0xa0
 8003978:	d902      	bls.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800397a:	2302      	movs	r3, #2
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e013      	b.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003980:	2301      	movs	r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	e010      	b.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d902      	bls.n	8003992 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800398c:	2303      	movs	r3, #3
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	e00a      	b.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b80      	cmp	r3, #128	; 0x80
 8003996:	d102      	bne.n	800399e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003998:	2302      	movs	r3, #2
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	e004      	b.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b70      	cmp	r3, #112	; 0x70
 80039a2:	d101      	bne.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a4:	2301      	movs	r3, #1
 80039a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 0207 	bic.w	r2, r3, #7
 80039b0:	4909      	ldr	r1, [pc, #36]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d001      	beq.n	80039ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40022000 	.word	0x40022000

080039dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039e4:	2300      	movs	r3, #0
 80039e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039e8:	2300      	movs	r3, #0
 80039ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0d5b      	lsrs	r3, r3, #21
 80039fe:	055b      	lsls	r3, r3, #21
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x30>
 8003a04:	21c9      	movs	r1, #201	; 0xc9
 8003a06:	488a      	ldr	r0, [pc, #552]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a08:	f7fd f869 	bl	8000ade <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d058      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a28:	d00d      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a32:	d008      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003a3e:	21d1      	movs	r1, #209	; 0xd1
 8003a40:	487b      	ldr	r0, [pc, #492]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a42:	f7fd f84c 	bl	8000ade <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a4e:	d02a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8003a50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a54:	d824      	bhi.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8003a56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003a5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a60:	d81e      	bhi.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6a:	d010      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8003a6c:	e018      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a6e:	4b71      	ldr	r3, [pc, #452]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4a70      	ldr	r2, [pc, #448]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a7a:	e015      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xcc>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fa5a 	bl	8004f3c <RCCEx_PLLSAI1_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8c:	e00c      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xcc>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3320      	adds	r3, #32
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fbd1 	bl	800523c <RCCEx_PLLSAI2_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	74fb      	strb	r3, [r7, #19]
      break;
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      break;
 8003aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aae:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abc:	495d      	ldr	r1, [pc, #372]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ac4:	e001      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d059      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae6:	d00e      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003af0:	d009      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003afa:	d004      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003afc:	f240 110f 	movw	r1, #271	; 0x10f
 8003b00:	484b      	ldr	r0, [pc, #300]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003b02:	f7fc ffec 	bl	8000ade <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b0e:	d02a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b14:	d824      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b20:	d81e      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003b2c:	e018      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x184>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b2e:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b3a:	e015      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 f9fa 	bl	8004f3c <RCCEx_PLLSAI1_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b4c:	e00c      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3320      	adds	r3, #32
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 fb71 	bl	800523c <RCCEx_PLLSAI2_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5e:	e003      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	74fb      	strb	r3, [r7, #19]
      break;
 8003b64:	e000      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7c:	492d      	ldr	r1, [pc, #180]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b84:	e001      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b86:	7cfb      	ldrb	r3, [r7, #19]
 8003b88:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80c3 	beq.w	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb0:	d010      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc8:	d004      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003bca:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003bce:	4818      	ldr	r0, [pc, #96]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003bd0:	f7fc ff85 	bl	8000ade <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bd4:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c12:	f7fd fbfb 	bl	800140c <HAL_GetTick>
 8003c16:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c18:	e010      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fd fbf7 	bl	800140c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d909      	bls.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x260>
      {
        ret = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c2c:	e00c      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c2e:	bf00      	nop
 8003c30:	08011a4c 	.word	0x08011a4c
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c3c:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0e8      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      }
    }

    if(ret == HAL_OK)
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d15c      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01f      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d019      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c6c:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c78:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c88:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c98:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd fbaf 	bl	800140c <HAL_GetTick>
 8003cae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb0:	e00b      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd fbab 	bl	800140c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d902      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
          {
            ret = HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cca:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ec      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }

      if(ret == HAL_OK)
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	4905      	ldr	r1, [pc, #20]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cf6:	e009      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x330>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	74bb      	strb	r3, [r7, #18]
 8003cfc:	e006      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003cfe:	bf00      	nop
 8003d00:	40007000 	.word	0x40007000
 8003d04:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0c:	7c7b      	ldrb	r3, [r7, #17]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d12:	4b8d      	ldr	r3, [pc, #564]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	4a8c      	ldr	r2, [pc, #560]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01f      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d00c      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d008      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d004      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003d4a:	f240 1199 	movw	r1, #409	; 0x199
 8003d4e:	487f      	ldr	r0, [pc, #508]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003d50:	f7fc fec5 	bl	8000ade <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d54:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	4979      	ldr	r1, [pc, #484]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01f      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d010      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d00c      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d008      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d004      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8003d96:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003d9a:	486c      	ldr	r0, [pc, #432]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003d9c:	f7fc fe9f 	bl	8000ade <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 020c 	bic.w	r2, r3, #12
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	4966      	ldr	r1, [pc, #408]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01f      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d010      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d00c      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b30      	cmp	r3, #48	; 0x30
 8003dd8:	d008      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d004      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003de2:	f240 11af 	movw	r1, #431	; 0x1af
 8003de6:	4859      	ldr	r0, [pc, #356]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003de8:	f7fc fe79 	bl	8000ade <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dec:	4b56      	ldr	r3, [pc, #344]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4953      	ldr	r1, [pc, #332]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01f      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d010      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	d00c      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	2bc0      	cmp	r3, #192	; 0xc0
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d004      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8003e2e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003e32:	4846      	ldr	r0, [pc, #280]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003e34:	f7fc fe53 	bl	8000ade <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e38:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4940      	ldr	r1, [pc, #256]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d022      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d013      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6a:	d00e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e74:	d009      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7e:	d004      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003e80:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003e84:	4831      	ldr	r0, [pc, #196]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003e86:	f7fc fe2a 	bl	8000ade <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e98:	492b      	ldr	r1, [pc, #172]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d022      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d013      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d00e      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ec6:	d009      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d004      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003ed2:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003ed6:	481d      	ldr	r0, [pc, #116]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003ed8:	f7fc fe01 	bl	8000ade <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	4917      	ldr	r1, [pc, #92]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d028      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d013      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f0e:	d00e      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f18:	d009      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f22:	d004      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8003f24:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003f28:	4808      	ldr	r0, [pc, #32]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003f2a:	f7fc fdd8 	bl	8000ade <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	4902      	ldr	r1, [pc, #8]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f44:	e004      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08011a4c 	.word	0x08011a4c
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d022      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f6c:	d00e      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f76:	d009      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f80:	d004      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8003f82:	f240 11e7 	movw	r1, #487	; 0x1e7
 8003f86:	488c      	ldr	r0, [pc, #560]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f88:	f7fc fda9 	bl	8000ade <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f8c:	4b8b      	ldr	r3, [pc, #556]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9a:	4988      	ldr	r1, [pc, #544]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01d      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbe:	d009      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc8:	d004      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003fca:	f240 11ef 	movw	r1, #495	; 0x1ef
 8003fce:	487a      	ldr	r0, [pc, #488]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd0:	f7fc fd85 	bl	8000ade <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd4:	4b79      	ldr	r3, [pc, #484]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	4976      	ldr	r1, [pc, #472]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01d      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004006:	d009      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004010:	d004      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8004012:	f240 11fb 	movw	r1, #507	; 0x1fb
 8004016:	4868      	ldr	r0, [pc, #416]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004018:	f7fc fd61 	bl	8000ade <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800401c:	4b67      	ldr	r3, [pc, #412]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	4964      	ldr	r1, [pc, #400]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01d      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404e:	d009      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004058:	d004      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800405a:	f240 2107 	movw	r1, #519	; 0x207
 800405e:	4856      	ldr	r0, [pc, #344]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004060:	f7fc fd3d 	bl	8000ade <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004064:	4b55      	ldr	r3, [pc, #340]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	4952      	ldr	r1, [pc, #328]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01b      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	2b02      	cmp	r3, #2
 800409c:	d004      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800409e:	f240 2113 	movw	r1, #531	; 0x213
 80040a2:	4845      	ldr	r0, [pc, #276]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a4:	f7fc fd1b 	bl	8000ade <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040a8:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 80040aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	4941      	ldr	r1, [pc, #260]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d040      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d013      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040da:	d00e      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e4:	d009      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040ee:	d004      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x71e>
 80040f0:	f44f 7108 	mov.w	r1, #544	; 0x220
 80040f4:	4830      	ldr	r0, [pc, #192]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f6:	f7fc fcf2 	bl	8000ade <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040fa:	4b30      	ldr	r3, [pc, #192]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	492c      	ldr	r1, [pc, #176]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004118:	d106      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4a27      	ldr	r2, [pc, #156]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8004120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004124:	60d3      	str	r3, [r2, #12]
 8004126:	e011      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x770>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004130:	d10c      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x770>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	2101      	movs	r1, #1
 8004138:	4618      	mov	r0, r3
 800413a:	f000 feff 	bl	8004f3c <RCCEx_PLLSAI1_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004142:	7cfb      	ldrb	r3, [r7, #19]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x770>
        {
          /* set overall return value */
          status = ret;
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d045      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x808>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004168:	d00e      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004172:	d009      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800417c:	d004      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 800417e:	f240 2141 	movw	r1, #577	; 0x241
 8004182:	480d      	ldr	r0, [pc, #52]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004184:	f7fc fcab 	bl	8000ade <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	4909      	ldr	r1, [pc, #36]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4a03      	ldr	r2, [pc, #12]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x7e0>)
 80041ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b2:	60d3      	str	r3, [r2, #12]
 80041b4:	e016      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 80041b6:	bf00      	nop
 80041b8:	08011a4c 	.word	0x08011a4c
 80041bc:	40021000 	.word	0x40021000
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2101      	movs	r1, #1
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 feb3 	bl	8004f3c <RCCEx_PLLSAI1_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041da:	7cfb      	ldrb	r3, [r7, #19]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* set overall return value */
        status = ret;
 80041e0:	7cfb      	ldrb	r3, [r7, #19]
 80041e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d040      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004200:	d00e      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420a:	d009      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004210:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004214:	d004      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004216:	f240 2166 	movw	r1, #614	; 0x266
 800421a:	4861      	ldr	r0, [pc, #388]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800421c:	f7fc fc5f 	bl	8000ade <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422e:	495d      	ldr	r1, [pc, #372]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800423e:	d106      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004240:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a57      	ldr	r2, [pc, #348]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424a:	60d3      	str	r3, [r2, #12]
 800424c:	e011      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x896>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004256:	d10c      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fe6c 	bl	8004f3c <RCCEx_PLLSAI1_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x896>
      {
        /* set overall return value */
        status = ret;
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d047      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d013      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800428e:	d00e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004298:	d009      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042a2:	d004      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 80042a4:	f240 2186 	movw	r1, #646	; 0x286
 80042a8:	483d      	ldr	r0, [pc, #244]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80042aa:	f7fc fc18 	bl	8000ade <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ae:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042bc:	4939      	ldr	r1, [pc, #228]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042cc:	d10d      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x90e>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fe31 	bl	8004f3c <RCCEx_PLLSAI1_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d014      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x932>
      {
        /* set overall return value */
        status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
 80042e8:	e011      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f2:	d10c      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x932>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3320      	adds	r3, #32
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 ff9e 	bl	800523c <RCCEx_PLLSAI2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x932>
      {
        /* set overall return value */
        status = ret;
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01b      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x976>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d004      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x95e>
 8004330:	f240 21b2 	movw	r1, #690	; 0x2b2
 8004334:	481a      	ldr	r0, [pc, #104]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8004336:	f7fc fbd2 	bl	8000ade <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434a:	4916      	ldr	r1, [pc, #88]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01b      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004372:	d004      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8004374:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8004378:	4809      	ldr	r0, [pc, #36]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800437a:	f7fc fbb0 	bl	8000ade <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438e:	4905      	ldr	r1, [pc, #20]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004396:	7cbb      	ldrb	r3, [r7, #18]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	08011a4c 	.word	0x08011a4c
 80043a4:	40021000 	.word	0x40021000

080043a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
#if defined(SDMMC1) && defined(RCC_CCIPR2_SDMMCSEL)
  uint32_t pllp;  /* no init needed */
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	0d5b      	lsrs	r3, r3, #21
 80043c2:	055b      	lsls	r3, r3, #21
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 80043c8:	f240 4187 	movw	r1, #1159	; 0x487
 80043cc:	48b4      	ldr	r0, [pc, #720]	; (80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80043ce:	f7fc fb86 	bl	8000ade <assert_failed>

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d8:	d13e      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80043da:	4bb2      	ldr	r3, [pc, #712]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ec:	d028      	beq.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f4:	f200 858f 	bhi.w	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fe:	d005      	beq.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004406:	d00e      	beq.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004408:	f000 bd85 	b.w	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800440c:	4ba5      	ldr	r3, [pc, #660]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	f040 857f 	bne.w	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xb72>
        frequency = LSE_VALUE;
 800441c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004420:	61fb      	str	r3, [r7, #28]
      break;
 8004422:	f000 bd7a 	b.w	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0xb72>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004426:	4b9f      	ldr	r3, [pc, #636]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b02      	cmp	r3, #2
 8004432:	f040 8574 	bne.w	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
          frequency = LSI_VALUE;
 8004436:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800443a:	61fb      	str	r3, [r7, #28]
      break;
 800443c:	f000 bd6f 	b.w	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004440:	4b98      	ldr	r3, [pc, #608]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444c:	f040 8569 	bne.w	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
        frequency = HSE_VALUE / 32U;
 8004450:	4b95      	ldr	r3, [pc, #596]	; (80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8004452:	61fb      	str	r3, [r7, #28]
      break;
 8004454:	f000 bd65 	b.w	8004f22 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004458:	4b92      	ldr	r3, [pc, #584]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d036      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d840      	bhi.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d003      	beq.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d020      	beq.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800447a:	e039      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800447c:	4b89      	ldr	r3, [pc, #548]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d116      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004488:	4b86      	ldr	r3, [pc, #536]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8004494:	4b83      	ldr	r3, [pc, #524]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	e005      	b.n	80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80044a0:	4b80      	ldr	r3, [pc, #512]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80044a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	4a7f      	ldr	r2, [pc, #508]	; (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80044ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044b4:	e01f      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        pllvco = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
      break;
 80044ba:	e01c      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044bc:	4b79      	ldr	r3, [pc, #484]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c8:	d102      	bne.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      {
        pllvco = HSI_VALUE;
 80044ca:	4b79      	ldr	r3, [pc, #484]	; (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80044cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044ce:	e012      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        pllvco = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
      break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044d6:	4b73      	ldr	r3, [pc, #460]	; (80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e2:	d102      	bne.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        pllvco = HSE_VALUE;
 80044e4:	4b73      	ldr	r3, [pc, #460]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80044e6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044e8:	e005      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        pllvco = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
      break;
 80044ee:	e002      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
    default:
      /* No source */
      pllvco = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
      break;
 80044f4:	bf00      	nop
    }

    switch(PeriphClk)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fc:	f000 842d 	beq.w	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004506:	f200 850e 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004510:	f000 80e2 	beq.w	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800451a:	f200 8504 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004524:	f000 80d8 	beq.w	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800452e:	f200 84fa 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	f000 837a 	beq.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	f200 84f0 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454c:	f000 84c6 	beq.w	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004556:	f200 84e6 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004560:	f000 82e9 	beq.w	8004b36 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800456a:	f200 84dc 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004574:	f000 80b0 	beq.w	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457e:	f200 84d2 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004588:	f000 809e 	beq.w	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004592:	f200 84c8 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459c:	f000 808c 	beq.w	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	f200 84be 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	f000 844a 	beq.w	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ba:	f200 84b4 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c4:	f000 83f2 	beq.w	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ce:	f200 84aa 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d8:	f000 8393 	beq.w	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e2:	f200 84a0 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b80      	cmp	r3, #128	; 0x80
 80045ea:	f000 835e 	beq.w	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x902>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	f200 8498 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d84b      	bhi.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8491 	beq.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	2b1f      	cmp	r3, #31
 800460a:	f200 848c 	bhi.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	0800482f 	.word	0x0800482f
 8004618:	0800489f 	.word	0x0800489f
 800461c:	08004f27 	.word	0x08004f27
 8004620:	08004933 	.word	0x08004933
 8004624:	08004f27 	.word	0x08004f27
 8004628:	08004f27 	.word	0x08004f27
 800462c:	08004f27 	.word	0x08004f27
 8004630:	080049bb 	.word	0x080049bb
 8004634:	08004f27 	.word	0x08004f27
 8004638:	08004f27 	.word	0x08004f27
 800463c:	08004f27 	.word	0x08004f27
 8004640:	08004f27 	.word	0x08004f27
 8004644:	08004f27 	.word	0x08004f27
 8004648:	08004f27 	.word	0x08004f27
 800464c:	08004f27 	.word	0x08004f27
 8004650:	08004a33 	.word	0x08004a33
 8004654:	08004f27 	.word	0x08004f27
 8004658:	08004f27 	.word	0x08004f27
 800465c:	08004f27 	.word	0x08004f27
 8004660:	08004f27 	.word	0x08004f27
 8004664:	08004f27 	.word	0x08004f27
 8004668:	08004f27 	.word	0x08004f27
 800466c:	08004f27 	.word	0x08004f27
 8004670:	08004f27 	.word	0x08004f27
 8004674:	08004f27 	.word	0x08004f27
 8004678:	08004f27 	.word	0x08004f27
 800467c:	08004f27 	.word	0x08004f27
 8004680:	08004f27 	.word	0x08004f27
 8004684:	08004f27 	.word	0x08004f27
 8004688:	08004f27 	.word	0x08004f27
 800468c:	08004f27 	.word	0x08004f27
 8004690:	08004ab5 	.word	0x08004ab5
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b40      	cmp	r3, #64	; 0x40
 8004698:	f000 82db 	beq.w	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800469c:	f000 bc43 	b.w	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80046a0:	08011a4c 	.word	0x08011a4c
 80046a4:	40021000 	.word	0x40021000
 80046a8:	0003d090 	.word	0x0003d090
 80046ac:	08011c94 	.word	0x08011c94
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046be:	f000 ff07 	bl	80054d0 <RCCEx_GetSAIxPeriphCLKFreq>
 80046c2:	61f8      	str	r0, [r7, #28]
      break;
 80046c4:	f000 bc30 	b.w	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80046c8:	69b9      	ldr	r1, [r7, #24]
 80046ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80046ce:	f000 feff 	bl	80054d0 <RCCEx_GetSAIxPeriphCLKFreq>
 80046d2:	61f8      	str	r0, [r7, #28]
      break;
 80046d4:	f000 bc28 	b.w	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80046d8:	4ba6      	ldr	r3, [pc, #664]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046ea:	d015      	beq.n	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80046f2:	f200 8092 	bhi.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fc:	d029      	beq.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004704:	f200 8089 	bhi.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d07b      	beq.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004714:	d04a      	beq.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x404>
          break;
 8004716:	e080      	b.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004718:	4b96      	ldr	r3, [pc, #600]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d17c      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004724:	4b93      	ldr	r3, [pc, #588]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 8004730:	4b90      	ldr	r3, [pc, #576]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
 800473c:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	4a8b      	ldr	r2, [pc, #556]	; (8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800474a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474e:	61fb      	str	r3, [r7, #28]
          break;
 8004750:	e065      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004752:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800475e:	d160      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004760:	4b84      	ldr	r3, [pc, #528]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476c:	d159      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800476e:	4b81      	ldr	r3, [pc, #516]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004778:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	fb03 f202 	mul.w	r2, r3, r2
 8004782:	4b7c      	ldr	r3, [pc, #496]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	3301      	adds	r3, #1
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004794:	4b77      	ldr	r3, [pc, #476]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0d5b      	lsrs	r3, r3, #21
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	3301      	adds	r3, #1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	61fb      	str	r3, [r7, #28]
          break;
 80047aa:	e03a      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80047ac:	4b71      	ldr	r3, [pc, #452]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b8:	d135      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80047ba:	4b6e      	ldr	r3, [pc, #440]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c6:	d12e      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	0a1b      	lsrs	r3, r3, #8
 80047ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	fb03 f202 	mul.w	r2, r3, r2
 80047dc:	4b65      	ldr	r3, [pc, #404]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	3301      	adds	r3, #1
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80047ee:	4b61      	ldr	r3, [pc, #388]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	0d5b      	lsrs	r3, r3, #21
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	3301      	adds	r3, #1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	61fb      	str	r3, [r7, #28]
          break;
 8004804:	e00f      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004806:	4b5b      	ldr	r3, [pc, #364]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d10a      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            frequency = HSI48_VALUE;
 8004814:	4b59      	ldr	r3, [pc, #356]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004816:	61fb      	str	r3, [r7, #28]
          break;
 8004818:	e007      	b.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
          break;
 800481a:	bf00      	nop
 800481c:	e384      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800481e:	bf00      	nop
 8004820:	e382      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004822:	bf00      	nop
 8004824:	e380      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004826:	bf00      	nop
 8004828:	e37e      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800482a:	bf00      	nop
        break;
 800482c:	e37c      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800482e:	4b51      	ldr	r3, [pc, #324]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d828      	bhi.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004840:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>)
 8004842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004846:	bf00      	nop
 8004848:	08004859 	.word	0x08004859
 800484c:	08004861 	.word	0x08004861
 8004850:	08004869 	.word	0x08004869
 8004854:	0800487d 	.word	0x0800487d
          frequency = HAL_RCC_GetPCLK2Freq();
 8004858:	f7ff f808 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 800485c:	61f8      	str	r0, [r7, #28]
          break;
 800485e:	e01d      	b.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = HAL_RCC_GetSysClockFreq();
 8004860:	f7fe ff56 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004864:	61f8      	str	r0, [r7, #28]
          break;
 8004866:	e019      	b.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004868:	4b42      	ldr	r3, [pc, #264]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d10f      	bne.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
            frequency = HSI_VALUE;
 8004876:	4b42      	ldr	r3, [pc, #264]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004878:	61fb      	str	r3, [r7, #28]
          break;
 800487a:	e00c      	b.n	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800487c:	4b3d      	ldr	r3, [pc, #244]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d107      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
            frequency = LSE_VALUE;
 800488a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488e:	61fb      	str	r3, [r7, #28]
          break;
 8004890:	e003      	b.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          break;
 8004892:	bf00      	nop
 8004894:	e348      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004896:	bf00      	nop
 8004898:	e346      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800489a:	bf00      	nop
        break;
 800489c:	e344      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800489e:	4b35      	ldr	r3, [pc, #212]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d83a      	bhi.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	08004927 	.word	0x08004927
 80048c0:	08004927 	.word	0x08004927
 80048c4:	08004927 	.word	0x08004927
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	08004927 	.word	0x08004927
 80048d0:	08004927 	.word	0x08004927
 80048d4:	08004927 	.word	0x08004927
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	08004927 	.word	0x08004927
 80048e0:	08004927 	.word	0x08004927
 80048e4:	08004927 	.word	0x08004927
 80048e8:	08004911 	.word	0x08004911
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fe ffa8 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 80048f0:	61f8      	str	r0, [r7, #28]
          break;
 80048f2:	e01d      	b.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          frequency = HAL_RCC_GetSysClockFreq();
 80048f4:	f7fe ff0c 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80048f8:	61f8      	str	r0, [r7, #28]
          break;
 80048fa:	e019      	b.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048fc:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004908:	d10f      	bne.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x582>
            frequency = HSI_VALUE;
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800490c:	61fb      	str	r3, [r7, #28]
          break;
 800490e:	e00c      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x582>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004910:	4b18      	ldr	r3, [pc, #96]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d107      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
            frequency = LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	61fb      	str	r3, [r7, #28]
          break;
 8004924:	e003      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          break;
 8004926:	bf00      	nop
 8004928:	e2fe      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800492a:	bf00      	nop
 800492c:	e2fc      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 800492e:	bf00      	nop
        break;
 8004930:	e2fa      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b30      	cmp	r3, #48	; 0x30
 8004942:	d029      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b30      	cmp	r3, #48	; 0x30
 8004948:	d831      	bhi.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b20      	cmp	r3, #32
 800494e:	d019      	beq.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b20      	cmp	r3, #32
 8004954:	d82b      	bhi.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b10      	cmp	r3, #16
 8004960:	d004      	beq.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
          break;
 8004962:	e024      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x606>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe ff6c 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004968:	61f8      	str	r0, [r7, #28]
          break;
 800496a:	e025      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
          frequency = HAL_RCC_GetSysClockFreq();
 800496c:	f7fe fed0 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004970:	61f8      	str	r0, [r7, #28]
          break;
 8004972:	e021      	b.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8004974:	40021000 	.word	0x40021000
 8004978:	08011c94 	.word	0x08011c94
 800497c:	02dc6c00 	.word	0x02dc6c00
 8004980:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004984:	4b8f      	ldr	r3, [pc, #572]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004990:	d10f      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
            frequency = HSI_VALUE;
 8004992:	4b8d      	ldr	r3, [pc, #564]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004994:	61fb      	str	r3, [r7, #28]
          break;
 8004996:	e00c      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004998:	4b8a      	ldr	r3, [pc, #552]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d107      	bne.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
            frequency = LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049aa:	61fb      	str	r3, [r7, #28]
          break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
          break;
 80049ae:	bf00      	nop
 80049b0:	e2ba      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 80049b2:	bf00      	nop
 80049b4:	e2b8      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 80049b6:	bf00      	nop
        break;
 80049b8:	e2b6      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80049ba:	4b82      	ldr	r3, [pc, #520]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2bc0      	cmp	r3, #192	; 0xc0
 80049ca:	d021      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2bc0      	cmp	r3, #192	; 0xc0
 80049d0:	d829      	bhi.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d011      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d823      	bhi.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d004      	beq.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          break;
 80049ea:	e01c      	b.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049ec:	f7fe ff28 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 80049f0:	61f8      	str	r0, [r7, #28]
          break;
 80049f2:	e01d      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
          frequency = HAL_RCC_GetSysClockFreq();
 80049f4:	f7fe fe8c 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80049f8:	61f8      	str	r0, [r7, #28]
          break;
 80049fa:	e019      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049fc:	4b71      	ldr	r3, [pc, #452]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d10f      	bne.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
            frequency = HSI_VALUE;
 8004a0a:	4b6f      	ldr	r3, [pc, #444]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004a0c:	61fb      	str	r3, [r7, #28]
          break;
 8004a0e:	e00c      	b.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a10:	4b6c      	ldr	r3, [pc, #432]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x686>
            frequency = LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	61fb      	str	r3, [r7, #28]
          break;
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x686>
          break;
 8004a26:	bf00      	nop
 8004a28:	e27e      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004a2a:	bf00      	nop
 8004a2c:	e27c      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004a2e:	bf00      	nop
        break;
 8004a30:	e27a      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a32:	4b64      	ldr	r3, [pc, #400]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a44:	d025      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d82c      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a54:	d013      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5c:	d824      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	d004      	beq.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
          break;
 8004a6c:	e01c      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a6e:	f7fe fee7 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004a72:	61f8      	str	r0, [r7, #28]
          break;
 8004a74:	e01d      	b.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe fe4b 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004a7a:	61f8      	str	r0, [r7, #28]
          break;
 8004a7c:	e019      	b.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a7e:	4b51      	ldr	r3, [pc, #324]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d10f      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            frequency = HSI_VALUE;
 8004a8c:	4b4e      	ldr	r3, [pc, #312]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004a8e:	61fb      	str	r3, [r7, #28]
          break;
 8004a90:	e00c      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x704>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a92:	4b4c      	ldr	r3, [pc, #304]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
            frequency = LSE_VALUE;
 8004aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa4:	61fb      	str	r3, [r7, #28]
          break;
 8004aa6:	e003      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
          break;
 8004aa8:	bf00      	nop
 8004aaa:	e23d      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004aac:	bf00      	nop
 8004aae:	e23b      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ab0:	bf00      	nop
        break;
 8004ab2:	e239      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ac6:	d025      	beq.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ace:	d82c      	bhi.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ade:	d824      	bhi.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d004      	beq.n	8004af8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
          break;
 8004aee:	e01c      	b.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004af0:	f7fe fea6 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004af4:	61f8      	str	r0, [r7, #28]
          break;
 8004af6:	e01d      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004af8:	f7fe fe0a 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004afc:	61f8      	str	r0, [r7, #28]
          break;
 8004afe:	e019      	b.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b00:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d10f      	bne.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HSI_VALUE;
 8004b0e:	4b2e      	ldr	r3, [pc, #184]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8004b10:	61fb      	str	r3, [r7, #28]
          break;
 8004b12:	e00c      	b.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b14:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d107      	bne.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            frequency = LSE_VALUE;
 8004b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b26:	61fb      	str	r3, [r7, #28]
          break;
 8004b28:	e003      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
          break;
 8004b2a:	bf00      	nop
 8004b2c:	e1fc      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004b2e:	bf00      	nop
 8004b30:	e1fa      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004b32:	bf00      	nop
        break;
 8004b34:	e1f8      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004b36:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b48:	d00c      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b50:	d868      	bhi.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b58:	d008      	beq.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b60:	d034      	beq.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 8004b62:	e05f      	b.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b64:	f7fe fdd4 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004b68:	61f8      	str	r0, [r7, #28]
          break;
 8004b6a:	e060      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004b6c:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b78:	d156      	bne.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d050      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b90:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	fb03 f202 	mul.w	r2, r3, r2
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	0e5b      	lsrs	r3, r3, #25
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	61fb      	str	r3, [r7, #28]
          break;
 8004bc2:	e031      	b.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004bcc:	4b9c      	ldr	r3, [pc, #624]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd8:	d128      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8004bda:	4b99      	ldr	r3, [pc, #612]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d022      	beq.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004be6:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	fb03 f202 	mul.w	r2, r3, r2
 8004bfa:	4b91      	ldr	r3, [pc, #580]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	3301      	adds	r3, #1
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004c0c:	4b8c      	ldr	r3, [pc, #560]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	0e5b      	lsrs	r3, r3, #25
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	61fb      	str	r3, [r7, #28]
          break;
 8004c22:	e003      	b.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
          break;
 8004c24:	bf00      	nop
 8004c26:	e17f      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004c28:	bf00      	nop
 8004c2a:	e17d      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004c2c:	bf00      	nop
        break;
 8004c2e:	e17b      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004c30:	4b83      	ldr	r3, [pc, #524]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c3a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004c42:	f7fe fe13 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8004c46:	61f8      	str	r0, [r7, #28]
        break;
 8004c48:	e16e      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7fe fd61 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004c4e:	61f8      	str	r0, [r7, #28]
        break;
 8004c50:	e16a      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c52:	4b7b      	ldr	r3, [pc, #492]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c64:	d013      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6c:	d819      	bhi.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          break;
 8004c7c:	e011      	b.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c7e:	f7fe fddf 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004c82:	61f8      	str	r0, [r7, #28]
          break;
 8004c84:	e010      	b.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c86:	f7fe fd43 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004c8a:	61f8      	str	r0, [r7, #28]
          break;
 8004c8c:	e00c      	b.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x900>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c8e:	4b6c      	ldr	r3, [pc, #432]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c9a:	d104      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
            frequency = HSI_VALUE;
 8004c9c:	4b69      	ldr	r3, [pc, #420]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c9e:	61fb      	str	r3, [r7, #28]
          break;
 8004ca0:	e001      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
          break;
 8004ca2:	bf00      	nop
 8004ca4:	e140      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ca6:	bf00      	nop
        break;
 8004ca8:	e13e      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004caa:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbc:	d013      	beq.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc4:	d819      	bhi.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd2:	d004      	beq.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 8004cd4:	e011      	b.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x952>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cd6:	f7fe fdb3 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004cda:	61f8      	str	r0, [r7, #28]
          break;
 8004cdc:	e010      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cde:	f7fe fd17 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004ce2:	61f8      	str	r0, [r7, #28]
          break;
 8004ce4:	e00c      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ce6:	4b56      	ldr	r3, [pc, #344]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf2:	d104      	bne.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            frequency = HSI_VALUE;
 8004cf4:	4b53      	ldr	r3, [pc, #332]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004cf6:	61fb      	str	r3, [r7, #28]
          break;
 8004cf8:	e001      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          break;
 8004cfa:	bf00      	nop
 8004cfc:	e114      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004cfe:	bf00      	nop
        break;
 8004d00:	e112      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004d02:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d14:	d013      	beq.n	8004d3e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d1c:	d819      	bhi.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2a:	d004      	beq.n	8004d36 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004d2c:	e011      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d2e:	f7fe fd87 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004d32:	61f8      	str	r0, [r7, #28]
          break;
 8004d34:	e010      	b.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fe fceb 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004d3a:	61f8      	str	r0, [r7, #28]
          break;
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d3e:	4b40      	ldr	r3, [pc, #256]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4a:	d104      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
            frequency = HSI_VALUE;
 8004d4c:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004d4e:	61fb      	str	r3, [r7, #28]
          break;
 8004d50:	e001      	b.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
          break;
 8004d52:	bf00      	nop
 8004d54:	e0e8      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004d56:	bf00      	nop
        break;
 8004d58:	e0e6      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d011      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9e8>
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d818      	bhi.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d004      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
          break;
 8004d7e:	e011      	b.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fe fd5e 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004d84:	61f8      	str	r0, [r7, #28]
          break;
 8004d86:	e010      	b.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d88:	f7fe fcc2 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8004d8c:	61f8      	str	r0, [r7, #28]
          break;
 8004d8e:	e00c      	b.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d104      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
            frequency = HSI_VALUE;
 8004d9e:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004da0:	61fb      	str	r3, [r7, #28]
          break;
 8004da2:	e001      	b.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
          break;
 8004da4:	bf00      	nop
 8004da6:	e0bf      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004da8:	bf00      	nop
        break;
 8004daa:	e0bd      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004dac:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dbe:	d02c      	beq.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dc6:	d833      	bhi.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dce:	d01a      	beq.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dd6:	d82b      	bhi.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004de4:	d004      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
          break;
 8004de6:	e023      	b.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004de8:	f7fe fd2a 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004dec:	61f8      	str	r0, [r7, #28]
          break;
 8004dee:	e026      	b.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004df0:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d11a      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
              frequency = LSI_VALUE;
 8004dfe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e02:	61fb      	str	r3, [r7, #28]
          break;
 8004e04:	e016      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e12:	d111      	bne.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
            frequency = HSI_VALUE;
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004e16:	61fb      	str	r3, [r7, #28]
          break;
 8004e18:	e00e      	b.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d109      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
            frequency = LSE_VALUE;
 8004e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2c:	61fb      	str	r3, [r7, #28]
          break;
 8004e2e:	e005      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
          break;
 8004e30:	bf00      	nop
 8004e32:	e079      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004e34:	bf00      	nop
 8004e36:	e077      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004e38:	bf00      	nop
 8004e3a:	e075      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004e3c:	bf00      	nop
        break;
 8004e3e:	e073      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
 8004e40:	40021000 	.word	0x40021000
 8004e44:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004e48:	4b3a      	ldr	r3, [pc, #232]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e5a:	d02c      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e62:	d833      	bhi.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e6a:	d01a      	beq.n	8004ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xafa>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e72:	d82b      	bhi.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e80:	d004      	beq.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          break;
 8004e82:	e023      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe fcdc 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004e88:	61f8      	str	r0, [r7, #28]
          break;
 8004e8a:	e026      	b.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004e8c:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d11a      	bne.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>
              frequency = LSI_VALUE;
 8004e9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004e9e:	61fb      	str	r3, [r7, #28]
          break;
 8004ea0:	e016      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb28>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ea2:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eae:	d111      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
            frequency = HSI_VALUE;
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
 8004eb2:	61fb      	str	r3, [r7, #28]
          break;
 8004eb4:	e00e      	b.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
            frequency = LSE_VALUE;
 8004ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec8:	61fb      	str	r3, [r7, #28]
          break;
 8004eca:	e005      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
          break;
 8004ecc:	bf00      	nop
 8004ece:	e02b      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ed0:	bf00      	nop
 8004ed2:	e029      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ed4:	bf00      	nop
 8004ed6:	e027      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          break;
 8004ed8:	bf00      	nop
        break;
 8004eda:	e025      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004edc:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d004      	beq.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef4:	d004      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>
          break;
 8004ef6:	e00d      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fe fca2 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8004efc:	61f8      	str	r0, [r7, #28]
          break;
 8004efe:	e009      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
            frequency = HSI_VALUE;
 8004f0e:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
 8004f10:	61fb      	str	r3, [r7, #28]
          break;
 8004f12:	bf00      	nop
        break;
 8004f14:	e008      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004f16:	bf00      	nop
 8004f18:	e006      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e004      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004f1e:	bf00      	nop
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
      break;
 8004f26:	bf00      	nop
    }
  }

  return(frequency);
 8004f28:	69fb      	ldr	r3, [r7, #28]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000
 8004f38:	00f42400 	.word	0x00f42400

08004f3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x38>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d00c      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x38>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d008      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x38>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d004      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x38>
 8004f6a:	f640 315e 	movw	r1, #2910	; 0xb5e
 8004f6e:	4887      	ldr	r0, [pc, #540]	; (800518c <RCCEx_PLLSAI1_Config+0x250>)
 8004f70:	f7fb fdb5 	bl	8000ade <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <RCCEx_PLLSAI1_Config+0x48>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d904      	bls.n	8004f8e <RCCEx_PLLSAI1_Config+0x52>
 8004f84:	f640 315f 	movw	r1, #2911	; 0xb5f
 8004f88:	4880      	ldr	r0, [pc, #512]	; (800518c <RCCEx_PLLSAI1_Config+0x250>)
 8004f8a:	f7fb fda8 	bl	8000ade <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b07      	cmp	r3, #7
 8004f94:	d903      	bls.n	8004f9e <RCCEx_PLLSAI1_Config+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b56      	cmp	r3, #86	; 0x56
 8004f9c:	d904      	bls.n	8004fa8 <RCCEx_PLLSAI1_Config+0x6c>
 8004f9e:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8004fa2:	487a      	ldr	r0, [pc, #488]	; (800518c <RCCEx_PLLSAI1_Config+0x250>)
 8004fa4:	f7fb fd9b 	bl	8000ade <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0x90>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0x90>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <RCCEx_PLLSAI1_Config+0xa0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <RCCEx_PLLSAI1_Config+0xaa>
 8004fdc:	f640 3161 	movw	r1, #2913	; 0xb61
 8004fe0:	486a      	ldr	r0, [pc, #424]	; (800518c <RCCEx_PLLSAI1_Config+0x250>)
 8004fe2:	f7fb fd7c 	bl	8000ade <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fe6:	4b6a      	ldr	r3, [pc, #424]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d018      	beq.n	8005024 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ff2:	4b67      	ldr	r3, [pc, #412]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0203 	and.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d10d      	bne.n	800501e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
       ||
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800500a:	4b61      	ldr	r3, [pc, #388]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
       ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d047      	beq.n	80050ae <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	73fb      	strb	r3, [r7, #15]
 8005022:	e044      	b.n	80050ae <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d018      	beq.n	800505e <RCCEx_PLLSAI1_Config+0x122>
 800502c:	2b03      	cmp	r3, #3
 800502e:	d825      	bhi.n	800507c <RCCEx_PLLSAI1_Config+0x140>
 8005030:	2b01      	cmp	r3, #1
 8005032:	d002      	beq.n	800503a <RCCEx_PLLSAI1_Config+0xfe>
 8005034:	2b02      	cmp	r3, #2
 8005036:	d009      	beq.n	800504c <RCCEx_PLLSAI1_Config+0x110>
 8005038:	e020      	b.n	800507c <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800503a:	4b55      	ldr	r3, [pc, #340]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d11d      	bne.n	8005082 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504a:	e01a      	b.n	8005082 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d116      	bne.n	8005086 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800505c:	e013      	b.n	8005086 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800505e:	4b4c      	ldr	r3, [pc, #304]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10f      	bne.n	800508a <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800506a:	4b49      	ldr	r3, [pc, #292]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800507a:	e006      	b.n	800508a <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	73fb      	strb	r3, [r7, #15]
      break;
 8005080:	e004      	b.n	800508c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <RCCEx_PLLSAI1_Config+0x150>
      break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <RCCEx_PLLSAI1_Config+0x150>
      break;
 800508a:	bf00      	nop
    }

    if(status == HAL_OK)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005092:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	430b      	orrs	r3, r1
 80050a8:	4939      	ldr	r1, [pc, #228]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 80ba 	bne.w	800522a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050b6:	4b36      	ldr	r3, [pc, #216]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a35      	ldr	r2, [pc, #212]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 80050bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fc f9a3 	bl	800140c <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c8:	e009      	b.n	80050de <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ca:	f7fc f99f 	bl	800140c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	73fb      	strb	r3, [r7, #15]
        break;
 80050dc:	e005      	b.n	80050ea <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050de:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ef      	bne.n	80050ca <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 809c 	bne.w	800522a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d11d      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d903      	bls.n	8005108 <RCCEx_PLLSAI1_Config+0x1cc>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b1f      	cmp	r3, #31
 8005106:	d904      	bls.n	8005112 <RCCEx_PLLSAI1_Config+0x1d6>
 8005108:	f640 31b4 	movw	r1, #2996	; 0xbb4
 800510c:	481f      	ldr	r0, [pc, #124]	; (800518c <RCCEx_PLLSAI1_Config+0x250>)
 800510e:	f7fb fce6 	bl	8000ade <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005112:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800511a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6892      	ldr	r2, [r2, #8]
 8005122:	0211      	lsls	r1, r2, #8
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68d2      	ldr	r2, [r2, #12]
 8005128:	06d2      	lsls	r2, r2, #27
 800512a:	430a      	orrs	r2, r1
 800512c:	4918      	ldr	r1, [pc, #96]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 800512e:	4313      	orrs	r3, r2
 8005130:	610b      	str	r3, [r1, #16]
 8005132:	e056      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d12c      	bne.n	8005194 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d010      	beq.n	8005164 <RCCEx_PLLSAI1_Config+0x228>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d00c      	beq.n	8005164 <RCCEx_PLLSAI1_Config+0x228>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b06      	cmp	r3, #6
 8005150:	d008      	beq.n	8005164 <RCCEx_PLLSAI1_Config+0x228>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b08      	cmp	r3, #8
 8005158:	d004      	beq.n	8005164 <RCCEx_PLLSAI1_Config+0x228>
 800515a:	f640 31d8 	movw	r1, #3032	; 0xbd8
 800515e:	480b      	ldr	r0, [pc, #44]	; (800518c <RCCEx_PLLSAI1_Config+0x250>)
 8005160:	f7fb fcbd 	bl	8000ade <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800516c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6892      	ldr	r2, [r2, #8]
 8005174:	0211      	lsls	r1, r2, #8
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6912      	ldr	r2, [r2, #16]
 800517a:	0852      	lsrs	r2, r2, #1
 800517c:	3a01      	subs	r2, #1
 800517e:	0552      	lsls	r2, r2, #21
 8005180:	430a      	orrs	r2, r1
 8005182:	4903      	ldr	r1, [pc, #12]	; (8005190 <RCCEx_PLLSAI1_Config+0x254>)
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
 8005188:	e02b      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0x2a6>
 800518a:	bf00      	nop
 800518c:	08011a4c 	.word	0x08011a4c
 8005190:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d010      	beq.n	80051be <RCCEx_PLLSAI1_Config+0x282>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d00c      	beq.n	80051be <RCCEx_PLLSAI1_Config+0x282>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	2b06      	cmp	r3, #6
 80051aa:	d008      	beq.n	80051be <RCCEx_PLLSAI1_Config+0x282>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d004      	beq.n	80051be <RCCEx_PLLSAI1_Config+0x282>
 80051b4:	f640 31ea 	movw	r1, #3050	; 0xbea
 80051b8:	481e      	ldr	r0, [pc, #120]	; (8005234 <RCCEx_PLLSAI1_Config+0x2f8>)
 80051ba:	f7fb fc90 	bl	8000ade <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051be:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <RCCEx_PLLSAI1_Config+0x2fc>)
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6892      	ldr	r2, [r2, #8]
 80051ce:	0211      	lsls	r1, r2, #8
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6952      	ldr	r2, [r2, #20]
 80051d4:	0852      	lsrs	r2, r2, #1
 80051d6:	3a01      	subs	r2, #1
 80051d8:	0652      	lsls	r2, r2, #25
 80051da:	430a      	orrs	r2, r1
 80051dc:	4916      	ldr	r1, [pc, #88]	; (8005238 <RCCEx_PLLSAI1_Config+0x2fc>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <RCCEx_PLLSAI1_Config+0x2fc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <RCCEx_PLLSAI1_Config+0x2fc>)
 80051e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fc f90d 	bl	800140c <HAL_GetTick>
 80051f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051f4:	e009      	b.n	800520a <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051f6:	f7fc f909 	bl	800140c <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d902      	bls.n	800520a <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	73fb      	strb	r3, [r7, #15]
          break;
 8005208:	e005      	b.n	8005216 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <RCCEx_PLLSAI1_Config+0x2fc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ef      	beq.n	80051f6 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <RCCEx_PLLSAI1_Config+0x2fc>)
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	4904      	ldr	r1, [pc, #16]	; (8005238 <RCCEx_PLLSAI1_Config+0x2fc>)
 8005226:	4313      	orrs	r3, r2
 8005228:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	08011a4c 	.word	0x08011a4c
 8005238:	40021000 	.word	0x40021000

0800523c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d010      	beq.n	8005274 <RCCEx_PLLSAI2_Config+0x38>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d00c      	beq.n	8005274 <RCCEx_PLLSAI2_Config+0x38>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d008      	beq.n	8005274 <RCCEx_PLLSAI2_Config+0x38>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b03      	cmp	r3, #3
 8005268:	d004      	beq.n	8005274 <RCCEx_PLLSAI2_Config+0x38>
 800526a:	f640 412b 	movw	r1, #3115	; 0xc2b
 800526e:	4896      	ldr	r0, [pc, #600]	; (80054c8 <RCCEx_PLLSAI2_Config+0x28c>)
 8005270:	f7fb fc35 	bl	8000ade <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <RCCEx_PLLSAI2_Config+0x48>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d904      	bls.n	800528e <RCCEx_PLLSAI2_Config+0x52>
 8005284:	f640 412c 	movw	r1, #3116	; 0xc2c
 8005288:	488f      	ldr	r0, [pc, #572]	; (80054c8 <RCCEx_PLLSAI2_Config+0x28c>)
 800528a:	f7fb fc28 	bl	8000ade <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b07      	cmp	r3, #7
 8005294:	d903      	bls.n	800529e <RCCEx_PLLSAI2_Config+0x62>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b56      	cmp	r3, #86	; 0x56
 800529c:	d904      	bls.n	80052a8 <RCCEx_PLLSAI2_Config+0x6c>
 800529e:	f640 412d 	movw	r1, #3117	; 0xc2d
 80052a2:	4889      	ldr	r0, [pc, #548]	; (80054c8 <RCCEx_PLLSAI2_Config+0x28c>)
 80052a4:	f7fb fc1b 	bl	8000ade <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <RCCEx_PLLSAI2_Config+0x84>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <RCCEx_PLLSAI2_Config+0x94>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <RCCEx_PLLSAI2_Config+0x9e>
 80052d0:	f640 412e 	movw	r1, #3118	; 0xc2e
 80052d4:	487c      	ldr	r0, [pc, #496]	; (80054c8 <RCCEx_PLLSAI2_Config+0x28c>)
 80052d6:	f7fb fc02 	bl	8000ade <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052da:	4b7c      	ldr	r3, [pc, #496]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d018      	beq.n	8005318 <RCCEx_PLLSAI2_Config+0xdc>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052e6:	4b79      	ldr	r3, [pc, #484]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0203 	and.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d10d      	bne.n	8005312 <RCCEx_PLLSAI2_Config+0xd6>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
       ||
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <RCCEx_PLLSAI2_Config+0xd6>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052fe:	4b73      	ldr	r3, [pc, #460]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
       ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d047      	beq.n	80053a2 <RCCEx_PLLSAI2_Config+0x166>
#endif
      )
    {
      status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	e044      	b.n	80053a2 <RCCEx_PLLSAI2_Config+0x166>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d018      	beq.n	8005352 <RCCEx_PLLSAI2_Config+0x116>
 8005320:	2b03      	cmp	r3, #3
 8005322:	d825      	bhi.n	8005370 <RCCEx_PLLSAI2_Config+0x134>
 8005324:	2b01      	cmp	r3, #1
 8005326:	d002      	beq.n	800532e <RCCEx_PLLSAI2_Config+0xf2>
 8005328:	2b02      	cmp	r3, #2
 800532a:	d009      	beq.n	8005340 <RCCEx_PLLSAI2_Config+0x104>
 800532c:	e020      	b.n	8005370 <RCCEx_PLLSAI2_Config+0x134>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800532e:	4b67      	ldr	r3, [pc, #412]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d11d      	bne.n	8005376 <RCCEx_PLLSAI2_Config+0x13a>
      {
        status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533e:	e01a      	b.n	8005376 <RCCEx_PLLSAI2_Config+0x13a>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005340:	4b62      	ldr	r3, [pc, #392]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	2b00      	cmp	r3, #0
 800534a:	d116      	bne.n	800537a <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005350:	e013      	b.n	800537a <RCCEx_PLLSAI2_Config+0x13e>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005352:	4b5e      	ldr	r3, [pc, #376]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10f      	bne.n	800537e <RCCEx_PLLSAI2_Config+0x142>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800535e:	4b5b      	ldr	r3, [pc, #364]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <RCCEx_PLLSAI2_Config+0x142>
        {
          status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800536e:	e006      	b.n	800537e <RCCEx_PLLSAI2_Config+0x142>
    default:
      status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      break;
 8005374:	e004      	b.n	8005380 <RCCEx_PLLSAI2_Config+0x144>
      break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <RCCEx_PLLSAI2_Config+0x144>
      break;
 800537e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10d      	bne.n	80053a2 <RCCEx_PLLSAI2_Config+0x166>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005386:	4b51      	ldr	r3, [pc, #324]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	3b01      	subs	r3, #1
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	430b      	orrs	r3, r1
 800539c:	494b      	ldr	r1, [pc, #300]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 8089 	bne.w	80054bc <RCCEx_PLLSAI2_Config+0x280>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a47      	ldr	r2, [pc, #284]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 80053b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b6:	f7fc f829 	bl	800140c <HAL_GetTick>
 80053ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053bc:	e009      	b.n	80053d2 <RCCEx_PLLSAI2_Config+0x196>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053be:	f7fc f825 	bl	800140c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d902      	bls.n	80053d2 <RCCEx_PLLSAI2_Config+0x196>
      {
        status = HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	73fb      	strb	r3, [r7, #15]
        break;
 80053d0:	e005      	b.n	80053de <RCCEx_PLLSAI2_Config+0x1a2>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053d2:	4b3e      	ldr	r3, [pc, #248]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1ef      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x182>
      }
    }

    if(status == HAL_OK)
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d16b      	bne.n	80054bc <RCCEx_PLLSAI2_Config+0x280>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d11d      	bne.n	8005426 <RCCEx_PLLSAI2_Config+0x1ea>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d903      	bls.n	80053fa <RCCEx_PLLSAI2_Config+0x1be>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	2b1f      	cmp	r3, #31
 80053f8:	d904      	bls.n	8005404 <RCCEx_PLLSAI2_Config+0x1c8>
 80053fa:	f640 4181 	movw	r1, #3201	; 0xc81
 80053fe:	4832      	ldr	r0, [pc, #200]	; (80054c8 <RCCEx_PLLSAI2_Config+0x28c>)
 8005400:	f7fb fb6d 	bl	8000ade <assert_failed>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005404:	4b31      	ldr	r3, [pc, #196]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800540c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6892      	ldr	r2, [r2, #8]
 8005414:	0211      	lsls	r1, r2, #8
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68d2      	ldr	r2, [r2, #12]
 800541a:	06d2      	lsls	r2, r2, #27
 800541c:	430a      	orrs	r2, r1
 800541e:	492b      	ldr	r1, [pc, #172]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005420:	4313      	orrs	r3, r2
 8005422:	614b      	str	r3, [r1, #20]
 8005424:	e026      	b.n	8005474 <RCCEx_PLLSAI2_Config+0x238>
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d010      	beq.n	8005450 <RCCEx_PLLSAI2_Config+0x214>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d00c      	beq.n	8005450 <RCCEx_PLLSAI2_Config+0x214>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b06      	cmp	r3, #6
 800543c:	d008      	beq.n	8005450 <RCCEx_PLLSAI2_Config+0x214>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b08      	cmp	r3, #8
 8005444:	d004      	beq.n	8005450 <RCCEx_PLLSAI2_Config+0x214>
 8005446:	f640 41b9 	movw	r1, #3257	; 0xcb9
 800544a:	481f      	ldr	r0, [pc, #124]	; (80054c8 <RCCEx_PLLSAI2_Config+0x28c>)
 800544c:	f7fb fb47 	bl	8000ade <assert_failed>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6892      	ldr	r2, [r2, #8]
 8005460:	0211      	lsls	r1, r2, #8
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6912      	ldr	r2, [r2, #16]
 8005466:	0852      	lsrs	r2, r2, #1
 8005468:	3a01      	subs	r2, #1
 800546a:	0652      	lsls	r2, r2, #25
 800546c:	430a      	orrs	r2, r1
 800546e:	4917      	ldr	r1, [pc, #92]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005470:	4313      	orrs	r3, r2
 8005472:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a14      	ldr	r2, [pc, #80]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fb ffc4 	bl	800140c <HAL_GetTick>
 8005484:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005486:	e009      	b.n	800549c <RCCEx_PLLSAI2_Config+0x260>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005488:	f7fb ffc0 	bl	800140c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d902      	bls.n	800549c <RCCEx_PLLSAI2_Config+0x260>
        {
          status = HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	73fb      	strb	r3, [r7, #15]
          break;
 800549a:	e005      	b.n	80054a8 <RCCEx_PLLSAI2_Config+0x26c>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ef      	beq.n	8005488 <RCCEx_PLLSAI2_Config+0x24c>
        }
      }

      if(status == HAL_OK)
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <RCCEx_PLLSAI2_Config+0x280>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	4905      	ldr	r1, [pc, #20]	; (80054cc <RCCEx_PLLSAI2_Config+0x290>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	08011a4c 	.word	0x08011a4c
 80054cc:	40021000 	.word	0x40021000

080054d0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ec:	d10c      	bne.n	8005508 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80054ee:	4b77      	ldr	r3, [pc, #476]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054f8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005500:	d112      	bne.n	8005528 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005502:	4b73      	ldr	r3, [pc, #460]	; (80056d0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	e00f      	b.n	8005528 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550e:	d10b      	bne.n	8005528 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005510:	4b6e      	ldr	r3, [pc, #440]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800551a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005522:	d101      	bne.n	8005528 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005524:	4b6a      	ldr	r3, [pc, #424]	; (80056d0 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8005526:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 80c6 	bne.w	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800553a:	d003      	beq.n	8005544 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005542:	d13b      	bne.n	80055bc <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005544:	4b61      	ldr	r3, [pc, #388]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005550:	f040 80b3 	bne.w	80056ba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8005554:	4b5d      	ldr	r3, [pc, #372]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80ac 	beq.w	80056ba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005562:	4b5a      	ldr	r3, [pc, #360]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	091b      	lsrs	r3, r3, #4
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	3301      	adds	r3, #1
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005576:	4b55      	ldr	r3, [pc, #340]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005582:	4b52      	ldr	r3, [pc, #328]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	0edb      	lsrs	r3, r3, #27
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005594:	4b4d      	ldr	r3, [pc, #308]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 80055a0:	2311      	movs	r3, #17
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e001      	b.n	80055aa <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 80055a6:	2307      	movs	r3, #7
 80055a8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	fb03 f202 	mul.w	r2, r3, r2
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80055ba:	e07e      	b.n	80056ba <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d139      	bne.n	8005636 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80055c2:	4b42      	ldr	r3, [pc, #264]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ce:	d175      	bne.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80055d0:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d06f      	beq.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80055dc:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	3301      	adds	r3, #1
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80055fc:	4b33      	ldr	r3, [pc, #204]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	0edb      	lsrs	r3, r3, #27
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10a      	bne.n	8005624 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800560e:	4b2f      	ldr	r3, [pc, #188]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 800561a:	2311      	movs	r3, #17
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e001      	b.n	8005624 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8005620:	2307      	movs	r3, #7
 8005622:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	fb03 f202 	mul.w	r2, r3, r2
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e042      	b.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800563c:	d003      	beq.n	8005646 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005644:	d13a      	bne.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005646:	4b21      	ldr	r3, [pc, #132]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800564e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005652:	d133      	bne.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8005654:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02d      	beq.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005660:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	3301      	adds	r3, #1
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	0edb      	lsrs	r3, r3, #27
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800569e:	2311      	movs	r3, #17
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e001      	b.n	80056a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80056a4:	2307      	movs	r3, #7
 80056a6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	fb03 f202 	mul.w	r2, r3, r2
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	e000      	b.n	80056bc <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80056ba:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80056bc:	69fb      	ldr	r3, [r7, #28]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3724      	adds	r7, #36	; 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000
 80056d0:	001fff68 	.word	0x001fff68

080056d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e080      	b.n	80057e8 <HAL_SD_Init+0x114>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a41      	ldr	r2, [pc, #260]	; (80057f0 <HAL_SD_Init+0x11c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_SD_Init+0x26>
 80056f0:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80056f4:	483f      	ldr	r0, [pc, #252]	; (80057f4 <HAL_SD_Init+0x120>)
 80056f6:	f7fb f9f2 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_SD_Init+0x42>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	d004      	beq.n	8005716 <HAL_SD_Init+0x42>
 800570c:	f240 1175 	movw	r1, #373	; 0x175
 8005710:	4838      	ldr	r0, [pc, #224]	; (80057f4 <HAL_SD_Init+0x120>)
 8005712:	f7fb f9e4 	bl	8000ade <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_SD_Init+0x5e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005726:	d004      	beq.n	8005732 <HAL_SD_Init+0x5e>
 8005728:	f240 1177 	movw	r1, #375	; 0x177
 800572c:	4831      	ldr	r0, [pc, #196]	; (80057f4 <HAL_SD_Init+0x120>)
 800572e:	f7fb f9d6 	bl	8000ade <assert_failed>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_SD_Init+0x7a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005742:	d004      	beq.n	800574e <HAL_SD_Init+0x7a>
 8005744:	f240 1179 	movw	r1, #377	; 0x179
 8005748:	482a      	ldr	r0, [pc, #168]	; (80057f4 <HAL_SD_Init+0x120>)
 800574a:	f7fb f9c8 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00e      	beq.n	8005774 <HAL_SD_Init+0xa0>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575e:	d009      	beq.n	8005774 <HAL_SD_Init+0xa0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d004      	beq.n	8005774 <HAL_SD_Init+0xa0>
 800576a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800576e:	4821      	ldr	r0, [pc, #132]	; (80057f4 <HAL_SD_Init+0x120>)
 8005770:	f7fb f9b5 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <HAL_SD_Init+0xbc>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005784:	d004      	beq.n	8005790 <HAL_SD_Init+0xbc>
 8005786:	f240 117b 	movw	r1, #379	; 0x17b
 800578a:	481a      	ldr	r0, [pc, #104]	; (80057f4 <HAL_SD_Init+0x120>)
 800578c:	f7fb f9a7 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2bff      	cmp	r3, #255	; 0xff
 8005796:	d904      	bls.n	80057a2 <HAL_SD_Init+0xce>
 8005798:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800579c:	4815      	ldr	r0, [pc, #84]	; (80057f4 <HAL_SD_Init+0x120>)
 800579e:	f7fb f99e 	bl	8000ade <assert_failed>

  if(hsd->State == HAL_SD_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <HAL_SD_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fb f9bd 	bl	8000b34 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f818 	bl	80057f8 <HAL_SD_InitCard>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_SD_Init+0xfe>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e00a      	b.n	80057e8 <HAL_SD_Init+0x114>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40012800 	.word	0x40012800
 80057f4:	08011a88 	.word	0x08011a88

080057f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80057f8:	b5b0      	push	{r4, r5, r7, lr}
 80057fa:	b08e      	sub	sp, #56	; 0x38
 80057fc:	af04      	add	r7, sp, #16
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005800:	2300      	movs	r3, #0
 8005802:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005810:	2300      	movs	r3, #0
 8005812:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005814:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005818:	f7fe fdc6 	bl	80043a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e07b      	b.n	8005930 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	09db      	lsrs	r3, r3, #7
 800583c:	4a3e      	ldr	r2, [pc, #248]	; (8005938 <HAL_SD_InitCard+0x140>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	3b02      	subs	r3, #2
 8005846:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681d      	ldr	r5, [r3, #0]
 800584c:	466c      	mov	r4, sp
 800584e:	f107 0314 	add.w	r3, r7, #20
 8005852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800585a:	f107 0308 	add.w	r3, r7, #8
 800585e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005860:	4628      	mov	r0, r5
 8005862:	f003 f8bd 	bl	80089e0 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005874:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f003 f94a 	bl	8008b14 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3302      	adds	r3, #2
 8005894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <HAL_SD_InitCard+0x144>)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	3301      	adds	r3, #1
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fb fdbc 	bl	8001424 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fff1 	bl	8006894 <SD_PowerON>
 80058b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e02e      	b.n	8005930 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 ff10 	bl	80066f8 <SD_InitCard>
 80058d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00b      	beq.n	80058f8 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e01b      	b.n	8005930 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005900:	4618      	mov	r0, r3
 8005902:	f003 fa5b 	bl	8008dbc <SDMMC_CmdBlockLength>
 8005906:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00f      	beq.n	800592e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <HAL_SD_InitCard+0x148>)
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3728      	adds	r7, #40	; 0x28
 8005934:	46bd      	mov	sp, r7
 8005936:	bdb0      	pop	{r4, r5, r7, pc}
 8005938:	014f8b59 	.word	0x014f8b59
 800593c:	00012110 	.word	0x00012110
 8005940:	004005ff 	.word	0x004005ff

08005944 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d107      	bne.n	800596c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0a9      	b.n	8005ac0 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	f040 80a2 	bne.w	8005abe <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598a:	429a      	cmp	r2, r3
 800598c:	d907      	bls.n	800599e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e090      	b.n	8005ac0 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2203      	movs	r2, #3
 80059a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2200      	movs	r2, #0
 80059ac:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	4a45      	ldr	r2, [pc, #276]	; (8005ac8 <HAL_SD_ReadBlocks_DMA+0x184>)
 80059b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	4a44      	ldr	r2, [pc, #272]	; (8005acc <HAL_SD_ReadBlocks_DMA+0x188>)
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	2200      	movs	r2, #0
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3380      	adds	r3, #128	; 0x80
 80059d0:	4619      	mov	r1, r3
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	025b      	lsls	r3, r3, #9
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	f7fc f90b 	bl	8001bf4 <HAL_DMA_Start_IT>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a39      	ldr	r2, [pc, #228]	; (8005ad0 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80059ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e05d      	b.n	8005ac0 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0208 	orr.w	r2, r2, #8
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d002      	beq.n	8005a22 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	025b      	lsls	r3, r3, #9
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a22:	f04f 33ff 	mov.w	r3, #4294967295
 8005a26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	025b      	lsls	r3, r3, #9
 8005a2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005a2e:	2390      	movs	r3, #144	; 0x90
 8005a30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005a32:	2302      	movs	r3, #2
 8005a34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f107 0210 	add.w	r2, r7, #16
 8005a46:	4611      	mov	r1, r2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f003 f919 	bl	8008c80 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d90a      	bls.n	8005a6a <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2282      	movs	r2, #130	; 0x82
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a60:	4618      	mov	r0, r3
 8005a62:	f003 f9ef 	bl	8008e44 <SDMMC_CmdReadMultiBlock>
 8005a66:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005a68:	e009      	b.n	8005a7e <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2281      	movs	r2, #129	; 0x81
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a76:	4618      	mov	r0, r3
 8005a78:	f003 f9c2 	bl	8008e00 <SDMMC_CmdReadSingleBlock>
 8005a7c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d012      	beq.n	8005aaa <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	431a      	orrs	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e00a      	b.n	8005ac0 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e000      	b.n	8005ac0 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005abe:	2302      	movs	r3, #2
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3730      	adds	r7, #48	; 0x30
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	08006513 	.word	0x08006513
 8005acc:	08006585 	.word	0x08006585
 8005ad0:	004005ff 	.word	0x004005ff

08005ad4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08c      	sub	sp, #48	; 0x30
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0ac      	b.n	8005c56 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 80a5 	bne.w	8005c54 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d907      	bls.n	8005b2e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e093      	b.n	8005c56 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2203      	movs	r2, #3
 8005b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	4a47      	ldr	r2, [pc, #284]	; (8005c60 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8005b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	4a46      	ldr	r2, [pc, #280]	; (8005c64 <HAL_SD_WriteBlocks_DMA+0x190>)
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b52:	2200      	movs	r2, #0
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d002      	beq.n	8005b64 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	025b      	lsls	r3, r3, #9
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d90a      	bls.n	8005b80 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	22a0      	movs	r2, #160	; 0xa0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b76:	4618      	mov	r0, r3
 8005b78:	f003 f9a8 	bl	8008ecc <SDMMC_CmdWriteMultiBlock>
 8005b7c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b7e:	e009      	b.n	8005b94 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2290      	movs	r2, #144	; 0x90
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f003 f97b 	bl	8008e88 <SDMMC_CmdWriteSingleBlock>
 8005b92:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d012      	beq.n	8005bc0 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a32      	ldr	r2, [pc, #200]	; (8005c68 <HAL_SD_WriteBlocks_DMA+0x194>)
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e04a      	b.n	8005c56 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0208 	orr.w	r2, r2, #8
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3380      	adds	r3, #128	; 0x80
 8005bdc:	461a      	mov	r2, r3
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	025b      	lsls	r3, r3, #9
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	f7fc f806 	bl	8001bf4 <HAL_DMA_Start_IT>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d012      	beq.n	8005c14 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a1d      	ldr	r2, [pc, #116]	; (8005c68 <HAL_SD_WriteBlocks_DMA+0x194>)
 8005bf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e020      	b.n	8005c56 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295
 8005c18:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005c20:	2390      	movs	r3, #144	; 0x90
 8005c22:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f107 0210 	add.w	r2, r7, #16
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f003 f820 	bl	8008c80 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 021a 	orr.w	r2, r2, #26
 8005c4e:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3730      	adds	r7, #48	; 0x30
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	080064e9 	.word	0x080064e9
 8005c64:	08006585 	.word	0x08006585
 8005c68:	004005ff 	.word	0x004005ff

08005c6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <HAL_SD_IRQHandler+0x2e>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f814 	bl	8006cc0 <SD_Read_IT>
 8005c98:	e155      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 808f 	beq.w	8005dc8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005cc2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005cc6:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d039      	beq.n	8005d56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <HAL_SD_IRQHandler+0x8a>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d011      	beq.n	8005d1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f003 f908 	bl	8008f10 <SDMMC_CmdStopTransfer>
 8005d00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f91f 	bl	8005f58 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <HAL_SD_IRQHandler+0xda>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f004 f864 	bl	8009e14 <HAL_SD_RxCpltCallback>
 8005d4c:	e0fb      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f004 f856 	bl	8009e00 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8005d54:	e0f7      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80f2 	beq.w	8005f46 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d011      	beq.n	8005d90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f003 f8cd 	bl	8008f10 <SDMMC_CmdStopTransfer>
 8005d76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8e4 	bl	8005f58 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 80d5 	bne.w	8005f46 <HAL_SD_IRQHandler+0x2da>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f040 80cf 	bne.w	8005f46 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0208 	bic.w	r2, r2, #8
 8005db6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f004 f81d 	bl	8009e00 <HAL_SD_TxCpltCallback>
}
 8005dc6:	e0be      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_SD_IRQHandler+0x17c>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 ffbe 	bl	8006d62 <SD_Write_IT>
 8005de6:	e0ae      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 80a7 	beq.w	8005f46 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	f043 0208 	orr.w	r2, r3, #8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	f043 0210 	orr.w	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 f846 	bl	8008f10 <SDMMC_CmdStopTransfer>
 8005e84:	4602      	mov	r2, r0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f855 	bl	8005f58 <HAL_SD_ErrorCallback>
}
 8005eae:	e04a      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d045      	beq.n	8005f46 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <HAL_SD_IRQHandler+0x262>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d011      	beq.n	8005ef2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed2:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <HAL_SD_IRQHandler+0x2e4>)
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fb ff36 	bl	8001d4c <HAL_DMA_Abort_IT>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02f      	beq.n	8005f46 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fb96 	bl	800661c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005ef0:	e029      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <HAL_SD_IRQHandler+0x29a>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d011      	beq.n	8005f2a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_SD_IRQHandler+0x2e8>)
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fb ff1a 	bl	8001d4c <HAL_DMA_Abort_IT>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d013      	beq.n	8005f46 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fbb1 	bl	800668a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005f28:	e00d      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f003 ff54 	bl	8009dec <HAL_SD_AbortCallback>
}
 8005f44:	e7ff      	b.n	8005f46 <HAL_SD_IRQHandler+0x2da>
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	0800661d 	.word	0x0800661d
 8005f54:	0800668b 	.word	0x0800668b

08005f58 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7a:	0f9b      	lsrs	r3, r3, #30
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f86:	0e9b      	lsrs	r3, r3, #26
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f98:	0e1b      	lsrs	r3, r3, #24
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fcc:	0d1b      	lsrs	r3, r3, #20
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fea:	0bdb      	lsrs	r3, r3, #15
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ffc:	0b9b      	lsrs	r3, r3, #14
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600e:	0b5b      	lsrs	r3, r3, #13
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006020:	0b1b      	lsrs	r3, r3, #12
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	b2da      	uxtb	r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2200      	movs	r2, #0
 8006032:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	2b00      	cmp	r3, #0
 800603a:	d163      	bne.n	8006104 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006040:	009a      	lsls	r2, r3, #2
 8006042:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006046:	4013      	ands	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800604c:	0f92      	lsrs	r2, r2, #30
 800604e:	431a      	orrs	r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006058:	0edb      	lsrs	r3, r3, #27
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	b2da      	uxtb	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606a:	0e1b      	lsrs	r3, r3, #24
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	b2da      	uxtb	r2, r3
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800607c:	0d5b      	lsrs	r3, r3, #21
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	b2da      	uxtb	r2, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608e:	0c9b      	lsrs	r3, r3, #18
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	b2da      	uxtb	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a0:	0bdb      	lsrs	r3, r3, #15
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	7e1b      	ldrb	r3, [r3, #24]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	3302      	adds	r3, #2
 80060c4:	2201      	movs	r2, #1
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80060ce:	fb03 f202 	mul.w	r2, r3, r2
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	7a1b      	ldrb	r3, [r3, #8]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	2201      	movs	r2, #1
 80060e2:	409a      	lsls	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80060f0:	0a52      	lsrs	r2, r2, #9
 80060f2:	fb03 f202 	mul.w	r2, r3, r2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006100:	661a      	str	r2, [r3, #96]	; 0x60
 8006102:	e031      	b.n	8006168 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	2b01      	cmp	r3, #1
 800610a:	d11d      	bne.n	8006148 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611a:	0c1b      	lsrs	r3, r3, #16
 800611c:	431a      	orrs	r2, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	3301      	adds	r3, #1
 8006128:	029a      	lsls	r2, r3, #10
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800613c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	661a      	str	r2, [r3, #96]	; 0x60
 8006146:	e00f      	b.n	8006168 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a58      	ldr	r2, [pc, #352]	; (80062b0 <HAL_SD_GetCardCSD+0x344>)
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e09d      	b.n	80062a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616c:	0b9b      	lsrs	r3, r3, #14
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	b2da      	uxtb	r2, r3
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617e:	09db      	lsrs	r3, r3, #7
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006186:	b2da      	uxtb	r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006190:	b2db      	uxtb	r3, r3
 8006192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006196:	b2da      	uxtb	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	0fdb      	lsrs	r3, r3, #31
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	0f5b      	lsrs	r3, r3, #29
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	0e9b      	lsrs	r3, r3, #26
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	0d9b      	lsrs	r3, r3, #22
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	0d5b      	lsrs	r3, r3, #21
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	0c1b      	lsrs	r3, r3, #16
 8006200:	b2db      	uxtb	r3, r3
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	0bdb      	lsrs	r3, r3, #15
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	b2da      	uxtb	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006226:	0b9b      	lsrs	r3, r3, #14
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	0b5b      	lsrs	r3, r3, #13
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	0b1b      	lsrs	r3, r3, #12
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	b2da      	uxtb	r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	0a9b      	lsrs	r3, r3, #10
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	b2da      	uxtb	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	b2db      	uxtb	r3, r3
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	b2da      	uxtb	r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006292:	b2da      	uxtb	r2, r3
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	004005ff 	.word	0x004005ff

080062b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800630c:	b5b0      	push	{r4, r5, r7, lr}
 800630e:	b090      	sub	sp, #64	; 0x40
 8006310:	af04      	add	r7, sp, #16
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <HAL_SD_ConfigWideBusOperation+0x30>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006328:	d008      	beq.n	800633c <HAL_SD_ConfigWideBusOperation+0x30>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006330:	d004      	beq.n	800633c <HAL_SD_ConfigWideBusOperation+0x30>
 8006332:	f640 2146 	movw	r1, #2630	; 0xa46
 8006336:	4858      	ldr	r0, [pc, #352]	; (8006498 <HAL_SD_ConfigWideBusOperation+0x18c>)
 8006338:	f7fa fbd1 	bl	8000ade <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2203      	movs	r2, #3
 8006340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006348:	2b03      	cmp	r3, #3
 800634a:	d02e      	beq.n	80063aa <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d106      	bne.n	8006362 <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
 8006360:	e029      	b.n	80063b6 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006368:	d10a      	bne.n	8006380 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fb48 	bl	8006a00 <SD_WideBus_Enable>
 8006370:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
 800637e:	e01a      	b.n	80063b6 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fb85 	bl	8006a96 <SD_WideBus_Disable>
 800638c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
 800639a:	e00c      	b.n	80063b6 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
 80063a8:	e005      	b.n	80063b6 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <HAL_SD_ConfigWideBusOperation+0xc2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a36      	ldr	r2, [pc, #216]	; (800649c <HAL_SD_ConfigWideBusOperation+0x190>)
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80063cc:	e042      	b.n	8006454 <HAL_SD_ConfigWideBusOperation+0x148>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80063ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80063d2:	f7fd ffe9 	bl	80043a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d031      	beq.n	8006442 <HAL_SD_ConfigWideBusOperation+0x136>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	3302      	adds	r3, #2
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	fbb2 f3f3 	udiv	r3, r2, r3
 8006406:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <HAL_SD_ConfigWideBusOperation+0x194>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d907      	bls.n	800641c <HAL_SD_ConfigWideBusOperation+0x110>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <HAL_SD_ConfigWideBusOperation+0x198>)
 8006410:	fba2 2303 	umull	r2, r3, r2, r3
 8006414:	0ddb      	lsrs	r3, r3, #23
 8006416:	3b02      	subs	r3, #2
 8006418:	623b      	str	r3, [r7, #32]
 800641a:	e002      	b.n	8006422 <HAL_SD_ConfigWideBusOperation+0x116>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681d      	ldr	r5, [r3, #0]
 8006426:	466c      	mov	r4, sp
 8006428:	f107 0318 	add.w	r3, r7, #24
 800642c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006434:	f107 030c 	add.w	r3, r7, #12
 8006438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800643a:	4628      	mov	r0, r5
 800643c:	f002 fad0 	bl	80089e0 <SDMMC_Init>
 8006440:	e008      	b.n	8006454 <HAL_SD_ConfigWideBusOperation+0x148>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800645c:	4618      	mov	r0, r3
 800645e:	f002 fcad 	bl	8008dbc <SDMMC_CmdBlockLength>
 8006462:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <HAL_SD_ConfigWideBusOperation+0x178>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a0b      	ldr	r2, [pc, #44]	; (800649c <HAL_SD_ConfigWideBusOperation+0x190>)
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800648c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006490:	4618      	mov	r0, r3
 8006492:	3730      	adds	r7, #48	; 0x30
 8006494:	46bd      	mov	sp, r7
 8006496:	bdb0      	pop	{r4, r5, r7, pc}
 8006498:	08011a88 	.word	0x08011a88
 800649c:	004005ff 	.word	0x004005ff
 80064a0:	017d7840 	.word	0x017d7840
 80064a4:	55e63b89 	.word	0x55e63b89

080064a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064b4:	f107 030c 	add.w	r3, r7, #12
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa78 	bl	80069b0 <SD_SendStatus>
 80064c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	0a5b      	lsrs	r3, r3, #9
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80064de:	693b      	ldr	r3, [r7, #16]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006504:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	2b82      	cmp	r3, #130	; 0x82
 8006526:	d111      	bne.n	800654c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f002 fcef 	bl	8008f10 <SDMMC_CmdStopTransfer>
 8006532:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff fd06 	bl	8005f58 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0208 	bic.w	r2, r2, #8
 800655a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f240 523a 	movw	r2, #1338	; 0x53a
 8006564:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f003 fc4d 	bl	8009e14 <HAL_SD_RxCpltCallback>
#endif
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006598:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d002      	beq.n	80065ae <SD_DMAError+0x2a>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d12d      	bne.n	800660a <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a19      	ldr	r2, [pc, #100]	; (8006618 <SD_DMAError+0x94>)
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80065d2:	6978      	ldr	r0, [r7, #20]
 80065d4:	f7ff ff68 	bl	80064a8 <HAL_SD_GetCardState>
 80065d8:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d002      	beq.n	80065e6 <SD_DMAError+0x62>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d10a      	bne.n	80065fc <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f002 fc90 	bl	8008f10 <SDMMC_CmdStopTransfer>
 80065f0:	4602      	mov	r2, r0
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	431a      	orrs	r2, r3
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 800660a:	6978      	ldr	r0, [r7, #20]
 800660c:	f7ff fca4 	bl	8005f58 <HAL_SD_ErrorCallback>
#endif
}
 8006610:	bf00      	nop
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	004005ff 	.word	0x004005ff

0800661c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006632:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff ff37 	bl	80064a8 <HAL_SD_GetCardState>
 800663a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b06      	cmp	r3, #6
 800664e:	d002      	beq.n	8006656 <SD_DMATxAbort+0x3a>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b05      	cmp	r3, #5
 8006654:	d10a      	bne.n	800666c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f002 fc58 	bl	8008f10 <SDMMC_CmdStopTransfer>
 8006660:	4602      	mov	r2, r0
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	431a      	orrs	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f003 fbb9 	bl	8009dec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800667a:	e002      	b.n	8006682 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff fc6b 	bl	8005f58 <HAL_SD_ErrorCallback>
}
 8006682:	bf00      	nop
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f240 523a 	movw	r2, #1338	; 0x53a
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff ff00 	bl	80064a8 <HAL_SD_GetCardState>
 80066a8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b06      	cmp	r3, #6
 80066bc:	d002      	beq.n	80066c4 <SD_DMARxAbort+0x3a>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	d10a      	bne.n	80066da <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f002 fc21 	bl	8008f10 <SDMMC_CmdStopTransfer>
 80066ce:	4602      	mov	r2, r0
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	431a      	orrs	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f003 fb82 	bl	8009dec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80066e8:	e002      	b.n	80066f0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fc34 	bl	8005f58 <HAL_SD_ErrorCallback>
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80066f8:	b5b0      	push	{r4, r5, r7, lr}
 80066fa:	b094      	sub	sp, #80	; 0x50
 80066fc:	af04      	add	r7, sp, #16
 80066fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006700:	2301      	movs	r3, #1
 8006702:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f002 fa12 	bl	8008b32 <SDMMC_GetPowerState>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006714:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006718:	e0b8      	b.n	800688c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671e:	2b03      	cmp	r3, #3
 8006720:	d02f      	beq.n	8006782 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f002 fcfc 	bl	8009124 <SDMMC_CmdSendCID>
 800672c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <SD_InitCard+0x40>
    {
      return errorstate;
 8006734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006736:	e0a9      	b.n	800688c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f002 fa7a 	bl	8008c38 <SDMMC_GetResponse>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2104      	movs	r1, #4
 8006750:	4618      	mov	r0, r3
 8006752:	f002 fa71 	bl	8008c38 <SDMMC_GetResponse>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2108      	movs	r1, #8
 8006762:	4618      	mov	r0, r3
 8006764:	f002 fa68 	bl	8008c38 <SDMMC_GetResponse>
 8006768:	4602      	mov	r2, r0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	210c      	movs	r1, #12
 8006774:	4618      	mov	r0, r3
 8006776:	f002 fa5f 	bl	8008c38 <SDMMC_GetResponse>
 800677a:	4602      	mov	r2, r0
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	2b03      	cmp	r3, #3
 8006788:	d00d      	beq.n	80067a6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f107 020e 	add.w	r2, r7, #14
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f002 fd02 	bl	800919e <SDMMC_CmdSetRelAdd>
 800679a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800679c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <SD_InitCard+0xae>
    {
      return errorstate;
 80067a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a4:	e072      	b.n	800688c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d036      	beq.n	800681c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067ae:	89fb      	ldrh	r3, [r7, #14]
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	041b      	lsls	r3, r3, #16
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f002 fccc 	bl	8009160 <SDMMC_CmdSendCSD>
 80067c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	e05b      	b.n	800688c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f002 fa2c 	bl	8008c38 <SDMMC_GetResponse>
 80067e0:	4602      	mov	r2, r0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2104      	movs	r1, #4
 80067ec:	4618      	mov	r0, r3
 80067ee:	f002 fa23 	bl	8008c38 <SDMMC_GetResponse>
 80067f2:	4602      	mov	r2, r0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2108      	movs	r1, #8
 80067fe:	4618      	mov	r0, r3
 8006800:	f002 fa1a 	bl	8008c38 <SDMMC_GetResponse>
 8006804:	4602      	mov	r2, r0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	210c      	movs	r1, #12
 8006810:	4618      	mov	r0, r3
 8006812:	f002 fa11 	bl	8008c38 <SDMMC_GetResponse>
 8006816:	4602      	mov	r2, r0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2104      	movs	r1, #4
 8006822:	4618      	mov	r0, r3
 8006824:	f002 fa08 	bl	8008c38 <SDMMC_GetResponse>
 8006828:	4603      	mov	r3, r0
 800682a:	0d1a      	lsrs	r2, r3, #20
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff fb98 	bl	8005f6c <HAL_SD_GetCardCSD>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006846:	e021      	b.n	800688c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6819      	ldr	r1, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	041b      	lsls	r3, r3, #16
 8006852:	2200      	movs	r2, #0
 8006854:	461c      	mov	r4, r3
 8006856:	4615      	mov	r5, r2
 8006858:	4622      	mov	r2, r4
 800685a:	462b      	mov	r3, r5
 800685c:	4608      	mov	r0, r1
 800685e:	f002 fb79 	bl	8008f54 <SDMMC_CmdSelDesel>
 8006862:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <SD_InitCard+0x176>
  {
    return errorstate;
 800686a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686c:	e00e      	b.n	800688c <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681d      	ldr	r5, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	466c      	mov	r4, sp
 8006876:	f103 0210 	add.w	r2, r3, #16
 800687a:	ca07      	ldmia	r2, {r0, r1, r2}
 800687c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006880:	3304      	adds	r3, #4
 8006882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006884:	4628      	mov	r0, r5
 8006886:	f002 f8ab 	bl	80089e0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3740      	adds	r7, #64	; 0x40
 8006890:	46bd      	mov	sp, r7
 8006892:	bdb0      	pop	{r4, r5, r7, pc}

08006894 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	2300      	movs	r3, #0
 80068a6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f002 fb74 	bl	8008f9a <SDMMC_CmdGoIdleState>
 80068b2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <SD_PowerON+0x2a>
  {
    return errorstate;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	e072      	b.n	80069a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f002 fb87 	bl	8008fd6 <SDMMC_CmdOperCond>
 80068c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f002 fb5d 	bl	8008f9a <SDMMC_CmdGoIdleState>
 80068e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	e05b      	b.n	80069a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d137      	bne.n	800696a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f002 fb87 	bl	8009014 <SDMMC_CmdAppCommand>
 8006906:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d02d      	beq.n	800696a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800690e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006912:	e047      	b.n	80069a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2100      	movs	r1, #0
 800691a:	4618      	mov	r0, r3
 800691c:	f002 fb7a 	bl	8009014 <SDMMC_CmdAppCommand>
 8006920:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <SD_PowerON+0x98>
    {
      return errorstate;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	e03b      	b.n	80069a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	491e      	ldr	r1, [pc, #120]	; (80069ac <SD_PowerON+0x118>)
 8006932:	4618      	mov	r0, r3
 8006934:	f002 fb90 	bl	8009058 <SDMMC_CmdAppOperCommand>
 8006938:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006940:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006944:	e02e      	b.n	80069a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f002 f973 	bl	8008c38 <SDMMC_GetResponse>
 8006952:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	0fdb      	lsrs	r3, r3, #31
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <SD_PowerON+0xcc>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <SD_PowerON+0xce>
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]

    count++;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	3301      	adds	r3, #1
 8006968:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006970:	4293      	cmp	r3, r2
 8006972:	d802      	bhi.n	800697a <SD_PowerON+0xe6>
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0cc      	beq.n	8006914 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006980:	4293      	cmp	r3, r2
 8006982:	d902      	bls.n	800698a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006988:	e00c      	b.n	80069a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
 800699a:	e002      	b.n	80069a2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	c1100000 	.word	0xc1100000

080069b0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80069c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069c4:	e018      	b.n	80069f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f002 fc04 	bl	80091e0 <SDMMC_CmdSendStatus>
 80069d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	e009      	b.n	80069f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2100      	movs	r1, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	f002 f924 	bl	8008c38 <SDMMC_GetResponse>
 80069f0:	4602      	mov	r2, r0
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f002 f90e 	bl	8008c38 <SDMMC_GetResponse>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a26:	d102      	bne.n	8006a2e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a2c:	e02f      	b.n	8006a8e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a2e:	f107 030c 	add.w	r3, r7, #12
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f879 	bl	8006b2c <SD_FindSCR>
 8006a3a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	e023      	b.n	8006a8e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01c      	beq.n	8006a8a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	041b      	lsls	r3, r3, #16
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f002 fad9 	bl	8009014 <SDMMC_CmdAppCommand>
 8006a62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	e00f      	b.n	8006a8e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2102      	movs	r1, #2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f002 fb12 	bl	800909e <SDMMC_CmdBusWidth>
 8006a7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	e003      	b.n	8006a8e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e001      	b.n	8006a8e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b086      	sub	sp, #24
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f002 f8c3 	bl	8008c38 <SDMMC_GetResponse>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006abc:	d102      	bne.n	8006ac4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006abe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ac2:	e02f      	b.n	8006b24 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ac4:	f107 030c 	add.w	r3, r7, #12
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f82e 	bl	8006b2c <SD_FindSCR>
 8006ad0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	e023      	b.n	8006b24 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d01c      	beq.n	8006b20 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f002 fa8e 	bl	8009014 <SDMMC_CmdAppCommand>
 8006af8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	e00f      	b.n	8006b24 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f002 fac7 	bl	800909e <SDMMC_CmdBusWidth>
 8006b10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	e003      	b.n	8006b24 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e001      	b.n	8006b24 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006b2c:	b590      	push	{r4, r7, lr}
 8006b2e:	b08f      	sub	sp, #60	; 0x3c
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b36:	f7fa fc69 	bl	800140c <HAL_GetTick>
 8006b3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006b40:	2300      	movs	r3, #0
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2108      	movs	r1, #8
 8006b52:	4618      	mov	r0, r3
 8006b54:	f002 f932 	bl	8008dbc <SDMMC_CmdBlockLength>
 8006b58:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	e0a9      	b.n	8006cb8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4610      	mov	r0, r2
 8006b72:	f002 fa4f 	bl	8009014 <SDMMC_CmdAppCommand>
 8006b76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	e09a      	b.n	8006cb8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b82:	f04f 33ff 	mov.w	r3, #4294967295
 8006b86:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006b88:	2308      	movs	r3, #8
 8006b8a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b8c:	2330      	movs	r3, #48	; 0x30
 8006b8e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b90:	2302      	movs	r3, #2
 8006b92:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f107 0210 	add.w	r2, r7, #16
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 f86a 	bl	8008c80 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f002 fa96 	bl	80090e2 <SDMMC_CmdSendSCR>
 8006bb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d022      	beq.n	8006c04 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	e07a      	b.n	8006cb8 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00e      	beq.n	8006bee <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	f107 0208 	add.w	r2, r7, #8
 8006bdc:	18d4      	adds	r4, r2, r3
 8006bde:	4608      	mov	r0, r1
 8006be0:	f001 ff7a 	bl	8008ad8 <SDMMC_ReadFIFO>
 8006be4:	4603      	mov	r3, r0
 8006be6:	6023      	str	r3, [r4, #0]
      index++;
 8006be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bea:	3301      	adds	r3, #1
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bee:	f7fa fc0d 	bl	800140c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfc:	d102      	bne.n	8006c04 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c02:	e059      	b.n	8006cb8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c0a:	f240 432a 	movw	r3, #1066	; 0x42a
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0d6      	beq.n	8006bc2 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2208      	movs	r2, #8
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	e044      	b.n	8006cb8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2202      	movs	r2, #2
 8006c42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c44:	2302      	movs	r3, #2
 8006c46:	e037      	b.n	8006cb8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c5e:	2320      	movs	r3, #32
 8006c60:	e02a      	b.n	8006cb8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	061a      	lsls	r2, r3, #24
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	0e1b      	lsrs	r3, r3, #24
 8006c88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	601a      	str	r2, [r3, #0]
    scr++;
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	3304      	adds	r3, #4
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	061a      	lsls	r2, r3, #24
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ca0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	0a1b      	lsrs	r3, r3, #8
 8006ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006caa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	0e1b      	lsrs	r3, r3, #24
 8006cb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	373c      	adds	r7, #60	; 0x3c
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd90      	pop	{r4, r7, pc}

08006cc0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d03f      	beq.n	8006d5a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e033      	b.n	8006d48 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 fef7 	bl	8008ad8 <SDMMC_ReadFIFO>
 8006cea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	0a1b      	lsrs	r3, r3, #8
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	0c1b      	lsrs	r3, r3, #16
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	0e1b      	lsrs	r3, r3, #24
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	3301      	adds	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2b07      	cmp	r3, #7
 8006d4c:	d9c8      	bls.n	8006ce0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b086      	sub	sp, #24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d043      	beq.n	8006e04 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	e037      	b.n	8006df2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	021a      	lsls	r2, r3, #8
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3301      	adds	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	041a      	lsls	r2, r3, #16
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	061a      	lsls	r2, r3, #24
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f107 0208 	add.w	r2, r7, #8
 8006de4:	4611      	mov	r1, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 fe83 	bl	8008af2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	3301      	adds	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b07      	cmp	r3, #7
 8006df6:	d9c4      	bls.n	8006d82 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e0e6      	b.n	8006fec <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a74      	ldr	r2, [pc, #464]	; (8006ff4 <HAL_TIM_Base_Init+0x1e8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d036      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e30:	d031      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a70      	ldr	r2, [pc, #448]	; (8006ff8 <HAL_TIM_Base_Init+0x1ec>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d02c      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a6e      	ldr	r2, [pc, #440]	; (8006ffc <HAL_TIM_Base_Init+0x1f0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d027      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a6d      	ldr	r2, [pc, #436]	; (8007000 <HAL_TIM_Base_Init+0x1f4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d022      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a6b      	ldr	r2, [pc, #428]	; (8007004 <HAL_TIM_Base_Init+0x1f8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01d      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a6a      	ldr	r2, [pc, #424]	; (8007008 <HAL_TIM_Base_Init+0x1fc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d018      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a68      	ldr	r2, [pc, #416]	; (800700c <HAL_TIM_Base_Init+0x200>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a67      	ldr	r2, [pc, #412]	; (8007010 <HAL_TIM_Base_Init+0x204>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00e      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a65      	ldr	r2, [pc, #404]	; (8007014 <HAL_TIM_Base_Init+0x208>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a64      	ldr	r2, [pc, #400]	; (8007018 <HAL_TIM_Base_Init+0x20c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_TIM_Base_Init+0x8a>
 8006e8c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006e90:	4862      	ldr	r0, [pc, #392]	; (800701c <HAL_TIM_Base_Init+0x210>)
 8006e92:	f7f9 fe24 	bl	8000ade <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d014      	beq.n	8006ec8 <HAL_TIM_Base_Init+0xbc>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b10      	cmp	r3, #16
 8006ea4:	d010      	beq.n	8006ec8 <HAL_TIM_Base_Init+0xbc>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d00c      	beq.n	8006ec8 <HAL_TIM_Base_Init+0xbc>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d008      	beq.n	8006ec8 <HAL_TIM_Base_Init+0xbc>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b60      	cmp	r3, #96	; 0x60
 8006ebc:	d004      	beq.n	8006ec8 <HAL_TIM_Base_Init+0xbc>
 8006ebe:	f240 1117 	movw	r1, #279	; 0x117
 8006ec2:	4856      	ldr	r0, [pc, #344]	; (800701c <HAL_TIM_Base_Init+0x210>)
 8006ec4:	f7f9 fe0b 	bl	8000ade <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <HAL_TIM_Base_Init+0xe2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed8:	d009      	beq.n	8006eee <HAL_TIM_Base_Init+0xe2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee2:	d004      	beq.n	8006eee <HAL_TIM_Base_Init+0xe2>
 8006ee4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006ee8:	484c      	ldr	r0, [pc, #304]	; (800701c <HAL_TIM_Base_Init+0x210>)
 8006eea:	f7f9 fdf8 	bl	8000ade <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef6:	d004      	beq.n	8006f02 <HAL_TIM_Base_Init+0xf6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a40      	ldr	r2, [pc, #256]	; (8007000 <HAL_TIM_Base_Init+0x1f4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d107      	bne.n	8006f12 <HAL_TIM_Base_Init+0x106>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bf14      	ite	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	2300      	moveq	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	e00e      	b.n	8006f30 <HAL_TIM_Base_Init+0x124>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d006      	beq.n	8006f28 <HAL_TIM_Base_Init+0x11c>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f22:	d201      	bcs.n	8006f28 <HAL_TIM_Base_Init+0x11c>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <HAL_TIM_Base_Init+0x11e>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <HAL_TIM_Base_Init+0x132>
 8006f34:	f240 1119 	movw	r1, #281	; 0x119
 8006f38:	4838      	ldr	r0, [pc, #224]	; (800701c <HAL_TIM_Base_Init+0x210>)
 8006f3a:	f7f9 fdd0 	bl	8000ade <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d008      	beq.n	8006f58 <HAL_TIM_Base_Init+0x14c>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b80      	cmp	r3, #128	; 0x80
 8006f4c:	d004      	beq.n	8006f58 <HAL_TIM_Base_Init+0x14c>
 8006f4e:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8006f52:	4832      	ldr	r0, [pc, #200]	; (800701c <HAL_TIM_Base_Init+0x210>)
 8006f54:	f7f9 fdc3 	bl	8000ade <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f857 	bl	8007020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4619      	mov	r1, r3
 8006f84:	4610      	mov	r0, r2
 8006f86:	f000 fa51 	bl	800742c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40001000 	.word	0x40001000
 8007008:	40001400 	.word	0x40001400
 800700c:	40013400 	.word	0x40013400
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800
 800701c:	08011ac0 	.word	0x08011ac0

08007020 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a4a      	ldr	r2, [pc, #296]	; (800716c <HAL_TIM_Base_Start_IT+0x138>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d036      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704e:	d031      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a46      	ldr	r2, [pc, #280]	; (8007170 <HAL_TIM_Base_Start_IT+0x13c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d02c      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a45      	ldr	r2, [pc, #276]	; (8007174 <HAL_TIM_Base_Start_IT+0x140>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d027      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a43      	ldr	r2, [pc, #268]	; (8007178 <HAL_TIM_Base_Start_IT+0x144>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d022      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a42      	ldr	r2, [pc, #264]	; (800717c <HAL_TIM_Base_Start_IT+0x148>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d01d      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a40      	ldr	r2, [pc, #256]	; (8007180 <HAL_TIM_Base_Start_IT+0x14c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d018      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <HAL_TIM_Base_Start_IT+0x150>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <HAL_TIM_Base_Start_IT+0x154>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3c      	ldr	r2, [pc, #240]	; (800718c <HAL_TIM_Base_Start_IT+0x158>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a3a      	ldr	r2, [pc, #232]	; (8007190 <HAL_TIM_Base_Start_IT+0x15c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <HAL_TIM_Base_Start_IT+0x80>
 80070aa:	f240 11d3 	movw	r1, #467	; 0x1d3
 80070ae:	4839      	ldr	r0, [pc, #228]	; (8007194 <HAL_TIM_Base_Start_IT+0x160>)
 80070b0:	f7f9 fd15 	bl	8000ade <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d001      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e04f      	b.n	8007164 <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a22      	ldr	r2, [pc, #136]	; (800716c <HAL_TIM_Base_Start_IT+0x138>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01d      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0xee>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ee:	d018      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0xee>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1e      	ldr	r2, [pc, #120]	; (8007170 <HAL_TIM_Base_Start_IT+0x13c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0xee>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1d      	ldr	r2, [pc, #116]	; (8007174 <HAL_TIM_Base_Start_IT+0x140>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00e      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0xee>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a1b      	ldr	r2, [pc, #108]	; (8007178 <HAL_TIM_Base_Start_IT+0x144>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d009      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0xee>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a1c      	ldr	r2, [pc, #112]	; (8007184 <HAL_TIM_Base_Start_IT+0x150>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d004      	beq.n	8007122 <HAL_TIM_Base_Start_IT+0xee>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1a      	ldr	r2, [pc, #104]	; (8007188 <HAL_TIM_Base_Start_IT+0x154>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d115      	bne.n	800714e <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <HAL_TIM_Base_Start_IT+0x164>)
 800712a:	4013      	ands	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b06      	cmp	r3, #6
 8007132:	d015      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x12c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713a:	d011      	beq.n	8007160 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714c:	e008      	b.n	8007160 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	e000      	b.n	8007162 <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007160:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40001000 	.word	0x40001000
 8007180:	40001400 	.word	0x40001400
 8007184:	40013400 	.word	0x40013400
 8007188:	40014000 	.word	0x40014000
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800
 8007194:	08011ac0 	.word	0x08011ac0
 8007198:	00010007 	.word	0x00010007

0800719c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d122      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d11b      	bne.n	80071f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0202 	mvn.w	r2, #2
 80071c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f905 	bl	80073ee <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f8f7 	bl	80073da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f908 	bl	8007402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b04      	cmp	r3, #4
 8007204:	d122      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b04      	cmp	r3, #4
 8007212:	d11b      	bne.n	800724c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0204 	mvn.w	r2, #4
 800721c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f8db 	bl	80073ee <HAL_TIM_IC_CaptureCallback>
 8007238:	e005      	b.n	8007246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8cd 	bl	80073da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f8de 	bl	8007402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b08      	cmp	r3, #8
 8007258:	d122      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b08      	cmp	r3, #8
 8007266:	d11b      	bne.n	80072a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0208 	mvn.w	r2, #8
 8007270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2204      	movs	r2, #4
 8007276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f8b1 	bl	80073ee <HAL_TIM_IC_CaptureCallback>
 800728c:	e005      	b.n	800729a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8a3 	bl	80073da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f8b4 	bl	8007402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d122      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d11b      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0210 	mvn.w	r2, #16
 80072c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2208      	movs	r2, #8
 80072ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f887 	bl	80073ee <HAL_TIM_IC_CaptureCallback>
 80072e0:	e005      	b.n	80072ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f879 	bl	80073da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f88a 	bl	8007402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d10e      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0201 	mvn.w	r2, #1
 8007318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7f9 fbc8 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d10e      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d107      	bne.n	800734c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f914 	bl	8007574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800735a:	d10e      	bne.n	800737a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007366:	2b80      	cmp	r3, #128	; 0x80
 8007368:	d107      	bne.n	800737a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f907 	bl	8007588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007384:	2b40      	cmp	r3, #64	; 0x40
 8007386:	d10e      	bne.n	80073a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d107      	bne.n	80073a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800739e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f838 	bl	8007416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d10e      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d107      	bne.n	80073d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f06f 0220 	mvn.w	r2, #32
 80073ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f8c7 	bl	8007560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a40      	ldr	r2, [pc, #256]	; (8007540 <TIM_Base_SetConfig+0x114>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d013      	beq.n	800746c <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744a:	d00f      	beq.n	800746c <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a3d      	ldr	r2, [pc, #244]	; (8007544 <TIM_Base_SetConfig+0x118>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00b      	beq.n	800746c <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a3c      	ldr	r2, [pc, #240]	; (8007548 <TIM_Base_SetConfig+0x11c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d007      	beq.n	800746c <TIM_Base_SetConfig+0x40>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a3b      	ldr	r2, [pc, #236]	; (800754c <TIM_Base_SetConfig+0x120>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_Base_SetConfig+0x40>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a3a      	ldr	r2, [pc, #232]	; (8007550 <TIM_Base_SetConfig+0x124>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d108      	bne.n	800747e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a2f      	ldr	r2, [pc, #188]	; (8007540 <TIM_Base_SetConfig+0x114>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d01f      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748c:	d01b      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2c      	ldr	r2, [pc, #176]	; (8007544 <TIM_Base_SetConfig+0x118>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d017      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2b      	ldr	r2, [pc, #172]	; (8007548 <TIM_Base_SetConfig+0x11c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d013      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2a      	ldr	r2, [pc, #168]	; (800754c <TIM_Base_SetConfig+0x120>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00f      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a29      	ldr	r2, [pc, #164]	; (8007550 <TIM_Base_SetConfig+0x124>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00b      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a28      	ldr	r2, [pc, #160]	; (8007554 <TIM_Base_SetConfig+0x128>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d007      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a27      	ldr	r2, [pc, #156]	; (8007558 <TIM_Base_SetConfig+0x12c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <TIM_Base_SetConfig+0x9a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a26      	ldr	r2, [pc, #152]	; (800755c <TIM_Base_SetConfig+0x130>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d108      	bne.n	80074d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a10      	ldr	r2, [pc, #64]	; (8007540 <TIM_Base_SetConfig+0x114>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00f      	beq.n	8007524 <TIM_Base_SetConfig+0xf8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a12      	ldr	r2, [pc, #72]	; (8007550 <TIM_Base_SetConfig+0x124>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00b      	beq.n	8007524 <TIM_Base_SetConfig+0xf8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <TIM_Base_SetConfig+0x128>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d007      	beq.n	8007524 <TIM_Base_SetConfig+0xf8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a10      	ldr	r2, [pc, #64]	; (8007558 <TIM_Base_SetConfig+0x12c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <TIM_Base_SetConfig+0xf8>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a0f      	ldr	r2, [pc, #60]	; (800755c <TIM_Base_SetConfig+0x130>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d103      	bne.n	800752c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	615a      	str	r2, [r3, #20]
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40000c00 	.word	0x40000c00
 8007550:	40013400 	.word	0x40013400
 8007554:	40014000 	.word	0x40014000
 8007558:	40014400 	.word	0x40014400
 800755c:	40014800 	.word	0x40014800

08007560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e08b      	b.n	80076c6 <HAL_UART_Init+0x12a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d023      	beq.n	80075fe <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a45      	ldr	r2, [pc, #276]	; (80076d0 <HAL_UART_Init+0x134>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d041      	beq.n	8007644 <HAL_UART_Init+0xa8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a43      	ldr	r2, [pc, #268]	; (80076d4 <HAL_UART_Init+0x138>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d03c      	beq.n	8007644 <HAL_UART_Init+0xa8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a42      	ldr	r2, [pc, #264]	; (80076d8 <HAL_UART_Init+0x13c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d037      	beq.n	8007644 <HAL_UART_Init+0xa8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a40      	ldr	r2, [pc, #256]	; (80076dc <HAL_UART_Init+0x140>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d032      	beq.n	8007644 <HAL_UART_Init+0xa8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a3f      	ldr	r2, [pc, #252]	; (80076e0 <HAL_UART_Init+0x144>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d02d      	beq.n	8007644 <HAL_UART_Init+0xa8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a3d      	ldr	r2, [pc, #244]	; (80076e4 <HAL_UART_Init+0x148>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d028      	beq.n	8007644 <HAL_UART_Init+0xa8>
 80075f2:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80075f6:	483c      	ldr	r0, [pc, #240]	; (80076e8 <HAL_UART_Init+0x14c>)
 80075f8:	f7f9 fa71 	bl	8000ade <assert_failed>
 80075fc:	e022      	b.n	8007644 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a33      	ldr	r2, [pc, #204]	; (80076d0 <HAL_UART_Init+0x134>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d01d      	beq.n	8007644 <HAL_UART_Init+0xa8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a31      	ldr	r2, [pc, #196]	; (80076d4 <HAL_UART_Init+0x138>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d018      	beq.n	8007644 <HAL_UART_Init+0xa8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a30      	ldr	r2, [pc, #192]	; (80076d8 <HAL_UART_Init+0x13c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <HAL_UART_Init+0xa8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a2e      	ldr	r2, [pc, #184]	; (80076dc <HAL_UART_Init+0x140>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00e      	beq.n	8007644 <HAL_UART_Init+0xa8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a2d      	ldr	r2, [pc, #180]	; (80076e0 <HAL_UART_Init+0x144>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d009      	beq.n	8007644 <HAL_UART_Init+0xa8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a2b      	ldr	r2, [pc, #172]	; (80076e4 <HAL_UART_Init+0x148>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <HAL_UART_Init+0xa8>
 800763a:	f240 1157 	movw	r1, #343	; 0x157
 800763e:	482a      	ldr	r0, [pc, #168]	; (80076e8 <HAL_UART_Init+0x14c>)
 8007640:	f7f9 fa4d 	bl	8000ade <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7f9 fcb9 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2224      	movs	r2, #36	; 0x24
 800765e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0201 	bic.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fb3d 	bl	8007cf0 <UART_SetConfig>
 8007676:	4603      	mov	r3, r0
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_UART_Init+0xe4>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e022      	b.n	80076c6 <HAL_UART_Init+0x12a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <HAL_UART_Init+0xf2>
  {
    UART_AdvFeatureConfig(huart);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fe8f 	bl	80083ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800769c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689a      	ldr	r2, [r3, #8]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0201 	orr.w	r2, r2, #1
 80076bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 ffd4 	bl	800866c <UART_CheckIdleState>
 80076c4:	4603      	mov	r3, r0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	40013800 	.word	0x40013800
 80076d4:	40004400 	.word	0x40004400
 80076d8:	40004800 	.word	0x40004800
 80076dc:	40004c00 	.word	0x40004c00
 80076e0:	40005000 	.word	0x40005000
 80076e4:	40008000 	.word	0x40008000
 80076e8:	08011af8 	.word	0x08011af8

080076ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b0ba      	sub	sp, #232	; 0xe8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007712:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007716:	f640 030f 	movw	r3, #2063	; 0x80f
 800771a:	4013      	ands	r3, r2
 800771c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007724:	2b00      	cmp	r3, #0
 8007726:	d115      	bne.n	8007754 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00f      	beq.n	8007754 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 82a6 	beq.w	8007c96 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
      }
      return;
 8007752:	e2a0      	b.n	8007c96 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8117 	beq.w	800798c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800775e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800776a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800776e:	4b85      	ldr	r3, [pc, #532]	; (8007984 <HAL_UART_IRQHandler+0x298>)
 8007770:	4013      	ands	r3, r2
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 810a 	beq.w	800798c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d011      	beq.n	80077a8 <HAL_UART_IRQHandler+0xbc>
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00b      	beq.n	80077a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2201      	movs	r2, #1
 8007796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800779e:	f043 0201 	orr.w	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d011      	beq.n	80077d8 <HAL_UART_IRQHandler+0xec>
 80077b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2202      	movs	r2, #2
 80077c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ce:	f043 0204 	orr.w	r2, r3, #4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d011      	beq.n	8007808 <HAL_UART_IRQHandler+0x11c>
 80077e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2204      	movs	r2, #4
 80077f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fe:	f043 0202 	orr.w	r2, r3, #2
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b00      	cmp	r3, #0
 8007812:	d017      	beq.n	8007844 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d105      	bne.n	800782c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007824:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2208      	movs	r2, #8
 8007832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800783a:	f043 0208 	orr.w	r2, r3, #8
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800784c:	2b00      	cmp	r3, #0
 800784e:	d012      	beq.n	8007876 <HAL_UART_IRQHandler+0x18a>
 8007850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00c      	beq.n	8007876 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800786c:	f043 0220 	orr.w	r2, r3, #32
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 820c 	beq.w	8007c9a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d005      	beq.n	80078ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80078c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d04f      	beq.n	800796e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 ffd9 	bl	8008886 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d141      	bne.n	8007966 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800790e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800791a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1d9      	bne.n	80078e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	2b00      	cmp	r3, #0
 8007934:	d013      	beq.n	800795e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	4a13      	ldr	r2, [pc, #76]	; (8007988 <HAL_UART_IRQHandler+0x29c>)
 800793c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	4618      	mov	r0, r3
 8007944:	f7fa fa02 	bl	8001d4c <HAL_DMA_Abort_IT>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d017      	beq.n	800797e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800795c:	e00f      	b.n	800797e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f9b0 	bl	8007cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007964:	e00b      	b.n	800797e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f9ac 	bl	8007cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796c:	e007      	b.n	800797e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f9a8 	bl	8007cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800797c:	e18d      	b.n	8007c9a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797e:	bf00      	nop
    return;
 8007980:	e18b      	b.n	8007c9a <HAL_UART_IRQHandler+0x5ae>
 8007982:	bf00      	nop
 8007984:	04000120 	.word	0x04000120
 8007988:	0800894d 	.word	0x0800894d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007990:	2b01      	cmp	r3, #1
 8007992:	f040 8146 	bne.w	8007c22 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 813f 	beq.w	8007c22 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 8138 	beq.w	8007c22 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2210      	movs	r2, #16
 80079b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c4:	2b40      	cmp	r3, #64	; 0x40
 80079c6:	f040 80b4 	bne.w	8007b32 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 815f 	beq.w	8007c9e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079ea:	429a      	cmp	r2, r3
 80079ec:	f080 8157 	bcs.w	8007c9e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f040 8085 	bne.w	8007b16 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1da      	bne.n	8007a0c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e1      	bne.n	8007a56 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3308      	adds	r3, #8
 8007a98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ab8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007abc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e3      	bne.n	8007a92 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae6:	f023 0310 	bic.w	r3, r3, #16
 8007aea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007afa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e4      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fa f8dd 	bl	8001cd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8d4 	bl	8007cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b30:	e0b5      	b.n	8007c9e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 80a7 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007b54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80a2 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b80:	647b      	str	r3, [r7, #68]	; 0x44
 8007b82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b88:	e841 2300 	strex	r3, r2, [r1]
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e4      	bne.n	8007b5e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	e853 3f00 	ldrex	r3, [r3]
 8007ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	f023 0301 	bic.w	r3, r3, #1
 8007baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007bb8:	633a      	str	r2, [r7, #48]	; 0x30
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e3      	bne.n	8007b94 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0310 	bic.w	r3, r3, #16
 8007bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	69b9      	ldr	r1, [r7, #24]
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e4      	bne.n	8007bde <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f85c 	bl	8007cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c20:	e03f      	b.n	8007ca2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00e      	beq.n	8007c4c <HAL_UART_IRQHandler+0x560>
 8007c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d008      	beq.n	8007c4c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fec1 	bl	80089cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c4a:	e02d      	b.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00e      	beq.n	8007c76 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01c      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
    }
    return;
 8007c74:	e017      	b.n	8007ca6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d012      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
 8007c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00c      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fe72 	bl	8008978 <UART_EndTransmit_IT>
    return;
 8007c94:	e008      	b.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007c96:	bf00      	nop
 8007c98:	e006      	b.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007c9a:	bf00      	nop
 8007c9c:	e004      	b.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007c9e:	bf00      	nop
 8007ca0:	e002      	b.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ca6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ca8:	37e8      	adds	r7, #232	; 0xe8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop

08007cb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cf4:	b08a      	sub	sp, #40	; 0x28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4a9e      	ldr	r2, [pc, #632]	; (8007f80 <UART_SetConfig+0x290>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d904      	bls.n	8007d14 <UART_SetConfig+0x24>
 8007d0a:	f640 4157 	movw	r1, #3159	; 0xc57
 8007d0e:	489d      	ldr	r0, [pc, #628]	; (8007f84 <UART_SetConfig+0x294>)
 8007d10:	f7f8 fee5 	bl	8000ade <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d1c:	d00d      	beq.n	8007d3a <UART_SetConfig+0x4a>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <UART_SetConfig+0x4a>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	d004      	beq.n	8007d3a <UART_SetConfig+0x4a>
 8007d30:	f640 4158 	movw	r1, #3160	; 0xc58
 8007d34:	4893      	ldr	r0, [pc, #588]	; (8007f84 <UART_SetConfig+0x294>)
 8007d36:	f7f8 fed2 	bl	8000ade <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a92      	ldr	r2, [pc, #584]	; (8007f88 <UART_SetConfig+0x298>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d10e      	bne.n	8007d62 <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d030      	beq.n	8007dae <UART_SetConfig+0xbe>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d54:	d02b      	beq.n	8007dae <UART_SetConfig+0xbe>
 8007d56:	f640 415b 	movw	r1, #3163	; 0xc5b
 8007d5a:	488a      	ldr	r0, [pc, #552]	; (8007f84 <UART_SetConfig+0x294>)
 8007d5c:	f7f8 febf 	bl	8000ade <assert_failed>
 8007d60:	e025      	b.n	8007dae <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6a:	d012      	beq.n	8007d92 <UART_SetConfig+0xa2>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00e      	beq.n	8007d92 <UART_SetConfig+0xa2>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d7c:	d009      	beq.n	8007d92 <UART_SetConfig+0xa2>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d86:	d004      	beq.n	8007d92 <UART_SetConfig+0xa2>
 8007d88:	f640 415f 	movw	r1, #3167	; 0xc5f
 8007d8c:	487d      	ldr	r0, [pc, #500]	; (8007f84 <UART_SetConfig+0x294>)
 8007d8e:	f7f8 fea6 	bl	8000ade <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d009      	beq.n	8007dae <UART_SetConfig+0xbe>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da2:	d004      	beq.n	8007dae <UART_SetConfig+0xbe>
 8007da4:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 8007da8:	4876      	ldr	r0, [pc, #472]	; (8007f84 <UART_SetConfig+0x294>)
 8007daa:	f7f8 fe98 	bl	8000ade <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00e      	beq.n	8007dd4 <UART_SetConfig+0xe4>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dbe:	d009      	beq.n	8007dd4 <UART_SetConfig+0xe4>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007dc8:	d004      	beq.n	8007dd4 <UART_SetConfig+0xe4>
 8007dca:	f640 4163 	movw	r1, #3171	; 0xc63
 8007dce:	486d      	ldr	r0, [pc, #436]	; (8007f84 <UART_SetConfig+0x294>)
 8007dd0:	f7f8 fe85 	bl	8000ade <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	f023 030c 	bic.w	r3, r3, #12
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <UART_SetConfig+0xf8>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <UART_SetConfig+0x102>
 8007de8:	f640 4164 	movw	r1, #3172	; 0xc64
 8007dec:	4865      	ldr	r0, [pc, #404]	; (8007f84 <UART_SetConfig+0x294>)
 8007dee:	f7f8 fe76 	bl	8000ade <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d013      	beq.n	8007e22 <UART_SetConfig+0x132>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e02:	d00e      	beq.n	8007e22 <UART_SetConfig+0x132>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0c:	d009      	beq.n	8007e22 <UART_SetConfig+0x132>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e16:	d004      	beq.n	8007e22 <UART_SetConfig+0x132>
 8007e18:	f640 4165 	movw	r1, #3173	; 0xc65
 8007e1c:	4859      	ldr	r0, [pc, #356]	; (8007f84 <UART_SetConfig+0x294>)
 8007e1e:	f7f8 fe5e 	bl	8000ade <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <UART_SetConfig+0x14e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e32:	d004      	beq.n	8007e3e <UART_SetConfig+0x14e>
 8007e34:	f640 4166 	movw	r1, #3174	; 0xc66
 8007e38:	4852      	ldr	r0, [pc, #328]	; (8007f84 <UART_SetConfig+0x294>)
 8007e3a:	f7f8 fe50 	bl	8000ade <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4b4b      	ldr	r3, [pc, #300]	; (8007f8c <UART_SetConfig+0x29c>)
 8007e5e:	4013      	ands	r3, r2
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	6812      	ldr	r2, [r2, #0]
 8007e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e66:	430b      	orrs	r3, r1
 8007e68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a3f      	ldr	r2, [pc, #252]	; (8007f88 <UART_SetConfig+0x298>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e96:	4313      	orrs	r3, r2
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a37      	ldr	r2, [pc, #220]	; (8007f90 <UART_SetConfig+0x2a0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d125      	bne.n	8007f04 <UART_SetConfig+0x214>
 8007eb8:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <UART_SetConfig+0x2a4>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d81a      	bhi.n	8007efc <UART_SetConfig+0x20c>
 8007ec6:	a201      	add	r2, pc, #4	; (adr r2, 8007ecc <UART_SetConfig+0x1dc>)
 8007ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ecc:	08007edd 	.word	0x08007edd
 8007ed0:	08007eed 	.word	0x08007eed
 8007ed4:	08007ee5 	.word	0x08007ee5
 8007ed8:	08007ef5 	.word	0x08007ef5
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ee2:	e114      	b.n	800810e <UART_SetConfig+0x41e>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eea:	e110      	b.n	800810e <UART_SetConfig+0x41e>
 8007eec:	2304      	movs	r3, #4
 8007eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ef2:	e10c      	b.n	800810e <UART_SetConfig+0x41e>
 8007ef4:	2308      	movs	r3, #8
 8007ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007efa:	e108      	b.n	800810e <UART_SetConfig+0x41e>
 8007efc:	2310      	movs	r3, #16
 8007efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f02:	e104      	b.n	800810e <UART_SetConfig+0x41e>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a23      	ldr	r2, [pc, #140]	; (8007f98 <UART_SetConfig+0x2a8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d146      	bne.n	8007f9c <UART_SetConfig+0x2ac>
 8007f0e:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <UART_SetConfig+0x2a4>)
 8007f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f14:	f003 030c 	and.w	r3, r3, #12
 8007f18:	2b0c      	cmp	r3, #12
 8007f1a:	d82d      	bhi.n	8007f78 <UART_SetConfig+0x288>
 8007f1c:	a201      	add	r2, pc, #4	; (adr r2, 8007f24 <UART_SetConfig+0x234>)
 8007f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f22:	bf00      	nop
 8007f24:	08007f59 	.word	0x08007f59
 8007f28:	08007f79 	.word	0x08007f79
 8007f2c:	08007f79 	.word	0x08007f79
 8007f30:	08007f79 	.word	0x08007f79
 8007f34:	08007f69 	.word	0x08007f69
 8007f38:	08007f79 	.word	0x08007f79
 8007f3c:	08007f79 	.word	0x08007f79
 8007f40:	08007f79 	.word	0x08007f79
 8007f44:	08007f61 	.word	0x08007f61
 8007f48:	08007f79 	.word	0x08007f79
 8007f4c:	08007f79 	.word	0x08007f79
 8007f50:	08007f79 	.word	0x08007f79
 8007f54:	08007f71 	.word	0x08007f71
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f5e:	e0d6      	b.n	800810e <UART_SetConfig+0x41e>
 8007f60:	2302      	movs	r3, #2
 8007f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f66:	e0d2      	b.n	800810e <UART_SetConfig+0x41e>
 8007f68:	2304      	movs	r3, #4
 8007f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f6e:	e0ce      	b.n	800810e <UART_SetConfig+0x41e>
 8007f70:	2308      	movs	r3, #8
 8007f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f76:	e0ca      	b.n	800810e <UART_SetConfig+0x41e>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f7e:	e0c6      	b.n	800810e <UART_SetConfig+0x41e>
 8007f80:	00989680 	.word	0x00989680
 8007f84:	08011af8 	.word	0x08011af8
 8007f88:	40008000 	.word	0x40008000
 8007f8c:	efff69f3 	.word	0xefff69f3
 8007f90:	40013800 	.word	0x40013800
 8007f94:	40021000 	.word	0x40021000
 8007f98:	40004400 	.word	0x40004400
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4aae      	ldr	r2, [pc, #696]	; (800825c <UART_SetConfig+0x56c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d125      	bne.n	8007ff2 <UART_SetConfig+0x302>
 8007fa6:	4bae      	ldr	r3, [pc, #696]	; (8008260 <UART_SetConfig+0x570>)
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fb0:	2b30      	cmp	r3, #48	; 0x30
 8007fb2:	d016      	beq.n	8007fe2 <UART_SetConfig+0x2f2>
 8007fb4:	2b30      	cmp	r3, #48	; 0x30
 8007fb6:	d818      	bhi.n	8007fea <UART_SetConfig+0x2fa>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d00a      	beq.n	8007fd2 <UART_SetConfig+0x2e2>
 8007fbc:	2b20      	cmp	r3, #32
 8007fbe:	d814      	bhi.n	8007fea <UART_SetConfig+0x2fa>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <UART_SetConfig+0x2da>
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d008      	beq.n	8007fda <UART_SetConfig+0x2ea>
 8007fc8:	e00f      	b.n	8007fea <UART_SetConfig+0x2fa>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd0:	e09d      	b.n	800810e <UART_SetConfig+0x41e>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd8:	e099      	b.n	800810e <UART_SetConfig+0x41e>
 8007fda:	2304      	movs	r3, #4
 8007fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe0:	e095      	b.n	800810e <UART_SetConfig+0x41e>
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe8:	e091      	b.n	800810e <UART_SetConfig+0x41e>
 8007fea:	2310      	movs	r3, #16
 8007fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ff0:	e08d      	b.n	800810e <UART_SetConfig+0x41e>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a9b      	ldr	r2, [pc, #620]	; (8008264 <UART_SetConfig+0x574>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d125      	bne.n	8008048 <UART_SetConfig+0x358>
 8007ffc:	4b98      	ldr	r3, [pc, #608]	; (8008260 <UART_SetConfig+0x570>)
 8007ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008002:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008006:	2bc0      	cmp	r3, #192	; 0xc0
 8008008:	d016      	beq.n	8008038 <UART_SetConfig+0x348>
 800800a:	2bc0      	cmp	r3, #192	; 0xc0
 800800c:	d818      	bhi.n	8008040 <UART_SetConfig+0x350>
 800800e:	2b80      	cmp	r3, #128	; 0x80
 8008010:	d00a      	beq.n	8008028 <UART_SetConfig+0x338>
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	d814      	bhi.n	8008040 <UART_SetConfig+0x350>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <UART_SetConfig+0x330>
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	d008      	beq.n	8008030 <UART_SetConfig+0x340>
 800801e:	e00f      	b.n	8008040 <UART_SetConfig+0x350>
 8008020:	2300      	movs	r3, #0
 8008022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008026:	e072      	b.n	800810e <UART_SetConfig+0x41e>
 8008028:	2302      	movs	r3, #2
 800802a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800802e:	e06e      	b.n	800810e <UART_SetConfig+0x41e>
 8008030:	2304      	movs	r3, #4
 8008032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008036:	e06a      	b.n	800810e <UART_SetConfig+0x41e>
 8008038:	2308      	movs	r3, #8
 800803a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800803e:	e066      	b.n	800810e <UART_SetConfig+0x41e>
 8008040:	2310      	movs	r3, #16
 8008042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008046:	e062      	b.n	800810e <UART_SetConfig+0x41e>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a86      	ldr	r2, [pc, #536]	; (8008268 <UART_SetConfig+0x578>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d12a      	bne.n	80080a8 <UART_SetConfig+0x3b8>
 8008052:	4b83      	ldr	r3, [pc, #524]	; (8008260 <UART_SetConfig+0x570>)
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008060:	d01a      	beq.n	8008098 <UART_SetConfig+0x3a8>
 8008062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008066:	d81b      	bhi.n	80080a0 <UART_SetConfig+0x3b0>
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d00c      	beq.n	8008088 <UART_SetConfig+0x398>
 800806e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008072:	d815      	bhi.n	80080a0 <UART_SetConfig+0x3b0>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <UART_SetConfig+0x390>
 8008078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800807c:	d008      	beq.n	8008090 <UART_SetConfig+0x3a0>
 800807e:	e00f      	b.n	80080a0 <UART_SetConfig+0x3b0>
 8008080:	2300      	movs	r3, #0
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008086:	e042      	b.n	800810e <UART_SetConfig+0x41e>
 8008088:	2302      	movs	r3, #2
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800808e:	e03e      	b.n	800810e <UART_SetConfig+0x41e>
 8008090:	2304      	movs	r3, #4
 8008092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008096:	e03a      	b.n	800810e <UART_SetConfig+0x41e>
 8008098:	2308      	movs	r3, #8
 800809a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800809e:	e036      	b.n	800810e <UART_SetConfig+0x41e>
 80080a0:	2310      	movs	r3, #16
 80080a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080a6:	e032      	b.n	800810e <UART_SetConfig+0x41e>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a6f      	ldr	r2, [pc, #444]	; (800826c <UART_SetConfig+0x57c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d12a      	bne.n	8008108 <UART_SetConfig+0x418>
 80080b2:	4b6b      	ldr	r3, [pc, #428]	; (8008260 <UART_SetConfig+0x570>)
 80080b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080c0:	d01a      	beq.n	80080f8 <UART_SetConfig+0x408>
 80080c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080c6:	d81b      	bhi.n	8008100 <UART_SetConfig+0x410>
 80080c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080cc:	d00c      	beq.n	80080e8 <UART_SetConfig+0x3f8>
 80080ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d2:	d815      	bhi.n	8008100 <UART_SetConfig+0x410>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <UART_SetConfig+0x3f0>
 80080d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080dc:	d008      	beq.n	80080f0 <UART_SetConfig+0x400>
 80080de:	e00f      	b.n	8008100 <UART_SetConfig+0x410>
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e6:	e012      	b.n	800810e <UART_SetConfig+0x41e>
 80080e8:	2302      	movs	r3, #2
 80080ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ee:	e00e      	b.n	800810e <UART_SetConfig+0x41e>
 80080f0:	2304      	movs	r3, #4
 80080f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080f6:	e00a      	b.n	800810e <UART_SetConfig+0x41e>
 80080f8:	2308      	movs	r3, #8
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080fe:	e006      	b.n	800810e <UART_SetConfig+0x41e>
 8008100:	2310      	movs	r3, #16
 8008102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008106:	e002      	b.n	800810e <UART_SetConfig+0x41e>
 8008108:	2310      	movs	r3, #16
 800810a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a56      	ldr	r2, [pc, #344]	; (800826c <UART_SetConfig+0x57c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d17a      	bne.n	800820e <UART_SetConfig+0x51e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800811c:	2b08      	cmp	r3, #8
 800811e:	d824      	bhi.n	800816a <UART_SetConfig+0x47a>
 8008120:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <UART_SetConfig+0x438>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	0800814d 	.word	0x0800814d
 800812c:	0800816b 	.word	0x0800816b
 8008130:	08008155 	.word	0x08008155
 8008134:	0800816b 	.word	0x0800816b
 8008138:	0800815b 	.word	0x0800815b
 800813c:	0800816b 	.word	0x0800816b
 8008140:	0800816b 	.word	0x0800816b
 8008144:	0800816b 	.word	0x0800816b
 8008148:	08008163 	.word	0x08008163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800814c:	f7fb fb78 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8008150:	61f8      	str	r0, [r7, #28]
        break;
 8008152:	e010      	b.n	8008176 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008154:	4b46      	ldr	r3, [pc, #280]	; (8008270 <UART_SetConfig+0x580>)
 8008156:	61fb      	str	r3, [r7, #28]
        break;
 8008158:	e00d      	b.n	8008176 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800815a:	f7fb fad9 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800815e:	61f8      	str	r0, [r7, #28]
        break;
 8008160:	e009      	b.n	8008176 <UART_SetConfig+0x486>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008166:	61fb      	str	r3, [r7, #28]
        break;
 8008168:	e005      	b.n	8008176 <UART_SetConfig+0x486>
      default:
        pclk = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008174:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8107 	beq.w	800838c <UART_SetConfig+0x69c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	4613      	mov	r3, r2
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4413      	add	r3, r2
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	429a      	cmp	r2, r3
 800818c:	d305      	bcc.n	800819a <UART_SetConfig+0x4aa>
          (pclk > (4096U * huart->Init.BaudRate)))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008194:	69fa      	ldr	r2, [r7, #28]
 8008196:	429a      	cmp	r2, r3
 8008198:	d903      	bls.n	80081a2 <UART_SetConfig+0x4b2>
      {
        ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081a0:	e0f4      	b.n	800838c <UART_SetConfig+0x69c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2200      	movs	r2, #0
 80081a6:	461c      	mov	r4, r3
 80081a8:	4615      	mov	r5, r2
 80081aa:	f04f 0200 	mov.w	r2, #0
 80081ae:	f04f 0300 	mov.w	r3, #0
 80081b2:	022b      	lsls	r3, r5, #8
 80081b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80081b8:	0222      	lsls	r2, r4, #8
 80081ba:	68f9      	ldr	r1, [r7, #12]
 80081bc:	6849      	ldr	r1, [r1, #4]
 80081be:	0849      	lsrs	r1, r1, #1
 80081c0:	2000      	movs	r0, #0
 80081c2:	4688      	mov	r8, r1
 80081c4:	4681      	mov	r9, r0
 80081c6:	eb12 0a08 	adds.w	sl, r2, r8
 80081ca:	eb43 0b09 	adc.w	fp, r3, r9
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	603b      	str	r3, [r7, #0]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081dc:	4650      	mov	r0, sl
 80081de:	4659      	mov	r1, fp
 80081e0:	f7f8 f850 	bl	8000284 <__aeabi_uldivmod>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4613      	mov	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f2:	d308      	bcc.n	8008206 <UART_SetConfig+0x516>
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081fa:	d204      	bcs.n	8008206 <UART_SetConfig+0x516>
        {
          huart->Instance->BRR = usartdiv;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	60da      	str	r2, [r3, #12]
 8008204:	e0c2      	b.n	800838c <UART_SetConfig+0x69c>
        }
        else
        {
          ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800820c:	e0be      	b.n	800838c <UART_SetConfig+0x69c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008216:	d16a      	bne.n	80082ee <UART_SetConfig+0x5fe>
  {
    switch (clocksource)
 8008218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800821c:	2b08      	cmp	r3, #8
 800821e:	d834      	bhi.n	800828a <UART_SetConfig+0x59a>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x538>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	08008275 	.word	0x08008275
 8008234:	0800828b 	.word	0x0800828b
 8008238:	0800827b 	.word	0x0800827b
 800823c:	0800828b 	.word	0x0800828b
 8008240:	0800828b 	.word	0x0800828b
 8008244:	0800828b 	.word	0x0800828b
 8008248:	08008283 	.word	0x08008283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800824c:	f7fb faf8 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8008250:	61f8      	str	r0, [r7, #28]
        break;
 8008252:	e020      	b.n	8008296 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008254:	f7fb fb0a 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8008258:	61f8      	str	r0, [r7, #28]
        break;
 800825a:	e01c      	b.n	8008296 <UART_SetConfig+0x5a6>
 800825c:	40004800 	.word	0x40004800
 8008260:	40021000 	.word	0x40021000
 8008264:	40004c00 	.word	0x40004c00
 8008268:	40005000 	.word	0x40005000
 800826c:	40008000 	.word	0x40008000
 8008270:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008274:	4b4c      	ldr	r3, [pc, #304]	; (80083a8 <UART_SetConfig+0x6b8>)
 8008276:	61fb      	str	r3, [r7, #28]
        break;
 8008278:	e00d      	b.n	8008296 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800827a:	f7fb fa49 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800827e:	61f8      	str	r0, [r7, #28]
        break;
 8008280:	e009      	b.n	8008296 <UART_SetConfig+0x5a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008286:	61fb      	str	r3, [r7, #28]
        break;
 8008288:	e005      	b.n	8008296 <UART_SetConfig+0x5a6>
      default:
        pclk = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d077      	beq.n	800838c <UART_SetConfig+0x69c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	005a      	lsls	r2, r3, #1
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	085b      	lsrs	r3, r3, #1
 80082a6:	441a      	add	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b0f      	cmp	r3, #15
 80082b6:	d916      	bls.n	80082e6 <UART_SetConfig+0x5f6>
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082be:	d212      	bcs.n	80082e6 <UART_SetConfig+0x5f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f023 030f 	bic.w	r3, r3, #15
 80082c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	085b      	lsrs	r3, r3, #1
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	f003 0307 	and.w	r3, r3, #7
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	8afb      	ldrh	r3, [r7, #22]
 80082d8:	4313      	orrs	r3, r2
 80082da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	8afa      	ldrh	r2, [r7, #22]
 80082e2:	60da      	str	r2, [r3, #12]
 80082e4:	e052      	b.n	800838c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082ec:	e04e      	b.n	800838c <UART_SetConfig+0x69c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d827      	bhi.n	8008346 <UART_SetConfig+0x656>
 80082f6:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <UART_SetConfig+0x60c>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	08008347 	.word	0x08008347
 800830c:	08008337 	.word	0x08008337
 8008310:	08008347 	.word	0x08008347
 8008314:	08008347 	.word	0x08008347
 8008318:	08008347 	.word	0x08008347
 800831c:	0800833f 	.word	0x0800833f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008320:	f7fb fa8e 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8008324:	61f8      	str	r0, [r7, #28]
        break;
 8008326:	e014      	b.n	8008352 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008328:	f7fb faa0 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 800832c:	61f8      	str	r0, [r7, #28]
        break;
 800832e:	e010      	b.n	8008352 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008330:	4b1d      	ldr	r3, [pc, #116]	; (80083a8 <UART_SetConfig+0x6b8>)
 8008332:	61fb      	str	r3, [r7, #28]
        break;
 8008334:	e00d      	b.n	8008352 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008336:	f7fb f9eb 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800833a:	61f8      	str	r0, [r7, #28]
        break;
 800833c:	e009      	b.n	8008352 <UART_SetConfig+0x662>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008342:	61fb      	str	r3, [r7, #28]
        break;
 8008344:	e005      	b.n	8008352 <UART_SetConfig+0x662>
      default:
        pclk = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008350:	bf00      	nop
    }

    if (pclk != 0U)
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d019      	beq.n	800838c <UART_SetConfig+0x69c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	085a      	lsrs	r2, r3, #1
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	441a      	add	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	fbb2 f3f3 	udiv	r3, r2, r3
 800836a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	2b0f      	cmp	r3, #15
 8008370:	d909      	bls.n	8008386 <UART_SetConfig+0x696>
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008378:	d205      	bcs.n	8008386 <UART_SetConfig+0x696>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60da      	str	r2, [r3, #12]
 8008384:	e002      	b.n	800838c <UART_SetConfig+0x69c>
      }
      else
      {
        ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008398:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800839c:	4618      	mov	r0, r3
 800839e:	3728      	adds	r7, #40	; 0x28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083a6:	bf00      	nop
 80083a8:	00f42400 	.word	0x00f42400

080083ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2bff      	cmp	r3, #255	; 0xff
 80083ba:	d904      	bls.n	80083c6 <UART_AdvFeatureConfig+0x1a>
 80083bc:	f640 514c 	movw	r1, #3404	; 0xd4c
 80083c0:	4891      	ldr	r0, [pc, #580]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 80083c2:	f7f8 fb8c 	bl	8000ade <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d009      	beq.n	80083ee <UART_AdvFeatureConfig+0x42>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083e2:	d004      	beq.n	80083ee <UART_AdvFeatureConfig+0x42>
 80083e4:	f640 5151 	movw	r1, #3409	; 0xd51
 80083e8:	4887      	ldr	r0, [pc, #540]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 80083ea:	f7f8 fb78 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d009      	beq.n	800842c <UART_AdvFeatureConfig+0x80>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008420:	d004      	beq.n	800842c <UART_AdvFeatureConfig+0x80>
 8008422:	f640 5158 	movw	r1, #3416	; 0xd58
 8008426:	4878      	ldr	r0, [pc, #480]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 8008428:	f7f8 fb59 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d018      	beq.n	8008480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <UART_AdvFeatureConfig+0xbe>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800845e:	d004      	beq.n	800846a <UART_AdvFeatureConfig+0xbe>
 8008460:	f640 515f 	movw	r1, #3423	; 0xd5f
 8008464:	4868      	ldr	r0, [pc, #416]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 8008466:	f7f8 fb3a 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d018      	beq.n	80084be <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <UART_AdvFeatureConfig+0xfc>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849c:	d004      	beq.n	80084a8 <UART_AdvFeatureConfig+0xfc>
 800849e:	f640 5166 	movw	r1, #3430	; 0xd66
 80084a2:	4859      	ldr	r0, [pc, #356]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 80084a4:	f7f8 fb1b 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d018      	beq.n	80084fc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <UART_AdvFeatureConfig+0x13a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084da:	d004      	beq.n	80084e6 <UART_AdvFeatureConfig+0x13a>
 80084dc:	f640 516d 	movw	r1, #3437	; 0xd6d
 80084e0:	4849      	ldr	r0, [pc, #292]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 80084e2:	f7f8 fafc 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	2b00      	cmp	r3, #0
 8008506:	d018      	beq.n	800853a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <UART_AdvFeatureConfig+0x178>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008518:	d004      	beq.n	8008524 <UART_AdvFeatureConfig+0x178>
 800851a:	f640 5174 	movw	r1, #3444	; 0xd74
 800851e:	483a      	ldr	r0, [pc, #232]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 8008520:	f7f8 fadd 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d06c      	beq.n	8008620 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a30      	ldr	r2, [pc, #192]	; (800860c <UART_AdvFeatureConfig+0x260>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d018      	beq.n	8008582 <UART_AdvFeatureConfig+0x1d6>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a2e      	ldr	r2, [pc, #184]	; (8008610 <UART_AdvFeatureConfig+0x264>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d013      	beq.n	8008582 <UART_AdvFeatureConfig+0x1d6>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a2d      	ldr	r2, [pc, #180]	; (8008614 <UART_AdvFeatureConfig+0x268>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00e      	beq.n	8008582 <UART_AdvFeatureConfig+0x1d6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a2b      	ldr	r2, [pc, #172]	; (8008618 <UART_AdvFeatureConfig+0x26c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d009      	beq.n	8008582 <UART_AdvFeatureConfig+0x1d6>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a2a      	ldr	r2, [pc, #168]	; (800861c <UART_AdvFeatureConfig+0x270>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d004      	beq.n	8008582 <UART_AdvFeatureConfig+0x1d6>
 8008578:	f640 517b 	movw	r1, #3451	; 0xd7b
 800857c:	4822      	ldr	r0, [pc, #136]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 800857e:	f7f8 faae 	bl	8000ade <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <UART_AdvFeatureConfig+0x1f2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008592:	d004      	beq.n	800859e <UART_AdvFeatureConfig+0x1f2>
 8008594:	f640 517c 	movw	r1, #3452	; 0xd7c
 8008598:	481b      	ldr	r0, [pc, #108]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 800859a:	f7f8 faa0 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085bc:	d130      	bne.n	8008620 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d013      	beq.n	80085ee <UART_AdvFeatureConfig+0x242>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ce:	d00e      	beq.n	80085ee <UART_AdvFeatureConfig+0x242>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085d8:	d009      	beq.n	80085ee <UART_AdvFeatureConfig+0x242>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085e2:	d004      	beq.n	80085ee <UART_AdvFeatureConfig+0x242>
 80085e4:	f640 5181 	movw	r1, #3457	; 0xd81
 80085e8:	4807      	ldr	r0, [pc, #28]	; (8008608 <UART_AdvFeatureConfig+0x25c>)
 80085ea:	f7f8 fa78 	bl	8000ade <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	605a      	str	r2, [r3, #4]
 8008604:	e00c      	b.n	8008620 <UART_AdvFeatureConfig+0x274>
 8008606:	bf00      	nop
 8008608:	08011af8 	.word	0x08011af8
 800860c:	40013800 	.word	0x40013800
 8008610:	40004400 	.word	0x40004400
 8008614:	40004800 	.word	0x40004800
 8008618:	40004c00 	.word	0x40004c00
 800861c:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008628:	2b00      	cmp	r3, #0
 800862a:	d018      	beq.n	800865e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <UART_AdvFeatureConfig+0x29c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008638:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800863c:	d004      	beq.n	8008648 <UART_AdvFeatureConfig+0x29c>
 800863e:	f640 5189 	movw	r1, #3465	; 0xd89
 8008642:	4809      	ldr	r0, [pc, #36]	; (8008668 <UART_AdvFeatureConfig+0x2bc>)
 8008644:	f7f8 fa4b 	bl	8000ade <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
  }
}
 800865e:	bf00      	nop
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	08011af8 	.word	0x08011af8

0800866c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af02      	add	r7, sp, #8
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800867c:	f7f8 fec6 	bl	800140c <HAL_GetTick>
 8008680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0308 	and.w	r3, r3, #8
 800868c:	2b08      	cmp	r3, #8
 800868e:	d10e      	bne.n	80086ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f82d 	bl	80086fe <UART_WaitOnFlagUntilTimeout>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e023      	b.n	80086f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d10e      	bne.n	80086da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f817 	bl	80086fe <UART_WaitOnFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e00d      	b.n	80086f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2220      	movs	r2, #32
 80086e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b09c      	sub	sp, #112	; 0x70
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	603b      	str	r3, [r7, #0]
 800870a:	4613      	mov	r3, r2
 800870c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800870e:	e0a5      	b.n	800885c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	f000 80a1 	beq.w	800885c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800871a:	f7f8 fe77 	bl	800140c <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008726:	429a      	cmp	r2, r3
 8008728:	d302      	bcc.n	8008730 <UART_WaitOnFlagUntilTimeout+0x32>
 800872a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800872c:	2b00      	cmp	r3, #0
 800872e:	d13e      	bne.n	80087ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008738:	e853 3f00 	ldrex	r3, [r3]
 800873c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800873e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008744:	667b      	str	r3, [r7, #100]	; 0x64
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800874e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008750:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800875c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e6      	bne.n	8008730 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3308      	adds	r3, #8
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008774:	f023 0301 	bic.w	r3, r3, #1
 8008778:	663b      	str	r3, [r7, #96]	; 0x60
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3308      	adds	r3, #8
 8008780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008782:	64ba      	str	r2, [r7, #72]	; 0x48
 8008784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e5      	bne.n	8008762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2220      	movs	r2, #32
 800879a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e067      	b.n	800887e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d04f      	beq.n	800885c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ca:	d147      	bne.n	800885c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34
 80087f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e6      	bne.n	80087d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	613b      	str	r3, [r7, #16]
   return(result);
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f023 0301 	bic.w	r3, r3, #1
 800881e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008828:	623a      	str	r2, [r7, #32]
 800882a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	69f9      	ldr	r1, [r7, #28]
 800882e:	6a3a      	ldr	r2, [r7, #32]
 8008830:	e841 2300 	strex	r3, r2, [r1]
 8008834:	61bb      	str	r3, [r7, #24]
   return(result);
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e5      	bne.n	8008808 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2220      	movs	r2, #32
 8008846:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2220      	movs	r2, #32
 800884c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e010      	b.n	800887e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	69da      	ldr	r2, [r3, #28]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4013      	ands	r3, r2
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	429a      	cmp	r2, r3
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	429a      	cmp	r2, r3
 8008878:	f43f af4a 	beq.w	8008710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3770      	adds	r7, #112	; 0x70
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008886:	b480      	push	{r7}
 8008888:	b095      	sub	sp, #84	; 0x54
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	e853 3f00 	ldrex	r3, [r3]
 800889a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ac:	643b      	str	r3, [r7, #64]	; 0x40
 80088ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088b4:	e841 2300 	strex	r3, r2, [r1]
 80088b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1e6      	bne.n	800888e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3308      	adds	r3, #8
 80088c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	f023 0301 	bic.w	r3, r3, #1
 80088d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3308      	adds	r3, #8
 80088de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d118      	bne.n	800892e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	e853 3f00 	ldrex	r3, [r3]
 8008908:	60bb      	str	r3, [r7, #8]
   return(result);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f023 0310 	bic.w	r3, r3, #16
 8008910:	647b      	str	r3, [r7, #68]	; 0x44
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	6979      	ldr	r1, [r7, #20]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	e841 2300 	strex	r3, r2, [r1]
 8008926:	613b      	str	r3, [r7, #16]
   return(result);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e6      	bne.n	80088fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008940:	bf00      	nop
 8008942:	3754      	adds	r7, #84	; 0x54
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff f9aa 	bl	8007cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b088      	sub	sp, #32
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	60bb      	str	r3, [r7, #8]
   return(result);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	61bb      	str	r3, [r7, #24]
 80089a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6979      	ldr	r1, [r7, #20]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	613b      	str	r3, [r7, #16]
   return(result);
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e6      	bne.n	8008980 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff f976 	bl	8007cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089c4:	bf00      	nop
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80089e0:	b084      	sub	sp, #16
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	f107 001c 	add.w	r0, r7, #28
 80089ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a35      	ldr	r2, [pc, #212]	; (8008ad0 <SDMMC_Init+0xf0>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <SDMMC_Init+0x26>
 80089fe:	21dc      	movs	r1, #220	; 0xdc
 8008a00:	4834      	ldr	r0, [pc, #208]	; (8008ad4 <SDMMC_Init+0xf4>)
 8008a02:	f7f8 f86c 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <SDMMC_Init+0x3c>
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a12:	d003      	beq.n	8008a1c <SDMMC_Init+0x3c>
 8008a14:	21dd      	movs	r1, #221	; 0xdd
 8008a16:	482f      	ldr	r0, [pc, #188]	; (8008ad4 <SDMMC_Init+0xf4>)
 8008a18:	f7f8 f861 	bl	8000ade <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <SDMMC_Init+0x52>
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a28:	d003      	beq.n	8008a32 <SDMMC_Init+0x52>
 8008a2a:	21df      	movs	r1, #223	; 0xdf
 8008a2c:	4829      	ldr	r0, [pc, #164]	; (8008ad4 <SDMMC_Init+0xf4>)
 8008a2e:	f7f8 f856 	bl	8000ade <assert_failed>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <SDMMC_Init+0x68>
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a3e:	d003      	beq.n	8008a48 <SDMMC_Init+0x68>
 8008a40:	21e1      	movs	r1, #225	; 0xe1
 8008a42:	4824      	ldr	r0, [pc, #144]	; (8008ad4 <SDMMC_Init+0xf4>)
 8008a44:	f7f8 f84b 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <SDMMC_Init+0x86>
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a54:	d007      	beq.n	8008a66 <SDMMC_Init+0x86>
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a5c:	d003      	beq.n	8008a66 <SDMMC_Init+0x86>
 8008a5e:	21e2      	movs	r1, #226	; 0xe2
 8008a60:	481c      	ldr	r0, [pc, #112]	; (8008ad4 <SDMMC_Init+0xf4>)
 8008a62:	f7f8 f83c 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <SDMMC_Init+0x9c>
 8008a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a72:	d003      	beq.n	8008a7c <SDMMC_Init+0x9c>
 8008a74:	21e3      	movs	r1, #227	; 0xe3
 8008a76:	4817      	ldr	r0, [pc, #92]	; (8008ad4 <SDMMC_Init+0xf4>)
 8008a78:	f7f8 f831 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	2bff      	cmp	r3, #255	; 0xff
 8008a80:	d903      	bls.n	8008a8a <SDMMC_Init+0xaa>
 8008a82:	21e4      	movs	r1, #228	; 0xe4
 8008a84:	4813      	ldr	r0, [pc, #76]	; (8008ad4 <SDMMC_Init+0xf4>)
 8008a86:	f7f8 f82a 	bl	8000ade <assert_failed>

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008a92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008a96:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008a9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008a9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008aa2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008ab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aca:	b004      	add	sp, #16
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40012800 	.word	0x40012800
 8008ad4:	08011b34 	.word	0x08011b34

08008ad8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2203      	movs	r2, #3
 8008b20:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008b22:	2002      	movs	r0, #2
 8008b24:	f7f8 fc7e 	bl	8001424 <HAL_Delay>

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0303 	and.w	r3, r3, #3
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
	...

08008b50 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b3f      	cmp	r3, #63	; 0x3f
 8008b64:	d904      	bls.n	8008b70 <SDMMC_SendCommand+0x20>
 8008b66:	f240 1187 	movw	r1, #391	; 0x187
 8008b6a:	482b      	ldr	r0, [pc, #172]	; (8008c18 <SDMMC_SendCommand+0xc8>)
 8008b6c:	f7f7 ffb7 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00c      	beq.n	8008b92 <SDMMC_SendCommand+0x42>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	d008      	beq.n	8008b92 <SDMMC_SendCommand+0x42>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	2bc0      	cmp	r3, #192	; 0xc0
 8008b86:	d004      	beq.n	8008b92 <SDMMC_SendCommand+0x42>
 8008b88:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8008b8c:	4822      	ldr	r0, [pc, #136]	; (8008c18 <SDMMC_SendCommand+0xc8>)
 8008b8e:	f7f7 ffa6 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00e      	beq.n	8008bb8 <SDMMC_SendCommand+0x68>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba2:	d009      	beq.n	8008bb8 <SDMMC_SendCommand+0x68>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bac:	d004      	beq.n	8008bb8 <SDMMC_SendCommand+0x68>
 8008bae:	f240 1189 	movw	r1, #393	; 0x189
 8008bb2:	4819      	ldr	r0, [pc, #100]	; (8008c18 <SDMMC_SendCommand+0xc8>)
 8008bb4:	f7f7 ff93 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d009      	beq.n	8008bd4 <SDMMC_SendCommand+0x84>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc8:	d004      	beq.n	8008bd4 <SDMMC_SendCommand+0x84>
 8008bca:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8008bce:	4812      	ldr	r0, [pc, #72]	; (8008c18 <SDMMC_SendCommand+0xc8>)
 8008bd0:	f7f7 ff85 	bl	8000ade <assert_failed>

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008be4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008bea:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008bf0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008c00:	f023 030f 	bic.w	r3, r3, #15
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	08011b34 	.word	0x08011b34

08008c1c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	b2db      	uxtb	r3, r3
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
	...

08008c38 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00d      	beq.n	8008c64 <SDMMC_GetResponse+0x2c>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d00a      	beq.n	8008c64 <SDMMC_GetResponse+0x2c>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d007      	beq.n	8008c64 <SDMMC_GetResponse+0x2c>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b0c      	cmp	r3, #12
 8008c58:	d004      	beq.n	8008c64 <SDMMC_GetResponse+0x2c>
 8008c5a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8008c5e:	4807      	ldr	r0, [pc, #28]	; (8008c7c <SDMMC_GetResponse+0x44>)
 8008c60:	f7f7 ff3d 	bl	8000ade <assert_failed>

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3314      	adds	r3, #20
 8008c68:	461a      	mov	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	08011b34 	.word	0x08011b34

08008c80 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c96:	d304      	bcc.n	8008ca2 <SDMMC_ConfigData+0x22>
 8008c98:	f240 11cb 	movw	r1, #459	; 0x1cb
 8008c9c:	4846      	ldr	r0, [pc, #280]	; (8008db8 <SDMMC_ConfigData+0x138>)
 8008c9e:	f7f7 ff1e 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d03c      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d038      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d034      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b30      	cmp	r3, #48	; 0x30
 8008cc0:	d030      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2b40      	cmp	r3, #64	; 0x40
 8008cc8:	d02c      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b50      	cmp	r3, #80	; 0x50
 8008cd0:	d028      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b60      	cmp	r3, #96	; 0x60
 8008cd8:	d024      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	2b70      	cmp	r3, #112	; 0x70
 8008ce0:	d020      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b80      	cmp	r3, #128	; 0x80
 8008ce8:	d01c      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b90      	cmp	r3, #144	; 0x90
 8008cf0:	d018      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8008cf8:	d014      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	2bb0      	cmp	r3, #176	; 0xb0
 8008d00:	d010      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2bc0      	cmp	r3, #192	; 0xc0
 8008d08:	d00c      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	2bd0      	cmp	r3, #208	; 0xd0
 8008d10:	d008      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	2be0      	cmp	r3, #224	; 0xe0
 8008d18:	d004      	beq.n	8008d24 <SDMMC_ConfigData+0xa4>
 8008d1a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8008d1e:	4826      	ldr	r0, [pc, #152]	; (8008db8 <SDMMC_ConfigData+0x138>)
 8008d20:	f7f7 fedd 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d008      	beq.n	8008d3e <SDMMC_ConfigData+0xbe>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d004      	beq.n	8008d3e <SDMMC_ConfigData+0xbe>
 8008d34:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008d38:	481f      	ldr	r0, [pc, #124]	; (8008db8 <SDMMC_ConfigData+0x138>)
 8008d3a:	f7f7 fed0 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <SDMMC_ConfigData+0xd8>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	d004      	beq.n	8008d58 <SDMMC_ConfigData+0xd8>
 8008d4e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8008d52:	4819      	ldr	r0, [pc, #100]	; (8008db8 <SDMMC_ConfigData+0x138>)
 8008d54:	f7f7 fec3 	bl	8000ade <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d008      	beq.n	8008d72 <SDMMC_ConfigData+0xf2>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d004      	beq.n	8008d72 <SDMMC_ConfigData+0xf2>
 8008d68:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008d6c:	4812      	ldr	r0, [pc, #72]	; (8008db8 <SDMMC_ConfigData+0x138>)
 8008d6e:	f7f7 feb6 	bl	8000ade <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d8a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d90:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	431a      	orrs	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0

}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	08011b34 	.word	0x08011b34

08008dbc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008dca:	2310      	movs	r3, #16
 8008dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dce:	2340      	movs	r3, #64	; 0x40
 8008dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ddc:	f107 0308 	add.w	r3, r7, #8
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff feb4 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dec:	2110      	movs	r1, #16
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa18 	bl	8009224 <SDMMC_GetCmdResp1>
 8008df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008df6:	69fb      	ldr	r3, [r7, #28]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3720      	adds	r7, #32
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e0e:	2311      	movs	r3, #17
 8008e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e16:	2300      	movs	r3, #0
 8008e18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e20:	f107 0308 	add.w	r3, r7, #8
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fe92 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e30:	2111      	movs	r1, #17
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f9f6 	bl	8009224 <SDMMC_GetCmdResp1>
 8008e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e52:	2312      	movs	r3, #18
 8008e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e64:	f107 0308 	add.w	r3, r7, #8
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff fe70 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e74:	2112      	movs	r1, #18
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f9d4 	bl	8009224 <SDMMC_GetCmdResp1>
 8008e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e7e:	69fb      	ldr	r3, [r7, #28]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e96:	2318      	movs	r3, #24
 8008e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e9a:	2340      	movs	r3, #64	; 0x40
 8008e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ea6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ea8:	f107 0308 	add.w	r3, r7, #8
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fe4e 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb8:	2118      	movs	r1, #24
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9b2 	bl	8009224 <SDMMC_GetCmdResp1>
 8008ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008eda:	2319      	movs	r3, #25
 8008edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ede:	2340      	movs	r3, #64	; 0x40
 8008ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eec:	f107 0308 	add.w	r3, r7, #8
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff fe2c 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008efc:	2119      	movs	r1, #25
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f990 	bl	8009224 <SDMMC_GetCmdResp1>
 8008f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f06:	69fb      	ldr	r3, [r7, #28]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b088      	sub	sp, #32
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f1c:	230c      	movs	r3, #12
 8008f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f2c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f2e:	f107 0308 	add.w	r3, r7, #8
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff fe0b 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008f3a:	4a05      	ldr	r2, [pc, #20]	; (8008f50 <SDMMC_CmdStopTransfer+0x40>)
 8008f3c:	210c      	movs	r1, #12
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f970 	bl	8009224 <SDMMC_GetCmdResp1>
 8008f44:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008f46:	69fb      	ldr	r3, [r7, #28]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	05f5e100 	.word	0x05f5e100

08008f54 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	; 0x28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f64:	2307      	movs	r3, #7
 8008f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f68:	2340      	movs	r3, #64	; 0x40
 8008f6a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f74:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f76:	f107 0310 	add.w	r3, r7, #16
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fde7 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f86:	2107      	movs	r1, #7
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f94b 	bl	8009224 <SDMMC_GetCmdResp1>
 8008f8e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3728      	adds	r7, #40	; 0x28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b088      	sub	sp, #32
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fb8:	f107 0308 	add.w	r3, r7, #8
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff fdc6 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fb65 	bl	8009694 <SDMMC_GetCmdError>
 8008fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b088      	sub	sp, #32
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fde:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fe8:	2340      	movs	r3, #64	; 0x40
 8008fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ff6:	f107 0308 	add.w	r3, r7, #8
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fda7 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 faf8 	bl	80095f8 <SDMMC_GetCmdResp7>
 8009008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800900a:	69fb      	ldr	r3, [r7, #28]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3720      	adds	r7, #32
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b088      	sub	sp, #32
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009022:	2337      	movs	r3, #55	; 0x37
 8009024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009026:	2340      	movs	r3, #64	; 0x40
 8009028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800902e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009034:	f107 0308 	add.w	r3, r7, #8
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7ff fd88 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009040:	f241 3288 	movw	r2, #5000	; 0x1388
 8009044:	2137      	movs	r1, #55	; 0x37
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f8ec 	bl	8009224 <SDMMC_GetCmdResp1>
 800904c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800904e:	69fb      	ldr	r3, [r7, #28]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3720      	adds	r7, #32
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800906c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800906e:	2329      	movs	r3, #41	; 0x29
 8009070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009072:	2340      	movs	r3, #64	; 0x40
 8009074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800907a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800907e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009080:	f107 0308 	add.w	r3, r7, #8
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff fd62 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f9ff 	bl	8009490 <SDMMC_GetCmdResp3>
 8009092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009094:	69fb      	ldr	r3, [r7, #28]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3720      	adds	r7, #32
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b088      	sub	sp, #32
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80090ac:	2306      	movs	r3, #6
 80090ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090b0:	2340      	movs	r3, #64	; 0x40
 80090b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090be:	f107 0308 	add.w	r3, r7, #8
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff fd43 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ce:	2106      	movs	r1, #6
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f8a7 	bl	8009224 <SDMMC_GetCmdResp1>
 80090d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d8:	69fb      	ldr	r3, [r7, #28]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b088      	sub	sp, #32
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090ee:	2333      	movs	r3, #51	; 0x33
 80090f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090f2:	2340      	movs	r3, #64	; 0x40
 80090f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009100:	f107 0308 	add.w	r3, r7, #8
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fd22 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800910c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009110:	2133      	movs	r1, #51	; 0x33
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f886 	bl	8009224 <SDMMC_GetCmdResp1>
 8009118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800911a:	69fb      	ldr	r3, [r7, #28]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009130:	2302      	movs	r3, #2
 8009132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009134:	23c0      	movs	r3, #192	; 0xc0
 8009136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009138:	2300      	movs	r3, #0
 800913a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800913c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009142:	f107 0308 	add.w	r3, r7, #8
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff fd01 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f956 	bl	8009400 <SDMMC_GetCmdResp2>
 8009154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009156:	69fb      	ldr	r3, [r7, #28]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3720      	adds	r7, #32
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800916e:	2309      	movs	r3, #9
 8009170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009172:	23c0      	movs	r3, #192	; 0xc0
 8009174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009176:	2300      	movs	r3, #0
 8009178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800917a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009180:	f107 0308 	add.w	r3, r7, #8
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fce2 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f937 	bl	8009400 <SDMMC_GetCmdResp2>
 8009192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009194:	69fb      	ldr	r3, [r7, #28]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3720      	adds	r7, #32
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b088      	sub	sp, #32
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80091ac:	2303      	movs	r3, #3
 80091ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091b0:	2340      	movs	r3, #64	; 0x40
 80091b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fcc3 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	2103      	movs	r1, #3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f99c 	bl	800950c <SDMMC_GetCmdResp6>
 80091d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d6:	69fb      	ldr	r3, [r7, #28]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3720      	adds	r7, #32
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091ee:	230d      	movs	r3, #13
 80091f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091f2:	2340      	movs	r3, #64	; 0x40
 80091f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091f6:	2300      	movs	r3, #0
 80091f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009200:	f107 0308 	add.w	r3, r7, #8
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7ff fca2 	bl	8008b50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800920c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009210:	210d      	movs	r1, #13
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f806 	bl	8009224 <SDMMC_GetCmdResp1>
 8009218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800921a:	69fb      	ldr	r3, [r7, #28]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	460b      	mov	r3, r1
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009232:	4b70      	ldr	r3, [pc, #448]	; (80093f4 <SDMMC_GetCmdResp1+0x1d0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a70      	ldr	r2, [pc, #448]	; (80093f8 <SDMMC_GetCmdResp1+0x1d4>)
 8009238:	fba2 2303 	umull	r2, r3, r2, r3
 800923c:	0a5a      	lsrs	r2, r3, #9
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	fb02 f303 	mul.w	r3, r2, r3
 8009244:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	1e5a      	subs	r2, r3, #1
 800924a:	61fa      	str	r2, [r7, #28]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d102      	bne.n	8009256 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009254:	e0c9      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0ef      	beq.n	8009246 <SDMMC_GetCmdResp1+0x22>
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1ea      	bne.n	8009246 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b00      	cmp	r3, #0
 800927a:	d004      	beq.n	8009286 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2204      	movs	r2, #4
 8009280:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009282:	2304      	movs	r3, #4
 8009284:	e0b1      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009298:	2301      	movs	r3, #1
 800929a:	e0a6      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	22c5      	movs	r2, #197	; 0xc5
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff fcba 	bl	8008c1c <SDMMC_GetCommandResponse>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	7afb      	ldrb	r3, [r7, #11]
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d001      	beq.n	80092b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e099      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092b6:	2100      	movs	r1, #0
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff fcbd 	bl	8008c38 <SDMMC_GetResponse>
 80092be:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	4b4e      	ldr	r3, [pc, #312]	; (80093fc <SDMMC_GetCmdResp1+0x1d8>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e08d      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	da02      	bge.n	80092da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092d8:	e087      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092e4:	2340      	movs	r3, #64	; 0x40
 80092e6:	e080      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092f2:	2380      	movs	r3, #128	; 0x80
 80092f4:	e079      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009304:	e071      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009314:	e069      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009324:	e061      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009334:	e059      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009344:	e051      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009354:	e049      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009364:	e041      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009374:	e039      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009384:	e031      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009390:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009394:	e029      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80093a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093a4:	e021      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093b4:	e019      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80093c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093c4:	e011      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093d4:	e009      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093e4:	e001      	b.n	80093ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20000000 	.word	0x20000000
 80093f8:	10624dd3 	.word	0x10624dd3
 80093fc:	fdffe008 	.word	0xfdffe008

08009400 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009408:	4b1f      	ldr	r3, [pc, #124]	; (8009488 <SDMMC_GetCmdResp2+0x88>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1f      	ldr	r2, [pc, #124]	; (800948c <SDMMC_GetCmdResp2+0x8c>)
 800940e:	fba2 2303 	umull	r2, r3, r2, r3
 8009412:	0a5b      	lsrs	r3, r3, #9
 8009414:	f241 3288 	movw	r2, #5000	; 0x1388
 8009418:	fb02 f303 	mul.w	r3, r2, r3
 800941c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1e5a      	subs	r2, r3, #1
 8009422:	60fa      	str	r2, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800942c:	e026      	b.n	800947c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009432:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ef      	beq.n	800941e <SDMMC_GetCmdResp2+0x1e>
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1ea      	bne.n	800941e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	d004      	beq.n	800945e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2204      	movs	r2, #4
 8009458:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800945a:	2304      	movs	r3, #4
 800945c:	e00e      	b.n	800947c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d004      	beq.n	8009474 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009470:	2301      	movs	r3, #1
 8009472:	e003      	b.n	800947c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	22c5      	movs	r2, #197	; 0xc5
 8009478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	20000000 	.word	0x20000000
 800948c:	10624dd3 	.word	0x10624dd3

08009490 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009498:	4b1a      	ldr	r3, [pc, #104]	; (8009504 <SDMMC_GetCmdResp3+0x74>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a1a      	ldr	r2, [pc, #104]	; (8009508 <SDMMC_GetCmdResp3+0x78>)
 800949e:	fba2 2303 	umull	r2, r3, r2, r3
 80094a2:	0a5b      	lsrs	r3, r3, #9
 80094a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a8:	fb02 f303 	mul.w	r3, r2, r3
 80094ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1e5a      	subs	r2, r3, #1
 80094b2:	60fa      	str	r2, [r7, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094bc:	e01b      	b.n	80094f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0ef      	beq.n	80094ae <SDMMC_GetCmdResp3+0x1e>
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1ea      	bne.n	80094ae <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2204      	movs	r2, #4
 80094e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094ea:	2304      	movs	r3, #4
 80094ec:	e003      	b.n	80094f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	22c5      	movs	r2, #197	; 0xc5
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000000 	.word	0x20000000
 8009508:	10624dd3 	.word	0x10624dd3

0800950c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	460b      	mov	r3, r1
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800951a:	4b35      	ldr	r3, [pc, #212]	; (80095f0 <SDMMC_GetCmdResp6+0xe4>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a35      	ldr	r2, [pc, #212]	; (80095f4 <SDMMC_GetCmdResp6+0xe8>)
 8009520:	fba2 2303 	umull	r2, r3, r2, r3
 8009524:	0a5b      	lsrs	r3, r3, #9
 8009526:	f241 3288 	movw	r2, #5000	; 0x1388
 800952a:	fb02 f303 	mul.w	r3, r2, r3
 800952e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	1e5a      	subs	r2, r3, #1
 8009534:	61fa      	str	r2, [r7, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d102      	bne.n	8009540 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800953a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800953e:	e052      	b.n	80095e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009544:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800954c:	2b00      	cmp	r3, #0
 800954e:	d0ef      	beq.n	8009530 <SDMMC_GetCmdResp6+0x24>
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1ea      	bne.n	8009530 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2204      	movs	r2, #4
 800956a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800956c:	2304      	movs	r3, #4
 800956e:	e03a      	b.n	80095e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009574:	f003 0301 	and.w	r3, r3, #1
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009582:	2301      	movs	r3, #1
 8009584:	e02f      	b.n	80095e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fb48 	bl	8008c1c <SDMMC_GetCommandResponse>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	4293      	cmp	r3, r2
 8009594:	d001      	beq.n	800959a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009596:	2301      	movs	r3, #1
 8009598:	e025      	b.n	80095e6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	22c5      	movs	r2, #197	; 0xc5
 800959e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80095a0:	2100      	movs	r1, #0
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f7ff fb48 	bl	8008c38 <SDMMC_GetResponse>
 80095a8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	0c1b      	lsrs	r3, r3, #16
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095be:	2300      	movs	r3, #0
 80095c0:	e011      	b.n	80095e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095d0:	e009      	b.n	80095e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095e0:	e001      	b.n	80095e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000000 	.word	0x20000000
 80095f4:	10624dd3 	.word	0x10624dd3

080095f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009600:	4b22      	ldr	r3, [pc, #136]	; (800968c <SDMMC_GetCmdResp7+0x94>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a22      	ldr	r2, [pc, #136]	; (8009690 <SDMMC_GetCmdResp7+0x98>)
 8009606:	fba2 2303 	umull	r2, r3, r2, r3
 800960a:	0a5b      	lsrs	r3, r3, #9
 800960c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009610:	fb02 f303 	mul.w	r3, r2, r3
 8009614:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	60fa      	str	r2, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009620:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009624:	e02c      	b.n	8009680 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800962a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0ef      	beq.n	8009616 <SDMMC_GetCmdResp7+0x1e>
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1ea      	bne.n	8009616 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d004      	beq.n	8009656 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2204      	movs	r2, #4
 8009650:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009652:	2304      	movs	r3, #4
 8009654:	e014      	b.n	8009680 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009668:	2301      	movs	r3, #1
 800966a:	e009      	b.n	8009680 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2240      	movs	r2, #64	; 0x40
 800967c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800967e:	2300      	movs	r3, #0

}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000000 	.word	0x20000000
 8009690:	10624dd3 	.word	0x10624dd3

08009694 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800969c:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <SDMMC_GetCmdError+0x50>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <SDMMC_GetCmdError+0x54>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	0a5b      	lsrs	r3, r3, #9
 80096a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ac:	fb02 f303 	mul.w	r3, r2, r3
 80096b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	1e5a      	subs	r2, r3, #1
 80096b6:	60fa      	str	r2, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096c0:	e009      	b.n	80096d6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0f1      	beq.n	80096b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	22c5      	movs	r2, #197	; 0xc5
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	20000000 	.word	0x20000000
 80096e8:	10624dd3 	.word	0x10624dd3

080096ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096ec:	b084      	sub	sp, #16
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	f107 001c 	add.w	r0, r7, #28
 80096fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa70 	bl	8009bf0 <USB_CoreReset>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	639a      	str	r2, [r3, #56]	; 0x38
 8009726:	e005      	b.n	8009734 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009740:	b004      	add	sp, #16
 8009742:	4770      	bx	lr

08009744 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f023 0201 	bic.w	r2, r3, #1
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d115      	bne.n	80097b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009794:	2001      	movs	r0, #1
 8009796:	f7f7 fe45 	bl	8001424 <HAL_Delay>
      ms++;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3301      	adds	r3, #1
 800979e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fa17 	bl	8009bd4 <USB_GetMode>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d01e      	beq.n	80097ea <USB_SetCurrentMode+0x84>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b31      	cmp	r3, #49	; 0x31
 80097b0:	d9f0      	bls.n	8009794 <USB_SetCurrentMode+0x2e>
 80097b2:	e01a      	b.n	80097ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d115      	bne.n	80097e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097c6:	2001      	movs	r0, #1
 80097c8:	f7f7 fe2c 	bl	8001424 <HAL_Delay>
      ms++;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3301      	adds	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f9fe 	bl	8009bd4 <USB_GetMode>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d005      	beq.n	80097ea <USB_SetCurrentMode+0x84>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b31      	cmp	r3, #49	; 0x31
 80097e2:	d9f0      	bls.n	80097c6 <USB_SetCurrentMode+0x60>
 80097e4:	e001      	b.n	80097ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e005      	b.n	80097f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b32      	cmp	r3, #50	; 0x32
 80097ee:	d101      	bne.n	80097f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009800:	b084      	sub	sp, #16
 8009802:	b580      	push	{r7, lr}
 8009804:	b086      	sub	sp, #24
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800980e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800981a:	2300      	movs	r3, #0
 800981c:	613b      	str	r3, [r7, #16]
 800981e:	e009      	b.n	8009834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	3340      	adds	r3, #64	; 0x40
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	2200      	movs	r2, #0
 800982c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	3301      	adds	r3, #1
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b0e      	cmp	r3, #14
 8009838:	d9f2      	bls.n	8009820 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800983a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d11c      	bne.n	800987a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800984e:	f043 0302 	orr.w	r3, r3, #2
 8009852:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	e005      	b.n	8009886 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800988c:	461a      	mov	r2, r3
 800988e:	2300      	movs	r3, #0
 8009890:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009898:	4619      	mov	r1, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a0:	461a      	mov	r2, r3
 80098a2:	680b      	ldr	r3, [r1, #0]
 80098a4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098a6:	2103      	movs	r1, #3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f959 	bl	8009b60 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098ae:	2110      	movs	r1, #16
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f8f1 	bl	8009a98 <USB_FlushTxFifo>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f91d 	bl	8009b00 <USB_FlushRxFifo>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	461a      	mov	r2, r3
 80098d8:	2300      	movs	r3, #0
 80098da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e2:	461a      	mov	r2, r3
 80098e4:	2300      	movs	r3, #0
 80098e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ee:	461a      	mov	r2, r3
 80098f0:	2300      	movs	r3, #0
 80098f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098f4:	2300      	movs	r3, #0
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	e043      	b.n	8009982 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800990c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009910:	d118      	bne.n	8009944 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10a      	bne.n	800992e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009924:	461a      	mov	r2, r3
 8009926:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	e013      	b.n	8009956 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4413      	add	r3, r2
 8009936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993a:	461a      	mov	r2, r3
 800993c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	e008      	b.n	8009956 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009950:	461a      	mov	r2, r3
 8009952:	2300      	movs	r3, #0
 8009954:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009962:	461a      	mov	r2, r3
 8009964:	2300      	movs	r3, #0
 8009966:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	461a      	mov	r2, r3
 8009976:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800997a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	3301      	adds	r3, #1
 8009980:	613b      	str	r3, [r7, #16]
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	429a      	cmp	r2, r3
 8009988:	d3b7      	bcc.n	80098fa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800998a:	2300      	movs	r3, #0
 800998c:	613b      	str	r3, [r7, #16]
 800998e:	e043      	b.n	8009a18 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099a6:	d118      	bne.n	80099da <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ba:	461a      	mov	r2, r3
 80099bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	e013      	b.n	80099ec <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d0:	461a      	mov	r2, r3
 80099d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	e008      	b.n	80099ec <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e6:	461a      	mov	r2, r3
 80099e8:	2300      	movs	r3, #0
 80099ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f8:	461a      	mov	r2, r3
 80099fa:	2300      	movs	r3, #0
 80099fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	3301      	adds	r3, #1
 8009a16:	613b      	str	r3, [r7, #16]
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d3b7      	bcc.n	8009990 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	f043 0210 	orr.w	r2, r3, #16
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699a      	ldr	r2, [r3, #24]
 8009a52:	4b10      	ldr	r3, [pc, #64]	; (8009a94 <USB_DevInit+0x294>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	f043 0208 	orr.w	r2, r3, #8
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d107      	bne.n	8009a82 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a7a:	f043 0304 	orr.w	r3, r3, #4
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a8e:	b004      	add	sp, #16
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	803c3800 	.word	0x803c3800

08009a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4a13      	ldr	r2, [pc, #76]	; (8009afc <USB_FlushTxFifo+0x64>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d901      	bls.n	8009ab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e01b      	b.n	8009af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	daf2      	bge.n	8009aa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	019b      	lsls	r3, r3, #6
 8009ac8:	f043 0220 	orr.w	r2, r3, #32
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4a08      	ldr	r2, [pc, #32]	; (8009afc <USB_FlushTxFifo+0x64>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d901      	bls.n	8009ae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e006      	b.n	8009af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d0f0      	beq.n	8009ad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	00030d40 	.word	0x00030d40

08009b00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4a11      	ldr	r2, [pc, #68]	; (8009b5c <USB_FlushRxFifo+0x5c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d901      	bls.n	8009b1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e018      	b.n	8009b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	daf2      	bge.n	8009b0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2210      	movs	r2, #16
 8009b2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3301      	adds	r3, #1
 8009b34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4a08      	ldr	r2, [pc, #32]	; (8009b5c <USB_FlushRxFifo+0x5c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d901      	bls.n	8009b42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e006      	b.n	8009b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0310 	and.w	r3, r3, #16
 8009b4a:	2b10      	cmp	r3, #16
 8009b4c:	d0f0      	beq.n	8009b30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	00030d40 	.word	0x00030d40

08009b60 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	68f9      	ldr	r1, [r7, #12]
 8009b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b80:	4313      	orrs	r3, r2
 8009b82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bac:	f023 0303 	bic.w	r3, r3, #3
 8009bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bc0:	f043 0302 	orr.w	r3, r3, #2
 8009bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	f003 0301 	and.w	r3, r3, #1
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4a13      	ldr	r2, [pc, #76]	; (8009c54 <USB_CoreReset+0x64>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d901      	bls.n	8009c0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e01b      	b.n	8009c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	daf2      	bge.n	8009bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	f043 0201 	orr.w	r2, r3, #1
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <USB_CoreReset+0x64>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d901      	bls.n	8009c38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e006      	b.n	8009c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d0f0      	beq.n	8009c26 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	00030d40 	.word	0x00030d40

08009c58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009c5c:	4904      	ldr	r1, [pc, #16]	; (8009c70 <MX_FATFS_Init+0x18>)
 8009c5e:	4805      	ldr	r0, [pc, #20]	; (8009c74 <MX_FATFS_Init+0x1c>)
 8009c60:	f002 fe7e 	bl	800c960 <FATFS_LinkDriver>
 8009c64:	4603      	mov	r3, r0
 8009c66:	461a      	mov	r2, r3
 8009c68:	4b03      	ldr	r3, [pc, #12]	; (8009c78 <MX_FATFS_Init+0x20>)
 8009c6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009c6c:	bf00      	nop
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20000b08 	.word	0x20000b08
 8009c74:	08011cc4 	.word	0x08011cc4
 8009c78:	20000b04 	.word	0x20000b04

08009c7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <SD_DMAConfig>:
 *         only one channel for TX/RX, see MX_SDMMC1_SD_Init
 * @param  direction: Channel direction
 * @retval Status
 * ==================================================================== */
HAL_StatusTypeDef SD_DMAConfig( uint32_t direction )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]

  // Set transmit direction
  hdma_sdmmc1.Init.Direction = direction;
 8009c94:	4a08      	ldr	r2, [pc, #32]	; (8009cb8 <SD_DMAConfig+0x2c>)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6093      	str	r3, [r2, #8]

  // Stop any DMA activity
  HAL_DMA_Abort( &hdma_sdmmc1 );
 8009c9a:	4807      	ldr	r0, [pc, #28]	; (8009cb8 <SD_DMAConfig+0x2c>)
 8009c9c:	f7f8 f818 	bl	8001cd0 <HAL_DMA_Abort>

  // Deinit DMA
  HAL_DMA_DeInit( &hdma_sdmmc1 );
 8009ca0:	4805      	ldr	r0, [pc, #20]	; (8009cb8 <SD_DMAConfig+0x2c>)
 8009ca2:	f7f7 fead 	bl	8001a00 <HAL_DMA_DeInit>

  // Initialize DMA
  return HAL_DMA_Init( &hdma_sdmmc1 );
 8009ca6:	4804      	ldr	r0, [pc, #16]	; (8009cb8 <SD_DMAConfig+0x2c>)
 8009ca8:	f7f7 fcf2 	bl	8001690 <HAL_DMA_Init>
 8009cac:	4603      	mov	r3, r0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200003d4 	.word	0x200003d4

08009cbc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA( uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_PERIPH_TO_MEMORY;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to receive
  if ( hsd1.hdmarx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 8009cd0:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <BSP_SD_ReadBlocks_DMA+0x50>)
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d004      	beq.n	8009ce6 <BSP_SD_ReadBlocks_DMA+0x2a>
 8009cdc:	6938      	ldr	r0, [r7, #16]
 8009cde:	f7ff ffd5 	bl	8009c8c <SD_DMAConfig>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_ReadBlocks_DMA( &hsd1, (uint8_t *) pData, ReadAddr, NumOfBlocks ) != HAL_OK ) {
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d108      	bne.n	8009cfe <BSP_SD_ReadBlocks_DMA+0x42>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	68f9      	ldr	r1, [r7, #12]
 8009cf2:	4806      	ldr	r0, [pc, #24]	; (8009d0c <BSP_SD_ReadBlocks_DMA+0x50>)
 8009cf4:	f7fb fe26 	bl	8005944 <HAL_SD_ReadBlocks_DMA>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <BSP_SD_ReadBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20000350 	.word	0x20000350

08009d10 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA( uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_MEMORY_TO_PERIPH;
 8009d20:	2310      	movs	r3, #16
 8009d22:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to transmit
  if ( hsd1.hdmatx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 8009d24:	4b0e      	ldr	r3, [pc, #56]	; (8009d60 <BSP_SD_WriteBlocks_DMA+0x50>)
 8009d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d004      	beq.n	8009d3a <BSP_SD_WriteBlocks_DMA+0x2a>
 8009d30:	6938      	ldr	r0, [r7, #16]
 8009d32:	f7ff ffab 	bl	8009c8c <SD_DMAConfig>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_WriteBlocks_DMA( &hsd1, (uint8_t *) pData, WriteAddr, NumOfBlocks ) != HAL_OK ) {
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d108      	bne.n	8009d52 <BSP_SD_WriteBlocks_DMA+0x42>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	68f9      	ldr	r1, [r7, #12]
 8009d46:	4806      	ldr	r0, [pc, #24]	; (8009d60 <BSP_SD_WriteBlocks_DMA+0x50>)
 8009d48:	f7fb fec4 	bl	8005ad4 <HAL_SD_WriteBlocks_DMA>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <BSP_SD_WriteBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	20000350 	.word	0x20000350

08009d64 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009d6e:	f000 f862 	bl	8009e36 <BSP_SD_IsDetected>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d001      	beq.n	8009d7c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e012      	b.n	8009da2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009d7c:	480b      	ldr	r0, [pc, #44]	; (8009dac <BSP_SD_Init+0x48>)
 8009d7e:	f7fb fca9 	bl	80056d4 <HAL_SD_Init>
 8009d82:	4603      	mov	r3, r0
 8009d84:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d109      	bne.n	8009da0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d90:	4806      	ldr	r0, [pc, #24]	; (8009dac <BSP_SD_Init+0x48>)
 8009d92:	f7fc fabb 	bl	800630c <HAL_SD_ConfigWideBusOperation>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009da0:	79fb      	ldrb	r3, [r7, #7]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20000350 	.word	0x20000350

08009db0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009db4:	4805      	ldr	r0, [pc, #20]	; (8009dcc <BSP_SD_GetCardState+0x1c>)
 8009db6:	f7fc fb77 	bl	80064a8 <HAL_SD_GetCardState>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	bf14      	ite	ne
 8009dc0:	2301      	movne	r3, #1
 8009dc2:	2300      	moveq	r3, #0
 8009dc4:	b2db      	uxtb	r3, r3
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000350 	.word	0x20000350

08009dd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	4803      	ldr	r0, [pc, #12]	; (8009de8 <BSP_SD_GetCardInfo+0x18>)
 8009ddc:	f7fc fa6a 	bl	80062b4 <HAL_SD_GetCardInfo>
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000350 	.word	0x20000350

08009dec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009df4:	f000 f818 	bl	8009e28 <BSP_SD_AbortCallback>
}
 8009df8:	bf00      	nop
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009e08:	f000 f9c4 	bl	800a194 <BSP_SD_WriteCpltCallback>
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009e1c:	f000 f9c8 	bl	800a1b0 <BSP_SD_ReadCpltCallback>
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	af00      	add	r7, sp, #0

}
 8009e2c:	bf00      	nop
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b082      	sub	sp, #8
 8009e3a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009e40:	f000 f80c 	bl	8009e5c <BSP_PlatformIsDetected>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	b2db      	uxtb	r3, r3
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009e62:	2301      	movs	r3, #1
 8009e64:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009e66:	2102      	movs	r1, #2
 8009e68:	4806      	ldr	r0, [pc, #24]	; (8009e84 <BSP_PlatformIsDetected+0x28>)
 8009e6a:	f7f8 fb0d 	bl	8002488 <HAL_GPIO_ReadPin>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009e74:	2300      	movs	r3, #0
 8009e76:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009e78:	79fb      	ldrb	r3, [r7, #7]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	48000c00 	.word	0x48000c00

08009e88 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8009e90:	f002 fdfe 	bl	800ca90 <osKernelSysTick>
 8009e94:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8009e96:	e006      	b.n	8009ea6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e98:	f7ff ff8a 	bl	8009db0 <BSP_SD_GetCardState>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e009      	b.n	8009eba <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8009ea6:	f002 fdf3 	bl	800ca90 <osKernelSysTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d8f0      	bhi.n	8009e98 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009ece:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <SD_CheckStatus+0x38>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ed4:	f7ff ff6c 	bl	8009db0 <BSP_SD_GetCardState>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d107      	bne.n	8009eee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009ede:	4b07      	ldr	r3, [pc, #28]	; (8009efc <SD_CheckStatus+0x38>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	4b04      	ldr	r3, [pc, #16]	; (8009efc <SD_CheckStatus+0x38>)
 8009eec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009eee:	4b03      	ldr	r3, [pc, #12]	; (8009efc <SD_CheckStatus+0x38>)
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b2db      	uxtb	r3, r3
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20000009 	.word	0x20000009

08009f00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009f00:	b590      	push	{r4, r7, lr}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009f0a:	4b20      	ldr	r3, [pc, #128]	; (8009f8c <SD_initialize+0x8c>)
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8009f10:	f002 fdb2 	bl	800ca78 <osKernelRunning>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d030      	beq.n	8009f7c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009f1a:	f7ff ff23 	bl	8009d64 <BSP_SD_Init>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d107      	bne.n	8009f34 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff ffcc 	bl	8009ec4 <SD_CheckStatus>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	4b16      	ldr	r3, [pc, #88]	; (8009f8c <SD_initialize+0x8c>)
 8009f32:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009f34:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <SD_initialize+0x8c>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d01e      	beq.n	8009f7c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8009f3e:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <SD_initialize+0x90>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10e      	bne.n	8009f64 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8009f46:	4b13      	ldr	r3, [pc, #76]	; (8009f94 <SD_initialize+0x94>)
 8009f48:	f107 0408 	add.w	r4, r7, #8
 8009f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f002 fed2 	bl	800cd02 <osMessageCreate>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	4a0b      	ldr	r2, [pc, #44]	; (8009f90 <SD_initialize+0x90>)
 8009f62:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8009f64:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <SD_initialize+0x90>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d107      	bne.n	8009f7c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8009f6c:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <SD_initialize+0x8c>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f043 0301 	orr.w	r3, r3, #1
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	4b04      	ldr	r3, [pc, #16]	; (8009f8c <SD_initialize+0x8c>)
 8009f7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8009f7c:	4b03      	ldr	r3, [pc, #12]	; (8009f8c <SD_initialize+0x8c>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	b2db      	uxtb	r3, r3
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd90      	pop	{r4, r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000009 	.word	0x20000009
 8009f90:	20000f70 	.word	0x20000f70
 8009f94:	08011b70 	.word	0x08011b70

08009f98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7ff ff8d 	bl	8009ec4 <SD_CheckStatus>
 8009faa:	4603      	mov	r3, r0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08a      	sub	sp, #40	; 0x28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009fca:	f247 5030 	movw	r0, #30000	; 0x7530
 8009fce:	f7ff ff5b 	bl	8009e88 <SD_CheckStatusWithTimeout>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	da02      	bge.n	8009fde <SD_read+0x2a>
  {
    return res;
 8009fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fdc:	e032      	b.n	800a044 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	f7ff fe6a 	bl	8009cbc <BSP_SD_ReadBlocks_DMA>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8009fee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d124      	bne.n	800a040 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009ff6:	4b15      	ldr	r3, [pc, #84]	; (800a04c <SD_read+0x98>)
 8009ff8:	6819      	ldr	r1, [r3, #0]
 8009ffa:	f107 0314 	add.w	r3, r7, #20
 8009ffe:	f247 5230 	movw	r2, #30000	; 0x7530
 800a002:	4618      	mov	r0, r3
 800a004:	f002 fee6 	bl	800cdd4 <osMessageGet>

    if (event.status == osEventMessage)
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	2b10      	cmp	r3, #16
 800a00c:	d118      	bne.n	800a040 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d115      	bne.n	800a040 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800a014:	f002 fd3c 	bl	800ca90 <osKernelSysTick>
 800a018:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a01a:	e008      	b.n	800a02e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a01c:	f7ff fec8 	bl	8009db0 <BSP_SD_GetCardState>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d103      	bne.n	800a02e <SD_read+0x7a>
              {
                res = RES_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a02c:	e008      	b.n	800a040 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800a02e:	f002 fd2f 	bl	800ca90 <osKernelSysTick>
 800a032:	4602      	mov	r2, r0
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	f247 522f 	movw	r2, #29999	; 0x752f
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d9ed      	bls.n	800a01c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a044:	4618      	mov	r0, r3
 800a046:	3728      	adds	r7, #40	; 0x28
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000f70 	.word	0x20000f70

0800a050 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	607a      	str	r2, [r7, #4]
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a066:	f247 5030 	movw	r0, #30000	; 0x7530
 800a06a:	f7ff ff0d 	bl	8009e88 <SD_CheckStatusWithTimeout>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	da02      	bge.n	800a07a <SD_write+0x2a>
  {
    return res;
 800a074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a078:	e02e      	b.n	800a0d8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	68b8      	ldr	r0, [r7, #8]
 800a080:	f7ff fe46 	bl	8009d10 <BSP_SD_WriteBlocks_DMA>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d124      	bne.n	800a0d4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800a08a:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <SD_write+0x90>)
 800a08c:	6819      	ldr	r1, [r3, #0]
 800a08e:	f107 0314 	add.w	r3, r7, #20
 800a092:	f247 5230 	movw	r2, #30000	; 0x7530
 800a096:	4618      	mov	r0, r3
 800a098:	f002 fe9c 	bl	800cdd4 <osMessageGet>

    if (event.status == osEventMessage)
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	2b10      	cmp	r3, #16
 800a0a0:	d118      	bne.n	800a0d4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800a0a2:	69bb      	ldr	r3, [r7, #24]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d115      	bne.n	800a0d4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800a0a8:	f002 fcf2 	bl	800ca90 <osKernelSysTick>
 800a0ac:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a0ae:	e008      	b.n	800a0c2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a0b0:	f7ff fe7e 	bl	8009db0 <BSP_SD_GetCardState>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d103      	bne.n	800a0c2 <SD_write+0x72>
          {
            res = RES_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800a0c0:	e008      	b.n	800a0d4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800a0c2:	f002 fce5 	bl	800ca90 <osKernelSysTick>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	f247 522f 	movw	r2, #29999	; 0x752f
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d9ed      	bls.n	800a0b0 <SD_write+0x60>
    }

  }
#endif

  return res;
 800a0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3728      	adds	r7, #40	; 0x28
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20000f70 	.word	0x20000f70

0800a0e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08c      	sub	sp, #48	; 0x30
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	603a      	str	r2, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a0fa:	4b25      	ldr	r3, [pc, #148]	; (800a190 <SD_ioctl+0xac>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <SD_ioctl+0x28>
 800a108:	2303      	movs	r3, #3
 800a10a:	e03c      	b.n	800a186 <SD_ioctl+0xa2>

  switch (cmd)
 800a10c:	79bb      	ldrb	r3, [r7, #6]
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d834      	bhi.n	800a17c <SD_ioctl+0x98>
 800a112:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <SD_ioctl+0x34>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a129 	.word	0x0800a129
 800a11c:	0800a131 	.word	0x0800a131
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a163 	.word	0x0800a163
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a12e:	e028      	b.n	800a182 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a130:	f107 030c 	add.w	r3, r7, #12
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fe4b 	bl	8009dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a146:	e01c      	b.n	800a182 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a148:	f107 030c 	add.w	r3, r7, #12
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff fe3f 	bl	8009dd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	b29a      	uxth	r2, r3
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a160:	e00f      	b.n	800a182 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fe32 	bl	8009dd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	0a5a      	lsrs	r2, r3, #9
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a17a:	e002      	b.n	800a182 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a17c:	2304      	movs	r3, #4
 800a17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a186:	4618      	mov	r0, r3
 800a188:	3730      	adds	r7, #48	; 0x30
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000009 	.word	0x20000009

0800a194 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <BSP_SD_WriteCpltCallback+0x18>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2200      	movs	r2, #0
 800a19e:	2102      	movs	r1, #2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f002 fdd7 	bl	800cd54 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800a1a6:	bf00      	nop
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000f70 	.word	0x20000f70

0800a1b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800a1b4:	4b04      	ldr	r3, [pc, #16]	; (800a1c8 <BSP_SD_ReadCpltCallback+0x18>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f002 fdc9 	bl	800cd54 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800a1c2:	bf00      	nop
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000f70 	.word	0x20000f70

0800a1cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	4a08      	ldr	r2, [pc, #32]	; (800a1fc <disk_status+0x30>)
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	79fa      	ldrb	r2, [r7, #7]
 800a1e4:	4905      	ldr	r1, [pc, #20]	; (800a1fc <disk_status+0x30>)
 800a1e6:	440a      	add	r2, r1
 800a1e8:	7a12      	ldrb	r2, [r2, #8]
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	4798      	blx	r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000f9c 	.word	0x20000f9c

0800a200 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a20e:	79fb      	ldrb	r3, [r7, #7]
 800a210:	4a0d      	ldr	r2, [pc, #52]	; (800a248 <disk_initialize+0x48>)
 800a212:	5cd3      	ldrb	r3, [r2, r3]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d111      	bne.n	800a23c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	4a0b      	ldr	r2, [pc, #44]	; (800a248 <disk_initialize+0x48>)
 800a21c:	2101      	movs	r1, #1
 800a21e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	4a09      	ldr	r2, [pc, #36]	; (800a248 <disk_initialize+0x48>)
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	79fa      	ldrb	r2, [r7, #7]
 800a22e:	4906      	ldr	r1, [pc, #24]	; (800a248 <disk_initialize+0x48>)
 800a230:	440a      	add	r2, r1
 800a232:	7a12      	ldrb	r2, [r2, #8]
 800a234:	4610      	mov	r0, r2
 800a236:	4798      	blx	r3
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20000f9c 	.word	0x20000f9c

0800a24c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a24c:	b590      	push	{r4, r7, lr}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
 800a256:	603b      	str	r3, [r7, #0]
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	4a0a      	ldr	r2, [pc, #40]	; (800a288 <disk_read+0x3c>)
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	689c      	ldr	r4, [r3, #8]
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	4a07      	ldr	r2, [pc, #28]	; (800a288 <disk_read+0x3c>)
 800a26c:	4413      	add	r3, r2
 800a26e:	7a18      	ldrb	r0, [r3, #8]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	68b9      	ldr	r1, [r7, #8]
 800a276:	47a0      	blx	r4
 800a278:	4603      	mov	r3, r0
 800a27a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	371c      	adds	r7, #28
 800a282:	46bd      	mov	sp, r7
 800a284:	bd90      	pop	{r4, r7, pc}
 800a286:	bf00      	nop
 800a288:	20000f9c 	.word	0x20000f9c

0800a28c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a28c:	b590      	push	{r4, r7, lr}
 800a28e:	b087      	sub	sp, #28
 800a290:	af00      	add	r7, sp, #0
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	607a      	str	r2, [r7, #4]
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	4a0a      	ldr	r2, [pc, #40]	; (800a2c8 <disk_write+0x3c>)
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	68dc      	ldr	r4, [r3, #12]
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	4a07      	ldr	r2, [pc, #28]	; (800a2c8 <disk_write+0x3c>)
 800a2ac:	4413      	add	r3, r2
 800a2ae:	7a18      	ldrb	r0, [r3, #8]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	47a0      	blx	r4
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd90      	pop	{r4, r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000f9c 	.word	0x20000f9c

0800a2cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	603a      	str	r2, [r7, #0]
 800a2d6:	71fb      	strb	r3, [r7, #7]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	4a09      	ldr	r2, [pc, #36]	; (800a304 <disk_ioctl+0x38>)
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	79fa      	ldrb	r2, [r7, #7]
 800a2ea:	4906      	ldr	r1, [pc, #24]	; (800a304 <disk_ioctl+0x38>)
 800a2ec:	440a      	add	r2, r1
 800a2ee:	7a10      	ldrb	r0, [r2, #8]
 800a2f0:	79b9      	ldrb	r1, [r7, #6]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	4798      	blx	r3
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73fb      	strb	r3, [r7, #15]
  return res;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20000f9c 	.word	0x20000f9c

0800a308 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3301      	adds	r3, #1
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a318:	89fb      	ldrh	r3, [r7, #14]
 800a31a:	021b      	lsls	r3, r3, #8
 800a31c:	b21a      	sxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b21b      	sxth	r3, r3
 800a324:	4313      	orrs	r3, r2
 800a326:	b21b      	sxth	r3, r3
 800a328:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a32a:	89fb      	ldrh	r3, [r7, #14]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3303      	adds	r3, #3
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	021b      	lsls	r3, r3, #8
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	3202      	adds	r2, #2
 800a350:	7812      	ldrb	r2, [r2, #0]
 800a352:	4313      	orrs	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	3201      	adds	r2, #1
 800a35e:	7812      	ldrb	r2, [r2, #0]
 800a360:	4313      	orrs	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	7812      	ldrb	r2, [r2, #0]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a370:	68fb      	ldr	r3, [r7, #12]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	460b      	mov	r3, r1
 800a388:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	887a      	ldrh	r2, [r7, #2]
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]
 800a396:	887b      	ldrh	r3, [r7, #2]
 800a398:	0a1b      	lsrs	r3, r3, #8
 800a39a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	887a      	ldrh	r2, [r7, #2]
 800a3a4:	b2d2      	uxtb	r2, r2
 800a3a6:	701a      	strb	r2, [r3, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	b2d2      	uxtb	r2, r2
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	0a1b      	lsrs	r3, r3, #8
 800a3ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	b2d2      	uxtb	r2, r2
 800a3da:	701a      	strb	r2, [r3, #0]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	0a1b      	lsrs	r3, r3, #8
 800a3e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	1c5a      	adds	r2, r3, #1
 800a3e6:	607a      	str	r2, [r7, #4]
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	0a1b      	lsrs	r3, r3, #8
 800a3f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	607a      	str	r2, [r7, #4]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	b2d2      	uxtb	r2, r2
 800a3fe:	701a      	strb	r2, [r3, #0]
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00d      	beq.n	800a442 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	1c53      	adds	r3, r2, #1
 800a42a:	613b      	str	r3, [r7, #16]
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	1c59      	adds	r1, r3, #1
 800a430:	6179      	str	r1, [r7, #20]
 800a432:	7812      	ldrb	r2, [r2, #0]
 800a434:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3b01      	subs	r3, #1
 800a43a:	607b      	str	r3, [r7, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f1      	bne.n	800a426 <mem_cpy+0x1a>
	}
}
 800a442:	bf00      	nop
 800a444:	371c      	adds	r7, #28
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a44e:	b480      	push	{r7}
 800a450:	b087      	sub	sp, #28
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	60b9      	str	r1, [r7, #8]
 800a458:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	617a      	str	r2, [r7, #20]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	607b      	str	r3, [r7, #4]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f3      	bne.n	800a45e <mem_set+0x10>
}
 800a476:	bf00      	nop
 800a478:	bf00      	nop
 800a47a:	371c      	adds	r7, #28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a484:	b480      	push	{r7}
 800a486:	b089      	sub	sp, #36	; 0x24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	61fb      	str	r3, [r7, #28]
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a498:	2300      	movs	r3, #0
 800a49a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	61fa      	str	r2, [r7, #28]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	61ba      	str	r2, [r7, #24]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	1acb      	subs	r3, r1, r3
 800a4b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	607b      	str	r3, [r7, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d002      	beq.n	800a4c4 <mem_cmp+0x40>
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0eb      	beq.n	800a49c <mem_cmp+0x18>

	return r;
 800a4c4:	697b      	ldr	r3, [r7, #20]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3724      	adds	r7, #36	; 0x24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a4dc:	e002      	b.n	800a4e4 <chk_chr+0x12>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	607b      	str	r3, [r7, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d005      	beq.n	800a4f8 <chk_chr+0x26>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d1f2      	bne.n	800a4de <chk_chr+0xc>
	return *str;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d009      	beq.n	800a52a <lock_fs+0x22>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f002 fa5b 	bl	800c9d6 <ff_req_grant>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <lock_fs+0x22>
 800a526:	2301      	movs	r3, #1
 800a528:	e000      	b.n	800a52c <lock_fs+0x24>
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00d      	beq.n	800a562 <unlock_fs+0x2e>
 800a546:	78fb      	ldrb	r3, [r7, #3]
 800a548:	2b0c      	cmp	r3, #12
 800a54a:	d00a      	beq.n	800a562 <unlock_fs+0x2e>
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	2b0b      	cmp	r3, #11
 800a550:	d007      	beq.n	800a562 <unlock_fs+0x2e>
 800a552:	78fb      	ldrb	r3, [r7, #3]
 800a554:	2b0f      	cmp	r3, #15
 800a556:	d004      	beq.n	800a562 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f002 fa4f 	bl	800ca00 <ff_rel_grant>
	}
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
	...

0800a56c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a576:	2300      	movs	r3, #0
 800a578:	60bb      	str	r3, [r7, #8]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	e029      	b.n	800a5d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a580:	4a27      	ldr	r2, [pc, #156]	; (800a620 <chk_lock+0xb4>)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	011b      	lsls	r3, r3, #4
 800a586:	4413      	add	r3, r2
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d01d      	beq.n	800a5ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a58e:	4a24      	ldr	r2, [pc, #144]	; (800a620 <chk_lock+0xb4>)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	4413      	add	r3, r2
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d116      	bne.n	800a5ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a5a0:	4a1f      	ldr	r2, [pc, #124]	; (800a620 <chk_lock+0xb4>)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	011b      	lsls	r3, r3, #4
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d10c      	bne.n	800a5ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a5b4:	4a1a      	ldr	r2, [pc, #104]	; (800a620 <chk_lock+0xb4>)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	011b      	lsls	r3, r3, #4
 800a5ba:	4413      	add	r3, r2
 800a5bc:	3308      	adds	r3, #8
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d102      	bne.n	800a5ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a5c8:	e007      	b.n	800a5da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d9d2      	bls.n	800a580 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d109      	bne.n	800a5f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <chk_lock+0x80>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d101      	bne.n	800a5f0 <chk_lock+0x84>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	e010      	b.n	800a612 <chk_lock+0xa6>
 800a5f0:	2312      	movs	r3, #18
 800a5f2:	e00e      	b.n	800a612 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d108      	bne.n	800a60c <chk_lock+0xa0>
 800a5fa:	4a09      	ldr	r2, [pc, #36]	; (800a620 <chk_lock+0xb4>)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	4413      	add	r3, r2
 800a602:	330c      	adds	r3, #12
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a60a:	d101      	bne.n	800a610 <chk_lock+0xa4>
 800a60c:	2310      	movs	r3, #16
 800a60e:	e000      	b.n	800a612 <chk_lock+0xa6>
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	20000f7c 	.word	0x20000f7c

0800a624 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a62a:	2300      	movs	r3, #0
 800a62c:	607b      	str	r3, [r7, #4]
 800a62e:	e002      	b.n	800a636 <enq_lock+0x12>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3301      	adds	r3, #1
 800a634:	607b      	str	r3, [r7, #4]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d806      	bhi.n	800a64a <enq_lock+0x26>
 800a63c:	4a09      	ldr	r2, [pc, #36]	; (800a664 <enq_lock+0x40>)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	011b      	lsls	r3, r3, #4
 800a642:	4413      	add	r3, r2
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1f2      	bne.n	800a630 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	bf14      	ite	ne
 800a650:	2301      	movne	r3, #1
 800a652:	2300      	moveq	r3, #0
 800a654:	b2db      	uxtb	r3, r3
}
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	20000f7c 	.word	0x20000f7c

0800a668 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	e01f      	b.n	800a6b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a678:	4a41      	ldr	r2, [pc, #260]	; (800a780 <inc_lock+0x118>)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	4413      	add	r3, r2
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d113      	bne.n	800a6b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a68a:	4a3d      	ldr	r2, [pc, #244]	; (800a780 <inc_lock+0x118>)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	4413      	add	r3, r2
 800a692:	3304      	adds	r3, #4
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d109      	bne.n	800a6b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a69e:	4a38      	ldr	r2, [pc, #224]	; (800a780 <inc_lock+0x118>)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	011b      	lsls	r3, r3, #4
 800a6a4:	4413      	add	r3, r2
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d006      	beq.n	800a6c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d9dc      	bls.n	800a678 <inc_lock+0x10>
 800a6be:	e000      	b.n	800a6c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a6c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d132      	bne.n	800a72e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e002      	b.n	800a6d4 <inc_lock+0x6c>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d806      	bhi.n	800a6e8 <inc_lock+0x80>
 800a6da:	4a29      	ldr	r2, [pc, #164]	; (800a780 <inc_lock+0x118>)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	4413      	add	r3, r2
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1f2      	bne.n	800a6ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d101      	bne.n	800a6f2 <inc_lock+0x8a>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	e040      	b.n	800a774 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	4922      	ldr	r1, [pc, #136]	; (800a780 <inc_lock+0x118>)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	011b      	lsls	r3, r3, #4
 800a6fc:	440b      	add	r3, r1
 800a6fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	491e      	ldr	r1, [pc, #120]	; (800a780 <inc_lock+0x118>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	011b      	lsls	r3, r3, #4
 800a70a:	440b      	add	r3, r1
 800a70c:	3304      	adds	r3, #4
 800a70e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	695a      	ldr	r2, [r3, #20]
 800a714:	491a      	ldr	r1, [pc, #104]	; (800a780 <inc_lock+0x118>)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	011b      	lsls	r3, r3, #4
 800a71a:	440b      	add	r3, r1
 800a71c:	3308      	adds	r3, #8
 800a71e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a720:	4a17      	ldr	r2, [pc, #92]	; (800a780 <inc_lock+0x118>)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	011b      	lsls	r3, r3, #4
 800a726:	4413      	add	r3, r2
 800a728:	330c      	adds	r3, #12
 800a72a:	2200      	movs	r2, #0
 800a72c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d009      	beq.n	800a748 <inc_lock+0xe0>
 800a734:	4a12      	ldr	r2, [pc, #72]	; (800a780 <inc_lock+0x118>)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	4413      	add	r3, r2
 800a73c:	330c      	adds	r3, #12
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <inc_lock+0xe0>
 800a744:	2300      	movs	r3, #0
 800a746:	e015      	b.n	800a774 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d108      	bne.n	800a760 <inc_lock+0xf8>
 800a74e:	4a0c      	ldr	r2, [pc, #48]	; (800a780 <inc_lock+0x118>)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	4413      	add	r3, r2
 800a756:	330c      	adds	r3, #12
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	3301      	adds	r3, #1
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	e001      	b.n	800a764 <inc_lock+0xfc>
 800a760:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a764:	4906      	ldr	r1, [pc, #24]	; (800a780 <inc_lock+0x118>)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	011b      	lsls	r3, r3, #4
 800a76a:	440b      	add	r3, r1
 800a76c:	330c      	adds	r3, #12
 800a76e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3301      	adds	r3, #1
}
 800a774:	4618      	mov	r0, r3
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	20000f7c 	.word	0x20000f7c

0800a784 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3b01      	subs	r3, #1
 800a790:	607b      	str	r3, [r7, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d825      	bhi.n	800a7e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a798:	4a17      	ldr	r2, [pc, #92]	; (800a7f8 <dec_lock+0x74>)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	011b      	lsls	r3, r3, #4
 800a79e:	4413      	add	r3, r2
 800a7a0:	330c      	adds	r3, #12
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a7a6:	89fb      	ldrh	r3, [r7, #14]
 800a7a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ac:	d101      	bne.n	800a7b2 <dec_lock+0x2e>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a7b2:	89fb      	ldrh	r3, [r7, #14]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <dec_lock+0x3a>
 800a7b8:	89fb      	ldrh	r3, [r7, #14]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a7be:	4a0e      	ldr	r2, [pc, #56]	; (800a7f8 <dec_lock+0x74>)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	011b      	lsls	r3, r3, #4
 800a7c4:	4413      	add	r3, r2
 800a7c6:	330c      	adds	r3, #12
 800a7c8:	89fa      	ldrh	r2, [r7, #14]
 800a7ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a7cc:	89fb      	ldrh	r3, [r7, #14]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d105      	bne.n	800a7de <dec_lock+0x5a>
 800a7d2:	4a09      	ldr	r2, [pc, #36]	; (800a7f8 <dec_lock+0x74>)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	011b      	lsls	r3, r3, #4
 800a7d8:	4413      	add	r3, r2
 800a7da:	2200      	movs	r2, #0
 800a7dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	737b      	strb	r3, [r7, #13]
 800a7e2:	e001      	b.n	800a7e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a7e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	20000f7c 	.word	0x20000f7c

0800a7fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	e010      	b.n	800a82c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a80a:	4a0d      	ldr	r2, [pc, #52]	; (800a840 <clear_lock+0x44>)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	4413      	add	r3, r2
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	429a      	cmp	r2, r3
 800a818:	d105      	bne.n	800a826 <clear_lock+0x2a>
 800a81a:	4a09      	ldr	r2, [pc, #36]	; (800a840 <clear_lock+0x44>)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	011b      	lsls	r3, r3, #4
 800a820:	4413      	add	r3, r2
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3301      	adds	r3, #1
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d9eb      	bls.n	800a80a <clear_lock+0xe>
	}
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20000f7c 	.word	0x20000f7c

0800a844 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	78db      	ldrb	r3, [r3, #3]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d034      	beq.n	800a8c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	7858      	ldrb	r0, [r3, #1]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a868:	2301      	movs	r3, #1
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	f7ff fd0e 	bl	800a28c <disk_write>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d002      	beq.n	800a87c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a876:	2301      	movs	r3, #1
 800a878:	73fb      	strb	r3, [r7, #15]
 800a87a:	e022      	b.n	800a8c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	1ad2      	subs	r2, r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d217      	bcs.n	800a8c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	789b      	ldrb	r3, [r3, #2]
 800a896:	613b      	str	r3, [r7, #16]
 800a898:	e010      	b.n	800a8bc <sync_window+0x78>
					wsect += fs->fsize;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	7858      	ldrb	r0, [r3, #1]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	f7ff fceb 	bl	800a28c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	613b      	str	r3, [r7, #16]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d8eb      	bhi.n	800a89a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d01b      	beq.n	800a91c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff ffad 	bl	800a844 <sync_window>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d113      	bne.n	800a91c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7858      	ldrb	r0, [r3, #1]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a8fe:	2301      	movs	r3, #1
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	f7ff fca3 	bl	800a24c <disk_read>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d004      	beq.n	800a916 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a90c:	f04f 33ff 	mov.w	r3, #4294967295
 800a910:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a912:	2301      	movs	r3, #1
 800a914:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff ff87 	bl	800a844 <sync_window>
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d158      	bne.n	800a9f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2b03      	cmp	r3, #3
 800a946:	d148      	bne.n	800a9da <sync_fs+0xb2>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	791b      	ldrb	r3, [r3, #4]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d144      	bne.n	800a9da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3334      	adds	r3, #52	; 0x34
 800a954:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff fd77 	bl	800a44e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3334      	adds	r3, #52	; 0x34
 800a964:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a968:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fd06 	bl	800a37e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3334      	adds	r3, #52	; 0x34
 800a976:	4921      	ldr	r1, [pc, #132]	; (800a9fc <sync_fs+0xd4>)
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff fd1b 	bl	800a3b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3334      	adds	r3, #52	; 0x34
 800a982:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a986:	491e      	ldr	r1, [pc, #120]	; (800aa00 <sync_fs+0xd8>)
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fd13 	bl	800a3b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3334      	adds	r3, #52	; 0x34
 800a992:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f7ff fd09 	bl	800a3b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	3334      	adds	r3, #52	; 0x34
 800a9a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f7ff fcff 	bl	800a3b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	1c5a      	adds	r2, r3, #1
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	7858      	ldrb	r0, [r3, #1]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	f7ff fc5c 	bl	800a28c <disk_write>
			fs->fsi_flag = 0;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	785b      	ldrb	r3, [r3, #1]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7ff fc72 	bl	800a2cc <disk_ioctl>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <sync_fs+0xca>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	41615252 	.word	0x41615252
 800aa00:	61417272 	.word	0x61417272

0800aa04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	3b02      	subs	r3, #2
 800aa12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	3b02      	subs	r3, #2
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d301      	bcc.n	800aa24 <clust2sect+0x20>
 800aa20:	2300      	movs	r3, #0
 800aa22:	e008      	b.n	800aa36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	895b      	ldrh	r3, [r3, #10]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	fb03 f202 	mul.w	r2, r3, r2
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	4413      	add	r3, r2
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b086      	sub	sp, #24
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d904      	bls.n	800aa62 <get_fat+0x20>
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d302      	bcc.n	800aa68 <get_fat+0x26>
		val = 1;	/* Internal error */
 800aa62:	2301      	movs	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	e08f      	b.n	800ab88 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aa68:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d062      	beq.n	800ab3c <get_fat+0xfa>
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	dc7c      	bgt.n	800ab74 <get_fat+0x132>
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d002      	beq.n	800aa84 <get_fat+0x42>
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d042      	beq.n	800ab08 <get_fat+0xc6>
 800aa82:	e077      	b.n	800ab74 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	085b      	lsrs	r3, r3, #1
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	0a5b      	lsrs	r3, r3, #9
 800aa9a:	4413      	add	r3, r2
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6938      	ldr	r0, [r7, #16]
 800aaa0:	f7ff ff14 	bl	800a8cc <move_window>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d167      	bne.n	800ab7a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	60fa      	str	r2, [r7, #12]
 800aab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	4413      	add	r3, r2
 800aab8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aabc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	0a5b      	lsrs	r3, r3, #9
 800aac6:	4413      	add	r3, r2
 800aac8:	4619      	mov	r1, r3
 800aaca:	6938      	ldr	r0, [r7, #16]
 800aacc:	f7ff fefe 	bl	800a8cc <move_window>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d153      	bne.n	800ab7e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	4413      	add	r3, r2
 800aae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	461a      	mov	r2, r3
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <get_fat+0xbc>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	091b      	lsrs	r3, r3, #4
 800aafc:	e002      	b.n	800ab04 <get_fat+0xc2>
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab04:	617b      	str	r3, [r7, #20]
			break;
 800ab06:	e03f      	b.n	800ab88 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	0a1b      	lsrs	r3, r3, #8
 800ab10:	4413      	add	r3, r2
 800ab12:	4619      	mov	r1, r3
 800ab14:	6938      	ldr	r0, [r7, #16]
 800ab16:	f7ff fed9 	bl	800a8cc <move_window>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d130      	bne.n	800ab82 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ab2e:	4413      	add	r3, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff fbe9 	bl	800a308 <ld_word>
 800ab36:	4603      	mov	r3, r0
 800ab38:	617b      	str	r3, [r7, #20]
			break;
 800ab3a:	e025      	b.n	800ab88 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	09db      	lsrs	r3, r3, #7
 800ab44:	4413      	add	r3, r2
 800ab46:	4619      	mov	r1, r3
 800ab48:	6938      	ldr	r0, [r7, #16]
 800ab4a:	f7ff febf 	bl	800a8cc <move_window>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d118      	bne.n	800ab86 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab62:	4413      	add	r3, r2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff fbe7 	bl	800a338 <ld_dword>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab70:	617b      	str	r3, [r7, #20]
			break;
 800ab72:	e009      	b.n	800ab88 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ab74:	2301      	movs	r3, #1
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	e006      	b.n	800ab88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab7a:	bf00      	nop
 800ab7c:	e004      	b.n	800ab88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab7e:	bf00      	nop
 800ab80:	e002      	b.n	800ab88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab82:	bf00      	nop
 800ab84:	e000      	b.n	800ab88 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab86:	bf00      	nop
		}
	}

	return val;
 800ab88:	697b      	ldr	r3, [r7, #20]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ab92:	b590      	push	{r4, r7, lr}
 800ab94:	b089      	sub	sp, #36	; 0x24
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	60f8      	str	r0, [r7, #12]
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ab9e:	2302      	movs	r3, #2
 800aba0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	f240 80d2 	bls.w	800ad4e <put_fat+0x1bc>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	f080 80cc 	bcs.w	800ad4e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b03      	cmp	r3, #3
 800abbc:	f000 8096 	beq.w	800acec <put_fat+0x15a>
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	f300 80cd 	bgt.w	800ad60 <put_fat+0x1ce>
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d002      	beq.n	800abd0 <put_fat+0x3e>
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d06e      	beq.n	800acac <put_fat+0x11a>
 800abce:	e0c7      	b.n	800ad60 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	61bb      	str	r3, [r7, #24]
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	085b      	lsrs	r3, r3, #1
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	4413      	add	r3, r2
 800abdc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	0a5b      	lsrs	r3, r3, #9
 800abe6:	4413      	add	r3, r2
 800abe8:	4619      	mov	r1, r3
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7ff fe6e 	bl	800a8cc <move_window>
 800abf0:	4603      	mov	r3, r0
 800abf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abf4:	7ffb      	ldrb	r3, [r7, #31]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f040 80ab 	bne.w	800ad52 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	1c59      	adds	r1, r3, #1
 800ac06:	61b9      	str	r1, [r7, #24]
 800ac08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac0c:	4413      	add	r3, r2
 800ac0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00d      	beq.n	800ac36 <put_fat+0xa4>
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	b25b      	sxtb	r3, r3
 800ac20:	f003 030f 	and.w	r3, r3, #15
 800ac24:	b25a      	sxtb	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	b25b      	sxtb	r3, r3
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	b25b      	sxtb	r3, r3
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	e001      	b.n	800ac3a <put_fat+0xa8>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2201      	movs	r2, #1
 800ac42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	0a5b      	lsrs	r3, r3, #9
 800ac4c:	4413      	add	r3, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff fe3b 	bl	800a8cc <move_window>
 800ac56:	4603      	mov	r3, r0
 800ac58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac5a:	7ffb      	ldrb	r3, [r7, #31]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d17a      	bne.n	800ad56 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6c:	4413      	add	r3, r2
 800ac6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <put_fat+0xf0>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	091b      	lsrs	r3, r3, #4
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	e00e      	b.n	800aca0 <put_fat+0x10e>
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	b25b      	sxtb	r3, r3
 800ac88:	f023 030f 	bic.w	r3, r3, #15
 800ac8c:	b25a      	sxtb	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	0a1b      	lsrs	r3, r3, #8
 800ac92:	b25b      	sxtb	r3, r3
 800ac94:	f003 030f 	and.w	r3, r3, #15
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	b25b      	sxtb	r3, r3
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	70da      	strb	r2, [r3, #3]
			break;
 800acaa:	e059      	b.n	800ad60 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	4413      	add	r3, r2
 800acb6:	4619      	mov	r1, r3
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7ff fe07 	bl	800a8cc <move_window>
 800acbe:	4603      	mov	r3, r0
 800acc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acc2:	7ffb      	ldrb	r3, [r7, #31]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d148      	bne.n	800ad5a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800acd6:	4413      	add	r3, r2
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	b292      	uxth	r2, r2
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff fb4d 	bl	800a37e <st_word>
			fs->wflag = 1;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2201      	movs	r2, #1
 800ace8:	70da      	strb	r2, [r3, #3]
			break;
 800acea:	e039      	b.n	800ad60 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	09db      	lsrs	r3, r3, #7
 800acf4:	4413      	add	r3, r2
 800acf6:	4619      	mov	r1, r3
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f7ff fde7 	bl	800a8cc <move_window>
 800acfe:	4603      	mov	r3, r0
 800ad00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad02:	7ffb      	ldrb	r3, [r7, #31]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d12a      	bne.n	800ad5e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ad1c:	4413      	add	r3, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff fb0a 	bl	800a338 <ld_dword>
 800ad24:	4603      	mov	r3, r0
 800ad26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad2a:	4323      	orrs	r3, r4
 800ad2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ad3c:	4413      	add	r3, r2
 800ad3e:	6879      	ldr	r1, [r7, #4]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7ff fb37 	bl	800a3b4 <st_dword>
			fs->wflag = 1;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	70da      	strb	r2, [r3, #3]
			break;
 800ad4c:	e008      	b.n	800ad60 <put_fat+0x1ce>
		}
	}
 800ad4e:	bf00      	nop
 800ad50:	e006      	b.n	800ad60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ad52:	bf00      	nop
 800ad54:	e004      	b.n	800ad60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ad56:	bf00      	nop
 800ad58:	e002      	b.n	800ad60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ad5a:	bf00      	nop
 800ad5c:	e000      	b.n	800ad60 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ad5e:	bf00      	nop
	return res;
 800ad60:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3724      	adds	r7, #36	; 0x24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd90      	pop	{r4, r7, pc}

0800ad6a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b088      	sub	sp, #32
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	60b9      	str	r1, [r7, #8]
 800ad74:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d904      	bls.n	800ad90 <remove_chain+0x26>
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d301      	bcc.n	800ad94 <remove_chain+0x2a>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e04b      	b.n	800ae2c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00c      	beq.n	800adb4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ad9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	69b8      	ldr	r0, [r7, #24]
 800ada2:	f7ff fef6 	bl	800ab92 <put_fat>
 800ada6:	4603      	mov	r3, r0
 800ada8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800adaa:	7ffb      	ldrb	r3, [r7, #31]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <remove_chain+0x4a>
 800adb0:	7ffb      	ldrb	r3, [r7, #31]
 800adb2:	e03b      	b.n	800ae2c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800adb4:	68b9      	ldr	r1, [r7, #8]
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7ff fe43 	bl	800aa42 <get_fat>
 800adbc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d031      	beq.n	800ae28 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <remove_chain+0x64>
 800adca:	2302      	movs	r3, #2
 800adcc:	e02e      	b.n	800ae2c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add4:	d101      	bne.n	800adda <remove_chain+0x70>
 800add6:	2301      	movs	r3, #1
 800add8:	e028      	b.n	800ae2c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800adda:	2200      	movs	r2, #0
 800addc:	68b9      	ldr	r1, [r7, #8]
 800adde:	69b8      	ldr	r0, [r7, #24]
 800ade0:	f7ff fed7 	bl	800ab92 <put_fat>
 800ade4:	4603      	mov	r3, r0
 800ade6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ade8:	7ffb      	ldrb	r3, [r7, #31]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <remove_chain+0x88>
 800adee:	7ffb      	ldrb	r3, [r7, #31]
 800adf0:	e01c      	b.n	800ae2c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	695a      	ldr	r2, [r3, #20]
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	3b02      	subs	r3, #2
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d20b      	bcs.n	800ae18 <remove_chain+0xae>
			fs->free_clst++;
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	1c5a      	adds	r2, r3, #1
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	791b      	ldrb	r3, [r3, #4]
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d3c6      	bcc.n	800adb4 <remove_chain+0x4a>
 800ae26:	e000      	b.n	800ae2a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ae28:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3720      	adds	r7, #32
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10d      	bne.n	800ae66 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d004      	beq.n	800ae60 <create_chain+0x2c>
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d31b      	bcc.n	800ae98 <create_chain+0x64>
 800ae60:	2301      	movs	r3, #1
 800ae62:	61bb      	str	r3, [r7, #24]
 800ae64:	e018      	b.n	800ae98 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff fdea 	bl	800aa42 <get_fat>
 800ae6e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d801      	bhi.n	800ae7a <create_chain+0x46>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e070      	b.n	800af5c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae80:	d101      	bne.n	800ae86 <create_chain+0x52>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	e06a      	b.n	800af5c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d201      	bcs.n	800ae94 <create_chain+0x60>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	e063      	b.n	800af5c <create_chain+0x128>
		scl = clst;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d307      	bcc.n	800aebc <create_chain+0x88>
				ncl = 2;
 800aeac:	2302      	movs	r3, #2
 800aeae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aeb0:	69fa      	ldr	r2, [r7, #28]
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d901      	bls.n	800aebc <create_chain+0x88>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e04f      	b.n	800af5c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aebc:	69f9      	ldr	r1, [r7, #28]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fdbf 	bl	800aa42 <get_fat>
 800aec4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00e      	beq.n	800aeea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d003      	beq.n	800aeda <create_chain+0xa6>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d101      	bne.n	800aede <create_chain+0xaa>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	e03e      	b.n	800af5c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d1da      	bne.n	800ae9c <create_chain+0x68>
 800aee6:	2300      	movs	r3, #0
 800aee8:	e038      	b.n	800af5c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aeea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aeec:	f04f 32ff 	mov.w	r2, #4294967295
 800aef0:	69f9      	ldr	r1, [r7, #28]
 800aef2:	6938      	ldr	r0, [r7, #16]
 800aef4:	f7ff fe4d 	bl	800ab92 <put_fat>
 800aef8:	4603      	mov	r3, r0
 800aefa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aefc:	7dfb      	ldrb	r3, [r7, #23]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d109      	bne.n	800af16 <create_chain+0xe2>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d006      	beq.n	800af16 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800af08:	69fa      	ldr	r2, [r7, #28]
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6938      	ldr	r0, [r7, #16]
 800af0e:	f7ff fe40 	bl	800ab92 <put_fat>
 800af12:	4603      	mov	r3, r0
 800af14:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800af16:	7dfb      	ldrb	r3, [r7, #23]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d116      	bne.n	800af4a <create_chain+0x116>
		fs->last_clst = ncl;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	695a      	ldr	r2, [r3, #20]
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	3b02      	subs	r3, #2
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d804      	bhi.n	800af3a <create_chain+0x106>
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	1e5a      	subs	r2, r3, #1
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	791b      	ldrb	r3, [r3, #4]
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	711a      	strb	r2, [r3, #4]
 800af48:	e007      	b.n	800af5a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d102      	bne.n	800af56 <create_chain+0x122>
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	e000      	b.n	800af58 <create_chain+0x124>
 800af56:	2301      	movs	r3, #1
 800af58:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800af5a:	69fb      	ldr	r3, [r7, #28]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3720      	adds	r7, #32
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af78:	3304      	adds	r3, #4
 800af7a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	0a5b      	lsrs	r3, r3, #9
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	8952      	ldrh	r2, [r2, #10]
 800af84:	fbb3 f3f2 	udiv	r3, r3, r2
 800af88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	1d1a      	adds	r2, r3, #4
 800af8e:	613a      	str	r2, [r7, #16]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <clmt_clust+0x3a>
 800af9a:	2300      	movs	r3, #0
 800af9c:	e010      	b.n	800afc0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800af9e:	697a      	ldr	r2, [r7, #20]
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d307      	bcc.n	800afb6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	617b      	str	r3, [r7, #20]
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	3304      	adds	r3, #4
 800afb2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800afb4:	e7e9      	b.n	800af8a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800afb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	4413      	add	r3, r2
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	371c      	adds	r7, #28
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afe2:	d204      	bcs.n	800afee <dir_sdi+0x22>
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	f003 031f 	and.w	r3, r3, #31
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800afee:	2302      	movs	r3, #2
 800aff0:	e063      	b.n	800b0ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d106      	bne.n	800b012 <dir_sdi+0x46>
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d902      	bls.n	800b012 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b010:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10c      	bne.n	800b032 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	095b      	lsrs	r3, r3, #5
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	8912      	ldrh	r2, [r2, #8]
 800b020:	4293      	cmp	r3, r2
 800b022:	d301      	bcc.n	800b028 <dir_sdi+0x5c>
 800b024:	2302      	movs	r3, #2
 800b026:	e048      	b.n	800b0ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	61da      	str	r2, [r3, #28]
 800b030:	e029      	b.n	800b086 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	895b      	ldrh	r3, [r3, #10]
 800b036:	025b      	lsls	r3, r3, #9
 800b038:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b03a:	e019      	b.n	800b070 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6979      	ldr	r1, [r7, #20]
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fcfe 	bl	800aa42 <get_fat>
 800b046:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	d101      	bne.n	800b054 <dir_sdi+0x88>
 800b050:	2301      	movs	r3, #1
 800b052:	e032      	b.n	800b0ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d904      	bls.n	800b064 <dir_sdi+0x98>
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	697a      	ldr	r2, [r7, #20]
 800b060:	429a      	cmp	r2, r3
 800b062:	d301      	bcc.n	800b068 <dir_sdi+0x9c>
 800b064:	2302      	movs	r3, #2
 800b066:	e028      	b.n	800b0ba <dir_sdi+0xee>
			ofs -= csz;
 800b068:	683a      	ldr	r2, [r7, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	429a      	cmp	r2, r3
 800b076:	d2e1      	bcs.n	800b03c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b078:	6979      	ldr	r1, [r7, #20]
 800b07a:	6938      	ldr	r0, [r7, #16]
 800b07c:	f7ff fcc2 	bl	800aa04 <clust2sect>
 800b080:	4602      	mov	r2, r0
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <dir_sdi+0xcc>
 800b094:	2302      	movs	r3, #2
 800b096:	e010      	b.n	800b0ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69da      	ldr	r2, [r3, #28]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	0a5b      	lsrs	r3, r3, #9
 800b0a0:	441a      	add	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b2:	441a      	add	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b086      	sub	sp, #24
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	3320      	adds	r3, #32
 800b0d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <dir_next+0x28>
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0e8:	d301      	bcc.n	800b0ee <dir_next+0x2c>
 800b0ea:	2304      	movs	r3, #4
 800b0ec:	e0aa      	b.n	800b244 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f040 8098 	bne.w	800b22a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10b      	bne.n	800b124 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	095b      	lsrs	r3, r3, #5
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	8912      	ldrh	r2, [r2, #8]
 800b114:	4293      	cmp	r3, r2
 800b116:	f0c0 8088 	bcc.w	800b22a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	61da      	str	r2, [r3, #28]
 800b120:	2304      	movs	r3, #4
 800b122:	e08f      	b.n	800b244 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	0a5b      	lsrs	r3, r3, #9
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	8952      	ldrh	r2, [r2, #10]
 800b12c:	3a01      	subs	r2, #1
 800b12e:	4013      	ands	r3, r2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d17a      	bne.n	800b22a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	4619      	mov	r1, r3
 800b13c:	4610      	mov	r0, r2
 800b13e:	f7ff fc80 	bl	800aa42 <get_fat>
 800b142:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d801      	bhi.n	800b14e <dir_next+0x8c>
 800b14a:	2302      	movs	r3, #2
 800b14c:	e07a      	b.n	800b244 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b154:	d101      	bne.n	800b15a <dir_next+0x98>
 800b156:	2301      	movs	r3, #1
 800b158:	e074      	b.n	800b244 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	429a      	cmp	r2, r3
 800b162:	d358      	bcc.n	800b216 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d104      	bne.n	800b174 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	61da      	str	r2, [r3, #28]
 800b170:	2304      	movs	r3, #4
 800b172:	e067      	b.n	800b244 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	4619      	mov	r1, r3
 800b17c:	4610      	mov	r0, r2
 800b17e:	f7ff fe59 	bl	800ae34 <create_chain>
 800b182:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <dir_next+0xcc>
 800b18a:	2307      	movs	r3, #7
 800b18c:	e05a      	b.n	800b244 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d101      	bne.n	800b198 <dir_next+0xd6>
 800b194:	2302      	movs	r3, #2
 800b196:	e055      	b.n	800b244 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19e:	d101      	bne.n	800b1a4 <dir_next+0xe2>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e04f      	b.n	800b244 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7ff fb4d 	bl	800a844 <sync_window>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <dir_next+0xf2>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e047      	b.n	800b244 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3334      	adds	r3, #52	; 0x34
 800b1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1bc:	2100      	movs	r1, #0
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff f945 	bl	800a44e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	613b      	str	r3, [r7, #16]
 800b1c8:	6979      	ldr	r1, [r7, #20]
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff fc1a 	bl	800aa04 <clust2sect>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	631a      	str	r2, [r3, #48]	; 0x30
 800b1d6:	e012      	b.n	800b1fe <dir_next+0x13c>
						fs->wflag = 1;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f7ff fb30 	bl	800a844 <sync_window>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <dir_next+0x12c>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e02a      	b.n	800b244 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	613b      	str	r3, [r7, #16]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f8:	1c5a      	adds	r2, r3, #1
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	631a      	str	r2, [r3, #48]	; 0x30
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	895b      	ldrh	r3, [r3, #10]
 800b202:	461a      	mov	r2, r3
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	4293      	cmp	r3, r2
 800b208:	d3e6      	bcc.n	800b1d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	1ad2      	subs	r2, r2, r3
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b21c:	6979      	ldr	r1, [r7, #20]
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7ff fbf0 	bl	800aa04 <clust2sect>
 800b224:	4602      	mov	r2, r0
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23c:	441a      	add	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b25c:	2100      	movs	r1, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff feb4 	bl	800afcc <dir_sdi>
 800b264:	4603      	mov	r3, r0
 800b266:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d12b      	bne.n	800b2c6 <dir_alloc+0x7a>
		n = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	69db      	ldr	r3, [r3, #28]
 800b276:	4619      	mov	r1, r3
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7ff fb27 	bl	800a8cc <move_window>
 800b27e:	4603      	mov	r3, r0
 800b280:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d11d      	bne.n	800b2c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2be5      	cmp	r3, #229	; 0xe5
 800b290:	d004      	beq.n	800b29c <dir_alloc+0x50>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d107      	bne.n	800b2ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	613b      	str	r3, [r7, #16]
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d102      	bne.n	800b2b0 <dir_alloc+0x64>
 800b2aa:	e00c      	b.n	800b2c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff ff05 	bl	800b0c2 <dir_next>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0d7      	beq.n	800b272 <dir_alloc+0x26>
 800b2c2:	e000      	b.n	800b2c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b2c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b2c6:	7dfb      	ldrb	r3, [r7, #23]
 800b2c8:	2b04      	cmp	r3, #4
 800b2ca:	d101      	bne.n	800b2d0 <dir_alloc+0x84>
 800b2cc:	2307      	movs	r3, #7
 800b2ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	331a      	adds	r3, #26
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff f80d 	bl	800a308 <ld_word>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d109      	bne.n	800b30e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	3314      	adds	r3, #20
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff f802 	bl	800a308 <ld_word>
 800b304:	4603      	mov	r3, r0
 800b306:	041b      	lsls	r3, r3, #16
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b30e:	68fb      	ldr	r3, [r7, #12]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	331a      	adds	r3, #26
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	b292      	uxth	r2, r2
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff f825 	bl	800a37e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b03      	cmp	r3, #3
 800b33a:	d109      	bne.n	800b350 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f103 0214 	add.w	r2, r3, #20
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	0c1b      	lsrs	r3, r3, #16
 800b346:	b29b      	uxth	r3, r3
 800b348:	4619      	mov	r1, r3
 800b34a:	4610      	mov	r0, r2
 800b34c:	f7ff f817 	bl	800a37e <st_word>
	}
}
 800b350:	bf00      	nop
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b086      	sub	sp, #24
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b366:	2100      	movs	r1, #0
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff fe2f 	bl	800afcc <dir_sdi>
 800b36e:	4603      	mov	r3, r0
 800b370:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b372:	7dfb      	ldrb	r3, [r7, #23]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <dir_find+0x24>
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	e03e      	b.n	800b3fa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	69db      	ldr	r3, [r3, #28]
 800b380:	4619      	mov	r1, r3
 800b382:	6938      	ldr	r0, [r7, #16]
 800b384:	f7ff faa2 	bl	800a8cc <move_window>
 800b388:	4603      	mov	r3, r0
 800b38a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d12f      	bne.n	800b3f2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a1b      	ldr	r3, [r3, #32]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <dir_find+0x4e>
 800b3a0:	2304      	movs	r3, #4
 800b3a2:	75fb      	strb	r3, [r7, #23]
 800b3a4:	e028      	b.n	800b3f8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	330b      	adds	r3, #11
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	330b      	adds	r3, #11
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 0308 	and.w	r3, r3, #8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10a      	bne.n	800b3de <dir_find+0x86>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a18      	ldr	r0, [r3, #32]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3324      	adds	r3, #36	; 0x24
 800b3d0:	220b      	movs	r2, #11
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	f7ff f856 	bl	800a484 <mem_cmp>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b3de:	2100      	movs	r1, #0
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7ff fe6e 	bl	800b0c2 <dir_next>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0c5      	beq.n	800b37c <dir_find+0x24>
 800b3f0:	e002      	b.n	800b3f8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b3f2:	bf00      	nop
 800b3f4:	e000      	b.n	800b3f8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b3f6:	bf00      	nop

	return res;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b410:	2101      	movs	r1, #1
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff ff1a 	bl	800b24c <dir_alloc>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d11c      	bne.n	800b45c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	69db      	ldr	r3, [r3, #28]
 800b426:	4619      	mov	r1, r3
 800b428:	68b8      	ldr	r0, [r7, #8]
 800b42a:	f7ff fa4f 	bl	800a8cc <move_window>
 800b42e:	4603      	mov	r3, r0
 800b430:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d111      	bne.n	800b45c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a1b      	ldr	r3, [r3, #32]
 800b43c:	2220      	movs	r2, #32
 800b43e:	2100      	movs	r1, #0
 800b440:	4618      	mov	r0, r3
 800b442:	f7ff f804 	bl	800a44e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a18      	ldr	r0, [r3, #32]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3324      	adds	r3, #36	; 0x24
 800b44e:	220b      	movs	r2, #11
 800b450:	4619      	mov	r1, r3
 800b452:	f7fe ffdb 	bl	800a40c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2201      	movs	r2, #1
 800b45a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3324      	adds	r3, #36	; 0x24
 800b47c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b47e:	220b      	movs	r2, #11
 800b480:	2120      	movs	r1, #32
 800b482:	68b8      	ldr	r0, [r7, #8]
 800b484:	f7fe ffe3 	bl	800a44e <mem_set>
	si = i = 0; ni = 8;
 800b488:	2300      	movs	r3, #0
 800b48a:	613b      	str	r3, [r7, #16]
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	61fb      	str	r3, [r7, #28]
 800b490:	2308      	movs	r3, #8
 800b492:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	61fa      	str	r2, [r7, #28]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b4a2:	7efb      	ldrb	r3, [r7, #27]
 800b4a4:	2b20      	cmp	r3, #32
 800b4a6:	d94e      	bls.n	800b546 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b4a8:	7efb      	ldrb	r3, [r7, #27]
 800b4aa:	2b2f      	cmp	r3, #47	; 0x2f
 800b4ac:	d006      	beq.n	800b4bc <create_name+0x54>
 800b4ae:	7efb      	ldrb	r3, [r7, #27]
 800b4b0:	2b5c      	cmp	r3, #92	; 0x5c
 800b4b2:	d110      	bne.n	800b4d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b4b4:	e002      	b.n	800b4bc <create_name+0x54>
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	61fb      	str	r3, [r7, #28]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b2f      	cmp	r3, #47	; 0x2f
 800b4c6:	d0f6      	beq.n	800b4b6 <create_name+0x4e>
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b4d2:	d0f0      	beq.n	800b4b6 <create_name+0x4e>
			break;
 800b4d4:	e038      	b.n	800b548 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b4d6:	7efb      	ldrb	r3, [r7, #27]
 800b4d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4da:	d003      	beq.n	800b4e4 <create_name+0x7c>
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d30c      	bcc.n	800b4fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b0b      	cmp	r3, #11
 800b4e8:	d002      	beq.n	800b4f0 <create_name+0x88>
 800b4ea:	7efb      	ldrb	r3, [r7, #27]
 800b4ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ee:	d001      	beq.n	800b4f4 <create_name+0x8c>
 800b4f0:	2306      	movs	r3, #6
 800b4f2:	e044      	b.n	800b57e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b4f4:	2308      	movs	r3, #8
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	230b      	movs	r3, #11
 800b4fa:	617b      	str	r3, [r7, #20]
			continue;
 800b4fc:	e022      	b.n	800b544 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b4fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b502:	2b00      	cmp	r3, #0
 800b504:	da04      	bge.n	800b510 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b506:	7efb      	ldrb	r3, [r7, #27]
 800b508:	3b80      	subs	r3, #128	; 0x80
 800b50a:	4a1f      	ldr	r2, [pc, #124]	; (800b588 <create_name+0x120>)
 800b50c:	5cd3      	ldrb	r3, [r2, r3]
 800b50e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b510:	7efb      	ldrb	r3, [r7, #27]
 800b512:	4619      	mov	r1, r3
 800b514:	481d      	ldr	r0, [pc, #116]	; (800b58c <create_name+0x124>)
 800b516:	f7fe ffdc 	bl	800a4d2 <chk_chr>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <create_name+0xbc>
 800b520:	2306      	movs	r3, #6
 800b522:	e02c      	b.n	800b57e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b524:	7efb      	ldrb	r3, [r7, #27]
 800b526:	2b60      	cmp	r3, #96	; 0x60
 800b528:	d905      	bls.n	800b536 <create_name+0xce>
 800b52a:	7efb      	ldrb	r3, [r7, #27]
 800b52c:	2b7a      	cmp	r3, #122	; 0x7a
 800b52e:	d802      	bhi.n	800b536 <create_name+0xce>
 800b530:	7efb      	ldrb	r3, [r7, #27]
 800b532:	3b20      	subs	r3, #32
 800b534:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	1c5a      	adds	r2, r3, #1
 800b53a:	613a      	str	r2, [r7, #16]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	4413      	add	r3, r2
 800b540:	7efa      	ldrb	r2, [r7, #27]
 800b542:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b544:	e7a6      	b.n	800b494 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b546:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	441a      	add	r2, r3
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <create_name+0xf4>
 800b558:	2306      	movs	r3, #6
 800b55a:	e010      	b.n	800b57e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2be5      	cmp	r3, #229	; 0xe5
 800b562:	d102      	bne.n	800b56a <create_name+0x102>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2205      	movs	r2, #5
 800b568:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b56a:	7efb      	ldrb	r3, [r7, #27]
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	d801      	bhi.n	800b574 <create_name+0x10c>
 800b570:	2204      	movs	r2, #4
 800b572:	e000      	b.n	800b576 <create_name+0x10e>
 800b574:	2200      	movs	r2, #0
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	330b      	adds	r3, #11
 800b57a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b57c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3720      	adds	r7, #32
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	08011cd8 	.word	0x08011cd8
 800b58c:	08011b80 	.word	0x08011b80

0800b590 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b5a4:	e002      	b.n	800b5ac <follow_path+0x1c>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	603b      	str	r3, [r7, #0]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b2f      	cmp	r3, #47	; 0x2f
 800b5b2:	d0f8      	beq.n	800b5a6 <follow_path+0x16>
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	2b5c      	cmp	r3, #92	; 0x5c
 800b5ba:	d0f4      	beq.n	800b5a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b1f      	cmp	r3, #31
 800b5c8:	d80a      	bhi.n	800b5e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2280      	movs	r2, #128	; 0x80
 800b5ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff fcf9 	bl	800afcc <dir_sdi>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	75fb      	strb	r3, [r7, #23]
 800b5de:	e043      	b.n	800b668 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5e0:	463b      	mov	r3, r7
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff ff3f 	bl	800b468 <create_name>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d134      	bne.n	800b65e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff feaf 	bl	800b358 <dir_find>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b604:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00a      	beq.n	800b622 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d127      	bne.n	800b662 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b612:	7afb      	ldrb	r3, [r7, #11]
 800b614:	f003 0304 	and.w	r3, r3, #4
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d122      	bne.n	800b662 <follow_path+0xd2>
 800b61c:	2305      	movs	r3, #5
 800b61e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b620:	e01f      	b.n	800b662 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b622:	7afb      	ldrb	r3, [r7, #11]
 800b624:	f003 0304 	and.w	r3, r3, #4
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d11c      	bne.n	800b666 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	799b      	ldrb	r3, [r3, #6]
 800b630:	f003 0310 	and.w	r3, r3, #16
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b638:	2305      	movs	r3, #5
 800b63a:	75fb      	strb	r3, [r7, #23]
 800b63c:	e014      	b.n	800b668 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b64c:	4413      	add	r3, r2
 800b64e:	4619      	mov	r1, r3
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff fe42 	bl	800b2da <ld_clust>
 800b656:	4602      	mov	r2, r0
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b65c:	e7c0      	b.n	800b5e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800b65e:	bf00      	nop
 800b660:	e002      	b.n	800b668 <follow_path+0xd8>
				break;
 800b662:	bf00      	nop
 800b664:	e000      	b.n	800b668 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b666:	bf00      	nop
			}
		}
	}

	return res;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3718      	adds	r7, #24
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b672:	b480      	push	{r7}
 800b674:	b087      	sub	sp, #28
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b67a:	f04f 33ff 	mov.w	r3, #4294967295
 800b67e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d031      	beq.n	800b6ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	e002      	b.n	800b696 <get_ldnumber+0x24>
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	3301      	adds	r3, #1
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	d903      	bls.n	800b6a6 <get_ldnumber+0x34>
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b3a      	cmp	r3, #58	; 0x3a
 800b6a4:	d1f4      	bne.n	800b690 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b3a      	cmp	r3, #58	; 0x3a
 800b6ac:	d11c      	bne.n	800b6e8 <get_ldnumber+0x76>
			tp = *path;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	1c5a      	adds	r2, r3, #1
 800b6b8:	60fa      	str	r2, [r7, #12]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	3b30      	subs	r3, #48	; 0x30
 800b6be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b09      	cmp	r3, #9
 800b6c4:	d80e      	bhi.n	800b6e4 <get_ldnumber+0x72>
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d10a      	bne.n	800b6e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d107      	bne.n	800b6e4 <get_ldnumber+0x72>
					vol = (int)i;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	e002      	b.n	800b6ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b6ec:	693b      	ldr	r3, [r7, #16]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	371c      	adds	r7, #28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
	...

0800b6fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	70da      	strb	r2, [r3, #3]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f04f 32ff 	mov.w	r2, #4294967295
 800b712:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff f8d8 	bl	800a8cc <move_window>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <check_fs+0x2a>
 800b722:	2304      	movs	r3, #4
 800b724:	e038      	b.n	800b798 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	3334      	adds	r3, #52	; 0x34
 800b72a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fdea 	bl	800a308 <ld_word>
 800b734:	4603      	mov	r3, r0
 800b736:	461a      	mov	r2, r3
 800b738:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d001      	beq.n	800b744 <check_fs+0x48>
 800b740:	2303      	movs	r3, #3
 800b742:	e029      	b.n	800b798 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b74a:	2be9      	cmp	r3, #233	; 0xe9
 800b74c:	d009      	beq.n	800b762 <check_fs+0x66>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b754:	2beb      	cmp	r3, #235	; 0xeb
 800b756:	d11e      	bne.n	800b796 <check_fs+0x9a>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b75e:	2b90      	cmp	r3, #144	; 0x90
 800b760:	d119      	bne.n	800b796 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3334      	adds	r3, #52	; 0x34
 800b766:	3336      	adds	r3, #54	; 0x36
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe fde5 	bl	800a338 <ld_dword>
 800b76e:	4603      	mov	r3, r0
 800b770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b774:	4a0a      	ldr	r2, [pc, #40]	; (800b7a0 <check_fs+0xa4>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d101      	bne.n	800b77e <check_fs+0x82>
 800b77a:	2300      	movs	r3, #0
 800b77c:	e00c      	b.n	800b798 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3334      	adds	r3, #52	; 0x34
 800b782:	3352      	adds	r3, #82	; 0x52
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fdd7 	bl	800a338 <ld_dword>
 800b78a:	4603      	mov	r3, r0
 800b78c:	4a05      	ldr	r2, [pc, #20]	; (800b7a4 <check_fs+0xa8>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d101      	bne.n	800b796 <check_fs+0x9a>
 800b792:	2300      	movs	r3, #0
 800b794:	e000      	b.n	800b798 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b796:	2302      	movs	r3, #2
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	00544146 	.word	0x00544146
 800b7a4:	33544146 	.word	0x33544146

0800b7a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b096      	sub	sp, #88	; 0x58
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f7ff ff58 	bl	800b672 <get_ldnumber>
 800b7c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	da01      	bge.n	800b7ce <find_volume+0x26>
 800b7ca:	230b      	movs	r3, #11
 800b7cc:	e235      	b.n	800bc3a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b7ce:	4aa5      	ldr	r2, [pc, #660]	; (800ba64 <find_volume+0x2bc>)
 800b7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <find_volume+0x3a>
 800b7de:	230c      	movs	r3, #12
 800b7e0:	e22b      	b.n	800bc3a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b7e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7e4:	f7fe fe90 	bl	800a508 <lock_fs>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <find_volume+0x4a>
 800b7ee:	230f      	movs	r3, #15
 800b7f0:	e223      	b.n	800bc3a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	f023 0301 	bic.w	r3, r3, #1
 800b7fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d01a      	beq.n	800b83e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	785b      	ldrb	r3, [r3, #1]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7fe fcdd 	bl	800a1cc <disk_status>
 800b812:	4603      	mov	r3, r0
 800b814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10c      	bne.n	800b83e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b824:	79fb      	ldrb	r3, [r7, #7]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d007      	beq.n	800b83a <find_volume+0x92>
 800b82a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b82e:	f003 0304 	and.w	r3, r3, #4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b836:	230a      	movs	r3, #10
 800b838:	e1ff      	b.n	800bc3a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b83a:	2300      	movs	r3, #0
 800b83c:	e1fd      	b.n	800bc3a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b840:	2200      	movs	r2, #0
 800b842:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b846:	b2da      	uxtb	r2, r3
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84e:	785b      	ldrb	r3, [r3, #1]
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe fcd5 	bl	800a200 <disk_initialize>
 800b856:	4603      	mov	r3, r0
 800b858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b85c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b860:	f003 0301 	and.w	r3, r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b868:	2303      	movs	r3, #3
 800b86a:	e1e6      	b.n	800bc3a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b86c:	79fb      	ldrb	r3, [r7, #7]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d007      	beq.n	800b882 <find_volume+0xda>
 800b872:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b876:	f003 0304 	and.w	r3, r3, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b87e:	230a      	movs	r3, #10
 800b880:	e1db      	b.n	800bc3a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b88a:	f7ff ff37 	bl	800b6fc <check_fs>
 800b88e:	4603      	mov	r3, r0
 800b890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d149      	bne.n	800b930 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b89c:	2300      	movs	r3, #0
 800b89e:	643b      	str	r3, [r7, #64]	; 0x40
 800b8a0:	e01e      	b.n	800b8e0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8aa:	011b      	lsls	r3, r3, #4
 800b8ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b8b0:	4413      	add	r3, r2
 800b8b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d006      	beq.n	800b8cc <find_volume+0x124>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fd38 	bl	800a338 <ld_dword>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	e000      	b.n	800b8ce <find_volume+0x126>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	3358      	adds	r3, #88	; 0x58
 800b8d4:	443b      	add	r3, r7
 800b8d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8dc:	3301      	adds	r3, #1
 800b8de:	643b      	str	r3, [r7, #64]	; 0x40
 800b8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d9dd      	bls.n	800b8a2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <find_volume+0x14e>
 800b8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	3358      	adds	r3, #88	; 0x58
 800b8fc:	443b      	add	r3, r7
 800b8fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b902:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b906:	2b00      	cmp	r3, #0
 800b908:	d005      	beq.n	800b916 <find_volume+0x16e>
 800b90a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b90c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b90e:	f7ff fef5 	bl	800b6fc <check_fs>
 800b912:	4603      	mov	r3, r0
 800b914:	e000      	b.n	800b918 <find_volume+0x170>
 800b916:	2303      	movs	r3, #3
 800b918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b91c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b920:	2b01      	cmp	r3, #1
 800b922:	d905      	bls.n	800b930 <find_volume+0x188>
 800b924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b926:	3301      	adds	r3, #1
 800b928:	643b      	str	r3, [r7, #64]	; 0x40
 800b92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b92c:	2b03      	cmp	r3, #3
 800b92e:	d9e2      	bls.n	800b8f6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b934:	2b04      	cmp	r3, #4
 800b936:	d101      	bne.n	800b93c <find_volume+0x194>
 800b938:	2301      	movs	r3, #1
 800b93a:	e17e      	b.n	800bc3a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b93c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b940:	2b01      	cmp	r3, #1
 800b942:	d901      	bls.n	800b948 <find_volume+0x1a0>
 800b944:	230d      	movs	r3, #13
 800b946:	e178      	b.n	800bc3a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94a:	3334      	adds	r3, #52	; 0x34
 800b94c:	330b      	adds	r3, #11
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fe fcda 	bl	800a308 <ld_word>
 800b954:	4603      	mov	r3, r0
 800b956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95a:	d001      	beq.n	800b960 <find_volume+0x1b8>
 800b95c:	230d      	movs	r3, #13
 800b95e:	e16c      	b.n	800bc3a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	3334      	adds	r3, #52	; 0x34
 800b964:	3316      	adds	r3, #22
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe fcce 	bl	800a308 <ld_word>
 800b96c:	4603      	mov	r3, r0
 800b96e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <find_volume+0x1dc>
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	3334      	adds	r3, #52	; 0x34
 800b97a:	3324      	adds	r3, #36	; 0x24
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fe fcdb 	bl	800a338 <ld_dword>
 800b982:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b988:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	789b      	ldrb	r3, [r3, #2]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d005      	beq.n	800b9a8 <find_volume+0x200>
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	789b      	ldrb	r3, [r3, #2]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d001      	beq.n	800b9a8 <find_volume+0x200>
 800b9a4:	230d      	movs	r3, #13
 800b9a6:	e148      	b.n	800bc3a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9aa:	789b      	ldrb	r3, [r3, #2]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9b0:	fb02 f303 	mul.w	r3, r2, r3
 800b9b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	895b      	ldrh	r3, [r3, #10]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d008      	beq.n	800b9dc <find_volume+0x234>
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9cc:	895b      	ldrh	r3, [r3, #10]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d2:	895b      	ldrh	r3, [r3, #10]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <find_volume+0x238>
 800b9dc:	230d      	movs	r3, #13
 800b9de:	e12c      	b.n	800bc3a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	3334      	adds	r3, #52	; 0x34
 800b9e4:	3311      	adds	r3, #17
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe fc8e 	bl	800a308 <ld_word>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	891b      	ldrh	r3, [r3, #8]
 800b9f8:	f003 030f 	and.w	r3, r3, #15
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <find_volume+0x25e>
 800ba02:	230d      	movs	r3, #13
 800ba04:	e119      	b.n	800bc3a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba08:	3334      	adds	r3, #52	; 0x34
 800ba0a:	3313      	adds	r3, #19
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fe fc7b 	bl	800a308 <ld_word>
 800ba12:	4603      	mov	r3, r0
 800ba14:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <find_volume+0x282>
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	3334      	adds	r3, #52	; 0x34
 800ba20:	3320      	adds	r3, #32
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fe fc88 	bl	800a338 <ld_dword>
 800ba28:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2c:	3334      	adds	r3, #52	; 0x34
 800ba2e:	330e      	adds	r3, #14
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe fc69 	bl	800a308 <ld_word>
 800ba36:	4603      	mov	r3, r0
 800ba38:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <find_volume+0x29c>
 800ba40:	230d      	movs	r3, #13
 800ba42:	e0fa      	b.n	800bc3a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba48:	4413      	add	r3, r2
 800ba4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba4c:	8912      	ldrh	r2, [r2, #8]
 800ba4e:	0912      	lsrs	r2, r2, #4
 800ba50:	b292      	uxth	r2, r2
 800ba52:	4413      	add	r3, r2
 800ba54:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d204      	bcs.n	800ba68 <find_volume+0x2c0>
 800ba5e:	230d      	movs	r3, #13
 800ba60:	e0eb      	b.n	800bc3a <find_volume+0x492>
 800ba62:	bf00      	nop
 800ba64:	20000f74 	.word	0x20000f74
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba70:	8952      	ldrh	r2, [r2, #10]
 800ba72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba76:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <find_volume+0x2da>
 800ba7e:	230d      	movs	r3, #13
 800ba80:	e0db      	b.n	800bc3a <find_volume+0x492>
		fmt = FS_FAT32;
 800ba82:	2303      	movs	r3, #3
 800ba84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d802      	bhi.n	800ba98 <find_volume+0x2f0>
 800ba92:	2302      	movs	r3, #2
 800ba94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d802      	bhi.n	800baa8 <find_volume+0x300>
 800baa2:	2301      	movs	r3, #1
 800baa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	1c9a      	adds	r2, r3, #2
 800baac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baae:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bab4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bab6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baba:	441a      	add	r2, r3
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	441a      	add	r2, r3
 800bac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800baca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d11e      	bne.n	800bb10 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	3334      	adds	r3, #52	; 0x34
 800bad6:	332a      	adds	r3, #42	; 0x2a
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fe fc15 	bl	800a308 <ld_word>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <find_volume+0x340>
 800bae4:	230d      	movs	r3, #13
 800bae6:	e0a8      	b.n	800bc3a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	891b      	ldrh	r3, [r3, #8]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <find_volume+0x34c>
 800baf0:	230d      	movs	r3, #13
 800baf2:	e0a2      	b.n	800bc3a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800baf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf6:	3334      	adds	r3, #52	; 0x34
 800baf8:	332c      	adds	r3, #44	; 0x2c
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe fc1c 	bl	800a338 <ld_dword>
 800bb00:	4602      	mov	r2, r0
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	647b      	str	r3, [r7, #68]	; 0x44
 800bb0e:	e01f      	b.n	800bb50 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	891b      	ldrh	r3, [r3, #8]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <find_volume+0x374>
 800bb18:	230d      	movs	r3, #13
 800bb1a:	e08e      	b.n	800bc3a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb22:	441a      	add	r2, r3
 800bb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb26:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d103      	bne.n	800bb38 <find_volume+0x390>
 800bb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	e00a      	b.n	800bb4e <find_volume+0x3a6>
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	699a      	ldr	r2, [r3, #24]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	4413      	add	r3, r2
 800bb42:	085a      	lsrs	r2, r3, #1
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb4e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	69da      	ldr	r2, [r3, #28]
 800bb54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb56:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bb5a:	0a5b      	lsrs	r3, r3, #9
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d201      	bcs.n	800bb64 <find_volume+0x3bc>
 800bb60:	230d      	movs	r3, #13
 800bb62:	e06a      	b.n	800bc3a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	f04f 32ff 	mov.w	r2, #4294967295
 800bb6a:	615a      	str	r2, [r3, #20]
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	695a      	ldr	r2, [r3, #20]
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	2280      	movs	r2, #128	; 0x80
 800bb78:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d149      	bne.n	800bc16 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb84:	3334      	adds	r3, #52	; 0x34
 800bb86:	3330      	adds	r3, #48	; 0x30
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fe fbbd 	bl	800a308 <ld_word>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d140      	bne.n	800bc16 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb96:	3301      	adds	r3, #1
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb9c:	f7fe fe96 	bl	800a8cc <move_window>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d137      	bne.n	800bc16 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800bba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba8:	2200      	movs	r2, #0
 800bbaa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	3334      	adds	r3, #52	; 0x34
 800bbb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe fba7 	bl	800a308 <ld_word>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d127      	bne.n	800bc16 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	3334      	adds	r3, #52	; 0x34
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fe fbb4 	bl	800a338 <ld_dword>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	4a1c      	ldr	r2, [pc, #112]	; (800bc44 <find_volume+0x49c>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d11e      	bne.n	800bc16 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbda:	3334      	adds	r3, #52	; 0x34
 800bbdc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fba9 	bl	800a338 <ld_dword>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	4a17      	ldr	r2, [pc, #92]	; (800bc48 <find_volume+0x4a0>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d113      	bne.n	800bc16 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf0:	3334      	adds	r3, #52	; 0x34
 800bbf2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fe fb9e 	bl	800a338 <ld_dword>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	3334      	adds	r3, #52	; 0x34
 800bc06:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe fb94 	bl	800a338 <ld_dword>
 800bc10:	4602      	mov	r2, r0
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc1e:	4b0b      	ldr	r3, [pc, #44]	; (800bc4c <find_volume+0x4a4>)
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <find_volume+0x4a4>)
 800bc28:	801a      	strh	r2, [r3, #0]
 800bc2a:	4b08      	ldr	r3, [pc, #32]	; (800bc4c <find_volume+0x4a4>)
 800bc2c:	881a      	ldrh	r2, [r3, #0]
 800bc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc30:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc34:	f7fe fde2 	bl	800a7fc <clear_lock>
#endif
	return FR_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3758      	adds	r7, #88	; 0x58
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	41615252 	.word	0x41615252
 800bc48:	61417272 	.word	0x61417272
 800bc4c:	20000f78 	.word	0x20000f78

0800bc50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bc5a:	2309      	movs	r3, #9
 800bc5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d02e      	beq.n	800bcc2 <validate+0x72>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d02a      	beq.n	800bcc2 <validate+0x72>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d025      	beq.n	800bcc2 <validate+0x72>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	889a      	ldrh	r2, [r3, #4]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	88db      	ldrh	r3, [r3, #6]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d11e      	bne.n	800bcc2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe fc3d 	bl	800a508 <lock_fs>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d014      	beq.n	800bcbe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	785b      	ldrb	r3, [r3, #1]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe fa96 	bl	800a1cc <disk_status>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d102      	bne.n	800bcb0 <validate+0x60>
				res = FR_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
 800bcae:	e008      	b.n	800bcc2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe fc3c 	bl	800a534 <unlock_fs>
 800bcbc:	e001      	b.n	800bcc2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800bcbe:	230f      	movs	r3, #15
 800bcc0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <validate+0x7e>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	e000      	b.n	800bcd0 <validate+0x80>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	6013      	str	r3, [r2, #0]
	return res;
 800bcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4613      	mov	r3, r2
 800bcec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bcf2:	f107 0310 	add.w	r3, r7, #16
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff fcbb 	bl	800b672 <get_ldnumber>
 800bcfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	da01      	bge.n	800bd08 <f_mount+0x28>
 800bd04:	230b      	movs	r3, #11
 800bd06:	e048      	b.n	800bd9a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bd08:	4a26      	ldr	r2, [pc, #152]	; (800bda4 <f_mount+0xc4>)
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00f      	beq.n	800bd38 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bd18:	69b8      	ldr	r0, [r7, #24]
 800bd1a:	f7fe fd6f 	bl	800a7fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 fe4b 	bl	800c9be <ff_del_syncobj>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <f_mount+0x52>
 800bd2e:	2302      	movs	r3, #2
 800bd30:	e033      	b.n	800bd9a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	2200      	movs	r2, #0
 800bd36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00f      	beq.n	800bd5e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	330c      	adds	r3, #12
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f000 fe15 	bl	800c97e <ff_cre_syncobj>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <f_mount+0x7e>
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	e01d      	b.n	800bd9a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	4910      	ldr	r1, [pc, #64]	; (800bda4 <f_mount+0xc4>)
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <f_mount+0x94>
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d001      	beq.n	800bd78 <f_mount+0x98>
 800bd74:	2300      	movs	r3, #0
 800bd76:	e010      	b.n	800bd9a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bd78:	f107 010c 	add.w	r1, r7, #12
 800bd7c:	f107 0308 	add.w	r3, r7, #8
 800bd80:	2200      	movs	r2, #0
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff fd10 	bl	800b7a8 <find_volume>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	7dfa      	ldrb	r2, [r7, #23]
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe fbce 	bl	800a534 <unlock_fs>
 800bd98:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20000f74 	.word	0x20000f74

0800bda8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b098      	sub	sp, #96	; 0x60
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <f_open+0x18>
 800bdbc:	2309      	movs	r3, #9
 800bdbe:	e1b4      	b.n	800c12a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bdc0:	79fb      	ldrb	r3, [r7, #7]
 800bdc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bdc8:	79fa      	ldrb	r2, [r7, #7]
 800bdca:	f107 0110 	add.w	r1, r7, #16
 800bdce:	f107 0308 	add.w	r3, r7, #8
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff fce8 	bl	800b7a8 <find_volume>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bdde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f040 8191 	bne.w	800c10a <f_open+0x362>
		dj.obj.fs = fs;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	f107 0314 	add.w	r3, r7, #20
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff fbcb 	bl	800b590 <follow_path>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800be00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be04:	2b00      	cmp	r3, #0
 800be06:	d11a      	bne.n	800be3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800be08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be0c:	b25b      	sxtb	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da03      	bge.n	800be1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800be12:	2306      	movs	r3, #6
 800be14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be18:	e011      	b.n	800be3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be1a:	79fb      	ldrb	r3, [r7, #7]
 800be1c:	f023 0301 	bic.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	bf14      	ite	ne
 800be24:	2301      	movne	r3, #1
 800be26:	2300      	moveq	r3, #0
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	461a      	mov	r2, r3
 800be2c:	f107 0314 	add.w	r3, r7, #20
 800be30:	4611      	mov	r1, r2
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fb9a 	bl	800a56c <chk_lock>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800be3e:	79fb      	ldrb	r3, [r7, #7]
 800be40:	f003 031c 	and.w	r3, r3, #28
 800be44:	2b00      	cmp	r3, #0
 800be46:	d07f      	beq.n	800bf48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800be48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d017      	beq.n	800be80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800be50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be54:	2b04      	cmp	r3, #4
 800be56:	d10e      	bne.n	800be76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be58:	f7fe fbe4 	bl	800a624 <enq_lock>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d006      	beq.n	800be70 <f_open+0xc8>
 800be62:	f107 0314 	add.w	r3, r7, #20
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff facb 	bl	800b402 <dir_register>
 800be6c:	4603      	mov	r3, r0
 800be6e:	e000      	b.n	800be72 <f_open+0xca>
 800be70:	2312      	movs	r3, #18
 800be72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	f043 0308 	orr.w	r3, r3, #8
 800be7c:	71fb      	strb	r3, [r7, #7]
 800be7e:	e010      	b.n	800bea2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be80:	7ebb      	ldrb	r3, [r7, #26]
 800be82:	f003 0311 	and.w	r3, r3, #17
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <f_open+0xea>
					res = FR_DENIED;
 800be8a:	2307      	movs	r3, #7
 800be8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be90:	e007      	b.n	800bea2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <f_open+0xfa>
 800be9c:	2308      	movs	r3, #8
 800be9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d168      	bne.n	800bf7c <f_open+0x1d4>
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d063      	beq.n	800bf7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800beb4:	f7fd fee2 	bl	8009c7c <get_fattime>
 800beb8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800beba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bebc:	330e      	adds	r3, #14
 800bebe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fe fa77 	bl	800a3b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec8:	3316      	adds	r3, #22
 800beca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe fa71 	bl	800a3b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed4:	330b      	adds	r3, #11
 800bed6:	2220      	movs	r2, #32
 800bed8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bede:	4611      	mov	r1, r2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff f9fa 	bl	800b2da <ld_clust>
 800bee6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800beec:	2200      	movs	r2, #0
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff fa12 	bl	800b318 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef6:	331c      	adds	r3, #28
 800bef8:	2100      	movs	r1, #0
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe fa5a 	bl	800a3b4 <st_dword>
					fs->wflag = 1;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2201      	movs	r2, #1
 800bf04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bf06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d037      	beq.n	800bf7c <f_open+0x1d4>
						dw = fs->winsect;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bf12:	f107 0314 	add.w	r3, r7, #20
 800bf16:	2200      	movs	r2, #0
 800bf18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fe ff25 	bl	800ad6a <remove_chain>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bf26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d126      	bne.n	800bf7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe fcca 	bl	800a8cc <move_window>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf42:	3a01      	subs	r2, #1
 800bf44:	611a      	str	r2, [r3, #16]
 800bf46:	e019      	b.n	800bf7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bf48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d115      	bne.n	800bf7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bf50:	7ebb      	ldrb	r3, [r7, #26]
 800bf52:	f003 0310 	and.w	r3, r3, #16
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bf5a:	2304      	movs	r3, #4
 800bf5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf60:	e00c      	b.n	800bf7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bf62:	79fb      	ldrb	r3, [r7, #7]
 800bf64:	f003 0302 	and.w	r3, r3, #2
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d007      	beq.n	800bf7c <f_open+0x1d4>
 800bf6c:	7ebb      	ldrb	r3, [r7, #26]
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d002      	beq.n	800bf7c <f_open+0x1d4>
						res = FR_DENIED;
 800bf76:	2307      	movs	r3, #7
 800bf78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d128      	bne.n	800bfd6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	f003 0308 	and.w	r3, r3, #8
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bf9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	f023 0301 	bic.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bf14      	ite	ne
 800bfae:	2301      	movne	r3, #1
 800bfb0:	2300      	moveq	r3, #0
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	f107 0314 	add.w	r3, r7, #20
 800bfba:	4611      	mov	r1, r2
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe fb53 	bl	800a668 <inc_lock>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <f_open+0x22e>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bfd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f040 8095 	bne.w	800c10a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7ff f977 	bl	800b2da <ld_clust>
 800bfec:	4602      	mov	r2, r0
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff4:	331c      	adds	r3, #28
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fe f99e 	bl	800a338 <ld_dword>
 800bffc:	4602      	mov	r2, r0
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	88da      	ldrh	r2, [r3, #6]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	79fa      	ldrb	r2, [r7, #7]
 800c01a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2200      	movs	r2, #0
 800c020:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2200      	movs	r2, #0
 800c026:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3330      	adds	r3, #48	; 0x30
 800c032:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c036:	2100      	movs	r1, #0
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fe fa08 	bl	800a44e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c03e:	79fb      	ldrb	r3, [r7, #7]
 800c040:	f003 0320 	and.w	r3, r3, #32
 800c044:	2b00      	cmp	r3, #0
 800c046:	d060      	beq.n	800c10a <f_open+0x362>
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d05c      	beq.n	800c10a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	68da      	ldr	r2, [r3, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	895b      	ldrh	r3, [r3, #10]
 800c05c:	025b      	lsls	r3, r3, #9
 800c05e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	657b      	str	r3, [r7, #84]	; 0x54
 800c06c:	e016      	b.n	800c09c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c072:	4618      	mov	r0, r3
 800c074:	f7fe fce5 	bl	800aa42 <get_fat>
 800c078:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d802      	bhi.n	800c086 <f_open+0x2de>
 800c080:	2302      	movs	r3, #2
 800c082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08c:	d102      	bne.n	800c094 <f_open+0x2ec>
 800c08e:	2301      	movs	r3, #1
 800c090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	657b      	str	r3, [r7, #84]	; 0x54
 800c09c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d103      	bne.n	800c0ac <f_open+0x304>
 800c0a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d8e0      	bhi.n	800c06e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c0b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d127      	bne.n	800c10a <f_open+0x362>
 800c0ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d022      	beq.n	800c10a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe fc9b 	bl	800aa04 <clust2sect>
 800c0ce:	6478      	str	r0, [r7, #68]	; 0x44
 800c0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d103      	bne.n	800c0de <f_open+0x336>
						res = FR_INT_ERR;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c0dc:	e015      	b.n	800c10a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0e0:	0a5a      	lsrs	r2, r3, #9
 800c0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0e4:	441a      	add	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	7858      	ldrb	r0, [r3, #1]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6a1a      	ldr	r2, [r3, #32]
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	f7fe f8a7 	bl	800a24c <disk_read>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <f_open+0x362>
 800c104:	2301      	movs	r3, #1
 800c106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <f_open+0x370>
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c11e:	4611      	mov	r1, r2
 800c120:	4618      	mov	r0, r3
 800c122:	f7fe fa07 	bl	800a534 <unlock_fs>
 800c126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3760      	adds	r7, #96	; 0x60
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b08e      	sub	sp, #56	; 0x38
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f107 0214 	add.w	r2, r7, #20
 800c150:	4611      	mov	r1, r2
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff fd7c 	bl	800bc50 <validate>
 800c158:	4603      	mov	r3, r0
 800c15a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c15e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c162:	2b00      	cmp	r3, #0
 800c164:	d107      	bne.n	800c176 <f_read+0x44>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	7d5b      	ldrb	r3, [r3, #21]
 800c16a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c16e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c172:	2b00      	cmp	r3, #0
 800c174:	d009      	beq.n	800c18a <f_read+0x58>
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe f9d8 	bl	800a534 <unlock_fs>
 800c184:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c188:	e13d      	b.n	800c406 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	7d1b      	ldrb	r3, [r3, #20]
 800c18e:	f003 0301 	and.w	r3, r3, #1
 800c192:	2b00      	cmp	r3, #0
 800c194:	d106      	bne.n	800c1a4 <f_read+0x72>
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2107      	movs	r1, #7
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fe f9ca 	bl	800a534 <unlock_fs>
 800c1a0:	2307      	movs	r3, #7
 800c1a2:	e130      	b.n	800c406 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	f240 811c 	bls.w	800c3f2 <f_read+0x2c0>
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c1be:	e118      	b.n	800c3f2 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f040 80e4 	bne.w	800c396 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	0a5b      	lsrs	r3, r3, #9
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	8952      	ldrh	r2, [r2, #10]
 800c1d8:	3a01      	subs	r2, #1
 800c1da:	4013      	ands	r3, r2
 800c1dc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d139      	bne.n	800c258 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d103      	bne.n	800c1f4 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	633b      	str	r3, [r7, #48]	; 0x30
 800c1f2:	e013      	b.n	800c21c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d007      	beq.n	800c20c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	4619      	mov	r1, r3
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7fe feae 	bl	800af64 <clmt_clust>
 800c208:	6338      	str	r0, [r7, #48]	; 0x30
 800c20a:	e007      	b.n	800c21c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	69db      	ldr	r3, [r3, #28]
 800c212:	4619      	mov	r1, r3
 800c214:	4610      	mov	r0, r2
 800c216:	f7fe fc14 	bl	800aa42 <get_fat>
 800c21a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d809      	bhi.n	800c236 <f_read+0x104>
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2202      	movs	r2, #2
 800c226:	755a      	strb	r2, [r3, #21]
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2102      	movs	r1, #2
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe f981 	bl	800a534 <unlock_fs>
 800c232:	2302      	movs	r3, #2
 800c234:	e0e7      	b.n	800c406 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c23c:	d109      	bne.n	800c252 <f_read+0x120>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2201      	movs	r2, #1
 800c242:	755a      	strb	r2, [r3, #21]
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	2101      	movs	r1, #1
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fe f973 	bl	800a534 <unlock_fs>
 800c24e:	2301      	movs	r3, #1
 800c250:	e0d9      	b.n	800c406 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c256:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	69db      	ldr	r3, [r3, #28]
 800c25e:	4619      	mov	r1, r3
 800c260:	4610      	mov	r0, r2
 800c262:	f7fe fbcf 	bl	800aa04 <clust2sect>
 800c266:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d109      	bne.n	800c282 <f_read+0x150>
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2202      	movs	r2, #2
 800c272:	755a      	strb	r2, [r3, #21]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2102      	movs	r1, #2
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fe f95b 	bl	800a534 <unlock_fs>
 800c27e:	2302      	movs	r3, #2
 800c280:	e0c1      	b.n	800c406 <f_read+0x2d4>
			sect += csect;
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	4413      	add	r3, r2
 800c288:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	0a5b      	lsrs	r3, r3, #9
 800c28e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	2b00      	cmp	r3, #0
 800c294:	d03e      	beq.n	800c314 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c296:	69fa      	ldr	r2, [r7, #28]
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	4413      	add	r3, r2
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	8952      	ldrh	r2, [r2, #10]
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d905      	bls.n	800c2b0 <f_read+0x17e>
					cc = fs->csize - csect;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	895b      	ldrh	r3, [r3, #10]
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	7858      	ldrb	r0, [r3, #1]
 800c2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b6:	69ba      	ldr	r2, [r7, #24]
 800c2b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2ba:	f7fd ffc7 	bl	800a24c <disk_read>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d009      	beq.n	800c2d8 <f_read+0x1a6>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	755a      	strb	r2, [r3, #21]
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	2101      	movs	r1, #1
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe f930 	bl	800a534 <unlock_fs>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e096      	b.n	800c406 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	7d1b      	ldrb	r3, [r3, #20]
 800c2dc:	b25b      	sxtb	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	da14      	bge.n	800c30c <f_read+0x1da>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6a1a      	ldr	r2, [r3, #32]
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d90d      	bls.n	800c30c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6a1a      	ldr	r2, [r3, #32]
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	025b      	lsls	r3, r3, #9
 800c2fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2fc:	18d0      	adds	r0, r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3330      	adds	r3, #48	; 0x30
 800c302:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c306:	4619      	mov	r1, r3
 800c308:	f7fe f880 	bl	800a40c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	025b      	lsls	r3, r3, #9
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c312:	e05a      	b.n	800c3ca <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	69ba      	ldr	r2, [r7, #24]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d038      	beq.n	800c390 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	7d1b      	ldrb	r3, [r3, #20]
 800c322:	b25b      	sxtb	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	da1d      	bge.n	800c364 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	7858      	ldrb	r0, [r3, #1]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6a1a      	ldr	r2, [r3, #32]
 800c336:	2301      	movs	r3, #1
 800c338:	f7fd ffa8 	bl	800a28c <disk_write>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d009      	beq.n	800c356 <f_read+0x224>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2201      	movs	r2, #1
 800c346:	755a      	strb	r2, [r3, #21]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2101      	movs	r1, #1
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fe f8f1 	bl	800a534 <unlock_fs>
 800c352:	2301      	movs	r3, #1
 800c354:	e057      	b.n	800c406 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	7d1b      	ldrb	r3, [r3, #20]
 800c35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	7858      	ldrb	r0, [r3, #1]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c36e:	2301      	movs	r3, #1
 800c370:	69ba      	ldr	r2, [r7, #24]
 800c372:	f7fd ff6b 	bl	800a24c <disk_read>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d009      	beq.n	800c390 <f_read+0x25e>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2201      	movs	r2, #1
 800c380:	755a      	strb	r2, [r3, #21]
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2101      	movs	r1, #1
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe f8d4 	bl	800a534 <unlock_fs>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e03a      	b.n	800c406 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	69ba      	ldr	r2, [r7, #24]
 800c394:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c3a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d901      	bls.n	800c3b0 <f_read+0x27e>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	699b      	ldr	r3, [r3, #24]
 800c3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3be:	4413      	add	r3, r2
 800c3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3c6:	f7fe f821 	bl	800a40c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c3ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	4413      	add	r3, r2
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	699a      	ldr	r2, [r3, #24]
 800c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d8:	441a      	add	r2, r3
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	619a      	str	r2, [r3, #24]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	441a      	add	r2, r3
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f47f aee3 	bne.w	800c1c0 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fe f898 	bl	800a534 <unlock_fs>
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3738      	adds	r7, #56	; 0x38
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b08c      	sub	sp, #48	; 0x30
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2200      	movs	r2, #0
 800c424:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f107 0210 	add.w	r2, r7, #16
 800c42c:	4611      	mov	r1, r2
 800c42e:	4618      	mov	r0, r3
 800c430:	f7ff fc0e 	bl	800bc50 <validate>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d107      	bne.n	800c452 <f_write+0x44>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	7d5b      	ldrb	r3, [r3, #21]
 800c446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c44a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d009      	beq.n	800c466 <f_write+0x58>
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c458:	4611      	mov	r1, r2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fe f86a 	bl	800a534 <unlock_fs>
 800c460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c464:	e173      	b.n	800c74e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	7d1b      	ldrb	r3, [r3, #20]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d106      	bne.n	800c480 <f_write+0x72>
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	2107      	movs	r1, #7
 800c476:	4618      	mov	r0, r3
 800c478:	f7fe f85c 	bl	800a534 <unlock_fs>
 800c47c:	2307      	movs	r3, #7
 800c47e:	e166      	b.n	800c74e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	699a      	ldr	r2, [r3, #24]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	441a      	add	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	f080 814b 	bcs.w	800c728 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	43db      	mvns	r3, r3
 800c498:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c49a:	e145      	b.n	800c728 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	699b      	ldr	r3, [r3, #24]
 800c4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f040 8101 	bne.w	800c6ac <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	0a5b      	lsrs	r3, r3, #9
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	8952      	ldrh	r2, [r2, #10]
 800c4b4:	3a01      	subs	r2, #1
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d14d      	bne.n	800c55c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10c      	bne.n	800c4e2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d11a      	bne.n	800c50a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fe fcab 	bl	800ae34 <create_chain>
 800c4de:	62b8      	str	r0, [r7, #40]	; 0x28
 800c4e0:	e013      	b.n	800c50a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d007      	beq.n	800c4fa <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7fe fd37 	bl	800af64 <clmt_clust>
 800c4f6:	62b8      	str	r0, [r7, #40]	; 0x28
 800c4f8:	e007      	b.n	800c50a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f7fe fc96 	bl	800ae34 <create_chain>
 800c508:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 8110 	beq.w	800c732 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	2b01      	cmp	r3, #1
 800c516:	d109      	bne.n	800c52c <f_write+0x11e>
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2202      	movs	r2, #2
 800c51c:	755a      	strb	r2, [r3, #21]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2102      	movs	r1, #2
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe f806 	bl	800a534 <unlock_fs>
 800c528:	2302      	movs	r3, #2
 800c52a:	e110      	b.n	800c74e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c532:	d109      	bne.n	800c548 <f_write+0x13a>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2201      	movs	r2, #1
 800c538:	755a      	strb	r2, [r3, #21]
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	2101      	movs	r1, #1
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fd fff8 	bl	800a534 <unlock_fs>
 800c544:	2301      	movs	r3, #1
 800c546:	e102      	b.n	800c74e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c54c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d102      	bne.n	800c55c <f_write+0x14e>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c55a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	7d1b      	ldrb	r3, [r3, #20]
 800c560:	b25b      	sxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	da1d      	bge.n	800c5a2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	7858      	ldrb	r0, [r3, #1]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6a1a      	ldr	r2, [r3, #32]
 800c574:	2301      	movs	r3, #1
 800c576:	f7fd fe89 	bl	800a28c <disk_write>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d009      	beq.n	800c594 <f_write+0x186>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2201      	movs	r2, #1
 800c584:	755a      	strb	r2, [r3, #21]
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	2101      	movs	r1, #1
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fd ffd2 	bl	800a534 <unlock_fs>
 800c590:	2301      	movs	r3, #1
 800c592:	e0dc      	b.n	800c74e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	7d1b      	ldrb	r3, [r3, #20]
 800c598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c5a2:	693a      	ldr	r2, [r7, #16]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	f7fe fa2a 	bl	800aa04 <clust2sect>
 800c5b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d109      	bne.n	800c5cc <f_write+0x1be>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2202      	movs	r2, #2
 800c5bc:	755a      	strb	r2, [r3, #21]
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	2102      	movs	r1, #2
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fd ffb6 	bl	800a534 <unlock_fs>
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	e0c0      	b.n	800c74e <f_write+0x340>
			sect += csect;
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	4413      	add	r3, r2
 800c5d2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	0a5b      	lsrs	r3, r3, #9
 800c5d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c5da:	6a3b      	ldr	r3, [r7, #32]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d041      	beq.n	800c664 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c5e0:	69ba      	ldr	r2, [r7, #24]
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	8952      	ldrh	r2, [r2, #10]
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d905      	bls.n	800c5fa <f_write+0x1ec>
					cc = fs->csize - csect;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	895b      	ldrh	r3, [r3, #10]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	7858      	ldrb	r0, [r3, #1]
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	69f9      	ldr	r1, [r7, #28]
 800c604:	f7fd fe42 	bl	800a28c <disk_write>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d009      	beq.n	800c622 <f_write+0x214>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	755a      	strb	r2, [r3, #21]
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2101      	movs	r1, #1
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fd ff8b 	bl	800a534 <unlock_fs>
 800c61e:	2301      	movs	r3, #1
 800c620:	e095      	b.n	800c74e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6a1a      	ldr	r2, [r3, #32]
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	6a3a      	ldr	r2, [r7, #32]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d915      	bls.n	800c65c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6a1a      	ldr	r2, [r3, #32]
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	025b      	lsls	r3, r3, #9
 800c640:	69fa      	ldr	r2, [r7, #28]
 800c642:	4413      	add	r3, r2
 800c644:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c648:	4619      	mov	r1, r3
 800c64a:	f7fd fedf 	bl	800a40c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	7d1b      	ldrb	r3, [r3, #20]
 800c652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c656:	b2da      	uxtb	r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	025b      	lsls	r3, r3, #9
 800c660:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c662:	e044      	b.n	800c6ee <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d01b      	beq.n	800c6a6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	699a      	ldr	r2, [r3, #24]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c676:	429a      	cmp	r2, r3
 800c678:	d215      	bcs.n	800c6a6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	7858      	ldrb	r0, [r3, #1]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c684:	2301      	movs	r3, #1
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	f7fd fde0 	bl	800a24c <disk_read>
 800c68c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d009      	beq.n	800c6a6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2201      	movs	r2, #1
 800c696:	755a      	strb	r2, [r3, #21]
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2101      	movs	r1, #1
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fd ff49 	bl	800a534 <unlock_fs>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e053      	b.n	800c74e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	697a      	ldr	r2, [r7, #20]
 800c6aa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c6ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d901      	bls.n	800c6c6 <f_write+0x2b8>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d4:	4413      	add	r3, r2
 800c6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d8:	69f9      	ldr	r1, [r7, #28]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fd fe96 	bl	800a40c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	7d1b      	ldrb	r3, [r3, #20]
 800c6e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c6ee:	69fa      	ldr	r2, [r7, #28]
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	4413      	add	r3, r2
 800c6f4:	61fb      	str	r3, [r7, #28]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	699a      	ldr	r2, [r3, #24]
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	619a      	str	r2, [r3, #24]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	68da      	ldr	r2, [r3, #12]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	bf38      	it	cc
 800c70e:	461a      	movcc	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	60da      	str	r2, [r3, #12]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	441a      	add	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f47f aeb6 	bne.w	800c49c <f_write+0x8e>
 800c730:	e000      	b.n	800c734 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c732:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	7d1b      	ldrb	r3, [r3, #20]
 800c738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	2100      	movs	r1, #0
 800c746:	4618      	mov	r0, r3
 800c748:	f7fd fef4 	bl	800a534 <unlock_fs>
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3730      	adds	r7, #48	; 0x30
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b086      	sub	sp, #24
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f107 0208 	add.w	r2, r7, #8
 800c764:	4611      	mov	r1, r2
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff fa72 	bl	800bc50 <validate>
 800c76c:	4603      	mov	r3, r0
 800c76e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d16d      	bne.n	800c852 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7d1b      	ldrb	r3, [r3, #20]
 800c77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d067      	beq.n	800c852 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7d1b      	ldrb	r3, [r3, #20]
 800c786:	b25b      	sxtb	r3, r3
 800c788:	2b00      	cmp	r3, #0
 800c78a:	da1a      	bge.n	800c7c2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	7858      	ldrb	r0, [r3, #1]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a1a      	ldr	r2, [r3, #32]
 800c79a:	2301      	movs	r3, #1
 800c79c:	f7fd fd76 	bl	800a28c <disk_write>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d006      	beq.n	800c7b4 <f_sync+0x5e>
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2101      	movs	r1, #1
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd fec2 	bl	800a534 <unlock_fs>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e055      	b.n	800c860 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	7d1b      	ldrb	r3, [r3, #20]
 800c7b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c7c2:	f7fd fa5b 	bl	8009c7c <get_fattime>
 800c7c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	f7fe f87b 	bl	800a8cc <move_window>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d138      	bne.n	800c852 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	330b      	adds	r3, #11
 800c7ea:	781a      	ldrb	r2, [r3, #0]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	330b      	adds	r3, #11
 800c7f0:	f042 0220 	orr.w	r2, r2, #32
 800c7f4:	b2d2      	uxtb	r2, r2
 800c7f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6818      	ldr	r0, [r3, #0]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	461a      	mov	r2, r3
 800c802:	68f9      	ldr	r1, [r7, #12]
 800c804:	f7fe fd88 	bl	800b318 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f103 021c 	add.w	r2, r3, #28
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	4619      	mov	r1, r3
 800c814:	4610      	mov	r0, r2
 800c816:	f7fd fdcd 	bl	800a3b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3316      	adds	r3, #22
 800c81e:	6939      	ldr	r1, [r7, #16]
 800c820:	4618      	mov	r0, r3
 800c822:	f7fd fdc7 	bl	800a3b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	3312      	adds	r3, #18
 800c82a:	2100      	movs	r1, #0
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fd fda6 	bl	800a37e <st_word>
					fs->wflag = 1;
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2201      	movs	r2, #1
 800c836:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe f874 	bl	800a928 <sync_fs>
 800c840:	4603      	mov	r3, r0
 800c842:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	7d1b      	ldrb	r3, [r3, #20]
 800c848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	7dfa      	ldrb	r2, [r7, #23]
 800c856:	4611      	mov	r1, r2
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fd fe6b 	bl	800a534 <unlock_fs>
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff ff70 	bl	800c756 <f_sync>
 800c876:	4603      	mov	r3, r0
 800c878:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d11d      	bne.n	800c8bc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f107 0208 	add.w	r2, r7, #8
 800c886:	4611      	mov	r1, r2
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff f9e1 	bl	800bc50 <validate>
 800c88e:	4603      	mov	r3, r0
 800c890:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c892:	7bfb      	ldrb	r3, [r7, #15]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d111      	bne.n	800c8bc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7fd ff71 	bl	800a784 <dec_lock>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c8a6:	7bfb      	ldrb	r3, [r7, #15]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fd fe3c 	bl	800a534 <unlock_fs>
#endif
		}
	}
	return res;
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c8de:	4b1f      	ldr	r3, [pc, #124]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c8e0:	7a5b      	ldrb	r3, [r3, #9]
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d131      	bne.n	800c94c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c8e8:	4b1c      	ldr	r3, [pc, #112]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c8ea:	7a5b      	ldrb	r3, [r3, #9]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	4b1a      	ldr	r3, [pc, #104]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c8f6:	4b19      	ldr	r3, [pc, #100]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c8f8:	7a5b      	ldrb	r3, [r3, #9]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	4a17      	ldr	r2, [pc, #92]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	4413      	add	r3, r2
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c906:	4b15      	ldr	r3, [pc, #84]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c908:	7a5b      	ldrb	r3, [r3, #9]
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	461a      	mov	r2, r3
 800c90e:	4b13      	ldr	r3, [pc, #76]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c910:	4413      	add	r3, r2
 800c912:	79fa      	ldrb	r2, [r7, #7]
 800c914:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c916:	4b11      	ldr	r3, [pc, #68]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c918:	7a5b      	ldrb	r3, [r3, #9]
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	b2d1      	uxtb	r1, r2
 800c920:	4a0e      	ldr	r2, [pc, #56]	; (800c95c <FATFS_LinkDriverEx+0x94>)
 800c922:	7251      	strb	r1, [r2, #9]
 800c924:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c926:	7dbb      	ldrb	r3, [r7, #22]
 800c928:	3330      	adds	r3, #48	; 0x30
 800c92a:	b2da      	uxtb	r2, r3
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	3301      	adds	r3, #1
 800c934:	223a      	movs	r2, #58	; 0x3a
 800c936:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	3302      	adds	r3, #2
 800c93c:	222f      	movs	r2, #47	; 0x2f
 800c93e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	3303      	adds	r3, #3
 800c944:	2200      	movs	r2, #0
 800c946:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	20000f9c 	.word	0x20000f9c

0800c960 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c96a:	2200      	movs	r2, #0
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff ffaa 	bl	800c8c8 <FATFS_LinkDriverEx>
 800c974:	4603      	mov	r3, r0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b086      	sub	sp, #24
 800c982:	af00      	add	r7, sp, #0
 800c984:	4603      	mov	r3, r0
 800c986:	6039      	str	r1, [r7, #0]
 800c988:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
 800c98e:	2300      	movs	r3, #0
 800c990:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c992:	f107 030c 	add.w	r3, r7, #12
 800c996:	2101      	movs	r1, #1
 800c998:	4618      	mov	r0, r3
 800c99a:	f000 f8e9 	bl	800cb70 <osSemaphoreCreate>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	bf14      	ite	ne
 800c9ac:	2301      	movne	r3, #1
 800c9ae:	2300      	moveq	r3, #0
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	617b      	str	r3, [r7, #20]

    return ret;
 800c9b4:	697b      	ldr	r3, [r7, #20]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b082      	sub	sp, #8
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 f988 	bl	800ccdc <osSemaphoreDelete>
#endif
    return 1;
 800c9cc:	2301      	movs	r3, #1
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c9e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f8f4 	bl	800cbd4 <osSemaphoreWait>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f931 	bl	800cc70 <osSemaphoreRelease>
#endif
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b085      	sub	sp, #20
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ca20:	2300      	movs	r3, #0
 800ca22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ca24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca28:	2b84      	cmp	r3, #132	; 0x84
 800ca2a:	d005      	beq.n	800ca38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ca2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4413      	add	r3, r2
 800ca34:	3303      	adds	r3, #3
 800ca36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ca38:	68fb      	ldr	r3, [r7, #12]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca4c:	f3ef 8305 	mrs	r3, IPSR
 800ca50:	607b      	str	r3, [r7, #4]
  return(result);
 800ca52:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bf14      	ite	ne
 800ca58:	2301      	movne	r3, #1
 800ca5a:	2300      	moveq	r3, #0
 800ca5c:	b2db      	uxtb	r3, r3
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	370c      	adds	r7, #12
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr

0800ca6a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ca6e:	f001 fda1 	bl	800e5b4 <vTaskStartScheduler>
  
  return osOK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800ca7c:	f002 f9f6 	bl	800ee6c <xTaskGetSchedulerState>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d101      	bne.n	800ca8a <osKernelRunning+0x12>
    return 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	e000      	b.n	800ca8c <osKernelRunning+0x14>
  else
    return 1;
 800ca8a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ca94:	f7ff ffd7 	bl	800ca46 <inHandlerMode>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ca9e:	f001 febf 	bl	800e820 <xTaskGetTickCountFromISR>
 800caa2:	4603      	mov	r3, r0
 800caa4:	e002      	b.n	800caac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800caa6:	f001 feab 	bl	800e800 <xTaskGetTickCount>
 800caaa:	4603      	mov	r3, r0
  }
}
 800caac:	4618      	mov	r0, r3
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	b089      	sub	sp, #36	; 0x24
 800cab4:	af04      	add	r7, sp, #16
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d020      	beq.n	800cb04 <osThreadCreate+0x54>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d01c      	beq.n	800cb04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685c      	ldr	r4, [r3, #4]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681d      	ldr	r5, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	691e      	ldr	r6, [r3, #16]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff ff9a 	bl	800ca16 <makeFreeRtosPriority>
 800cae2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800caec:	9202      	str	r2, [sp, #8]
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	9100      	str	r1, [sp, #0]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	4632      	mov	r2, r6
 800caf6:	4629      	mov	r1, r5
 800caf8:	4620      	mov	r0, r4
 800cafa:	f001 fab1 	bl	800e060 <xTaskCreateStatic>
 800cafe:	4603      	mov	r3, r0
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	e01c      	b.n	800cb3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	685c      	ldr	r4, [r3, #4]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb10:	b29e      	uxth	r6, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff ff7c 	bl	800ca16 <makeFreeRtosPriority>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	f107 030c 	add.w	r3, r7, #12
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	9200      	str	r2, [sp, #0]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f001 faf3 	bl	800e11a <xTaskCreate>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d001      	beq.n	800cb3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e000      	b.n	800cb40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3714      	adds	r7, #20
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <osDelay+0x16>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	e000      	b.n	800cb60 <osDelay+0x18>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	4618      	mov	r0, r3
 800cb62:	f001 fcef 	bl	800e544 <vTaskDelay>
  
  return osOK;
 800cb66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af02      	add	r7, sp, #8
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00f      	beq.n	800cba2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d10a      	bne.n	800cb9e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	2203      	movs	r2, #3
 800cb8e:	9200      	str	r2, [sp, #0]
 800cb90:	2200      	movs	r2, #0
 800cb92:	2100      	movs	r1, #0
 800cb94:	2001      	movs	r0, #1
 800cb96:	f000 faad 	bl	800d0f4 <xQueueGenericCreateStatic>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	e016      	b.n	800cbcc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e014      	b.n	800cbcc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d110      	bne.n	800cbca <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800cba8:	2203      	movs	r2, #3
 800cbaa:	2100      	movs	r1, #0
 800cbac:	2001      	movs	r0, #1
 800cbae:	f000 fb19 	bl	800d1e4 <xQueueGenericCreate>
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d005      	beq.n	800cbc6 <osSemaphoreCreate+0x56>
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f000 fb6f 	bl	800d2a4 <xQueueGenericSend>
      return sema;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	e000      	b.n	800cbcc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800cbca:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d101      	bne.n	800cbec <osSemaphoreWait+0x18>
    return osErrorParameter;
 800cbe8:	2380      	movs	r3, #128	; 0x80
 800cbea:	e03a      	b.n	800cc62 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf6:	d103      	bne.n	800cc00 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800cbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfc:	60fb      	str	r3, [r7, #12]
 800cbfe:	e009      	b.n	800cc14 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d006      	beq.n	800cc14 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <osSemaphoreWait+0x40>
      ticks = 1;
 800cc10:	2301      	movs	r3, #1
 800cc12:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cc14:	f7ff ff17 	bl	800ca46 <inHandlerMode>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d017      	beq.n	800cc4e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cc1e:	f107 0308 	add.w	r3, r7, #8
 800cc22:	461a      	mov	r2, r3
 800cc24:	2100      	movs	r1, #0
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fffe 	bl	800dc28 <xQueueReceiveFromISR>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d001      	beq.n	800cc36 <osSemaphoreWait+0x62>
      return osErrorOS;
 800cc32:	23ff      	movs	r3, #255	; 0xff
 800cc34:	e015      	b.n	800cc62 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d011      	beq.n	800cc60 <osSemaphoreWait+0x8c>
 800cc3c:	4b0b      	ldr	r3, [pc, #44]	; (800cc6c <osSemaphoreWait+0x98>)
 800cc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc42:	601a      	str	r2, [r3, #0]
 800cc44:	f3bf 8f4f 	dsb	sy
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	e008      	b.n	800cc60 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800cc4e:	68f9      	ldr	r1, [r7, #12]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fead 	bl	800d9b0 <xQueueSemaphoreTake>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d001      	beq.n	800cc60 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800cc5c:	23ff      	movs	r3, #255	; 0xff
 800cc5e:	e000      	b.n	800cc62 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	e000ed04 	.word	0xe000ed04

0800cc70 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800cc80:	f7ff fee1 	bl	800ca46 <inHandlerMode>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d016      	beq.n	800ccb8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cc8a:	f107 0308 	add.w	r3, r7, #8
 800cc8e:	4619      	mov	r1, r3
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fcdc 	bl	800d64e <xQueueGiveFromISR>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d001      	beq.n	800cca0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800cc9c:	23ff      	movs	r3, #255	; 0xff
 800cc9e:	e017      	b.n	800ccd0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d013      	beq.n	800ccce <osSemaphoreRelease+0x5e>
 800cca6:	4b0c      	ldr	r3, [pc, #48]	; (800ccd8 <osSemaphoreRelease+0x68>)
 800cca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	e00a      	b.n	800ccce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2200      	movs	r2, #0
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 faf0 	bl	800d2a4 <xQueueGenericSend>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d001      	beq.n	800ccce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ccca:	23ff      	movs	r3, #255	; 0xff
 800cccc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ccce:	68fb      	ldr	r3, [r7, #12]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	e000ed04 	.word	0xe000ed04

0800ccdc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cce4:	f7ff feaf 	bl	800ca46 <inHandlerMode>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ccee:	2382      	movs	r3, #130	; 0x82
 800ccf0:	e003      	b.n	800ccfa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f001 f836 	bl	800dd64 <vQueueDelete>

  return osOK; 
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cd02:	b590      	push	{r4, r7, lr}
 800cd04:	b085      	sub	sp, #20
 800cd06:	af02      	add	r7, sp, #8
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d011      	beq.n	800cd38 <osMessageCreate+0x36>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00d      	beq.n	800cd38 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6818      	ldr	r0, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6859      	ldr	r1, [r3, #4]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	689a      	ldr	r2, [r3, #8]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	2400      	movs	r4, #0
 800cd2e:	9400      	str	r4, [sp, #0]
 800cd30:	f000 f9e0 	bl	800d0f4 <xQueueGenericCreateStatic>
 800cd34:	4603      	mov	r3, r0
 800cd36:	e008      	b.n	800cd4a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6818      	ldr	r0, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	4619      	mov	r1, r3
 800cd44:	f000 fa4e 	bl	800d1e4 <xQueueGenericCreate>
 800cd48:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd90      	pop	{r4, r7, pc}
	...

0800cd54 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cd60:	2300      	movs	r3, #0
 800cd62:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <osMessagePut+0x1e>
    ticks = 1;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cd72:	f7ff fe68 	bl	800ca46 <inHandlerMode>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d018      	beq.n	800cdae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cd7c:	f107 0210 	add.w	r2, r7, #16
 800cd80:	f107 0108 	add.w	r1, r7, #8
 800cd84:	2300      	movs	r3, #0
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f000 fbb2 	bl	800d4f0 <xQueueGenericSendFromISR>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d001      	beq.n	800cd96 <osMessagePut+0x42>
      return osErrorOS;
 800cd92:	23ff      	movs	r3, #255	; 0xff
 800cd94:	e018      	b.n	800cdc8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d014      	beq.n	800cdc6 <osMessagePut+0x72>
 800cd9c:	4b0c      	ldr	r3, [pc, #48]	; (800cdd0 <osMessagePut+0x7c>)
 800cd9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	e00b      	b.n	800cdc6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cdae:	f107 0108 	add.w	r1, r7, #8
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	697a      	ldr	r2, [r7, #20]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f000 fa74 	bl	800d2a4 <xQueueGenericSend>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d001      	beq.n	800cdc6 <osMessagePut+0x72>
      return osErrorOS;
 800cdc2:	23ff      	movs	r3, #255	; 0xff
 800cdc4:	e000      	b.n	800cdc8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	e000ed04 	.word	0xe000ed04

0800cdd4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cdd4:	b590      	push	{r4, r7, lr}
 800cdd6:	b08b      	sub	sp, #44	; 0x2c
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10a      	bne.n	800ce04 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cdee:	2380      	movs	r3, #128	; 0x80
 800cdf0:	617b      	str	r3, [r7, #20]
    return event;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	461c      	mov	r4, r3
 800cdf6:	f107 0314 	add.w	r3, r7, #20
 800cdfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cdfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ce02:	e054      	b.n	800ceae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ce04:	2300      	movs	r3, #0
 800ce06:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce12:	d103      	bne.n	800ce1c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ce14:	f04f 33ff 	mov.w	r3, #4294967295
 800ce18:	627b      	str	r3, [r7, #36]	; 0x24
 800ce1a:	e009      	b.n	800ce30 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d006      	beq.n	800ce30 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ce26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <osMessageGet+0x5c>
      ticks = 1;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ce30:	f7ff fe09 	bl	800ca46 <inHandlerMode>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d01c      	beq.n	800ce74 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ce3a:	f107 0220 	add.w	r2, r7, #32
 800ce3e:	f107 0314 	add.w	r3, r7, #20
 800ce42:	3304      	adds	r3, #4
 800ce44:	4619      	mov	r1, r3
 800ce46:	68b8      	ldr	r0, [r7, #8]
 800ce48:	f000 feee 	bl	800dc28 <xQueueReceiveFromISR>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d102      	bne.n	800ce58 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ce52:	2310      	movs	r3, #16
 800ce54:	617b      	str	r3, [r7, #20]
 800ce56:	e001      	b.n	800ce5c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ce5c:	6a3b      	ldr	r3, [r7, #32]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d01d      	beq.n	800ce9e <osMessageGet+0xca>
 800ce62:	4b15      	ldr	r3, [pc, #84]	; (800ceb8 <osMessageGet+0xe4>)
 800ce64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	e014      	b.n	800ce9e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ce74:	f107 0314 	add.w	r3, r7, #20
 800ce78:	3304      	adds	r3, #4
 800ce7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	68b8      	ldr	r0, [r7, #8]
 800ce80:	f000 fc86 	bl	800d790 <xQueueReceive>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d102      	bne.n	800ce90 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ce8a:	2310      	movs	r3, #16
 800ce8c:	617b      	str	r3, [r7, #20]
 800ce8e:	e006      	b.n	800ce9e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d101      	bne.n	800ce9a <osMessageGet+0xc6>
 800ce96:	2300      	movs	r3, #0
 800ce98:	e000      	b.n	800ce9c <osMessageGet+0xc8>
 800ce9a:	2340      	movs	r3, #64	; 0x40
 800ce9c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	461c      	mov	r4, r3
 800cea2:	f107 0314 	add.w	r3, r7, #20
 800cea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ceaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	372c      	adds	r7, #44	; 0x2c
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd90      	pop	{r4, r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f103 0208 	add.w	r2, r3, #8
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f04f 32ff 	mov.w	r2, #4294967295
 800ced4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f103 0208 	add.w	r2, r3, #8
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f103 0208 	add.w	r2, r3, #8
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cef0:	bf00      	nop
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf0a:	bf00      	nop
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf16:	b480      	push	{r7}
 800cf18:	b085      	sub	sp, #20
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	689a      	ldr	r2, [r3, #8]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	683a      	ldr	r2, [r7, #0]
 800cf3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	1c5a      	adds	r2, r3, #1
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	601a      	str	r2, [r3, #0]
}
 800cf52:	bf00      	nop
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b085      	sub	sp, #20
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf74:	d103      	bne.n	800cf7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	60fb      	str	r3, [r7, #12]
 800cf7c:	e00c      	b.n	800cf98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3308      	adds	r3, #8
 800cf82:	60fb      	str	r3, [r7, #12]
 800cf84:	e002      	b.n	800cf8c <vListInsert+0x2e>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	60fb      	str	r3, [r7, #12]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d2f6      	bcs.n	800cf86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	683a      	ldr	r2, [r7, #0]
 800cfa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	601a      	str	r2, [r3, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b085      	sub	sp, #20
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	6892      	ldr	r2, [r2, #8]
 800cfe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	6852      	ldr	r2, [r2, #4]
 800cff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d103      	bne.n	800d004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	689a      	ldr	r2, [r3, #8]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	1e5a      	subs	r2, r3, #1
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d10a      	bne.n	800d04e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03c:	f383 8811 	msr	BASEPRI, r3
 800d040:	f3bf 8f6f 	isb	sy
 800d044:	f3bf 8f4f 	dsb	sy
 800d048:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d04a:	bf00      	nop
 800d04c:	e7fe      	b.n	800d04c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d04e:	f002 fa79 	bl	800f544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d05a:	68f9      	ldr	r1, [r7, #12]
 800d05c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d05e:	fb01 f303 	mul.w	r3, r1, r3
 800d062:	441a      	add	r2, r3
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2200      	movs	r2, #0
 800d06c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07e:	3b01      	subs	r3, #1
 800d080:	68f9      	ldr	r1, [r7, #12]
 800d082:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d084:	fb01 f303 	mul.w	r3, r1, r3
 800d088:	441a      	add	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	22ff      	movs	r2, #255	; 0xff
 800d092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	22ff      	movs	r2, #255	; 0xff
 800d09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d114      	bne.n	800d0ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d01a      	beq.n	800d0e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3310      	adds	r3, #16
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f001 fd17 	bl	800eae4 <xTaskRemoveFromEventList>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d012      	beq.n	800d0e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d0bc:	4b0c      	ldr	r3, [pc, #48]	; (800d0f0 <xQueueGenericReset+0xcc>)
 800d0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	e009      	b.n	800d0e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3310      	adds	r3, #16
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7ff fef2 	bl	800cebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3324      	adds	r3, #36	; 0x24
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff feed 	bl	800cebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d0e2:	f002 fa5f 	bl	800f5a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d0e6:	2301      	movs	r3, #1
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	e000ed04 	.word	0xe000ed04

0800d0f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b08e      	sub	sp, #56	; 0x38
 800d0f8:	af02      	add	r7, sp, #8
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
 800d100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10a      	bne.n	800d13a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d136:	bf00      	nop
 800d138:	e7fe      	b.n	800d138 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <xQueueGenericCreateStatic+0x52>
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d001      	beq.n	800d14a <xQueueGenericCreateStatic+0x56>
 800d146:	2301      	movs	r3, #1
 800d148:	e000      	b.n	800d14c <xQueueGenericCreateStatic+0x58>
 800d14a:	2300      	movs	r3, #0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10a      	bne.n	800d166 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	623b      	str	r3, [r7, #32]
}
 800d162:	bf00      	nop
 800d164:	e7fe      	b.n	800d164 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d102      	bne.n	800d172 <xQueueGenericCreateStatic+0x7e>
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <xQueueGenericCreateStatic+0x82>
 800d172:	2301      	movs	r3, #1
 800d174:	e000      	b.n	800d178 <xQueueGenericCreateStatic+0x84>
 800d176:	2300      	movs	r3, #0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10a      	bne.n	800d192 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	61fb      	str	r3, [r7, #28]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d192:	2348      	movs	r3, #72	; 0x48
 800d194:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	2b48      	cmp	r3, #72	; 0x48
 800d19a:	d00a      	beq.n	800d1b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	61bb      	str	r3, [r7, #24]
}
 800d1ae:	bf00      	nop
 800d1b0:	e7fe      	b.n	800d1b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d1b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00d      	beq.n	800d1da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d1c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	68b9      	ldr	r1, [r7, #8]
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f000 f83f 	bl	800d258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3730      	adds	r7, #48	; 0x30
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08a      	sub	sp, #40	; 0x28
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10a      	bne.n	800d20e <xQueueGenericCreate+0x2a>
	__asm volatile
 800d1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	613b      	str	r3, [r7, #16]
}
 800d20a:	bf00      	nop
 800d20c:	e7fe      	b.n	800d20c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	68ba      	ldr	r2, [r7, #8]
 800d212:	fb02 f303 	mul.w	r3, r2, r3
 800d216:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	3348      	adds	r3, #72	; 0x48
 800d21c:	4618      	mov	r0, r3
 800d21e:	f002 fab3 	bl	800f788 <pvPortMalloc>
 800d222:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d011      	beq.n	800d24e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	3348      	adds	r3, #72	; 0x48
 800d232:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d23c:	79fa      	ldrb	r2, [r7, #7]
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	4613      	mov	r3, r2
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	68f8      	ldr	r0, [r7, #12]
 800d24a:	f000 f805 	bl	800d258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d24e:	69bb      	ldr	r3, [r7, #24]
	}
 800d250:	4618      	mov	r0, r3
 800d252:	3720      	adds	r7, #32
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d103      	bne.n	800d274 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	69ba      	ldr	r2, [r7, #24]
 800d270:	601a      	str	r2, [r3, #0]
 800d272:	e002      	b.n	800d27a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	68ba      	ldr	r2, [r7, #8]
 800d284:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d286:	2101      	movs	r1, #1
 800d288:	69b8      	ldr	r0, [r7, #24]
 800d28a:	f7ff fecb 	bl	800d024 <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800d28e:	78fb      	ldrb	r3, [r7, #3]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	68f9      	ldr	r1, [r7, #12]
 800d294:	2073      	movs	r0, #115	; 0x73
 800d296:	f003 f9c5 	bl	8010624 <SEGGER_SYSVIEW_RecordU32x3>
}
 800d29a:	bf00      	nop
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b090      	sub	sp, #64	; 0x40
 800d2a8:	af02      	add	r7, sp, #8
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
 800d2b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10a      	bne.n	800d2d6 <xQueueGenericSend+0x32>
	__asm volatile
 800d2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c4:	f383 8811 	msr	BASEPRI, r3
 800d2c8:	f3bf 8f6f 	isb	sy
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2d2:	bf00      	nop
 800d2d4:	e7fe      	b.n	800d2d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d103      	bne.n	800d2e4 <xQueueGenericSend+0x40>
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d101      	bne.n	800d2e8 <xQueueGenericSend+0x44>
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e000      	b.n	800d2ea <xQueueGenericSend+0x46>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <xQueueGenericSend+0x60>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b02      	cmp	r3, #2
 800d308:	d103      	bne.n	800d312 <xQueueGenericSend+0x6e>
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d101      	bne.n	800d316 <xQueueGenericSend+0x72>
 800d312:	2301      	movs	r3, #1
 800d314:	e000      	b.n	800d318 <xQueueGenericSend+0x74>
 800d316:	2300      	movs	r3, #0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <xQueueGenericSend+0x8e>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	623b      	str	r3, [r7, #32]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d332:	f001 fd9b 	bl	800ee6c <xTaskGetSchedulerState>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <xQueueGenericSend+0x9e>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <xQueueGenericSend+0xa2>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <xQueueGenericSend+0xa4>
 800d346:	2300      	movs	r3, #0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10a      	bne.n	800d362 <xQueueGenericSend+0xbe>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	61fb      	str	r3, [r7, #28]
}
 800d35e:	bf00      	nop
 800d360:	e7fe      	b.n	800d360 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d362:	f002 f8ef 	bl	800f544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d36e:	429a      	cmp	r2, r3
 800d370:	d302      	bcc.n	800d378 <xQueueGenericSend+0xd4>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d136      	bne.n	800d3e6 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	4618      	mov	r0, r3
 800d37c:	f003 fe04 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	6879      	ldr	r1, [r7, #4]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	460b      	mov	r3, r1
 800d38a:	4601      	mov	r1, r0
 800d38c:	205a      	movs	r0, #90	; 0x5a
 800d38e:	f003 f9bf 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	68b9      	ldr	r1, [r7, #8]
 800d396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d398:	f000 fd28 	bl	800ddec <prvCopyDataToQueue>
 800d39c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d010      	beq.n	800d3c8 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	3324      	adds	r3, #36	; 0x24
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f001 fb9a 	bl	800eae4 <xTaskRemoveFromEventList>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d013      	beq.n	800d3de <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d3b6:	4b4d      	ldr	r3, [pc, #308]	; (800d4ec <xQueueGenericSend+0x248>)
 800d3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	f3bf 8f4f 	dsb	sy
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	e00a      	b.n	800d3de <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d007      	beq.n	800d3de <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3ce:	4b47      	ldr	r3, [pc, #284]	; (800d4ec <xQueueGenericSend+0x248>)
 800d3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d3de:	f002 f8e1 	bl	800f5a4 <vPortExitCritical>
				return pdPASS;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e07d      	b.n	800d4e2 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d110      	bne.n	800d40e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3ec:	f002 f8da 	bl	800f5a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f003 fdc8 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	6879      	ldr	r1, [r7, #4]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	460b      	mov	r3, r1
 800d402:	4601      	mov	r1, r0
 800d404:	205a      	movs	r0, #90	; 0x5a
 800d406:	f003 f983 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	e069      	b.n	800d4e2 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d410:	2b00      	cmp	r3, #0
 800d412:	d106      	bne.n	800d422 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d414:	f107 0314 	add.w	r3, r7, #20
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 fbc9 	bl	800ebb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d41e:	2301      	movs	r3, #1
 800d420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d422:	f002 f8bf 	bl	800f5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d426:	f001 f93d 	bl	800e6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d42a:	f002 f88b 	bl	800f544 <vPortEnterCritical>
 800d42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d434:	b25b      	sxtb	r3, r3
 800d436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43a:	d103      	bne.n	800d444 <xQueueGenericSend+0x1a0>
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d44a:	b25b      	sxtb	r3, r3
 800d44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d450:	d103      	bne.n	800d45a <xQueueGenericSend+0x1b6>
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d45a:	f002 f8a3 	bl	800f5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d45e:	1d3a      	adds	r2, r7, #4
 800d460:	f107 0314 	add.w	r3, r7, #20
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f001 fbb8 	bl	800ebdc <xTaskCheckForTimeOut>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d124      	bne.n	800d4bc <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d474:	f000 fdb2 	bl	800dfdc <prvIsQueueFull>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d018      	beq.n	800d4b0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d480:	3310      	adds	r3, #16
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	4611      	mov	r1, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f001 fb08 	bl	800ea9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d48e:	f000 fd3d 	bl	800df0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d492:	f001 f915 	bl	800e6c0 <xTaskResumeAll>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f47f af62 	bne.w	800d362 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <xQueueGenericSend+0x248>)
 800d4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	e758      	b.n	800d362 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d4b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4b2:	f000 fd2b 	bl	800df0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4b6:	f001 f903 	bl	800e6c0 <xTaskResumeAll>
 800d4ba:	e752      	b.n	800d362 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4be:	f000 fd25 	bl	800df0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4c2:	f001 f8fd 	bl	800e6c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f003 fd5d 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4601      	mov	r1, r0
 800d4da:	205a      	movs	r0, #90	; 0x5a
 800d4dc:	f003 f918 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800d4e0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3738      	adds	r7, #56	; 0x38
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	e000ed04 	.word	0xe000ed04

0800d4f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b090      	sub	sp, #64	; 0x40
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
 800d4fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d103      	bne.n	800d52c <xQueueGenericSendFromISR+0x3c>
 800d524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d101      	bne.n	800d530 <xQueueGenericSendFromISR+0x40>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e000      	b.n	800d532 <xQueueGenericSendFromISR+0x42>
 800d530:	2300      	movs	r3, #0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10a      	bne.n	800d54c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d103      	bne.n	800d55a <xQueueGenericSendFromISR+0x6a>
 800d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d556:	2b01      	cmp	r3, #1
 800d558:	d101      	bne.n	800d55e <xQueueGenericSendFromISR+0x6e>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e000      	b.n	800d560 <xQueueGenericSendFromISR+0x70>
 800d55e:	2300      	movs	r3, #0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10a      	bne.n	800d57a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	623b      	str	r3, [r7, #32]
}
 800d576:	bf00      	nop
 800d578:	e7fe      	b.n	800d578 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d57a:	f002 f8c5 	bl	800f708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d57e:	f3ef 8211 	mrs	r2, BASEPRI
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	61fa      	str	r2, [r7, #28]
 800d594:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d596:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d598:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d302      	bcc.n	800d5ac <xQueueGenericSendFromISR+0xbc>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d139      	bne.n	800d620 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ba:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f003 fce2 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	2060      	movs	r0, #96	; 0x60
 800d5cc:	f002 ffd0 	bl	8010570 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5d6:	f000 fc09 	bl	800ddec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d5da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e2:	d112      	bne.n	800d60a <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d016      	beq.n	800d61a <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ee:	3324      	adds	r3, #36	; 0x24
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f001 fa77 	bl	800eae4 <xTaskRemoveFromEventList>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00e      	beq.n	800d61a <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00b      	beq.n	800d61a <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	601a      	str	r2, [r3, #0]
 800d608:	e007      	b.n	800d61a <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d60a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d60e:	3301      	adds	r3, #1
 800d610:	b2db      	uxtb	r3, r3
 800d612:	b25a      	sxtb	r2, r3
 800d614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d61a:	2301      	movs	r3, #1
 800d61c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d61e:	e00b      	b.n	800d638 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d622:	4618      	mov	r0, r3
 800d624:	f003 fcb0 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d628:	4601      	mov	r1, r0
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	461a      	mov	r2, r3
 800d62e:	2060      	movs	r0, #96	; 0x60
 800d630:	f002 ff9e 	bl	8010570 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800d634:	2300      	movs	r3, #0
 800d636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d642:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d646:	4618      	mov	r0, r3
 800d648:	3740      	adds	r7, #64	; 0x40
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b08e      	sub	sp, #56	; 0x38
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
 800d656:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10a      	bne.n	800d678 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	623b      	str	r3, [r7, #32]
}
 800d674:	bf00      	nop
 800d676:	e7fe      	b.n	800d676 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00a      	beq.n	800d696 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	61fb      	str	r3, [r7, #28]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d103      	bne.n	800d6a6 <xQueueGiveFromISR+0x58>
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <xQueueGiveFromISR+0x5c>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	e000      	b.n	800d6ac <xQueueGiveFromISR+0x5e>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10a      	bne.n	800d6c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	61bb      	str	r3, [r7, #24]
}
 800d6c2:	bf00      	nop
 800d6c4:	e7fe      	b.n	800d6c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6c6:	f002 f81f 	bl	800f708 <vPortValidateInterruptPriority>
	__asm volatile
 800d6ca:	f3ef 8211 	mrs	r2, BASEPRI
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	617a      	str	r2, [r7, #20]
 800d6e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d6e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d235      	bcs.n	800d762 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800d700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d702:	4618      	mov	r0, r3
 800d704:	f003 fc40 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d708:	4601      	mov	r1, r0
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	461a      	mov	r2, r3
 800d70e:	2060      	movs	r0, #96	; 0x60
 800d710:	f002 ff2e 	bl	8010570 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d71c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d724:	d112      	bne.n	800d74c <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d016      	beq.n	800d75c <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	3324      	adds	r3, #36	; 0x24
 800d732:	4618      	mov	r0, r3
 800d734:	f001 f9d6 	bl	800eae4 <xTaskRemoveFromEventList>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00e      	beq.n	800d75c <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00b      	beq.n	800d75c <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	2201      	movs	r2, #1
 800d748:	601a      	str	r2, [r3, #0]
 800d74a:	e007      	b.n	800d75c <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d750:	3301      	adds	r3, #1
 800d752:	b2db      	uxtb	r3, r3
 800d754:	b25a      	sxtb	r2, r3
 800d756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d75c:	2301      	movs	r3, #1
 800d75e:	637b      	str	r3, [r7, #52]	; 0x34
 800d760:	e00b      	b.n	800d77a <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800d762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d764:	4618      	mov	r0, r3
 800d766:	f003 fc0f 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d76a:	4601      	mov	r1, r0
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	2060      	movs	r0, #96	; 0x60
 800d772:	f002 fefd 	bl	8010570 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800d776:	2300      	movs	r3, #0
 800d778:	637b      	str	r3, [r7, #52]	; 0x34
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f383 8811 	msr	BASEPRI, r3
}
 800d784:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3738      	adds	r7, #56	; 0x38
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b08f      	sub	sp, #60	; 0x3c
 800d794:	af02      	add	r7, sp, #8
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d79c:	2300      	movs	r3, #0
 800d79e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10a      	bne.n	800d7c0 <xQueueReceive+0x30>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ae:	f383 8811 	msr	BASEPRI, r3
 800d7b2:	f3bf 8f6f 	isb	sy
 800d7b6:	f3bf 8f4f 	dsb	sy
 800d7ba:	623b      	str	r3, [r7, #32]
}
 800d7bc:	bf00      	nop
 800d7be:	e7fe      	b.n	800d7be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d103      	bne.n	800d7ce <xQueueReceive+0x3e>
 800d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <xQueueReceive+0x42>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e000      	b.n	800d7d4 <xQueueReceive+0x44>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10a      	bne.n	800d7ee <xQueueReceive+0x5e>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	61fb      	str	r3, [r7, #28]
}
 800d7ea:	bf00      	nop
 800d7ec:	e7fe      	b.n	800d7ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7ee:	f001 fb3d 	bl	800ee6c <xTaskGetSchedulerState>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <xQueueReceive+0x6e>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <xQueueReceive+0x72>
 800d7fe:	2301      	movs	r3, #1
 800d800:	e000      	b.n	800d804 <xQueueReceive+0x74>
 800d802:	2300      	movs	r3, #0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10a      	bne.n	800d81e <xQueueReceive+0x8e>
	__asm volatile
 800d808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	61bb      	str	r3, [r7, #24]
}
 800d81a:	bf00      	nop
 800d81c:	e7fe      	b.n	800d81c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d81e:	f001 fe91 	bl	800f544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d826:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d02f      	beq.n	800d88e <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d82e:	68b9      	ldr	r1, [r7, #8]
 800d830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d832:	f000 fb45 	bl	800dec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800d836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d838:	4618      	mov	r0, r3
 800d83a:	f003 fba5 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d83e:	4604      	mov	r4, r0
 800d840:	2000      	movs	r0, #0
 800d842:	f003 fba1 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d846:	4602      	mov	r2, r0
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2101      	movs	r1, #1
 800d84c:	9100      	str	r1, [sp, #0]
 800d84e:	4621      	mov	r1, r4
 800d850:	205c      	movs	r0, #92	; 0x5c
 800d852:	f002 ff5d 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	1e5a      	subs	r2, r3, #1
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00f      	beq.n	800d886 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d868:	3310      	adds	r3, #16
 800d86a:	4618      	mov	r0, r3
 800d86c:	f001 f93a 	bl	800eae4 <xTaskRemoveFromEventList>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d007      	beq.n	800d886 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d876:	4b4d      	ldr	r3, [pc, #308]	; (800d9ac <xQueueReceive+0x21c>)
 800d878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d886:	f001 fe8d 	bl	800f5a4 <vPortExitCritical>
				return pdPASS;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e08a      	b.n	800d9a4 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d113      	bne.n	800d8bc <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d894:	f001 fe86 	bl	800f5a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	4618      	mov	r0, r3
 800d89c:	f003 fb74 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f003 fb70 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	9100      	str	r1, [sp, #0]
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	205c      	movs	r0, #92	; 0x5c
 800d8b4:	f002 ff2c 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	e073      	b.n	800d9a4 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d106      	bne.n	800d8d0 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8c2:	f107 0310 	add.w	r3, r7, #16
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f001 f972 	bl	800ebb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8d0:	f001 fe68 	bl	800f5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8d4:	f000 fee6 	bl	800e6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8d8:	f001 fe34 	bl	800f544 <vPortEnterCritical>
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8e2:	b25b      	sxtb	r3, r3
 800d8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e8:	d103      	bne.n	800d8f2 <xQueueReceive+0x162>
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8f8:	b25b      	sxtb	r3, r3
 800d8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8fe:	d103      	bne.n	800d908 <xQueueReceive+0x178>
 800d900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d902:	2200      	movs	r2, #0
 800d904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d908:	f001 fe4c 	bl	800f5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d90c:	1d3a      	adds	r2, r7, #4
 800d90e:	f107 0310 	add.w	r3, r7, #16
 800d912:	4611      	mov	r1, r2
 800d914:	4618      	mov	r0, r3
 800d916:	f001 f961 	bl	800ebdc <xTaskCheckForTimeOut>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d124      	bne.n	800d96a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d922:	f000 fb45 	bl	800dfb0 <prvIsQueueEmpty>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d018      	beq.n	800d95e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	3324      	adds	r3, #36	; 0x24
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	4611      	mov	r1, r2
 800d934:	4618      	mov	r0, r3
 800d936:	f001 f8b1 	bl	800ea9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d93c:	f000 fae6 	bl	800df0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d940:	f000 febe 	bl	800e6c0 <xTaskResumeAll>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	f47f af69 	bne.w	800d81e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d94c:	4b17      	ldr	r3, [pc, #92]	; (800d9ac <xQueueReceive+0x21c>)
 800d94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	e75f      	b.n	800d81e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d960:	f000 fad4 	bl	800df0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d964:	f000 feac 	bl	800e6c0 <xTaskResumeAll>
 800d968:	e759      	b.n	800d81e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96c:	f000 face 	bl	800df0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d970:	f000 fea6 	bl	800e6c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d976:	f000 fb1b 	bl	800dfb0 <prvIsQueueEmpty>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f43f af4e 	beq.w	800d81e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	4618      	mov	r0, r3
 800d986:	f003 faff 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d98a:	4604      	mov	r4, r0
 800d98c:	2000      	movs	r0, #0
 800d98e:	f003 fafb 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800d992:	4602      	mov	r2, r0
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2101      	movs	r1, #1
 800d998:	9100      	str	r1, [sp, #0]
 800d99a:	4621      	mov	r1, r4
 800d99c:	205c      	movs	r0, #92	; 0x5c
 800d99e:	f002 feb7 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800d9a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3734      	adds	r7, #52	; 0x34
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd90      	pop	{r4, r7, pc}
 800d9ac:	e000ed04 	.word	0xe000ed04

0800d9b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d9b0:	b590      	push	{r4, r7, lr}
 800d9b2:	b091      	sub	sp, #68	; 0x44
 800d9b4:	af02      	add	r7, sp, #8
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10a      	bne.n	800d9e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	623b      	str	r3, [r7, #32]
}
 800d9de:	bf00      	nop
 800d9e0:	e7fe      	b.n	800d9e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00a      	beq.n	800da00 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	61fb      	str	r3, [r7, #28]
}
 800d9fc:	bf00      	nop
 800d9fe:	e7fe      	b.n	800d9fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da00:	f001 fa34 	bl	800ee6c <xTaskGetSchedulerState>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d102      	bne.n	800da10 <xQueueSemaphoreTake+0x60>
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <xQueueSemaphoreTake+0x64>
 800da10:	2301      	movs	r3, #1
 800da12:	e000      	b.n	800da16 <xQueueSemaphoreTake+0x66>
 800da14:	2300      	movs	r3, #0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	61bb      	str	r3, [r7, #24]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da30:	f001 fd88 	bl	800f544 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da38:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d034      	beq.n	800daaa <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800da40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da42:	4618      	mov	r0, r3
 800da44:	f003 faa0 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800da48:	4604      	mov	r4, r0
 800da4a:	2000      	movs	r0, #0
 800da4c:	f003 fa9c 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800da50:	4602      	mov	r2, r0
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2101      	movs	r1, #1
 800da56:	9100      	str	r1, [sp, #0]
 800da58:	4621      	mov	r1, r4
 800da5a:	205c      	movs	r0, #92	; 0x5c
 800da5c:	f002 fe58 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	1e5a      	subs	r2, r3, #1
 800da64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d104      	bne.n	800da7a <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800da70:	f001 fbbe 	bl	800f1f0 <pvTaskIncrementMutexHeldCount>
 800da74:	4602      	mov	r2, r0
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00f      	beq.n	800daa2 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da84:	3310      	adds	r3, #16
 800da86:	4618      	mov	r0, r3
 800da88:	f001 f82c 	bl	800eae4 <xTaskRemoveFromEventList>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d007      	beq.n	800daa2 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da92:	4b64      	ldr	r3, [pc, #400]	; (800dc24 <xQueueSemaphoreTake+0x274>)
 800da94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800daa2:	f001 fd7f 	bl	800f5a4 <vPortExitCritical>
				return pdPASS;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e0b7      	b.n	800dc1a <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d121      	bne.n	800daf4 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00a      	beq.n	800dacc <xQueueSemaphoreTake+0x11c>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	617b      	str	r3, [r7, #20]
}
 800dac8:	bf00      	nop
 800daca:	e7fe      	b.n	800daca <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dacc:	f001 fd6a 	bl	800f5a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	4618      	mov	r0, r3
 800dad4:	f003 fa58 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dad8:	4604      	mov	r4, r0
 800dada:	2000      	movs	r0, #0
 800dadc:	f003 fa54 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dae0:	4602      	mov	r2, r0
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2101      	movs	r1, #1
 800dae6:	9100      	str	r1, [sp, #0]
 800dae8:	4621      	mov	r1, r4
 800daea:	205c      	movs	r0, #92	; 0x5c
 800daec:	f002 fe10 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800daf0:	2300      	movs	r3, #0
 800daf2:	e092      	b.n	800dc1a <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d106      	bne.n	800db08 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dafa:	f107 030c 	add.w	r3, r7, #12
 800dafe:	4618      	mov	r0, r3
 800db00:	f001 f856 	bl	800ebb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db04:	2301      	movs	r3, #1
 800db06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db08:	f001 fd4c 	bl	800f5a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db0c:	f000 fdca 	bl	800e6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db10:	f001 fd18 	bl	800f544 <vPortEnterCritical>
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db1a:	b25b      	sxtb	r3, r3
 800db1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db20:	d103      	bne.n	800db2a <xQueueSemaphoreTake+0x17a>
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	2200      	movs	r2, #0
 800db26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db30:	b25b      	sxtb	r3, r3
 800db32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db36:	d103      	bne.n	800db40 <xQueueSemaphoreTake+0x190>
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	2200      	movs	r2, #0
 800db3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db40:	f001 fd30 	bl	800f5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db44:	463a      	mov	r2, r7
 800db46:	f107 030c 	add.w	r3, r7, #12
 800db4a:	4611      	mov	r1, r2
 800db4c:	4618      	mov	r0, r3
 800db4e:	f001 f845 	bl	800ebdc <xTaskCheckForTimeOut>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d132      	bne.n	800dbbe <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db5a:	f000 fa29 	bl	800dfb0 <prvIsQueueEmpty>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d026      	beq.n	800dbb2 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d109      	bne.n	800db80 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 800db6c:	f001 fcea 	bl	800f544 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	4618      	mov	r0, r3
 800db76:	f001 f997 	bl	800eea8 <xTaskPriorityInherit>
 800db7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800db7c:	f001 fd12 	bl	800f5a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	3324      	adds	r3, #36	; 0x24
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	4611      	mov	r1, r2
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 ff87 	bl	800ea9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db90:	f000 f9bc 	bl	800df0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db94:	f000 fd94 	bl	800e6c0 <xTaskResumeAll>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f47f af48 	bne.w	800da30 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dba0:	4b20      	ldr	r3, [pc, #128]	; (800dc24 <xQueueSemaphoreTake+0x274>)
 800dba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dba6:	601a      	str	r2, [r3, #0]
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	f3bf 8f6f 	isb	sy
 800dbb0:	e73e      	b.n	800da30 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbb4:	f000 f9aa 	bl	800df0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbb8:	f000 fd82 	bl	800e6c0 <xTaskResumeAll>
 800dbbc:	e738      	b.n	800da30 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbc0:	f000 f9a4 	bl	800df0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbc4:	f000 fd7c 	bl	800e6c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbca:	f000 f9f1 	bl	800dfb0 <prvIsQueueEmpty>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f43f af2d 	beq.w	800da30 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00d      	beq.n	800dbf8 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 800dbdc:	f001 fcb2 	bl	800f544 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dbe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbe2:	f000 f8eb 	bl	800ddbc <prvGetDisinheritPriorityAfterTimeout>
 800dbe6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f001 fa66 	bl	800f0c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dbf4:	f001 fcd6 	bl	800f5a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800dbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f003 f9c4 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dc00:	4604      	mov	r4, r0
 800dc02:	2000      	movs	r0, #0
 800dc04:	f003 f9c0 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	9100      	str	r1, [sp, #0]
 800dc10:	4621      	mov	r1, r4
 800dc12:	205c      	movs	r0, #92	; 0x5c
 800dc14:	f002 fd7c 	bl	8010710 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800dc18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	373c      	adds	r7, #60	; 0x3c
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd90      	pop	{r4, r7, pc}
 800dc22:	bf00      	nop
 800dc24:	e000ed04 	.word	0xe000ed04

0800dc28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dc28:	b590      	push	{r4, r7, lr}
 800dc2a:	b08f      	sub	sp, #60	; 0x3c
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d10a      	bne.n	800dc54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc42:	f383 8811 	msr	BASEPRI, r3
 800dc46:	f3bf 8f6f 	isb	sy
 800dc4a:	f3bf 8f4f 	dsb	sy
 800dc4e:	623b      	str	r3, [r7, #32]
}
 800dc50:	bf00      	nop
 800dc52:	e7fe      	b.n	800dc52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d103      	bne.n	800dc62 <xQueueReceiveFromISR+0x3a>
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <xQueueReceiveFromISR+0x3e>
 800dc62:	2301      	movs	r3, #1
 800dc64:	e000      	b.n	800dc68 <xQueueReceiveFromISR+0x40>
 800dc66:	2300      	movs	r3, #0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc70:	f383 8811 	msr	BASEPRI, r3
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	f3bf 8f4f 	dsb	sy
 800dc7c:	61fb      	str	r3, [r7, #28]
}
 800dc7e:	bf00      	nop
 800dc80:	e7fe      	b.n	800dc80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc82:	f001 fd41 	bl	800f708 <vPortValidateInterruptPriority>
	__asm volatile
 800dc86:	f3ef 8211 	mrs	r2, BASEPRI
 800dc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	61ba      	str	r2, [r7, #24]
 800dc9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dc9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d03e      	beq.n	800dd2c <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dcb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800dcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f003 f964 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f003 f95f 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dcca:	4602      	mov	r2, r0
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	4621      	mov	r1, r4
 800dcd0:	2062      	movs	r0, #98	; 0x62
 800dcd2:	f002 fca7 	bl	8010624 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dcd6:	68b9      	ldr	r1, [r7, #8]
 800dcd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcda:	f000 f8f1 	bl	800dec0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce0:	1e5a      	subs	r2, r3, #1
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d112      	bne.n	800dd16 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d016      	beq.n	800dd26 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	3310      	adds	r3, #16
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 fef1 	bl	800eae4 <xTaskRemoveFromEventList>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00e      	beq.n	800dd26 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00b      	beq.n	800dd26 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	e007      	b.n	800dd26 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	b25a      	sxtb	r2, r3
 800dd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dd26:	2301      	movs	r3, #1
 800dd28:	637b      	str	r3, [r7, #52]	; 0x34
 800dd2a:	e010      	b.n	800dd4e <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800dd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd32:	4618      	mov	r0, r3
 800dd34:	f003 f928 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dd38:	4604      	mov	r4, r0
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f003 f923 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dd42:	4602      	mov	r2, r0
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4621      	mov	r1, r4
 800dd48:	2062      	movs	r0, #98	; 0x62
 800dd4a:	f002 fc6b 	bl	8010624 <SEGGER_SYSVIEW_RecordU32x3>
 800dd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd50:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f383 8811 	msr	BASEPRI, r3
}
 800dd58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	373c      	adds	r7, #60	; 0x3c
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd90      	pop	{r4, r7, pc}

0800dd64 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10a      	bne.n	800dd8c <vQueueDelete+0x28>
	__asm volatile
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	60bb      	str	r3, [r7, #8]
}
 800dd88:	bf00      	nop
 800dd8a:	e7fe      	b.n	800dd8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f003 f8fa 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800dd94:	4603      	mov	r3, r0
 800dd96:	4619      	mov	r1, r3
 800dd98:	205f      	movs	r0, #95	; 0x5f
 800dd9a:	f002 fbad 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f000 f934 	bl	800e00c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d102      	bne.n	800ddb4 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f001 fdb6 	bl	800f920 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ddb4:	bf00      	nop
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d006      	beq.n	800ddda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f1c3 0307 	rsb	r3, r3, #7
 800ddd6:	60fb      	str	r3, [r7, #12]
 800ddd8:	e001      	b.n	800ddde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ddda:	2300      	movs	r3, #0
 800dddc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ddde:	68fb      	ldr	r3, [r7, #12]
	}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3714      	adds	r7, #20
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10d      	bne.n	800de26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d14d      	bne.n	800deae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	4618      	mov	r0, r3
 800de18:	f001 f8c4 	bl	800efa4 <xTaskPriorityDisinherit>
 800de1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2200      	movs	r2, #0
 800de22:	609a      	str	r2, [r3, #8]
 800de24:	e043      	b.n	800deae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d119      	bne.n	800de60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6858      	ldr	r0, [r3, #4]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de34:	461a      	mov	r2, r3
 800de36:	68b9      	ldr	r1, [r7, #8]
 800de38:	f003 fc1a 	bl	8011670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de44:	441a      	add	r2, r3
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	429a      	cmp	r2, r3
 800de54:	d32b      	bcc.n	800deae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	605a      	str	r2, [r3, #4]
 800de5e:	e026      	b.n	800deae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	68d8      	ldr	r0, [r3, #12]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de68:	461a      	mov	r2, r3
 800de6a:	68b9      	ldr	r1, [r7, #8]
 800de6c:	f003 fc00 	bl	8011670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	68da      	ldr	r2, [r3, #12]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de78:	425b      	negs	r3, r3
 800de7a:	441a      	add	r2, r3
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	68da      	ldr	r2, [r3, #12]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d207      	bcs.n	800de9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	689a      	ldr	r2, [r3, #8]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de94:	425b      	negs	r3, r3
 800de96:	441a      	add	r2, r3
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2b02      	cmp	r3, #2
 800dea0:	d105      	bne.n	800deae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	3b01      	subs	r3, #1
 800deac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800deb6:	697b      	ldr	r3, [r7, #20]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d018      	beq.n	800df04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	68da      	ldr	r2, [r3, #12]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deda:	441a      	add	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68da      	ldr	r2, [r3, #12]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d303      	bcc.n	800def4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68d9      	ldr	r1, [r3, #12]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defc:	461a      	mov	r2, r3
 800defe:	6838      	ldr	r0, [r7, #0]
 800df00:	f003 fbb6 	bl	8011670 <memcpy>
	}
}
 800df04:	bf00      	nop
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df14:	f001 fb16 	bl	800f544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df20:	e011      	b.n	800df46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df26:	2b00      	cmp	r3, #0
 800df28:	d012      	beq.n	800df50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3324      	adds	r3, #36	; 0x24
 800df2e:	4618      	mov	r0, r3
 800df30:	f000 fdd8 	bl	800eae4 <xTaskRemoveFromEventList>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df3a:	f000 feb1 	bl	800eca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df3e:	7bfb      	ldrb	r3, [r7, #15]
 800df40:	3b01      	subs	r3, #1
 800df42:	b2db      	uxtb	r3, r3
 800df44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	dce9      	bgt.n	800df22 <prvUnlockQueue+0x16>
 800df4e:	e000      	b.n	800df52 <prvUnlockQueue+0x46>
					break;
 800df50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	22ff      	movs	r2, #255	; 0xff
 800df56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800df5a:	f001 fb23 	bl	800f5a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df5e:	f001 faf1 	bl	800f544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df6a:	e011      	b.n	800df90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d012      	beq.n	800df9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	3310      	adds	r3, #16
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 fdb3 	bl	800eae4 <xTaskRemoveFromEventList>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df84:	f000 fe8c 	bl	800eca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df88:	7bbb      	ldrb	r3, [r7, #14]
 800df8a:	3b01      	subs	r3, #1
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df94:	2b00      	cmp	r3, #0
 800df96:	dce9      	bgt.n	800df6c <prvUnlockQueue+0x60>
 800df98:	e000      	b.n	800df9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	22ff      	movs	r2, #255	; 0xff
 800dfa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dfa4:	f001 fafe 	bl	800f5a4 <vPortExitCritical>
}
 800dfa8:	bf00      	nop
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfb8:	f001 fac4 	bl	800f544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d102      	bne.n	800dfca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	60fb      	str	r3, [r7, #12]
 800dfc8:	e001      	b.n	800dfce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfce:	f001 fae9 	bl	800f5a4 <vPortExitCritical>

	return xReturn;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfe4:	f001 faae 	bl	800f544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d102      	bne.n	800dffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dff4:	2301      	movs	r3, #1
 800dff6:	60fb      	str	r3, [r7, #12]
 800dff8:	e001      	b.n	800dffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dffa:	2300      	movs	r3, #0
 800dffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dffe:	f001 fad1 	bl	800f5a4 <vPortExitCritical>

	return xReturn;
 800e002:	68fb      	ldr	r3, [r7, #12]
}
 800e004:	4618      	mov	r0, r3
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e014:	2300      	movs	r3, #0
 800e016:	60fb      	str	r3, [r7, #12]
 800e018:	e016      	b.n	800e048 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e01a:	4a10      	ldr	r2, [pc, #64]	; (800e05c <vQueueUnregisterQueue+0x50>)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	4413      	add	r3, r2
 800e022:	685b      	ldr	r3, [r3, #4]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	429a      	cmp	r2, r3
 800e028:	d10b      	bne.n	800e042 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e02a:	4a0c      	ldr	r2, [pc, #48]	; (800e05c <vQueueUnregisterQueue+0x50>)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2100      	movs	r1, #0
 800e030:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e034:	4a09      	ldr	r2, [pc, #36]	; (800e05c <vQueueUnregisterQueue+0x50>)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	00db      	lsls	r3, r3, #3
 800e03a:	4413      	add	r3, r2
 800e03c:	2200      	movs	r2, #0
 800e03e:	605a      	str	r2, [r3, #4]
				break;
 800e040:	e006      	b.n	800e050 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3301      	adds	r3, #1
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b07      	cmp	r3, #7
 800e04c:	d9e5      	bls.n	800e01a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e04e:	bf00      	nop
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	20000fa8 	.word	0x20000fa8

0800e060 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e060:	b580      	push	{r7, lr}
 800e062:	b08e      	sub	sp, #56	; 0x38
 800e064:	af04      	add	r7, sp, #16
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e070:	2b00      	cmp	r3, #0
 800e072:	d10a      	bne.n	800e08a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e078:	f383 8811 	msr	BASEPRI, r3
 800e07c:	f3bf 8f6f 	isb	sy
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	623b      	str	r3, [r7, #32]
}
 800e086:	bf00      	nop
 800e088:	e7fe      	b.n	800e088 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10a      	bne.n	800e0a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	61fb      	str	r3, [r7, #28]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0a6:	23b4      	movs	r3, #180	; 0xb4
 800e0a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	2bb4      	cmp	r3, #180	; 0xb4
 800e0ae:	d00a      	beq.n	800e0c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	61bb      	str	r3, [r7, #24]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e0c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d01e      	beq.n	800e10c <xTaskCreateStatic+0xac>
 800e0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d01b      	beq.n	800e10c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e0:	2202      	movs	r2, #2
 800e0e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	9303      	str	r3, [sp, #12]
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ec:	9302      	str	r3, [sp, #8]
 800e0ee:	f107 0314 	add.w	r3, r7, #20
 800e0f2:	9301      	str	r3, [sp, #4]
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	68b9      	ldr	r1, [r7, #8]
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f000 f850 	bl	800e1a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e106:	f000 f8eb 	bl	800e2e0 <prvAddNewTaskToReadyList>
 800e10a:	e001      	b.n	800e110 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e10c:	2300      	movs	r3, #0
 800e10e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e110:	697b      	ldr	r3, [r7, #20]
	}
 800e112:	4618      	mov	r0, r3
 800e114:	3728      	adds	r7, #40	; 0x28
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b08c      	sub	sp, #48	; 0x30
 800e11e:	af04      	add	r7, sp, #16
 800e120:	60f8      	str	r0, [r7, #12]
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	603b      	str	r3, [r7, #0]
 800e126:	4613      	mov	r3, r2
 800e128:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e12a:	88fb      	ldrh	r3, [r7, #6]
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	4618      	mov	r0, r3
 800e130:	f001 fb2a 	bl	800f788 <pvPortMalloc>
 800e134:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00e      	beq.n	800e15a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e13c:	20b4      	movs	r0, #180	; 0xb4
 800e13e:	f001 fb23 	bl	800f788 <pvPortMalloc>
 800e142:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d003      	beq.n	800e152 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	697a      	ldr	r2, [r7, #20]
 800e14e:	631a      	str	r2, [r3, #48]	; 0x30
 800e150:	e005      	b.n	800e15e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e152:	6978      	ldr	r0, [r7, #20]
 800e154:	f001 fbe4 	bl	800f920 <vPortFree>
 800e158:	e001      	b.n	800e15e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d017      	beq.n	800e194 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e16c:	88fa      	ldrh	r2, [r7, #6]
 800e16e:	2300      	movs	r3, #0
 800e170:	9303      	str	r3, [sp, #12]
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	9302      	str	r3, [sp, #8]
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	9301      	str	r3, [sp, #4]
 800e17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	68b9      	ldr	r1, [r7, #8]
 800e182:	68f8      	ldr	r0, [r7, #12]
 800e184:	f000 f80e 	bl	800e1a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e188:	69f8      	ldr	r0, [r7, #28]
 800e18a:	f000 f8a9 	bl	800e2e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e18e:	2301      	movs	r3, #1
 800e190:	61bb      	str	r3, [r7, #24]
 800e192:	e002      	b.n	800e19a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e194:	f04f 33ff 	mov.w	r3, #4294967295
 800e198:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e19a:	69bb      	ldr	r3, [r7, #24]
	}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3720      	adds	r7, #32
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b088      	sub	sp, #32
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	607a      	str	r2, [r7, #4]
 800e1b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4413      	add	r3, r2
 800e1c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	f023 0307 	bic.w	r3, r3, #7
 800e1ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	f003 0307 	and.w	r3, r3, #7
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00a      	beq.n	800e1ec <prvInitialiseNewTask+0x48>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1da:	f383 8811 	msr	BASEPRI, r3
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f3bf 8f4f 	dsb	sy
 800e1e6:	617b      	str	r3, [r7, #20]
}
 800e1e8:	bf00      	nop
 800e1ea:	e7fe      	b.n	800e1ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d01f      	beq.n	800e232 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	61fb      	str	r3, [r7, #28]
 800e1f6:	e012      	b.n	800e21e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1f8:	68ba      	ldr	r2, [r7, #8]
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	7819      	ldrb	r1, [r3, #0]
 800e200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	4413      	add	r3, r2
 800e206:	3334      	adds	r3, #52	; 0x34
 800e208:	460a      	mov	r2, r1
 800e20a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	4413      	add	r3, r2
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d006      	beq.n	800e226 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	3301      	adds	r3, #1
 800e21c:	61fb      	str	r3, [r7, #28]
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	2b0f      	cmp	r3, #15
 800e222:	d9e9      	bls.n	800e1f8 <prvInitialiseNewTask+0x54>
 800e224:	e000      	b.n	800e228 <prvInitialiseNewTask+0x84>
			{
				break;
 800e226:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e230:	e003      	b.n	800e23a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e234:	2200      	movs	r2, #0
 800e236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23c:	2b06      	cmp	r3, #6
 800e23e:	d901      	bls.n	800e244 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e240:	2306      	movs	r3, #6
 800e242:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e248:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e24e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e252:	2200      	movs	r2, #0
 800e254:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe fe4e 	bl	800cefc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	3318      	adds	r3, #24
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe fe49 	bl	800cefc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e26e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e272:	f1c3 0207 	rsb	r2, r3, #7
 800e276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e278:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e282:	2200      	movs	r2, #0
 800e284:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e292:	334c      	adds	r3, #76	; 0x4c
 800e294:	2260      	movs	r2, #96	; 0x60
 800e296:	2100      	movs	r1, #0
 800e298:	4618      	mov	r0, r3
 800e29a:	f003 f9f7 	bl	801168c <memset>
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	4a0c      	ldr	r2, [pc, #48]	; (800e2d4 <prvInitialiseNewTask+0x130>)
 800e2a2:	651a      	str	r2, [r3, #80]	; 0x50
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a6:	4a0c      	ldr	r2, [pc, #48]	; (800e2d8 <prvInitialiseNewTask+0x134>)
 800e2a8:	655a      	str	r2, [r3, #84]	; 0x54
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	4a0b      	ldr	r2, [pc, #44]	; (800e2dc <prvInitialiseNewTask+0x138>)
 800e2ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e2b0:	683a      	ldr	r2, [r7, #0]
 800e2b2:	68f9      	ldr	r1, [r7, #12]
 800e2b4:	69b8      	ldr	r0, [r7, #24]
 800e2b6:	f001 f815 	bl	800f2e4 <pxPortInitialiseStack>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d002      	beq.n	800e2cc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2cc:	bf00      	nop
 800e2ce:	3720      	adds	r7, #32
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	08011da0 	.word	0x08011da0
 800e2d8:	08011dc0 	.word	0x08011dc0
 800e2dc:	08011d80 	.word	0x08011d80

0800e2e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e2e0:	b5b0      	push	{r4, r5, r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af02      	add	r7, sp, #8
 800e2e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e2e8:	f001 f92c 	bl	800f544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2ec:	4b39      	ldr	r3, [pc, #228]	; (800e3d4 <prvAddNewTaskToReadyList+0xf4>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	4a38      	ldr	r2, [pc, #224]	; (800e3d4 <prvAddNewTaskToReadyList+0xf4>)
 800e2f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2f6:	4b38      	ldr	r3, [pc, #224]	; (800e3d8 <prvAddNewTaskToReadyList+0xf8>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d109      	bne.n	800e312 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2fe:	4a36      	ldr	r2, [pc, #216]	; (800e3d8 <prvAddNewTaskToReadyList+0xf8>)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e304:	4b33      	ldr	r3, [pc, #204]	; (800e3d4 <prvAddNewTaskToReadyList+0xf4>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d110      	bne.n	800e32e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e30c:	f000 fcec 	bl	800ece8 <prvInitialiseTaskLists>
 800e310:	e00d      	b.n	800e32e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e312:	4b32      	ldr	r3, [pc, #200]	; (800e3dc <prvAddNewTaskToReadyList+0xfc>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d109      	bne.n	800e32e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e31a:	4b2f      	ldr	r3, [pc, #188]	; (800e3d8 <prvAddNewTaskToReadyList+0xf8>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e324:	429a      	cmp	r2, r3
 800e326:	d802      	bhi.n	800e32e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e328:	4a2b      	ldr	r2, [pc, #172]	; (800e3d8 <prvAddNewTaskToReadyList+0xf8>)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e32e:	4b2c      	ldr	r3, [pc, #176]	; (800e3e0 <prvAddNewTaskToReadyList+0x100>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	3301      	adds	r3, #1
 800e334:	4a2a      	ldr	r2, [pc, #168]	; (800e3e0 <prvAddNewTaskToReadyList+0x100>)
 800e336:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d016      	beq.n	800e36c <prvAddNewTaskToReadyList+0x8c>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4618      	mov	r0, r3
 800e342:	f002 fd5b 	bl	8010dfc <SEGGER_SYSVIEW_OnTaskCreate>
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e356:	461d      	mov	r5, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	461c      	mov	r4, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e362:	1ae3      	subs	r3, r4, r3
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	462b      	mov	r3, r5
 800e368:	f003 f806 	bl	8011378 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4618      	mov	r0, r3
 800e370:	f002 fdc8 	bl	8010f04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e378:	2201      	movs	r2, #1
 800e37a:	409a      	lsls	r2, r3
 800e37c:	4b19      	ldr	r3, [pc, #100]	; (800e3e4 <prvAddNewTaskToReadyList+0x104>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4313      	orrs	r3, r2
 800e382:	4a18      	ldr	r2, [pc, #96]	; (800e3e4 <prvAddNewTaskToReadyList+0x104>)
 800e384:	6013      	str	r3, [r2, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4a15      	ldr	r2, [pc, #84]	; (800e3e8 <prvAddNewTaskToReadyList+0x108>)
 800e394:	441a      	add	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3304      	adds	r3, #4
 800e39a:	4619      	mov	r1, r3
 800e39c:	4610      	mov	r0, r2
 800e39e:	f7fe fdba 	bl	800cf16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3a2:	f001 f8ff 	bl	800f5a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3a6:	4b0d      	ldr	r3, [pc, #52]	; (800e3dc <prvAddNewTaskToReadyList+0xfc>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d00e      	beq.n	800e3cc <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3ae:	4b0a      	ldr	r3, [pc, #40]	; (800e3d8 <prvAddNewTaskToReadyList+0xf8>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d207      	bcs.n	800e3cc <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3bc:	4b0b      	ldr	r3, [pc, #44]	; (800e3ec <prvAddNewTaskToReadyList+0x10c>)
 800e3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800e3d4:	200010e8 	.word	0x200010e8
 800e3d8:	20000fe8 	.word	0x20000fe8
 800e3dc:	200010f4 	.word	0x200010f4
 800e3e0:	20001104 	.word	0x20001104
 800e3e4:	200010f0 	.word	0x200010f0
 800e3e8:	20000fec 	.word	0x20000fec
 800e3ec:	e000ed04 	.word	0xe000ed04

0800e3f0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b084      	sub	sp, #16
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e3f8:	f001 f8a4 	bl	800f544 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d102      	bne.n	800e408 <vTaskDelete+0x18>
 800e402:	4b46      	ldr	r3, [pc, #280]	; (800e51c <vTaskDelete+0x12c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	e000      	b.n	800e40a <vTaskDelete+0x1a>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	3304      	adds	r3, #4
 800e410:	4618      	mov	r0, r3
 800e412:	f7fe fddd 	bl	800cfd0 <uxListRemove>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d115      	bne.n	800e448 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e420:	493f      	ldr	r1, [pc, #252]	; (800e520 <vTaskDelete+0x130>)
 800e422:	4613      	mov	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	440b      	add	r3, r1
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10a      	bne.n	800e448 <vTaskDelete+0x58>
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e436:	2201      	movs	r2, #1
 800e438:	fa02 f303 	lsl.w	r3, r2, r3
 800e43c:	43da      	mvns	r2, r3
 800e43e:	4b39      	ldr	r3, [pc, #228]	; (800e524 <vTaskDelete+0x134>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4013      	ands	r3, r2
 800e444:	4a37      	ldr	r2, [pc, #220]	; (800e524 <vTaskDelete+0x134>)
 800e446:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d004      	beq.n	800e45a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	3318      	adds	r3, #24
 800e454:	4618      	mov	r0, r3
 800e456:	f7fe fdbb 	bl	800cfd0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e45a:	4b33      	ldr	r3, [pc, #204]	; (800e528 <vTaskDelete+0x138>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	3301      	adds	r3, #1
 800e460:	4a31      	ldr	r2, [pc, #196]	; (800e528 <vTaskDelete+0x138>)
 800e462:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e464:	4b2d      	ldr	r3, [pc, #180]	; (800e51c <vTaskDelete+0x12c>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d118      	bne.n	800e4a0 <vTaskDelete+0xb0>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	3304      	adds	r3, #4
 800e472:	4619      	mov	r1, r3
 800e474:	482d      	ldr	r0, [pc, #180]	; (800e52c <vTaskDelete+0x13c>)
 800e476:	f7fe fd4e 	bl	800cf16 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e47a:	4b2d      	ldr	r3, [pc, #180]	; (800e530 <vTaskDelete+0x140>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3301      	adds	r3, #1
 800e480:	4a2b      	ldr	r2, [pc, #172]	; (800e530 <vTaskDelete+0x140>)
 800e482:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	4618      	mov	r0, r3
 800e488:	f002 fd7e 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800e48c:	4603      	mov	r3, r0
 800e48e:	4619      	mov	r1, r3
 800e490:	2022      	movs	r0, #34	; 0x22
 800e492:	f002 f831 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	4618      	mov	r0, r3
 800e49a:	f002 ffd5 	bl	8011448 <SYSVIEW_DeleteTask>
 800e49e:	e016      	b.n	800e4ce <vTaskDelete+0xde>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e4a0:	4b24      	ldr	r3, [pc, #144]	; (800e534 <vTaskDelete+0x144>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	4a23      	ldr	r2, [pc, #140]	; (800e534 <vTaskDelete+0x144>)
 800e4a8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f002 fd6b 	bl	8010f88 <SEGGER_SYSVIEW_ShrinkId>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	2022      	movs	r0, #34	; 0x22
 800e4b8:	f002 f81e 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f002 ffc2 	bl	8011448 <SYSVIEW_DeleteTask>
				prvDeleteTCB( pxTCB );
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f000 fc7d 	bl	800edc4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e4ca:	f000 fcaf 	bl	800ee2c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e4ce:	f001 f869 	bl	800f5a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e4d2:	4b19      	ldr	r3, [pc, #100]	; (800e538 <vTaskDelete+0x148>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d01b      	beq.n	800e512 <vTaskDelete+0x122>
		{
			if( pxTCB == pxCurrentTCB )
 800e4da:	4b10      	ldr	r3, [pc, #64]	; (800e51c <vTaskDelete+0x12c>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d116      	bne.n	800e512 <vTaskDelete+0x122>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e4e4:	4b15      	ldr	r3, [pc, #84]	; (800e53c <vTaskDelete+0x14c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d00a      	beq.n	800e502 <vTaskDelete+0x112>
	__asm volatile
 800e4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	60bb      	str	r3, [r7, #8]
}
 800e4fe:	bf00      	nop
 800e500:	e7fe      	b.n	800e500 <vTaskDelete+0x110>
				portYIELD_WITHIN_API();
 800e502:	4b0f      	ldr	r3, [pc, #60]	; (800e540 <vTaskDelete+0x150>)
 800e504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e508:	601a      	str	r2, [r3, #0]
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
 800e51a:	bf00      	nop
 800e51c:	20000fe8 	.word	0x20000fe8
 800e520:	20000fec 	.word	0x20000fec
 800e524:	200010f0 	.word	0x200010f0
 800e528:	20001104 	.word	0x20001104
 800e52c:	200010bc 	.word	0x200010bc
 800e530:	200010d0 	.word	0x200010d0
 800e534:	200010e8 	.word	0x200010e8
 800e538:	200010f4 	.word	0x200010f4
 800e53c:	20001110 	.word	0x20001110
 800e540:	e000ed04 	.word	0xe000ed04

0800e544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e54c:	2300      	movs	r3, #0
 800e54e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d01b      	beq.n	800e58e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e556:	4b15      	ldr	r3, [pc, #84]	; (800e5ac <vTaskDelay+0x68>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00a      	beq.n	800e574 <vTaskDelay+0x30>
	__asm volatile
 800e55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	60bb      	str	r3, [r7, #8]
}
 800e570:	bf00      	nop
 800e572:	e7fe      	b.n	800e572 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e574:	f000 f896 	bl	800e6a4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	2023      	movs	r0, #35	; 0x23
 800e57c:	f001 ffbc 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e580:	2100      	movs	r1, #0
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fe48 	bl	800f218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e588:	f000 f89a 	bl	800e6c0 <xTaskResumeAll>
 800e58c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d107      	bne.n	800e5a4 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800e594:	4b06      	ldr	r3, [pc, #24]	; (800e5b0 <vTaskDelay+0x6c>)
 800e596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e5a4:	bf00      	nop
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	20001110 	.word	0x20001110
 800e5b0:	e000ed04 	.word	0xe000ed04

0800e5b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08a      	sub	sp, #40	; 0x28
 800e5b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e5c2:	463a      	mov	r2, r7
 800e5c4:	1d39      	adds	r1, r7, #4
 800e5c6:	f107 0308 	add.w	r3, r7, #8
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7f1 fffa 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e5d0:	6839      	ldr	r1, [r7, #0]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	9202      	str	r2, [sp, #8]
 800e5d8:	9301      	str	r3, [sp, #4]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	2300      	movs	r3, #0
 800e5e0:	460a      	mov	r2, r1
 800e5e2:	4928      	ldr	r1, [pc, #160]	; (800e684 <vTaskStartScheduler+0xd0>)
 800e5e4:	4828      	ldr	r0, [pc, #160]	; (800e688 <vTaskStartScheduler+0xd4>)
 800e5e6:	f7ff fd3b 	bl	800e060 <xTaskCreateStatic>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4a27      	ldr	r2, [pc, #156]	; (800e68c <vTaskStartScheduler+0xd8>)
 800e5ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5f0:	4b26      	ldr	r3, [pc, #152]	; (800e68c <vTaskStartScheduler+0xd8>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	e001      	b.n	800e602 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d129      	bne.n	800e65c <vTaskStartScheduler+0xa8>
	__asm volatile
 800e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	613b      	str	r3, [r7, #16]
}
 800e61a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e61c:	4b1c      	ldr	r3, [pc, #112]	; (800e690 <vTaskStartScheduler+0xdc>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	334c      	adds	r3, #76	; 0x4c
 800e622:	4a1c      	ldr	r2, [pc, #112]	; (800e694 <vTaskStartScheduler+0xe0>)
 800e624:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e626:	4b1c      	ldr	r3, [pc, #112]	; (800e698 <vTaskStartScheduler+0xe4>)
 800e628:	f04f 32ff 	mov.w	r2, #4294967295
 800e62c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e62e:	4b1b      	ldr	r3, [pc, #108]	; (800e69c <vTaskStartScheduler+0xe8>)
 800e630:	2201      	movs	r2, #1
 800e632:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e634:	4b1a      	ldr	r3, [pc, #104]	; (800e6a0 <vTaskStartScheduler+0xec>)
 800e636:	2200      	movs	r2, #0
 800e638:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800e63a:	4b15      	ldr	r3, [pc, #84]	; (800e690 <vTaskStartScheduler+0xdc>)
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	4b13      	ldr	r3, [pc, #76]	; (800e68c <vTaskStartScheduler+0xd8>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	429a      	cmp	r2, r3
 800e644:	d102      	bne.n	800e64c <vTaskStartScheduler+0x98>
 800e646:	f002 fbbd 	bl	8010dc4 <SEGGER_SYSVIEW_OnIdle>
 800e64a:	e004      	b.n	800e656 <vTaskStartScheduler+0xa2>
 800e64c:	4b10      	ldr	r3, [pc, #64]	; (800e690 <vTaskStartScheduler+0xdc>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f002 fc15 	bl	8010e80 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e656:	f000 fed3 	bl	800f400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e65a:	e00e      	b.n	800e67a <vTaskStartScheduler+0xc6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e662:	d10a      	bne.n	800e67a <vTaskStartScheduler+0xc6>
	__asm volatile
 800e664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	60fb      	str	r3, [r7, #12]
}
 800e676:	bf00      	nop
 800e678:	e7fe      	b.n	800e678 <vTaskStartScheduler+0xc4>
}
 800e67a:	bf00      	nop
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	08011bc4 	.word	0x08011bc4
 800e688:	0800ecb9 	.word	0x0800ecb9
 800e68c:	2000110c 	.word	0x2000110c
 800e690:	20000fe8 	.word	0x20000fe8
 800e694:	20000010 	.word	0x20000010
 800e698:	20001108 	.word	0x20001108
 800e69c:	200010f4 	.word	0x200010f4
 800e6a0:	200010ec 	.word	0x200010ec

0800e6a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e6a8:	4b04      	ldr	r3, [pc, #16]	; (800e6bc <vTaskSuspendAll+0x18>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	4a03      	ldr	r2, [pc, #12]	; (800e6bc <vTaskSuspendAll+0x18>)
 800e6b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e6b2:	bf00      	nop
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	20001110 	.word	0x20001110

0800e6c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e6ce:	4b43      	ldr	r3, [pc, #268]	; (800e7dc <xTaskResumeAll+0x11c>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10a      	bne.n	800e6ec <xTaskResumeAll+0x2c>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	603b      	str	r3, [r7, #0]
}
 800e6e8:	bf00      	nop
 800e6ea:	e7fe      	b.n	800e6ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e6ec:	f000 ff2a 	bl	800f544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e6f0:	4b3a      	ldr	r3, [pc, #232]	; (800e7dc <xTaskResumeAll+0x11c>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	4a39      	ldr	r2, [pc, #228]	; (800e7dc <xTaskResumeAll+0x11c>)
 800e6f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6fa:	4b38      	ldr	r3, [pc, #224]	; (800e7dc <xTaskResumeAll+0x11c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d165      	bne.n	800e7ce <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e702:	4b37      	ldr	r3, [pc, #220]	; (800e7e0 <xTaskResumeAll+0x120>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d061      	beq.n	800e7ce <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e70a:	e032      	b.n	800e772 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e70c:	4b35      	ldr	r3, [pc, #212]	; (800e7e4 <xTaskResumeAll+0x124>)
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	3318      	adds	r3, #24
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fe fc59 	bl	800cfd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	3304      	adds	r3, #4
 800e722:	4618      	mov	r0, r3
 800e724:	f7fe fc54 	bl	800cfd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f002 fbea 	bl	8010f04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e734:	2201      	movs	r2, #1
 800e736:	409a      	lsls	r2, r3
 800e738:	4b2b      	ldr	r3, [pc, #172]	; (800e7e8 <xTaskResumeAll+0x128>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4313      	orrs	r3, r2
 800e73e:	4a2a      	ldr	r2, [pc, #168]	; (800e7e8 <xTaskResumeAll+0x128>)
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e746:	4613      	mov	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4413      	add	r3, r2
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	4a27      	ldr	r2, [pc, #156]	; (800e7ec <xTaskResumeAll+0x12c>)
 800e750:	441a      	add	r2, r3
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3304      	adds	r3, #4
 800e756:	4619      	mov	r1, r3
 800e758:	4610      	mov	r0, r2
 800e75a:	f7fe fbdc 	bl	800cf16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e762:	4b23      	ldr	r3, [pc, #140]	; (800e7f0 <xTaskResumeAll+0x130>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e768:	429a      	cmp	r2, r3
 800e76a:	d302      	bcc.n	800e772 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800e76c:	4b21      	ldr	r3, [pc, #132]	; (800e7f4 <xTaskResumeAll+0x134>)
 800e76e:	2201      	movs	r2, #1
 800e770:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e772:	4b1c      	ldr	r3, [pc, #112]	; (800e7e4 <xTaskResumeAll+0x124>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1c8      	bne.n	800e70c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e780:	f000 fb54 	bl	800ee2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e784:	4b1c      	ldr	r3, [pc, #112]	; (800e7f8 <xTaskResumeAll+0x138>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d010      	beq.n	800e7b2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e790:	f000 f858 	bl	800e844 <xTaskIncrementTick>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800e79a:	4b16      	ldr	r3, [pc, #88]	; (800e7f4 <xTaskResumeAll+0x134>)
 800e79c:	2201      	movs	r2, #1
 800e79e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d1f1      	bne.n	800e790 <xTaskResumeAll+0xd0>

						xPendedTicks = 0;
 800e7ac:	4b12      	ldr	r3, [pc, #72]	; (800e7f8 <xTaskResumeAll+0x138>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e7b2:	4b10      	ldr	r3, [pc, #64]	; (800e7f4 <xTaskResumeAll+0x134>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d009      	beq.n	800e7ce <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e7be:	4b0f      	ldr	r3, [pc, #60]	; (800e7fc <xTaskResumeAll+0x13c>)
 800e7c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7c4:	601a      	str	r2, [r3, #0]
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e7ce:	f000 fee9 	bl	800f5a4 <vPortExitCritical>

	return xAlreadyYielded;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20001110 	.word	0x20001110
 800e7e0:	200010e8 	.word	0x200010e8
 800e7e4:	200010a8 	.word	0x200010a8
 800e7e8:	200010f0 	.word	0x200010f0
 800e7ec:	20000fec 	.word	0x20000fec
 800e7f0:	20000fe8 	.word	0x20000fe8
 800e7f4:	200010fc 	.word	0x200010fc
 800e7f8:	200010f8 	.word	0x200010f8
 800e7fc:	e000ed04 	.word	0xe000ed04

0800e800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e800:	b480      	push	{r7}
 800e802:	b083      	sub	sp, #12
 800e804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e806:	4b05      	ldr	r3, [pc, #20]	; (800e81c <xTaskGetTickCount+0x1c>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e80c:	687b      	ldr	r3, [r7, #4]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	370c      	adds	r7, #12
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop
 800e81c:	200010ec 	.word	0x200010ec

0800e820 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e826:	f000 ff6f 	bl	800f708 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e82a:	2300      	movs	r3, #0
 800e82c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e82e:	4b04      	ldr	r3, [pc, #16]	; (800e840 <xTaskGetTickCountFromISR+0x20>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e834:	683b      	ldr	r3, [r7, #0]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	200010ec 	.word	0x200010ec

0800e844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e84a:	2300      	movs	r3, #0
 800e84c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e84e:	4b50      	ldr	r3, [pc, #320]	; (800e990 <xTaskIncrementTick+0x14c>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	f040 8092 	bne.w	800e97c <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e858:	4b4e      	ldr	r3, [pc, #312]	; (800e994 <xTaskIncrementTick+0x150>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	3301      	adds	r3, #1
 800e85e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e860:	4a4c      	ldr	r2, [pc, #304]	; (800e994 <xTaskIncrementTick+0x150>)
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d120      	bne.n	800e8ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e86c:	4b4a      	ldr	r3, [pc, #296]	; (800e998 <xTaskIncrementTick+0x154>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00a      	beq.n	800e88c <xTaskIncrementTick+0x48>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	f383 8811 	msr	BASEPRI, r3
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	603b      	str	r3, [r7, #0]
}
 800e888:	bf00      	nop
 800e88a:	e7fe      	b.n	800e88a <xTaskIncrementTick+0x46>
 800e88c:	4b42      	ldr	r3, [pc, #264]	; (800e998 <xTaskIncrementTick+0x154>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	60fb      	str	r3, [r7, #12]
 800e892:	4b42      	ldr	r3, [pc, #264]	; (800e99c <xTaskIncrementTick+0x158>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a40      	ldr	r2, [pc, #256]	; (800e998 <xTaskIncrementTick+0x154>)
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	4a40      	ldr	r2, [pc, #256]	; (800e99c <xTaskIncrementTick+0x158>)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6013      	str	r3, [r2, #0]
 800e8a0:	4b3f      	ldr	r3, [pc, #252]	; (800e9a0 <xTaskIncrementTick+0x15c>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	4a3e      	ldr	r2, [pc, #248]	; (800e9a0 <xTaskIncrementTick+0x15c>)
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	f000 fabf 	bl	800ee2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e8ae:	4b3d      	ldr	r3, [pc, #244]	; (800e9a4 <xTaskIncrementTick+0x160>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	693a      	ldr	r2, [r7, #16]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d34c      	bcc.n	800e952 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8b8:	4b37      	ldr	r3, [pc, #220]	; (800e998 <xTaskIncrementTick+0x154>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d104      	bne.n	800e8cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8c2:	4b38      	ldr	r3, [pc, #224]	; (800e9a4 <xTaskIncrementTick+0x160>)
 800e8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c8:	601a      	str	r2, [r3, #0]
					break;
 800e8ca:	e042      	b.n	800e952 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8cc:	4b32      	ldr	r3, [pc, #200]	; (800e998 <xTaskIncrementTick+0x154>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e8dc:	693a      	ldr	r2, [r7, #16]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d203      	bcs.n	800e8ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e8e4:	4a2f      	ldr	r2, [pc, #188]	; (800e9a4 <xTaskIncrementTick+0x160>)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e8ea:	e032      	b.n	800e952 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f7fe fb6d 	bl	800cfd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d004      	beq.n	800e908 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	3318      	adds	r3, #24
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe fb64 	bl	800cfd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f002 fafa 	bl	8010f04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e914:	2201      	movs	r2, #1
 800e916:	409a      	lsls	r2, r3
 800e918:	4b23      	ldr	r3, [pc, #140]	; (800e9a8 <xTaskIncrementTick+0x164>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4313      	orrs	r3, r2
 800e91e:	4a22      	ldr	r2, [pc, #136]	; (800e9a8 <xTaskIncrementTick+0x164>)
 800e920:	6013      	str	r3, [r2, #0]
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e926:	4613      	mov	r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	4413      	add	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	4a1f      	ldr	r2, [pc, #124]	; (800e9ac <xTaskIncrementTick+0x168>)
 800e930:	441a      	add	r2, r3
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	3304      	adds	r3, #4
 800e936:	4619      	mov	r1, r3
 800e938:	4610      	mov	r0, r2
 800e93a:	f7fe faec 	bl	800cf16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e942:	4b1b      	ldr	r3, [pc, #108]	; (800e9b0 <xTaskIncrementTick+0x16c>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	429a      	cmp	r2, r3
 800e94a:	d3b5      	bcc.n	800e8b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e94c:	2301      	movs	r3, #1
 800e94e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e950:	e7b2      	b.n	800e8b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e952:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <xTaskIncrementTick+0x16c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e958:	4914      	ldr	r1, [pc, #80]	; (800e9ac <xTaskIncrementTick+0x168>)
 800e95a:	4613      	mov	r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	4413      	add	r3, r2
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	440b      	add	r3, r1
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b01      	cmp	r3, #1
 800e968:	d901      	bls.n	800e96e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800e96a:	2301      	movs	r3, #1
 800e96c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e96e:	4b11      	ldr	r3, [pc, #68]	; (800e9b4 <xTaskIncrementTick+0x170>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d007      	beq.n	800e986 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800e976:	2301      	movs	r3, #1
 800e978:	617b      	str	r3, [r7, #20]
 800e97a:	e004      	b.n	800e986 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e97c:	4b0e      	ldr	r3, [pc, #56]	; (800e9b8 <xTaskIncrementTick+0x174>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3301      	adds	r3, #1
 800e982:	4a0d      	ldr	r2, [pc, #52]	; (800e9b8 <xTaskIncrementTick+0x174>)
 800e984:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e986:	697b      	ldr	r3, [r7, #20]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3718      	adds	r7, #24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	20001110 	.word	0x20001110
 800e994:	200010ec 	.word	0x200010ec
 800e998:	200010a0 	.word	0x200010a0
 800e99c:	200010a4 	.word	0x200010a4
 800e9a0:	20001100 	.word	0x20001100
 800e9a4:	20001108 	.word	0x20001108
 800e9a8:	200010f0 	.word	0x200010f0
 800e9ac:	20000fec 	.word	0x20000fec
 800e9b0:	20000fe8 	.word	0x20000fe8
 800e9b4:	200010fc 	.word	0x200010fc
 800e9b8:	200010f8 	.word	0x200010f8

0800e9bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e9c2:	4b2f      	ldr	r3, [pc, #188]	; (800ea80 <vTaskSwitchContext+0xc4>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e9ca:	4b2e      	ldr	r3, [pc, #184]	; (800ea84 <vTaskSwitchContext+0xc8>)
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e9d0:	e052      	b.n	800ea78 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 800e9d2:	4b2c      	ldr	r3, [pc, #176]	; (800ea84 <vTaskSwitchContext+0xc8>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9d8:	4b2b      	ldr	r3, [pc, #172]	; (800ea88 <vTaskSwitchContext+0xcc>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	fab3 f383 	clz	r3, r3
 800e9e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e9e6:	7afb      	ldrb	r3, [r7, #11]
 800e9e8:	f1c3 031f 	rsb	r3, r3, #31
 800e9ec:	617b      	str	r3, [r7, #20]
 800e9ee:	4927      	ldr	r1, [pc, #156]	; (800ea8c <vTaskSwitchContext+0xd0>)
 800e9f0:	697a      	ldr	r2, [r7, #20]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	440b      	add	r3, r1
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d10a      	bne.n	800ea18 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ea02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea06:	f383 8811 	msr	BASEPRI, r3
 800ea0a:	f3bf 8f6f 	isb	sy
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	607b      	str	r3, [r7, #4]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <vTaskSwitchContext+0x5a>
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	4a1a      	ldr	r2, [pc, #104]	; (800ea8c <vTaskSwitchContext+0xd0>)
 800ea24:	4413      	add	r3, r2
 800ea26:	613b      	str	r3, [r7, #16]
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	605a      	str	r2, [r3, #4]
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	685a      	ldr	r2, [r3, #4]
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	3308      	adds	r3, #8
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d104      	bne.n	800ea48 <vTaskSwitchContext+0x8c>
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	685a      	ldr	r2, [r3, #4]
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	605a      	str	r2, [r3, #4]
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	4a10      	ldr	r2, [pc, #64]	; (800ea90 <vTaskSwitchContext+0xd4>)
 800ea50:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800ea52:	4b0f      	ldr	r3, [pc, #60]	; (800ea90 <vTaskSwitchContext+0xd4>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	4b0f      	ldr	r3, [pc, #60]	; (800ea94 <vTaskSwitchContext+0xd8>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d102      	bne.n	800ea64 <vTaskSwitchContext+0xa8>
 800ea5e:	f002 f9b1 	bl	8010dc4 <SEGGER_SYSVIEW_OnIdle>
 800ea62:	e004      	b.n	800ea6e <vTaskSwitchContext+0xb2>
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <vTaskSwitchContext+0xd4>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f002 fa09 	bl	8010e80 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ea6e:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <vTaskSwitchContext+0xd4>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	334c      	adds	r3, #76	; 0x4c
 800ea74:	4a08      	ldr	r2, [pc, #32]	; (800ea98 <vTaskSwitchContext+0xdc>)
 800ea76:	6013      	str	r3, [r2, #0]
}
 800ea78:	bf00      	nop
 800ea7a:	3718      	adds	r7, #24
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20001110 	.word	0x20001110
 800ea84:	200010fc 	.word	0x200010fc
 800ea88:	200010f0 	.word	0x200010f0
 800ea8c:	20000fec 	.word	0x20000fec
 800ea90:	20000fe8 	.word	0x20000fe8
 800ea94:	2000110c 	.word	0x2000110c
 800ea98:	20000010 	.word	0x20000010

0800ea9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10a      	bne.n	800eac2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	60fb      	str	r3, [r7, #12]
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eac2:	4b07      	ldr	r3, [pc, #28]	; (800eae0 <vTaskPlaceOnEventList+0x44>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	3318      	adds	r3, #24
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7fe fa47 	bl	800cf5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ead0:	2101      	movs	r1, #1
 800ead2:	6838      	ldr	r0, [r7, #0]
 800ead4:	f000 fba0 	bl	800f218 <prvAddCurrentTaskToDelayedList>
}
 800ead8:	bf00      	nop
 800eada:	3710      	adds	r7, #16
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	20000fe8 	.word	0x20000fe8

0800eae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	68db      	ldr	r3, [r3, #12]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10a      	bne.n	800eb10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800eafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafe:	f383 8811 	msr	BASEPRI, r3
 800eb02:	f3bf 8f6f 	isb	sy
 800eb06:	f3bf 8f4f 	dsb	sy
 800eb0a:	60fb      	str	r3, [r7, #12]
}
 800eb0c:	bf00      	nop
 800eb0e:	e7fe      	b.n	800eb0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	3318      	adds	r3, #24
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fe fa5b 	bl	800cfd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb1a:	4b1f      	ldr	r3, [pc, #124]	; (800eb98 <xTaskRemoveFromEventList+0xb4>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d120      	bne.n	800eb64 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	3304      	adds	r3, #4
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7fe fa52 	bl	800cfd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f002 f9e8 	bl	8010f04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb38:	2201      	movs	r2, #1
 800eb3a:	409a      	lsls	r2, r3
 800eb3c:	4b17      	ldr	r3, [pc, #92]	; (800eb9c <xTaskRemoveFromEventList+0xb8>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	4a16      	ldr	r2, [pc, #88]	; (800eb9c <xTaskRemoveFromEventList+0xb8>)
 800eb44:	6013      	str	r3, [r2, #0]
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	4413      	add	r3, r2
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4a13      	ldr	r2, [pc, #76]	; (800eba0 <xTaskRemoveFromEventList+0xbc>)
 800eb54:	441a      	add	r2, r3
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	3304      	adds	r3, #4
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f7fe f9da 	bl	800cf16 <vListInsertEnd>
 800eb62:	e005      	b.n	800eb70 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	3318      	adds	r3, #24
 800eb68:	4619      	mov	r1, r3
 800eb6a:	480e      	ldr	r0, [pc, #56]	; (800eba4 <xTaskRemoveFromEventList+0xc0>)
 800eb6c:	f7fe f9d3 	bl	800cf16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb74:	4b0c      	ldr	r3, [pc, #48]	; (800eba8 <xTaskRemoveFromEventList+0xc4>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d905      	bls.n	800eb8a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb82:	4b0a      	ldr	r3, [pc, #40]	; (800ebac <xTaskRemoveFromEventList+0xc8>)
 800eb84:	2201      	movs	r2, #1
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	e001      	b.n	800eb8e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb8e:	697b      	ldr	r3, [r7, #20]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	20001110 	.word	0x20001110
 800eb9c:	200010f0 	.word	0x200010f0
 800eba0:	20000fec 	.word	0x20000fec
 800eba4:	200010a8 	.word	0x200010a8
 800eba8:	20000fe8 	.word	0x20000fe8
 800ebac:	200010fc 	.word	0x200010fc

0800ebb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ebb8:	4b06      	ldr	r3, [pc, #24]	; (800ebd4 <vTaskInternalSetTimeOutState+0x24>)
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <vTaskInternalSetTimeOutState+0x28>)
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	605a      	str	r2, [r3, #4]
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	20001100 	.word	0x20001100
 800ebd8:	200010ec 	.word	0x200010ec

0800ebdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d10a      	bne.n	800ec02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ebec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf0:	f383 8811 	msr	BASEPRI, r3
 800ebf4:	f3bf 8f6f 	isb	sy
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	613b      	str	r3, [r7, #16]
}
 800ebfe:	bf00      	nop
 800ec00:	e7fe      	b.n	800ec00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10a      	bne.n	800ec1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ec08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	60fb      	str	r3, [r7, #12]
}
 800ec1a:	bf00      	nop
 800ec1c:	e7fe      	b.n	800ec1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ec1e:	f000 fc91 	bl	800f544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ec22:	4b1d      	ldr	r3, [pc, #116]	; (800ec98 <xTaskCheckForTimeOut+0xbc>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	69ba      	ldr	r2, [r7, #24]
 800ec2e:	1ad3      	subs	r3, r2, r3
 800ec30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec3a:	d102      	bne.n	800ec42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	61fb      	str	r3, [r7, #28]
 800ec40:	e023      	b.n	800ec8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	4b15      	ldr	r3, [pc, #84]	; (800ec9c <xTaskCheckForTimeOut+0xc0>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d007      	beq.n	800ec5e <xTaskCheckForTimeOut+0x82>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	69ba      	ldr	r2, [r7, #24]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d302      	bcc.n	800ec5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	61fb      	str	r3, [r7, #28]
 800ec5c:	e015      	b.n	800ec8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d20b      	bcs.n	800ec80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	1ad2      	subs	r2, r2, r3
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff ff9b 	bl	800ebb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	61fb      	str	r3, [r7, #28]
 800ec7e:	e004      	b.n	800ec8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec86:	2301      	movs	r3, #1
 800ec88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec8a:	f000 fc8b 	bl	800f5a4 <vPortExitCritical>

	return xReturn;
 800ec8e:	69fb      	ldr	r3, [r7, #28]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	200010ec 	.word	0x200010ec
 800ec9c:	20001100 	.word	0x20001100

0800eca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eca0:	b480      	push	{r7}
 800eca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eca4:	4b03      	ldr	r3, [pc, #12]	; (800ecb4 <vTaskMissedYield+0x14>)
 800eca6:	2201      	movs	r2, #1
 800eca8:	601a      	str	r2, [r3, #0]
}
 800ecaa:	bf00      	nop
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	200010fc 	.word	0x200010fc

0800ecb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ecc0:	f000 f852 	bl	800ed68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ecc4:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <prvIdleTask+0x28>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d9f9      	bls.n	800ecc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eccc:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <prvIdleTask+0x2c>)
 800ecce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ecdc:	e7f0      	b.n	800ecc0 <prvIdleTask+0x8>
 800ecde:	bf00      	nop
 800ece0:	20000fec 	.word	0x20000fec
 800ece4:	e000ed04 	.word	0xe000ed04

0800ece8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecee:	2300      	movs	r3, #0
 800ecf0:	607b      	str	r3, [r7, #4]
 800ecf2:	e00c      	b.n	800ed0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	4a12      	ldr	r2, [pc, #72]	; (800ed48 <prvInitialiseTaskLists+0x60>)
 800ed00:	4413      	add	r3, r2
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7fe f8da 	bl	800cebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	607b      	str	r3, [r7, #4]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b06      	cmp	r3, #6
 800ed12:	d9ef      	bls.n	800ecf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed14:	480d      	ldr	r0, [pc, #52]	; (800ed4c <prvInitialiseTaskLists+0x64>)
 800ed16:	f7fe f8d1 	bl	800cebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed1a:	480d      	ldr	r0, [pc, #52]	; (800ed50 <prvInitialiseTaskLists+0x68>)
 800ed1c:	f7fe f8ce 	bl	800cebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed20:	480c      	ldr	r0, [pc, #48]	; (800ed54 <prvInitialiseTaskLists+0x6c>)
 800ed22:	f7fe f8cb 	bl	800cebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed26:	480c      	ldr	r0, [pc, #48]	; (800ed58 <prvInitialiseTaskLists+0x70>)
 800ed28:	f7fe f8c8 	bl	800cebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed2c:	480b      	ldr	r0, [pc, #44]	; (800ed5c <prvInitialiseTaskLists+0x74>)
 800ed2e:	f7fe f8c5 	bl	800cebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed32:	4b0b      	ldr	r3, [pc, #44]	; (800ed60 <prvInitialiseTaskLists+0x78>)
 800ed34:	4a05      	ldr	r2, [pc, #20]	; (800ed4c <prvInitialiseTaskLists+0x64>)
 800ed36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed38:	4b0a      	ldr	r3, [pc, #40]	; (800ed64 <prvInitialiseTaskLists+0x7c>)
 800ed3a:	4a05      	ldr	r2, [pc, #20]	; (800ed50 <prvInitialiseTaskLists+0x68>)
 800ed3c:	601a      	str	r2, [r3, #0]
}
 800ed3e:	bf00      	nop
 800ed40:	3708      	adds	r7, #8
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20000fec 	.word	0x20000fec
 800ed4c:	20001078 	.word	0x20001078
 800ed50:	2000108c 	.word	0x2000108c
 800ed54:	200010a8 	.word	0x200010a8
 800ed58:	200010bc 	.word	0x200010bc
 800ed5c:	200010d4 	.word	0x200010d4
 800ed60:	200010a0 	.word	0x200010a0
 800ed64:	200010a4 	.word	0x200010a4

0800ed68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed6e:	e019      	b.n	800eda4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed70:	f000 fbe8 	bl	800f544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed74:	4b10      	ldr	r3, [pc, #64]	; (800edb8 <prvCheckTasksWaitingTermination+0x50>)
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fe f925 	bl	800cfd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed86:	4b0d      	ldr	r3, [pc, #52]	; (800edbc <prvCheckTasksWaitingTermination+0x54>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	4a0b      	ldr	r2, [pc, #44]	; (800edbc <prvCheckTasksWaitingTermination+0x54>)
 800ed8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed90:	4b0b      	ldr	r3, [pc, #44]	; (800edc0 <prvCheckTasksWaitingTermination+0x58>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	3b01      	subs	r3, #1
 800ed96:	4a0a      	ldr	r2, [pc, #40]	; (800edc0 <prvCheckTasksWaitingTermination+0x58>)
 800ed98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed9a:	f000 fc03 	bl	800f5a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f810 	bl	800edc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eda4:	4b06      	ldr	r3, [pc, #24]	; (800edc0 <prvCheckTasksWaitingTermination+0x58>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1e1      	bne.n	800ed70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800edac:	bf00      	nop
 800edae:	bf00      	nop
 800edb0:	3708      	adds	r7, #8
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	200010bc 	.word	0x200010bc
 800edbc:	200010e8 	.word	0x200010e8
 800edc0:	200010d0 	.word	0x200010d0

0800edc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	334c      	adds	r3, #76	; 0x4c
 800edd0:	4618      	mov	r0, r3
 800edd2:	f002 fc71 	bl	80116b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d108      	bne.n	800edf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede4:	4618      	mov	r0, r3
 800ede6:	f000 fd9b 	bl	800f920 <vPortFree>
				vPortFree( pxTCB );
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 fd98 	bl	800f920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800edf0:	e018      	b.n	800ee24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d103      	bne.n	800ee04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fd8f 	bl	800f920 <vPortFree>
	}
 800ee02:	e00f      	b.n	800ee24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d00a      	beq.n	800ee24 <prvDeleteTCB+0x60>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	60fb      	str	r3, [r7, #12]
}
 800ee20:	bf00      	nop
 800ee22:	e7fe      	b.n	800ee22 <prvDeleteTCB+0x5e>
	}
 800ee24:	bf00      	nop
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee32:	4b0c      	ldr	r3, [pc, #48]	; (800ee64 <prvResetNextTaskUnblockTime+0x38>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d104      	bne.n	800ee46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee3c:	4b0a      	ldr	r3, [pc, #40]	; (800ee68 <prvResetNextTaskUnblockTime+0x3c>)
 800ee3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ee44:	e008      	b.n	800ee58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee46:	4b07      	ldr	r3, [pc, #28]	; (800ee64 <prvResetNextTaskUnblockTime+0x38>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	4a04      	ldr	r2, [pc, #16]	; (800ee68 <prvResetNextTaskUnblockTime+0x3c>)
 800ee56:	6013      	str	r3, [r2, #0]
}
 800ee58:	bf00      	nop
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	200010a0 	.word	0x200010a0
 800ee68:	20001108 	.word	0x20001108

0800ee6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b083      	sub	sp, #12
 800ee70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee72:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <xTaskGetSchedulerState+0x34>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d102      	bne.n	800ee80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	607b      	str	r3, [r7, #4]
 800ee7e:	e008      	b.n	800ee92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee80:	4b08      	ldr	r3, [pc, #32]	; (800eea4 <xTaskGetSchedulerState+0x38>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d102      	bne.n	800ee8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee88:	2302      	movs	r3, #2
 800ee8a:	607b      	str	r3, [r7, #4]
 800ee8c:	e001      	b.n	800ee92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee92:	687b      	ldr	r3, [r7, #4]
	}
 800ee94:	4618      	mov	r0, r3
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr
 800eea0:	200010f4 	.word	0x200010f4
 800eea4:	20001110 	.word	0x20001110

0800eea8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d067      	beq.n	800ef8e <xTaskPriorityInherit+0xe6>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec2:	4b35      	ldr	r3, [pc, #212]	; (800ef98 <xTaskPriorityInherit+0xf0>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d257      	bcs.n	800ef7c <xTaskPriorityInherit+0xd4>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	db06      	blt.n	800eee2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eed4:	4b30      	ldr	r3, [pc, #192]	; (800ef98 <xTaskPriorityInherit+0xf0>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeda:	f1c3 0207 	rsb	r2, r3, #7
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	6959      	ldr	r1, [r3, #20]
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeea:	4613      	mov	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4413      	add	r3, r2
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	4a2a      	ldr	r2, [pc, #168]	; (800ef9c <xTaskPriorityInherit+0xf4>)
 800eef4:	4413      	add	r3, r2
 800eef6:	4299      	cmp	r1, r3
 800eef8:	d133      	bne.n	800ef62 <xTaskPriorityInherit+0xba>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	3304      	adds	r3, #4
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe f866 	bl	800cfd0 <uxListRemove>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10a      	bne.n	800ef20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0e:	2201      	movs	r2, #1
 800ef10:	fa02 f303 	lsl.w	r3, r2, r3
 800ef14:	43da      	mvns	r2, r3
 800ef16:	4b22      	ldr	r3, [pc, #136]	; (800efa0 <xTaskPriorityInherit+0xf8>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	4a20      	ldr	r2, [pc, #128]	; (800efa0 <xTaskPriorityInherit+0xf8>)
 800ef1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef20:	4b1d      	ldr	r3, [pc, #116]	; (800ef98 <xTaskPriorityInherit+0xf0>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f001 ffe9 	bl	8010f04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef36:	2201      	movs	r2, #1
 800ef38:	409a      	lsls	r2, r3
 800ef3a:	4b19      	ldr	r3, [pc, #100]	; (800efa0 <xTaskPriorityInherit+0xf8>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	4a17      	ldr	r2, [pc, #92]	; (800efa0 <xTaskPriorityInherit+0xf8>)
 800ef42:	6013      	str	r3, [r2, #0]
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef48:	4613      	mov	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	4a12      	ldr	r2, [pc, #72]	; (800ef9c <xTaskPriorityInherit+0xf4>)
 800ef52:	441a      	add	r2, r3
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	3304      	adds	r3, #4
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	f7fd ffdb 	bl	800cf16 <vListInsertEnd>
 800ef60:	e004      	b.n	800ef6c <xTaskPriorityInherit+0xc4>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef62:	4b0d      	ldr	r3, [pc, #52]	; (800ef98 <xTaskPriorityInherit+0xf0>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4619      	mov	r1, r3
 800ef70:	2049      	movs	r0, #73	; 0x49
 800ef72:	f001 fac1 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef76:	2301      	movs	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e008      	b.n	800ef8e <xTaskPriorityInherit+0xe6>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef80:	4b05      	ldr	r3, [pc, #20]	; (800ef98 <xTaskPriorityInherit+0xf0>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d201      	bcs.n	800ef8e <xTaskPriorityInherit+0xe6>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
	}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	20000fe8 	.word	0x20000fe8
 800ef9c:	20000fec 	.word	0x20000fec
 800efa0:	200010f0 	.word	0x200010f0

0800efa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800efb0:	2300      	movs	r3, #0
 800efb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d077      	beq.n	800f0aa <xTaskPriorityDisinherit+0x106>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800efba:	4b3e      	ldr	r3, [pc, #248]	; (800f0b4 <xTaskPriorityDisinherit+0x110>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d00a      	beq.n	800efda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	60fb      	str	r3, [r7, #12]
}
 800efd6:	bf00      	nop
 800efd8:	e7fe      	b.n	800efd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10a      	bne.n	800eff8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800efe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe6:	f383 8811 	msr	BASEPRI, r3
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	60bb      	str	r3, [r7, #8]
}
 800eff4:	bf00      	nop
 800eff6:	e7fe      	b.n	800eff6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800effc:	1e5a      	subs	r2, r3, #1
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d04d      	beq.n	800f0aa <xTaskPriorityDisinherit+0x106>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f012:	2b00      	cmp	r3, #0
 800f014:	d149      	bne.n	800f0aa <xTaskPriorityDisinherit+0x106>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	3304      	adds	r3, #4
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fd ffd8 	bl	800cfd0 <uxListRemove>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d115      	bne.n	800f052 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f02a:	4923      	ldr	r1, [pc, #140]	; (800f0b8 <xTaskPriorityDisinherit+0x114>)
 800f02c:	4613      	mov	r3, r2
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	4413      	add	r3, r2
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	440b      	add	r3, r1
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d10a      	bne.n	800f052 <xTaskPriorityDisinherit+0xae>
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f040:	2201      	movs	r2, #1
 800f042:	fa02 f303 	lsl.w	r3, r2, r3
 800f046:	43da      	mvns	r2, r3
 800f048:	4b1c      	ldr	r3, [pc, #112]	; (800f0bc <xTaskPriorityDisinherit+0x118>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	4013      	ands	r3, r2
 800f04e:	4a1b      	ldr	r2, [pc, #108]	; (800f0bc <xTaskPriorityDisinherit+0x118>)
 800f050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4619      	mov	r1, r3
 800f056:	204a      	movs	r0, #74	; 0x4a
 800f058:	f001 fa4e 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f068:	f1c3 0207 	rsb	r2, r3, #7
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	4618      	mov	r0, r3
 800f074:	f001 ff46 	bl	8010f04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f07c:	2201      	movs	r2, #1
 800f07e:	409a      	lsls	r2, r3
 800f080:	4b0e      	ldr	r3, [pc, #56]	; (800f0bc <xTaskPriorityDisinherit+0x118>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4313      	orrs	r3, r2
 800f086:	4a0d      	ldr	r2, [pc, #52]	; (800f0bc <xTaskPriorityDisinherit+0x118>)
 800f088:	6013      	str	r3, [r2, #0]
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f08e:	4613      	mov	r3, r2
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	4413      	add	r3, r2
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	4a08      	ldr	r2, [pc, #32]	; (800f0b8 <xTaskPriorityDisinherit+0x114>)
 800f098:	441a      	add	r2, r3
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	3304      	adds	r3, #4
 800f09e:	4619      	mov	r1, r3
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	f7fd ff38 	bl	800cf16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f0aa:	697b      	ldr	r3, [r7, #20]
	}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	20000fe8 	.word	0x20000fe8
 800f0b8:	20000fec 	.word	0x20000fec
 800f0bc:	200010f0 	.word	0x200010f0

0800f0c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b088      	sub	sp, #32
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 8081 	beq.w	800f1dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d10a      	bne.n	800f0f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e6:	f383 8811 	msr	BASEPRI, r3
 800f0ea:	f3bf 8f6f 	isb	sy
 800f0ee:	f3bf 8f4f 	dsb	sy
 800f0f2:	60fb      	str	r3, [r7, #12]
}
 800f0f4:	bf00      	nop
 800f0f6:	e7fe      	b.n	800f0f6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0fc:	683a      	ldr	r2, [r7, #0]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d902      	bls.n	800f108 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	61fb      	str	r3, [r7, #28]
 800f106:	e002      	b.n	800f10e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f10c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f112:	69fa      	ldr	r2, [r7, #28]
 800f114:	429a      	cmp	r2, r3
 800f116:	d061      	beq.n	800f1dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f11c:	697a      	ldr	r2, [r7, #20]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d15c      	bne.n	800f1dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f122:	4b30      	ldr	r3, [pc, #192]	; (800f1e4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	69ba      	ldr	r2, [r7, #24]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d10a      	bne.n	800f142 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800f12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	60bb      	str	r3, [r7, #8]
}
 800f13e:	bf00      	nop
 800f140:	e7fe      	b.n	800f140 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4619      	mov	r1, r3
 800f146:	204a      	movs	r0, #74	; 0x4a
 800f148:	f001 f9d6 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f150:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	69fa      	ldr	r2, [r7, #28]
 800f156:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	db04      	blt.n	800f16a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	f1c3 0207 	rsb	r2, r3, #7
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	6959      	ldr	r1, [r3, #20]
 800f16e:	693a      	ldr	r2, [r7, #16]
 800f170:	4613      	mov	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	4413      	add	r3, r2
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	4a1b      	ldr	r2, [pc, #108]	; (800f1e8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800f17a:	4413      	add	r3, r2
 800f17c:	4299      	cmp	r1, r3
 800f17e:	d12d      	bne.n	800f1dc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	3304      	adds	r3, #4
 800f184:	4618      	mov	r0, r3
 800f186:	f7fd ff23 	bl	800cfd0 <uxListRemove>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10a      	bne.n	800f1a6 <vTaskPriorityDisinheritAfterTimeout+0xe6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f194:	2201      	movs	r2, #1
 800f196:	fa02 f303 	lsl.w	r3, r2, r3
 800f19a:	43da      	mvns	r2, r3
 800f19c:	4b13      	ldr	r3, [pc, #76]	; (800f1ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	4a12      	ldr	r2, [pc, #72]	; (800f1ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800f1a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f1a6:	69bb      	ldr	r3, [r7, #24]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f001 feab 	bl	8010f04 <SEGGER_SYSVIEW_OnTaskStartReady>
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	409a      	lsls	r2, r3
 800f1b6:	4b0d      	ldr	r3, [pc, #52]	; (800f1ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	4a0b      	ldr	r2, [pc, #44]	; (800f1ec <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	4413      	add	r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	4a06      	ldr	r2, [pc, #24]	; (800f1e8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800f1ce:	441a      	add	r2, r3
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	3304      	adds	r3, #4
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	4610      	mov	r0, r2
 800f1d8:	f7fd fe9d 	bl	800cf16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1dc:	bf00      	nop
 800f1de:	3720      	adds	r7, #32
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	20000fe8 	.word	0x20000fe8
 800f1e8:	20000fec 	.word	0x20000fec
 800f1ec:	200010f0 	.word	0x200010f0

0800f1f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f1f0:	b480      	push	{r7}
 800f1f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f1f4:	4b07      	ldr	r3, [pc, #28]	; (800f214 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d004      	beq.n	800f206 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f1fc:	4b05      	ldr	r3, [pc, #20]	; (800f214 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f202:	3201      	adds	r2, #1
 800f204:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f206:	4b03      	ldr	r3, [pc, #12]	; (800f214 <pvTaskIncrementMutexHeldCount+0x24>)
 800f208:	681b      	ldr	r3, [r3, #0]
	}
 800f20a:	4618      	mov	r0, r3
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr
 800f214:	20000fe8 	.word	0x20000fe8

0800f218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f222:	4b29      	ldr	r3, [pc, #164]	; (800f2c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f228:	4b28      	ldr	r3, [pc, #160]	; (800f2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	3304      	adds	r3, #4
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fd fece 	bl	800cfd0 <uxListRemove>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d10b      	bne.n	800f252 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f23a:	4b24      	ldr	r3, [pc, #144]	; (800f2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f240:	2201      	movs	r2, #1
 800f242:	fa02 f303 	lsl.w	r3, r2, r3
 800f246:	43da      	mvns	r2, r3
 800f248:	4b21      	ldr	r3, [pc, #132]	; (800f2d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4013      	ands	r3, r2
 800f24e:	4a20      	ldr	r2, [pc, #128]	; (800f2d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f250:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f258:	d10a      	bne.n	800f270 <prvAddCurrentTaskToDelayedList+0x58>
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d007      	beq.n	800f270 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f260:	4b1a      	ldr	r3, [pc, #104]	; (800f2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3304      	adds	r3, #4
 800f266:	4619      	mov	r1, r3
 800f268:	481a      	ldr	r0, [pc, #104]	; (800f2d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f26a:	f7fd fe54 	bl	800cf16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f26e:	e026      	b.n	800f2be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f270:	68fa      	ldr	r2, [r7, #12]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4413      	add	r3, r2
 800f276:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f278:	4b14      	ldr	r3, [pc, #80]	; (800f2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f280:	68ba      	ldr	r2, [r7, #8]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	429a      	cmp	r2, r3
 800f286:	d209      	bcs.n	800f29c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f288:	4b13      	ldr	r3, [pc, #76]	; (800f2d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	3304      	adds	r3, #4
 800f292:	4619      	mov	r1, r3
 800f294:	4610      	mov	r0, r2
 800f296:	f7fd fe62 	bl	800cf5e <vListInsert>
}
 800f29a:	e010      	b.n	800f2be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f29c:	4b0f      	ldr	r3, [pc, #60]	; (800f2dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	4610      	mov	r0, r2
 800f2aa:	f7fd fe58 	bl	800cf5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2ae:	4b0c      	ldr	r3, [pc, #48]	; (800f2e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	68ba      	ldr	r2, [r7, #8]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d202      	bcs.n	800f2be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f2b8:	4a09      	ldr	r2, [pc, #36]	; (800f2e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	6013      	str	r3, [r2, #0]
}
 800f2be:	bf00      	nop
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	200010ec 	.word	0x200010ec
 800f2cc:	20000fe8 	.word	0x20000fe8
 800f2d0:	200010f0 	.word	0x200010f0
 800f2d4:	200010d4 	.word	0x200010d4
 800f2d8:	200010a4 	.word	0x200010a4
 800f2dc:	200010a0 	.word	0x200010a0
 800f2e0:	20001108 	.word	0x20001108

0800f2e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	3b04      	subs	r3, #4
 800f2f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3b04      	subs	r3, #4
 800f302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	f023 0201 	bic.w	r2, r3, #1
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3b04      	subs	r3, #4
 800f312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f314:	4a0c      	ldr	r2, [pc, #48]	; (800f348 <pxPortInitialiseStack+0x64>)
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	3b14      	subs	r3, #20
 800f31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	3b04      	subs	r3, #4
 800f32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f06f 0202 	mvn.w	r2, #2
 800f332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	3b20      	subs	r3, #32
 800f338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f33a:	68fb      	ldr	r3, [r7, #12]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3714      	adds	r7, #20
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr
 800f348:	0800f34d 	.word	0x0800f34d

0800f34c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f352:	2300      	movs	r3, #0
 800f354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f356:	4b12      	ldr	r3, [pc, #72]	; (800f3a0 <prvTaskExitError+0x54>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f35e:	d00a      	beq.n	800f376 <prvTaskExitError+0x2a>
	__asm volatile
 800f360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	f3bf 8f6f 	isb	sy
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	60fb      	str	r3, [r7, #12]
}
 800f372:	bf00      	nop
 800f374:	e7fe      	b.n	800f374 <prvTaskExitError+0x28>
	__asm volatile
 800f376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37a:	f383 8811 	msr	BASEPRI, r3
 800f37e:	f3bf 8f6f 	isb	sy
 800f382:	f3bf 8f4f 	dsb	sy
 800f386:	60bb      	str	r3, [r7, #8]
}
 800f388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f38a:	bf00      	nop
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d0fc      	beq.n	800f38c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f392:	bf00      	nop
 800f394:	bf00      	nop
 800f396:	3714      	adds	r7, #20
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr
 800f3a0:	2000000c 	.word	0x2000000c
	...

0800f3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f3b0:	4b07      	ldr	r3, [pc, #28]	; (800f3d0 <pxCurrentTCBConst2>)
 800f3b2:	6819      	ldr	r1, [r3, #0]
 800f3b4:	6808      	ldr	r0, [r1, #0]
 800f3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ba:	f380 8809 	msr	PSP, r0
 800f3be:	f3bf 8f6f 	isb	sy
 800f3c2:	f04f 0000 	mov.w	r0, #0
 800f3c6:	f380 8811 	msr	BASEPRI, r0
 800f3ca:	4770      	bx	lr
 800f3cc:	f3af 8000 	nop.w

0800f3d0 <pxCurrentTCBConst2>:
 800f3d0:	20000fe8 	.word	0x20000fe8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f3d4:	bf00      	nop
 800f3d6:	bf00      	nop

0800f3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f3d8:	4808      	ldr	r0, [pc, #32]	; (800f3fc <prvPortStartFirstTask+0x24>)
 800f3da:	6800      	ldr	r0, [r0, #0]
 800f3dc:	6800      	ldr	r0, [r0, #0]
 800f3de:	f380 8808 	msr	MSP, r0
 800f3e2:	f04f 0000 	mov.w	r0, #0
 800f3e6:	f380 8814 	msr	CONTROL, r0
 800f3ea:	b662      	cpsie	i
 800f3ec:	b661      	cpsie	f
 800f3ee:	f3bf 8f4f 	dsb	sy
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	df00      	svc	0
 800f3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f3fa:	bf00      	nop
 800f3fc:	e000ed08 	.word	0xe000ed08

0800f400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f406:	4b46      	ldr	r3, [pc, #280]	; (800f520 <xPortStartScheduler+0x120>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a46      	ldr	r2, [pc, #280]	; (800f524 <xPortStartScheduler+0x124>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d10a      	bne.n	800f426 <xPortStartScheduler+0x26>
	__asm volatile
 800f410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f414:	f383 8811 	msr	BASEPRI, r3
 800f418:	f3bf 8f6f 	isb	sy
 800f41c:	f3bf 8f4f 	dsb	sy
 800f420:	613b      	str	r3, [r7, #16]
}
 800f422:	bf00      	nop
 800f424:	e7fe      	b.n	800f424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f426:	4b3e      	ldr	r3, [pc, #248]	; (800f520 <xPortStartScheduler+0x120>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a3f      	ldr	r2, [pc, #252]	; (800f528 <xPortStartScheduler+0x128>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d10a      	bne.n	800f446 <xPortStartScheduler+0x46>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	60fb      	str	r3, [r7, #12]
}
 800f442:	bf00      	nop
 800f444:	e7fe      	b.n	800f444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f446:	4b39      	ldr	r3, [pc, #228]	; (800f52c <xPortStartScheduler+0x12c>)
 800f448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	22ff      	movs	r2, #255	; 0xff
 800f456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f460:	78fb      	ldrb	r3, [r7, #3]
 800f462:	b2db      	uxtb	r3, r3
 800f464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	4b31      	ldr	r3, [pc, #196]	; (800f530 <xPortStartScheduler+0x130>)
 800f46c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f46e:	4b31      	ldr	r3, [pc, #196]	; (800f534 <xPortStartScheduler+0x134>)
 800f470:	2207      	movs	r2, #7
 800f472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f474:	e009      	b.n	800f48a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f476:	4b2f      	ldr	r3, [pc, #188]	; (800f534 <xPortStartScheduler+0x134>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	4a2d      	ldr	r2, [pc, #180]	; (800f534 <xPortStartScheduler+0x134>)
 800f47e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	b2db      	uxtb	r3, r3
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	b2db      	uxtb	r3, r3
 800f488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f48a:	78fb      	ldrb	r3, [r7, #3]
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f492:	2b80      	cmp	r3, #128	; 0x80
 800f494:	d0ef      	beq.n	800f476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f496:	4b27      	ldr	r3, [pc, #156]	; (800f534 <xPortStartScheduler+0x134>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f1c3 0307 	rsb	r3, r3, #7
 800f49e:	2b04      	cmp	r3, #4
 800f4a0:	d00a      	beq.n	800f4b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a6:	f383 8811 	msr	BASEPRI, r3
 800f4aa:	f3bf 8f6f 	isb	sy
 800f4ae:	f3bf 8f4f 	dsb	sy
 800f4b2:	60bb      	str	r3, [r7, #8]
}
 800f4b4:	bf00      	nop
 800f4b6:	e7fe      	b.n	800f4b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f4b8:	4b1e      	ldr	r3, [pc, #120]	; (800f534 <xPortStartScheduler+0x134>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	021b      	lsls	r3, r3, #8
 800f4be:	4a1d      	ldr	r2, [pc, #116]	; (800f534 <xPortStartScheduler+0x134>)
 800f4c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f4c2:	4b1c      	ldr	r3, [pc, #112]	; (800f534 <xPortStartScheduler+0x134>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f4ca:	4a1a      	ldr	r2, [pc, #104]	; (800f534 <xPortStartScheduler+0x134>)
 800f4cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	b2da      	uxtb	r2, r3
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f4d6:	4b18      	ldr	r3, [pc, #96]	; (800f538 <xPortStartScheduler+0x138>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a17      	ldr	r2, [pc, #92]	; (800f538 <xPortStartScheduler+0x138>)
 800f4dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f4e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f4e2:	4b15      	ldr	r3, [pc, #84]	; (800f538 <xPortStartScheduler+0x138>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a14      	ldr	r2, [pc, #80]	; (800f538 <xPortStartScheduler+0x138>)
 800f4e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f4ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f4ee:	f000 f8dd 	bl	800f6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f4f2:	4b12      	ldr	r3, [pc, #72]	; (800f53c <xPortStartScheduler+0x13c>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f4f8:	f000 f8fc 	bl	800f6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f4fc:	4b10      	ldr	r3, [pc, #64]	; (800f540 <xPortStartScheduler+0x140>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	4a0f      	ldr	r2, [pc, #60]	; (800f540 <xPortStartScheduler+0x140>)
 800f502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f508:	f7ff ff66 	bl	800f3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f50c:	f7ff fa56 	bl	800e9bc <vTaskSwitchContext>
	prvTaskExitError();
 800f510:	f7ff ff1c 	bl	800f34c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	3718      	adds	r7, #24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	e000ed00 	.word	0xe000ed00
 800f524:	410fc271 	.word	0x410fc271
 800f528:	410fc270 	.word	0x410fc270
 800f52c:	e000e400 	.word	0xe000e400
 800f530:	20001114 	.word	0x20001114
 800f534:	20001118 	.word	0x20001118
 800f538:	e000ed20 	.word	0xe000ed20
 800f53c:	2000000c 	.word	0x2000000c
 800f540:	e000ef34 	.word	0xe000ef34

0800f544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
	__asm volatile
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	607b      	str	r3, [r7, #4]
}
 800f55c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f55e:	4b0f      	ldr	r3, [pc, #60]	; (800f59c <vPortEnterCritical+0x58>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	3301      	adds	r3, #1
 800f564:	4a0d      	ldr	r2, [pc, #52]	; (800f59c <vPortEnterCritical+0x58>)
 800f566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f568:	4b0c      	ldr	r3, [pc, #48]	; (800f59c <vPortEnterCritical+0x58>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d10f      	bne.n	800f590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f570:	4b0b      	ldr	r3, [pc, #44]	; (800f5a0 <vPortEnterCritical+0x5c>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	b2db      	uxtb	r3, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00a      	beq.n	800f590 <vPortEnterCritical+0x4c>
	__asm volatile
 800f57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	603b      	str	r3, [r7, #0]
}
 800f58c:	bf00      	nop
 800f58e:	e7fe      	b.n	800f58e <vPortEnterCritical+0x4a>
	}
}
 800f590:	bf00      	nop
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	2000000c 	.word	0x2000000c
 800f5a0:	e000ed04 	.word	0xe000ed04

0800f5a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f5aa:	4b12      	ldr	r3, [pc, #72]	; (800f5f4 <vPortExitCritical+0x50>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10a      	bne.n	800f5c8 <vPortExitCritical+0x24>
	__asm volatile
 800f5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	607b      	str	r3, [r7, #4]
}
 800f5c4:	bf00      	nop
 800f5c6:	e7fe      	b.n	800f5c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f5c8:	4b0a      	ldr	r3, [pc, #40]	; (800f5f4 <vPortExitCritical+0x50>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	4a09      	ldr	r2, [pc, #36]	; (800f5f4 <vPortExitCritical+0x50>)
 800f5d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f5d2:	4b08      	ldr	r3, [pc, #32]	; (800f5f4 <vPortExitCritical+0x50>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d105      	bne.n	800f5e6 <vPortExitCritical+0x42>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	f383 8811 	msr	BASEPRI, r3
}
 800f5e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f5e6:	bf00      	nop
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	2000000c 	.word	0x2000000c
	...

0800f600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f600:	f3ef 8009 	mrs	r0, PSP
 800f604:	f3bf 8f6f 	isb	sy
 800f608:	4b15      	ldr	r3, [pc, #84]	; (800f660 <pxCurrentTCBConst>)
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	f01e 0f10 	tst.w	lr, #16
 800f610:	bf08      	it	eq
 800f612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61a:	6010      	str	r0, [r2, #0]
 800f61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f620:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f624:	f380 8811 	msr	BASEPRI, r0
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f7ff f9c4 	bl	800e9bc <vTaskSwitchContext>
 800f634:	f04f 0000 	mov.w	r0, #0
 800f638:	f380 8811 	msr	BASEPRI, r0
 800f63c:	bc09      	pop	{r0, r3}
 800f63e:	6819      	ldr	r1, [r3, #0]
 800f640:	6808      	ldr	r0, [r1, #0]
 800f642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f646:	f01e 0f10 	tst.w	lr, #16
 800f64a:	bf08      	it	eq
 800f64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f650:	f380 8809 	msr	PSP, r0
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	f3af 8000 	nop.w

0800f660 <pxCurrentTCBConst>:
 800f660:	20000fe8 	.word	0x20000fe8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f664:	bf00      	nop
 800f666:	bf00      	nop

0800f668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
	__asm volatile
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	607b      	str	r3, [r7, #4]
}
 800f680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f682:	f7ff f8df 	bl	800e844 <xTaskIncrementTick>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d003      	beq.n	800f694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f68c:	4b06      	ldr	r3, [pc, #24]	; (800f6a8 <SysTick_Handler+0x40>)
 800f68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f692:	601a      	str	r2, [r3, #0]
 800f694:	2300      	movs	r3, #0
 800f696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	f383 8811 	msr	BASEPRI, r3
}
 800f69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f6a0:	bf00      	nop
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	e000ed04 	.word	0xe000ed04

0800f6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f6b0:	4b0b      	ldr	r3, [pc, #44]	; (800f6e0 <vPortSetupTimerInterrupt+0x34>)
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f6b6:	4b0b      	ldr	r3, [pc, #44]	; (800f6e4 <vPortSetupTimerInterrupt+0x38>)
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f6bc:	4b0a      	ldr	r3, [pc, #40]	; (800f6e8 <vPortSetupTimerInterrupt+0x3c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a0a      	ldr	r2, [pc, #40]	; (800f6ec <vPortSetupTimerInterrupt+0x40>)
 800f6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6c6:	099b      	lsrs	r3, r3, #6
 800f6c8:	4a09      	ldr	r2, [pc, #36]	; (800f6f0 <vPortSetupTimerInterrupt+0x44>)
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f6ce:	4b04      	ldr	r3, [pc, #16]	; (800f6e0 <vPortSetupTimerInterrupt+0x34>)
 800f6d0:	2207      	movs	r2, #7
 800f6d2:	601a      	str	r2, [r3, #0]
}
 800f6d4:	bf00      	nop
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	e000e010 	.word	0xe000e010
 800f6e4:	e000e018 	.word	0xe000e018
 800f6e8:	20000000 	.word	0x20000000
 800f6ec:	10624dd3 	.word	0x10624dd3
 800f6f0:	e000e014 	.word	0xe000e014

0800f6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f704 <vPortEnableVFP+0x10>
 800f6f8:	6801      	ldr	r1, [r0, #0]
 800f6fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f6fe:	6001      	str	r1, [r0, #0]
 800f700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f702:	bf00      	nop
 800f704:	e000ed88 	.word	0xe000ed88

0800f708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f70e:	f3ef 8305 	mrs	r3, IPSR
 800f712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2b0f      	cmp	r3, #15
 800f718:	d914      	bls.n	800f744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f71a:	4a17      	ldr	r2, [pc, #92]	; (800f778 <vPortValidateInterruptPriority+0x70>)
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	4413      	add	r3, r2
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f724:	4b15      	ldr	r3, [pc, #84]	; (800f77c <vPortValidateInterruptPriority+0x74>)
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	7afa      	ldrb	r2, [r7, #11]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d20a      	bcs.n	800f744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f732:	f383 8811 	msr	BASEPRI, r3
 800f736:	f3bf 8f6f 	isb	sy
 800f73a:	f3bf 8f4f 	dsb	sy
 800f73e:	607b      	str	r3, [r7, #4]
}
 800f740:	bf00      	nop
 800f742:	e7fe      	b.n	800f742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f744:	4b0e      	ldr	r3, [pc, #56]	; (800f780 <vPortValidateInterruptPriority+0x78>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f74c:	4b0d      	ldr	r3, [pc, #52]	; (800f784 <vPortValidateInterruptPriority+0x7c>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	429a      	cmp	r2, r3
 800f752:	d90a      	bls.n	800f76a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f758:	f383 8811 	msr	BASEPRI, r3
 800f75c:	f3bf 8f6f 	isb	sy
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	603b      	str	r3, [r7, #0]
}
 800f766:	bf00      	nop
 800f768:	e7fe      	b.n	800f768 <vPortValidateInterruptPriority+0x60>
	}
 800f76a:	bf00      	nop
 800f76c:	3714      	adds	r7, #20
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	e000e3f0 	.word	0xe000e3f0
 800f77c:	20001114 	.word	0x20001114
 800f780:	e000ed0c 	.word	0xe000ed0c
 800f784:	20001118 	.word	0x20001118

0800f788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b08a      	sub	sp, #40	; 0x28
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f790:	2300      	movs	r3, #0
 800f792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f794:	f7fe ff86 	bl	800e6a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f798:	4b5b      	ldr	r3, [pc, #364]	; (800f908 <pvPortMalloc+0x180>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d101      	bne.n	800f7a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f7a0:	f000 f920 	bl	800f9e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f7a4:	4b59      	ldr	r3, [pc, #356]	; (800f90c <pvPortMalloc+0x184>)
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f040 8093 	bne.w	800f8d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d01d      	beq.n	800f7f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f7b8:	2208      	movs	r2, #8
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4413      	add	r3, r2
 800f7be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f003 0307 	and.w	r3, r3, #7
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d014      	beq.n	800f7f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f023 0307 	bic.w	r3, r3, #7
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f003 0307 	and.w	r3, r3, #7
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00a      	beq.n	800f7f4 <pvPortMalloc+0x6c>
	__asm volatile
 800f7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e2:	f383 8811 	msr	BASEPRI, r3
 800f7e6:	f3bf 8f6f 	isb	sy
 800f7ea:	f3bf 8f4f 	dsb	sy
 800f7ee:	617b      	str	r3, [r7, #20]
}
 800f7f0:	bf00      	nop
 800f7f2:	e7fe      	b.n	800f7f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d06e      	beq.n	800f8d8 <pvPortMalloc+0x150>
 800f7fa:	4b45      	ldr	r3, [pc, #276]	; (800f910 <pvPortMalloc+0x188>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	429a      	cmp	r2, r3
 800f802:	d869      	bhi.n	800f8d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f804:	4b43      	ldr	r3, [pc, #268]	; (800f914 <pvPortMalloc+0x18c>)
 800f806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f808:	4b42      	ldr	r3, [pc, #264]	; (800f914 <pvPortMalloc+0x18c>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f80e:	e004      	b.n	800f81a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	429a      	cmp	r2, r3
 800f822:	d903      	bls.n	800f82c <pvPortMalloc+0xa4>
 800f824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d1f1      	bne.n	800f810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f82c:	4b36      	ldr	r3, [pc, #216]	; (800f908 <pvPortMalloc+0x180>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f832:	429a      	cmp	r2, r3
 800f834:	d050      	beq.n	800f8d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2208      	movs	r2, #8
 800f83c:	4413      	add	r3, r2
 800f83e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	6a3b      	ldr	r3, [r7, #32]
 800f846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84a:	685a      	ldr	r2, [r3, #4]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	1ad2      	subs	r2, r2, r3
 800f850:	2308      	movs	r3, #8
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	429a      	cmp	r2, r3
 800f856:	d91f      	bls.n	800f898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	4413      	add	r3, r2
 800f85e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	f003 0307 	and.w	r3, r3, #7
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00a      	beq.n	800f880 <pvPortMalloc+0xf8>
	__asm volatile
 800f86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	613b      	str	r3, [r7, #16]
}
 800f87c:	bf00      	nop
 800f87e:	e7fe      	b.n	800f87e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f882:	685a      	ldr	r2, [r3, #4]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	1ad2      	subs	r2, r2, r3
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f892:	69b8      	ldr	r0, [r7, #24]
 800f894:	f000 f908 	bl	800faa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f898:	4b1d      	ldr	r3, [pc, #116]	; (800f910 <pvPortMalloc+0x188>)
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	4a1b      	ldr	r2, [pc, #108]	; (800f910 <pvPortMalloc+0x188>)
 800f8a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f8a6:	4b1a      	ldr	r3, [pc, #104]	; (800f910 <pvPortMalloc+0x188>)
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	4b1b      	ldr	r3, [pc, #108]	; (800f918 <pvPortMalloc+0x190>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d203      	bcs.n	800f8ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f8b2:	4b17      	ldr	r3, [pc, #92]	; (800f910 <pvPortMalloc+0x188>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a18      	ldr	r2, [pc, #96]	; (800f918 <pvPortMalloc+0x190>)
 800f8b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	4b13      	ldr	r3, [pc, #76]	; (800f90c <pvPortMalloc+0x184>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	431a      	orrs	r2, r3
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f8ce:	4b13      	ldr	r3, [pc, #76]	; (800f91c <pvPortMalloc+0x194>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	4a11      	ldr	r2, [pc, #68]	; (800f91c <pvPortMalloc+0x194>)
 800f8d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f8d8:	f7fe fef2 	bl	800e6c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	f003 0307 	and.w	r3, r3, #7
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d00a      	beq.n	800f8fc <pvPortMalloc+0x174>
	__asm volatile
 800f8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ea:	f383 8811 	msr	BASEPRI, r3
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	60fb      	str	r3, [r7, #12]
}
 800f8f8:	bf00      	nop
 800f8fa:	e7fe      	b.n	800f8fa <pvPortMalloc+0x172>
	return pvReturn;
 800f8fc:	69fb      	ldr	r3, [r7, #28]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3728      	adds	r7, #40	; 0x28
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	20008654 	.word	0x20008654
 800f90c:	20008668 	.word	0x20008668
 800f910:	20008658 	.word	0x20008658
 800f914:	2000864c 	.word	0x2000864c
 800f918:	2000865c 	.word	0x2000865c
 800f91c:	20008660 	.word	0x20008660

0800f920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d04d      	beq.n	800f9ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f932:	2308      	movs	r3, #8
 800f934:	425b      	negs	r3, r3
 800f936:	697a      	ldr	r2, [r7, #20]
 800f938:	4413      	add	r3, r2
 800f93a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	4b24      	ldr	r3, [pc, #144]	; (800f9d8 <vPortFree+0xb8>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	4013      	ands	r3, r2
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d10a      	bne.n	800f964 <vPortFree+0x44>
	__asm volatile
 800f94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f952:	f383 8811 	msr	BASEPRI, r3
 800f956:	f3bf 8f6f 	isb	sy
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	60fb      	str	r3, [r7, #12]
}
 800f960:	bf00      	nop
 800f962:	e7fe      	b.n	800f962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00a      	beq.n	800f982 <vPortFree+0x62>
	__asm volatile
 800f96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f970:	f383 8811 	msr	BASEPRI, r3
 800f974:	f3bf 8f6f 	isb	sy
 800f978:	f3bf 8f4f 	dsb	sy
 800f97c:	60bb      	str	r3, [r7, #8]
}
 800f97e:	bf00      	nop
 800f980:	e7fe      	b.n	800f980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	685a      	ldr	r2, [r3, #4]
 800f986:	4b14      	ldr	r3, [pc, #80]	; (800f9d8 <vPortFree+0xb8>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4013      	ands	r3, r2
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d01e      	beq.n	800f9ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d11a      	bne.n	800f9ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	4b0e      	ldr	r3, [pc, #56]	; (800f9d8 <vPortFree+0xb8>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	43db      	mvns	r3, r3
 800f9a2:	401a      	ands	r2, r3
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f9a8:	f7fe fe7c 	bl	800e6a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	685a      	ldr	r2, [r3, #4]
 800f9b0:	4b0a      	ldr	r3, [pc, #40]	; (800f9dc <vPortFree+0xbc>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	4a09      	ldr	r2, [pc, #36]	; (800f9dc <vPortFree+0xbc>)
 800f9b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f9ba:	6938      	ldr	r0, [r7, #16]
 800f9bc:	f000 f874 	bl	800faa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f9c0:	4b07      	ldr	r3, [pc, #28]	; (800f9e0 <vPortFree+0xc0>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	4a06      	ldr	r2, [pc, #24]	; (800f9e0 <vPortFree+0xc0>)
 800f9c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f9ca:	f7fe fe79 	bl	800e6c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f9ce:	bf00      	nop
 800f9d0:	3718      	adds	r7, #24
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20008668 	.word	0x20008668
 800f9dc:	20008658 	.word	0x20008658
 800f9e0:	20008664 	.word	0x20008664

0800f9e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f9ea:	f247 5330 	movw	r3, #30000	; 0x7530
 800f9ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f9f0:	4b27      	ldr	r3, [pc, #156]	; (800fa90 <prvHeapInit+0xac>)
 800f9f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f003 0307 	and.w	r3, r3, #7
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d00c      	beq.n	800fa18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3307      	adds	r3, #7
 800fa02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f023 0307 	bic.w	r3, r3, #7
 800fa0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	4a1f      	ldr	r2, [pc, #124]	; (800fa90 <prvHeapInit+0xac>)
 800fa14:	4413      	add	r3, r2
 800fa16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fa1c:	4a1d      	ldr	r2, [pc, #116]	; (800fa94 <prvHeapInit+0xb0>)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fa22:	4b1c      	ldr	r3, [pc, #112]	; (800fa94 <prvHeapInit+0xb0>)
 800fa24:	2200      	movs	r2, #0
 800fa26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	68ba      	ldr	r2, [r7, #8]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fa30:	2208      	movs	r2, #8
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	1a9b      	subs	r3, r3, r2
 800fa36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f023 0307 	bic.w	r3, r3, #7
 800fa3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	4a15      	ldr	r2, [pc, #84]	; (800fa98 <prvHeapInit+0xb4>)
 800fa44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fa46:	4b14      	ldr	r3, [pc, #80]	; (800fa98 <prvHeapInit+0xb4>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fa4e:	4b12      	ldr	r3, [pc, #72]	; (800fa98 <prvHeapInit+0xb4>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	68fa      	ldr	r2, [r7, #12]
 800fa5e:	1ad2      	subs	r2, r2, r3
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fa64:	4b0c      	ldr	r3, [pc, #48]	; (800fa98 <prvHeapInit+0xb4>)
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	4a0a      	ldr	r2, [pc, #40]	; (800fa9c <prvHeapInit+0xb8>)
 800fa72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	4a09      	ldr	r2, [pc, #36]	; (800faa0 <prvHeapInit+0xbc>)
 800fa7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fa7c:	4b09      	ldr	r3, [pc, #36]	; (800faa4 <prvHeapInit+0xc0>)
 800fa7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fa82:	601a      	str	r2, [r3, #0]
}
 800fa84:	bf00      	nop
 800fa86:	3714      	adds	r7, #20
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr
 800fa90:	2000111c 	.word	0x2000111c
 800fa94:	2000864c 	.word	0x2000864c
 800fa98:	20008654 	.word	0x20008654
 800fa9c:	2000865c 	.word	0x2000865c
 800faa0:	20008658 	.word	0x20008658
 800faa4:	20008668 	.word	0x20008668

0800faa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fab0:	4b28      	ldr	r3, [pc, #160]	; (800fb54 <prvInsertBlockIntoFreeList+0xac>)
 800fab2:	60fb      	str	r3, [r7, #12]
 800fab4:	e002      	b.n	800fabc <prvInsertBlockIntoFreeList+0x14>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	60fb      	str	r3, [r7, #12]
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d8f7      	bhi.n	800fab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	4413      	add	r3, r2
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d108      	bne.n	800faea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	685a      	ldr	r2, [r3, #4]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	441a      	add	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	68ba      	ldr	r2, [r7, #8]
 800faf4:	441a      	add	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d118      	bne.n	800fb30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	4b15      	ldr	r3, [pc, #84]	; (800fb58 <prvInsertBlockIntoFreeList+0xb0>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d00d      	beq.n	800fb26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	685a      	ldr	r2, [r3, #4]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	441a      	add	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	e008      	b.n	800fb38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fb26:	4b0c      	ldr	r3, [pc, #48]	; (800fb58 <prvInsertBlockIntoFreeList+0xb0>)
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	601a      	str	r2, [r3, #0]
 800fb2e:	e003      	b.n	800fb38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d002      	beq.n	800fb46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb46:	bf00      	nop
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	2000864c 	.word	0x2000864c
 800fb58:	20008654 	.word	0x20008654

0800fb5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800fb62:	4b26      	ldr	r3, [pc, #152]	; (800fbfc <_DoInit+0xa0>)
 800fb64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800fb66:	22a8      	movs	r2, #168	; 0xa8
 800fb68:	2100      	movs	r1, #0
 800fb6a:	6838      	ldr	r0, [r7, #0]
 800fb6c:	f001 fd8e 	bl	801168c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	2203      	movs	r2, #3
 800fb74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	2203      	movs	r2, #3
 800fb7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	4a20      	ldr	r2, [pc, #128]	; (800fc00 <_DoInit+0xa4>)
 800fb80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	4a1f      	ldr	r2, [pc, #124]	; (800fc04 <_DoInit+0xa8>)
 800fb86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fb8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	2200      	movs	r2, #0
 800fb94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	4a16      	ldr	r2, [pc, #88]	; (800fc00 <_DoInit+0xa4>)
 800fba6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	4a17      	ldr	r2, [pc, #92]	; (800fc08 <_DoInit+0xac>)
 800fbac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	2210      	movs	r2, #16
 800fbb2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800fbc6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800fbca:	2300      	movs	r3, #0
 800fbcc:	607b      	str	r3, [r7, #4]
 800fbce:	e00c      	b.n	800fbea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f1c3 030f 	rsb	r3, r3, #15
 800fbd6:	4a0d      	ldr	r2, [pc, #52]	; (800fc0c <_DoInit+0xb0>)
 800fbd8:	5cd1      	ldrb	r1, [r2, r3]
 800fbda:	683a      	ldr	r2, [r7, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4413      	add	r3, r2
 800fbe0:	460a      	mov	r2, r1
 800fbe2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	607b      	str	r3, [r7, #4]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2b0f      	cmp	r3, #15
 800fbee:	d9ef      	bls.n	800fbd0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800fbf0:	f3bf 8f5f 	dmb	sy
}
 800fbf4:	bf00      	nop
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	2000866c 	.word	0x2000866c
 800fc00:	08011bcc 	.word	0x08011bcc
 800fc04:	20008714 	.word	0x20008714
 800fc08:	20008b14 	.word	0x20008b14
 800fc0c:	08011d58 	.word	0x08011d58

0800fc10 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b08c      	sub	sp, #48	; 0x30
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800fc1c:	4b3e      	ldr	r3, [pc, #248]	; (800fd18 <SEGGER_RTT_ReadNoLock+0x108>)
 800fc1e:	623b      	str	r3, [r7, #32]
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d101      	bne.n	800fc2e <SEGGER_RTT_ReadNoLock+0x1e>
 800fc2a:	f7ff ff97 	bl	800fb5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	4613      	mov	r3, r2
 800fc32:	005b      	lsls	r3, r3, #1
 800fc34:	4413      	add	r3, r2
 800fc36:	00db      	lsls	r3, r3, #3
 800fc38:	3360      	adds	r3, #96	; 0x60
 800fc3a:	4a37      	ldr	r2, [pc, #220]	; (800fd18 <SEGGER_RTT_ReadNoLock+0x108>)
 800fc3c:	4413      	add	r3, r2
 800fc3e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800fc44:	69fb      	ldr	r3, [r7, #28]
 800fc46:	691b      	ldr	r3, [r3, #16]
 800fc48:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800fc50:	2300      	movs	r3, #0
 800fc52:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800fc54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d92b      	bls.n	800fcb4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	689a      	ldr	r2, [r3, #8]
 800fc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc62:	1ad3      	subs	r3, r2, r3
 800fc64:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800fc66:	697a      	ldr	r2, [r7, #20]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	bf28      	it	cs
 800fc6e:	4613      	movcs	r3, r2
 800fc70:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	685a      	ldr	r2, [r3, #4]
 800fc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc78:	4413      	add	r3, r2
 800fc7a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	6939      	ldr	r1, [r7, #16]
 800fc80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc82:	f001 fcf5 	bl	8011670 <memcpy>
    NumBytesRead += NumBytesRem;
 800fc86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	4413      	add	r3, r2
 800fc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800fc8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	4413      	add	r3, r2
 800fc94:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800fc9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	4413      	add	r3, r2
 800fca4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d101      	bne.n	800fcb4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800fcb4:	69ba      	ldr	r2, [r7, #24]
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	bf28      	it	cs
 800fcc4:	4613      	movcs	r3, r2
 800fcc6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d019      	beq.n	800fd02 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd4:	4413      	add	r3, r2
 800fcd6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800fcd8:	697a      	ldr	r2, [r7, #20]
 800fcda:	6939      	ldr	r1, [r7, #16]
 800fcdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcde:	f001 fcc7 	bl	8011670 <memcpy>
    NumBytesRead += NumBytesRem;
 800fce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	4413      	add	r3, r2
 800fce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800fcea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	4413      	add	r3, r2
 800fcf0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800fcfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	4413      	add	r3, r2
 800fd00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d002      	beq.n	800fd0e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd0c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800fd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3730      	adds	r7, #48	; 0x30
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	2000866c 	.word	0x2000866c

0800fd1c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b088      	sub	sp, #32
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
 800fd28:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800fd2a:	4b3d      	ldr	r3, [pc, #244]	; (800fe20 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800fd2c:	61bb      	str	r3, [r7, #24]
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d101      	bne.n	800fd3c <SEGGER_RTT_AllocUpBuffer+0x20>
 800fd38:	f7ff ff10 	bl	800fb5c <_DoInit>
  SEGGER_RTT_LOCK();
 800fd3c:	f3ef 8311 	mrs	r3, BASEPRI
 800fd40:	f04f 0120 	mov.w	r1, #32
 800fd44:	f381 8811 	msr	BASEPRI, r1
 800fd48:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800fd4a:	4b35      	ldr	r3, [pc, #212]	; (800fe20 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800fd4c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800fd52:	6939      	ldr	r1, [r7, #16]
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	1c5a      	adds	r2, r3, #1
 800fd58:	4613      	mov	r3, r2
 800fd5a:	005b      	lsls	r3, r3, #1
 800fd5c:	4413      	add	r3, r2
 800fd5e:	00db      	lsls	r3, r3, #3
 800fd60:	440b      	add	r3, r1
 800fd62:	3304      	adds	r3, #4
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d008      	beq.n	800fd7c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	69fa      	ldr	r2, [r7, #28]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	dbeb      	blt.n	800fd52 <SEGGER_RTT_AllocUpBuffer+0x36>
 800fd7a:	e000      	b.n	800fd7e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800fd7c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	69fa      	ldr	r2, [r7, #28]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	da3f      	bge.n	800fe08 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800fd88:	6939      	ldr	r1, [r7, #16]
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	1c5a      	adds	r2, r3, #1
 800fd8e:	4613      	mov	r3, r2
 800fd90:	005b      	lsls	r3, r3, #1
 800fd92:	4413      	add	r3, r2
 800fd94:	00db      	lsls	r3, r3, #3
 800fd96:	440b      	add	r3, r1
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800fd9c:	6939      	ldr	r1, [r7, #16]
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	1c5a      	adds	r2, r3, #1
 800fda2:	4613      	mov	r3, r2
 800fda4:	005b      	lsls	r3, r3, #1
 800fda6:	4413      	add	r3, r2
 800fda8:	00db      	lsls	r3, r3, #3
 800fdaa:	440b      	add	r3, r1
 800fdac:	3304      	adds	r3, #4
 800fdae:	68ba      	ldr	r2, [r7, #8]
 800fdb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800fdb2:	6939      	ldr	r1, [r7, #16]
 800fdb4:	69fa      	ldr	r2, [r7, #28]
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	4413      	add	r3, r2
 800fdbc:	00db      	lsls	r3, r3, #3
 800fdbe:	440b      	add	r3, r1
 800fdc0:	3320      	adds	r3, #32
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800fdc6:	6939      	ldr	r1, [r7, #16]
 800fdc8:	69fa      	ldr	r2, [r7, #28]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	005b      	lsls	r3, r3, #1
 800fdce:	4413      	add	r3, r2
 800fdd0:	00db      	lsls	r3, r3, #3
 800fdd2:	440b      	add	r3, r1
 800fdd4:	3328      	adds	r3, #40	; 0x28
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800fdda:	6939      	ldr	r1, [r7, #16]
 800fddc:	69fa      	ldr	r2, [r7, #28]
 800fdde:	4613      	mov	r3, r2
 800fde0:	005b      	lsls	r3, r3, #1
 800fde2:	4413      	add	r3, r2
 800fde4:	00db      	lsls	r3, r3, #3
 800fde6:	440b      	add	r3, r1
 800fde8:	3324      	adds	r3, #36	; 0x24
 800fdea:	2200      	movs	r2, #0
 800fdec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800fdee:	6939      	ldr	r1, [r7, #16]
 800fdf0:	69fa      	ldr	r2, [r7, #28]
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	005b      	lsls	r3, r3, #1
 800fdf6:	4413      	add	r3, r2
 800fdf8:	00db      	lsls	r3, r3, #3
 800fdfa:	440b      	add	r3, r1
 800fdfc:	332c      	adds	r3, #44	; 0x2c
 800fdfe:	683a      	ldr	r2, [r7, #0]
 800fe00:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800fe02:	f3bf 8f5f 	dmb	sy
 800fe06:	e002      	b.n	800fe0e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800fe08:	f04f 33ff 	mov.w	r3, #4294967295
 800fe0c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800fe14:	69fb      	ldr	r3, [r7, #28]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3720      	adds	r7, #32
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	2000866c 	.word	0x2000866c

0800fe24 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b08a      	sub	sp, #40	; 0x28
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
 800fe30:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800fe32:	4b21      	ldr	r3, [pc, #132]	; (800feb8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800fe34:	623b      	str	r3, [r7, #32]
 800fe36:	6a3b      	ldr	r3, [r7, #32]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d101      	bne.n	800fe44 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800fe40:	f7ff fe8c 	bl	800fb5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800fe44:	4b1c      	ldr	r3, [pc, #112]	; (800feb8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800fe46:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d82c      	bhi.n	800fea8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800fe4e:	f3ef 8311 	mrs	r3, BASEPRI
 800fe52:	f04f 0120 	mov.w	r1, #32
 800fe56:	f381 8811 	msr	BASEPRI, r1
 800fe5a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800fe5c:	68fa      	ldr	r2, [r7, #12]
 800fe5e:	4613      	mov	r3, r2
 800fe60:	005b      	lsls	r3, r3, #1
 800fe62:	4413      	add	r3, r2
 800fe64:	00db      	lsls	r3, r3, #3
 800fe66:	3360      	adds	r3, #96	; 0x60
 800fe68:	69fa      	ldr	r2, [r7, #28]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d00e      	beq.n	800fe92 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	683a      	ldr	r2, [r7, #0]
 800fe84:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe96:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800fe98:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800fea2:	2300      	movs	r3, #0
 800fea4:	627b      	str	r3, [r7, #36]	; 0x24
 800fea6:	e002      	b.n	800feae <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800fea8:	f04f 33ff 	mov.w	r3, #4294967295
 800feac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800feae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3728      	adds	r7, #40	; 0x28
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	2000866c 	.word	0x2000866c

0800febc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800febc:	b480      	push	{r7}
 800febe:	b087      	sub	sp, #28
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800fec8:	2300      	movs	r3, #0
 800feca:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00f      	beq.n	800fef2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800fed2:	e002      	b.n	800feda <_EncodeStr+0x1e>
      Len++;
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	3301      	adds	r3, #1
 800fed8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	4413      	add	r3, r2
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d1f6      	bne.n	800fed4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800fee6:	693a      	ldr	r2, [r7, #16]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	429a      	cmp	r2, r3
 800feec:	d901      	bls.n	800fef2 <_EncodeStr+0x36>
      Len = Limit;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	2bfe      	cmp	r3, #254	; 0xfe
 800fef6:	d806      	bhi.n	800ff06 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	1c5a      	adds	r2, r3, #1
 800fefc:	60fa      	str	r2, [r7, #12]
 800fefe:	693a      	ldr	r2, [r7, #16]
 800ff00:	b2d2      	uxtb	r2, r2
 800ff02:	701a      	strb	r2, [r3, #0]
 800ff04:	e011      	b.n	800ff2a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	1c5a      	adds	r2, r3, #1
 800ff0a:	60fa      	str	r2, [r7, #12]
 800ff0c:	22ff      	movs	r2, #255	; 0xff
 800ff0e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	1c5a      	adds	r2, r3, #1
 800ff14:	60fa      	str	r2, [r7, #12]
 800ff16:	693a      	ldr	r2, [r7, #16]
 800ff18:	b2d2      	uxtb	r2, r2
 800ff1a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	0a19      	lsrs	r1, r3, #8
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	60fa      	str	r2, [r7, #12]
 800ff26:	b2ca      	uxtb	r2, r1
 800ff28:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ff2e:	e00a      	b.n	800ff46 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800ff30:	68ba      	ldr	r2, [r7, #8]
 800ff32:	1c53      	adds	r3, r2, #1
 800ff34:	60bb      	str	r3, [r7, #8]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	1c59      	adds	r1, r3, #1
 800ff3a:	60f9      	str	r1, [r7, #12]
 800ff3c:	7812      	ldrb	r2, [r2, #0]
 800ff3e:	701a      	strb	r2, [r3, #0]
    n++;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	3301      	adds	r3, #1
 800ff44:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d3f0      	bcc.n	800ff30 <_EncodeStr+0x74>
  }
  return pPayload;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	371c      	adds	r7, #28
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr

0800ff5c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	3307      	adds	r3, #7
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	370c      	adds	r7, #12
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff72:	4770      	bx	lr

0800ff74 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ff7a:	4b35      	ldr	r3, [pc, #212]	; (8010050 <_HandleIncomingPacket+0xdc>)
 800ff7c:	7e1b      	ldrb	r3, [r3, #24]
 800ff7e:	4618      	mov	r0, r3
 800ff80:	1cfb      	adds	r3, r7, #3
 800ff82:	2201      	movs	r2, #1
 800ff84:	4619      	mov	r1, r3
 800ff86:	f7ff fe43 	bl	800fc10 <SEGGER_RTT_ReadNoLock>
 800ff8a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d052      	beq.n	8010038 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800ff92:	78fb      	ldrb	r3, [r7, #3]
 800ff94:	2b80      	cmp	r3, #128	; 0x80
 800ff96:	d031      	beq.n	800fffc <_HandleIncomingPacket+0x88>
 800ff98:	2b80      	cmp	r3, #128	; 0x80
 800ff9a:	dc40      	bgt.n	801001e <_HandleIncomingPacket+0xaa>
 800ff9c:	2b07      	cmp	r3, #7
 800ff9e:	dc15      	bgt.n	800ffcc <_HandleIncomingPacket+0x58>
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	dd3c      	ble.n	801001e <_HandleIncomingPacket+0xaa>
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	2b06      	cmp	r3, #6
 800ffa8:	d839      	bhi.n	801001e <_HandleIncomingPacket+0xaa>
 800ffaa:	a201      	add	r2, pc, #4	; (adr r2, 800ffb0 <_HandleIncomingPacket+0x3c>)
 800ffac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb0:	0800ffd3 	.word	0x0800ffd3
 800ffb4:	0800ffd9 	.word	0x0800ffd9
 800ffb8:	0800ffdf 	.word	0x0800ffdf
 800ffbc:	0800ffe5 	.word	0x0800ffe5
 800ffc0:	0800ffeb 	.word	0x0800ffeb
 800ffc4:	0800fff1 	.word	0x0800fff1
 800ffc8:	0800fff7 	.word	0x0800fff7
 800ffcc:	2b7f      	cmp	r3, #127	; 0x7f
 800ffce:	d035      	beq.n	801003c <_HandleIncomingPacket+0xc8>
 800ffd0:	e025      	b.n	801001e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800ffd2:	f000 fc2f 	bl	8010834 <SEGGER_SYSVIEW_Start>
      break;
 800ffd6:	e036      	b.n	8010046 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800ffd8:	f000 fce6 	bl	80109a8 <SEGGER_SYSVIEW_Stop>
      break;
 800ffdc:	e033      	b.n	8010046 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800ffde:	f000 febf 	bl	8010d60 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800ffe2:	e030      	b.n	8010046 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800ffe4:	f000 fe84 	bl	8010cf0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800ffe8:	e02d      	b.n	8010046 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800ffea:	f000 fd03 	bl	80109f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800ffee:	e02a      	b.n	8010046 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800fff0:	f001 f878 	bl	80110e4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800fff4:	e027      	b.n	8010046 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800fff6:	f001 f857 	bl	80110a8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800fffa:	e024      	b.n	8010046 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800fffc:	4b14      	ldr	r3, [pc, #80]	; (8010050 <_HandleIncomingPacket+0xdc>)
 800fffe:	7e1b      	ldrb	r3, [r3, #24]
 8010000:	4618      	mov	r0, r3
 8010002:	1cfb      	adds	r3, r7, #3
 8010004:	2201      	movs	r2, #1
 8010006:	4619      	mov	r1, r3
 8010008:	f7ff fe02 	bl	800fc10 <SEGGER_RTT_ReadNoLock>
 801000c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d015      	beq.n	8010040 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8010014:	78fb      	ldrb	r3, [r7, #3]
 8010016:	4618      	mov	r0, r3
 8010018:	f000 ffc6 	bl	8010fa8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 801001c:	e010      	b.n	8010040 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 801001e:	78fb      	ldrb	r3, [r7, #3]
 8010020:	b25b      	sxtb	r3, r3
 8010022:	2b00      	cmp	r3, #0
 8010024:	da0e      	bge.n	8010044 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8010026:	4b0a      	ldr	r3, [pc, #40]	; (8010050 <_HandleIncomingPacket+0xdc>)
 8010028:	7e1b      	ldrb	r3, [r3, #24]
 801002a:	4618      	mov	r0, r3
 801002c:	1cfb      	adds	r3, r7, #3
 801002e:	2201      	movs	r2, #1
 8010030:	4619      	mov	r1, r3
 8010032:	f7ff fded 	bl	800fc10 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8010036:	e005      	b.n	8010044 <_HandleIncomingPacket+0xd0>
    }
  }
 8010038:	bf00      	nop
 801003a:	e004      	b.n	8010046 <_HandleIncomingPacket+0xd2>
      break;
 801003c:	bf00      	nop
 801003e:	e002      	b.n	8010046 <_HandleIncomingPacket+0xd2>
      break;
 8010040:	bf00      	nop
 8010042:	e000      	b.n	8010046 <_HandleIncomingPacket+0xd2>
      break;
 8010044:	bf00      	nop
}
 8010046:	bf00      	nop
 8010048:	3708      	adds	r7, #8
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20008f2c 	.word	0x20008f2c

08010054 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8010054:	b580      	push	{r7, lr}
 8010056:	b08c      	sub	sp, #48	; 0x30
 8010058:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 801005a:	2301      	movs	r3, #1
 801005c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 801005e:	1d3b      	adds	r3, r7, #4
 8010060:	3301      	adds	r3, #1
 8010062:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010068:	4b31      	ldr	r3, [pc, #196]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 801006a:	695b      	ldr	r3, [r3, #20]
 801006c:	62bb      	str	r3, [r7, #40]	; 0x28
 801006e:	e00b      	b.n	8010088 <_TrySendOverflowPacket+0x34>
 8010070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010072:	b2da      	uxtb	r2, r3
 8010074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010076:	1c59      	adds	r1, r3, #1
 8010078:	62f9      	str	r1, [r7, #44]	; 0x2c
 801007a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801007e:	b2d2      	uxtb	r2, r2
 8010080:	701a      	strb	r2, [r3, #0]
 8010082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010084:	09db      	lsrs	r3, r3, #7
 8010086:	62bb      	str	r3, [r7, #40]	; 0x28
 8010088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008a:	2b7f      	cmp	r3, #127	; 0x7f
 801008c:	d8f0      	bhi.n	8010070 <_TrySendOverflowPacket+0x1c>
 801008e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010096:	b2d2      	uxtb	r2, r2
 8010098:	701a      	strb	r2, [r3, #0]
 801009a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801009e:	4b25      	ldr	r3, [pc, #148]	; (8010134 <_TrySendOverflowPacket+0xe0>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80100a4:	4b22      	ldr	r3, [pc, #136]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	69ba      	ldr	r2, [r7, #24]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	623b      	str	r3, [r7, #32]
 80100b6:	e00b      	b.n	80100d0 <_TrySendOverflowPacket+0x7c>
 80100b8:	6a3b      	ldr	r3, [r7, #32]
 80100ba:	b2da      	uxtb	r2, r3
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	1c59      	adds	r1, r3, #1
 80100c0:	6279      	str	r1, [r7, #36]	; 0x24
 80100c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80100c6:	b2d2      	uxtb	r2, r2
 80100c8:	701a      	strb	r2, [r3, #0]
 80100ca:	6a3b      	ldr	r3, [r7, #32]
 80100cc:	09db      	lsrs	r3, r3, #7
 80100ce:	623b      	str	r3, [r7, #32]
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	2b7f      	cmp	r3, #127	; 0x7f
 80100d4:	d8f0      	bhi.n	80100b8 <_TrySendOverflowPacket+0x64>
 80100d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d8:	1c5a      	adds	r2, r3, #1
 80100da:	627a      	str	r2, [r7, #36]	; 0x24
 80100dc:	6a3a      	ldr	r2, [r7, #32]
 80100de:	b2d2      	uxtb	r2, r2
 80100e0:	701a      	strb	r2, [r3, #0]
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80100e6:	4b12      	ldr	r3, [pc, #72]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 80100e8:	785b      	ldrb	r3, [r3, #1]
 80100ea:	4618      	mov	r0, r3
 80100ec:	1d3b      	adds	r3, r7, #4
 80100ee:	69fa      	ldr	r2, [r7, #28]
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	461a      	mov	r2, r3
 80100f4:	1d3b      	adds	r3, r7, #4
 80100f6:	4619      	mov	r1, r3
 80100f8:	f7f0 f87a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80100fc:	4603      	mov	r3, r0
 80100fe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d009      	beq.n	801011a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8010106:	4a0a      	ldr	r2, [pc, #40]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 801010c:	4b08      	ldr	r3, [pc, #32]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	3b01      	subs	r3, #1
 8010112:	b2da      	uxtb	r2, r3
 8010114:	4b06      	ldr	r3, [pc, #24]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 8010116:	701a      	strb	r2, [r3, #0]
 8010118:	e004      	b.n	8010124 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 801011a:	4b05      	ldr	r3, [pc, #20]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 801011c:	695b      	ldr	r3, [r3, #20]
 801011e:	3301      	adds	r3, #1
 8010120:	4a03      	ldr	r2, [pc, #12]	; (8010130 <_TrySendOverflowPacket+0xdc>)
 8010122:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8010124:	693b      	ldr	r3, [r7, #16]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3730      	adds	r7, #48	; 0x30
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	20008f2c 	.word	0x20008f2c
 8010134:	e0001004 	.word	0xe0001004

08010138 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8010138:	b580      	push	{r7, lr}
 801013a:	b08a      	sub	sp, #40	; 0x28
 801013c:	af00      	add	r7, sp, #0
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8010144:	4b98      	ldr	r3, [pc, #608]	; (80103a8 <_SendPacket+0x270>)
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b01      	cmp	r3, #1
 801014a:	d010      	beq.n	801016e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 801014c:	4b96      	ldr	r3, [pc, #600]	; (80103a8 <_SendPacket+0x270>)
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	f000 812d 	beq.w	80103b0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8010156:	4b94      	ldr	r3, [pc, #592]	; (80103a8 <_SendPacket+0x270>)
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	2b02      	cmp	r3, #2
 801015c:	d109      	bne.n	8010172 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 801015e:	f7ff ff79 	bl	8010054 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8010162:	4b91      	ldr	r3, [pc, #580]	; (80103a8 <_SendPacket+0x270>)
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	2b01      	cmp	r3, #1
 8010168:	f040 8124 	bne.w	80103b4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 801016c:	e001      	b.n	8010172 <_SendPacket+0x3a>
    goto Send;
 801016e:	bf00      	nop
 8010170:	e000      	b.n	8010174 <_SendPacket+0x3c>
Send:
 8010172:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2b1f      	cmp	r3, #31
 8010178:	d809      	bhi.n	801018e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 801017a:	4b8b      	ldr	r3, [pc, #556]	; (80103a8 <_SendPacket+0x270>)
 801017c:	69da      	ldr	r2, [r3, #28]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	fa22 f303 	lsr.w	r3, r2, r3
 8010184:	f003 0301 	and.w	r3, r3, #1
 8010188:	2b00      	cmp	r3, #0
 801018a:	f040 8115 	bne.w	80103b8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2b17      	cmp	r3, #23
 8010192:	d807      	bhi.n	80101a4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	3b01      	subs	r3, #1
 8010198:	60fb      	str	r3, [r7, #12]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	b2da      	uxtb	r2, r3
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	701a      	strb	r2, [r3, #0]
 80101a2:	e0c4      	b.n	801032e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	1ad3      	subs	r3, r2, r3
 80101aa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	2b7f      	cmp	r3, #127	; 0x7f
 80101b0:	d912      	bls.n	80101d8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	09da      	lsrs	r2, r3, #7
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	3b01      	subs	r3, #1
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	b2d2      	uxtb	r2, r2
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	3a01      	subs	r2, #1
 80101ca:	60fa      	str	r2, [r7, #12]
 80101cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80101d0:	b2da      	uxtb	r2, r3
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	701a      	strb	r2, [r3, #0]
 80101d6:	e006      	b.n	80101e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	3b01      	subs	r3, #1
 80101dc:	60fb      	str	r3, [r7, #12]
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2b7e      	cmp	r3, #126	; 0x7e
 80101ea:	d807      	bhi.n	80101fc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	3b01      	subs	r3, #1
 80101f0:	60fb      	str	r3, [r7, #12]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	701a      	strb	r2, [r3, #0]
 80101fa:	e098      	b.n	801032e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010202:	d212      	bcs.n	801022a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	09da      	lsrs	r2, r3, #7
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	3b01      	subs	r3, #1
 801020c:	60fb      	str	r3, [r7, #12]
 801020e:	b2d2      	uxtb	r2, r2
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	b2db      	uxtb	r3, r3
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	3a01      	subs	r2, #1
 801021c:	60fa      	str	r2, [r7, #12]
 801021e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010222:	b2da      	uxtb	r2, r3
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	701a      	strb	r2, [r3, #0]
 8010228:	e081      	b.n	801032e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010230:	d21d      	bcs.n	801026e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	0b9a      	lsrs	r2, r3, #14
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	3b01      	subs	r3, #1
 801023a:	60fb      	str	r3, [r7, #12]
 801023c:	b2d2      	uxtb	r2, r2
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	09db      	lsrs	r3, r3, #7
 8010246:	b2db      	uxtb	r3, r3
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	3a01      	subs	r2, #1
 801024c:	60fa      	str	r2, [r7, #12]
 801024e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010252:	b2da      	uxtb	r2, r3
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	b2db      	uxtb	r3, r3
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	3a01      	subs	r2, #1
 8010260:	60fa      	str	r2, [r7, #12]
 8010262:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010266:	b2da      	uxtb	r2, r3
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	701a      	strb	r2, [r3, #0]
 801026c:	e05f      	b.n	801032e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010274:	d228      	bcs.n	80102c8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	0d5a      	lsrs	r2, r3, #21
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3b01      	subs	r3, #1
 801027e:	60fb      	str	r3, [r7, #12]
 8010280:	b2d2      	uxtb	r2, r2
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	0b9b      	lsrs	r3, r3, #14
 801028a:	b2db      	uxtb	r3, r3
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	3a01      	subs	r2, #1
 8010290:	60fa      	str	r2, [r7, #12]
 8010292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010296:	b2da      	uxtb	r2, r3
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	09db      	lsrs	r3, r3, #7
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	3a01      	subs	r2, #1
 80102a6:	60fa      	str	r2, [r7, #12]
 80102a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80102ac:	b2da      	uxtb	r2, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	3a01      	subs	r2, #1
 80102ba:	60fa      	str	r2, [r7, #12]
 80102bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	701a      	strb	r2, [r3, #0]
 80102c6:	e032      	b.n	801032e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	0f1a      	lsrs	r2, r3, #28
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	3b01      	subs	r3, #1
 80102d0:	60fb      	str	r3, [r7, #12]
 80102d2:	b2d2      	uxtb	r2, r2
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	0d5b      	lsrs	r3, r3, #21
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	68fa      	ldr	r2, [r7, #12]
 80102e0:	3a01      	subs	r2, #1
 80102e2:	60fa      	str	r2, [r7, #12]
 80102e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80102e8:	b2da      	uxtb	r2, r3
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	0b9b      	lsrs	r3, r3, #14
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	3a01      	subs	r2, #1
 80102f8:	60fa      	str	r2, [r7, #12]
 80102fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80102fe:	b2da      	uxtb	r2, r3
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	09db      	lsrs	r3, r3, #7
 8010308:	b2db      	uxtb	r3, r3
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	3a01      	subs	r2, #1
 801030e:	60fa      	str	r2, [r7, #12]
 8010310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010314:	b2da      	uxtb	r2, r3
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	b2db      	uxtb	r3, r3
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	3a01      	subs	r2, #1
 8010322:	60fa      	str	r2, [r7, #12]
 8010324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010328:	b2da      	uxtb	r2, r3
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801032e:	4b1f      	ldr	r3, [pc, #124]	; (80103ac <_SendPacket+0x274>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8010334:	4b1c      	ldr	r3, [pc, #112]	; (80103a8 <_SendPacket+0x270>)
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	69ba      	ldr	r2, [r7, #24]
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	627b      	str	r3, [r7, #36]	; 0x24
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	623b      	str	r3, [r7, #32]
 8010346:	e00b      	b.n	8010360 <_SendPacket+0x228>
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	b2da      	uxtb	r2, r3
 801034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034e:	1c59      	adds	r1, r3, #1
 8010350:	6279      	str	r1, [r7, #36]	; 0x24
 8010352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010356:	b2d2      	uxtb	r2, r2
 8010358:	701a      	strb	r2, [r3, #0]
 801035a:	6a3b      	ldr	r3, [r7, #32]
 801035c:	09db      	lsrs	r3, r3, #7
 801035e:	623b      	str	r3, [r7, #32]
 8010360:	6a3b      	ldr	r3, [r7, #32]
 8010362:	2b7f      	cmp	r3, #127	; 0x7f
 8010364:	d8f0      	bhi.n	8010348 <_SendPacket+0x210>
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	1c5a      	adds	r2, r3, #1
 801036a:	627a      	str	r2, [r7, #36]	; 0x24
 801036c:	6a3a      	ldr	r2, [r7, #32]
 801036e:	b2d2      	uxtb	r2, r2
 8010370:	701a      	strb	r2, [r3, #0]
 8010372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010374:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8010376:	4b0c      	ldr	r3, [pc, #48]	; (80103a8 <_SendPacket+0x270>)
 8010378:	785b      	ldrb	r3, [r3, #1]
 801037a:	4618      	mov	r0, r3
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	461a      	mov	r2, r3
 8010384:	68f9      	ldr	r1, [r7, #12]
 8010386:	f7ef ff33 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 801038a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d003      	beq.n	801039a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8010392:	4a05      	ldr	r2, [pc, #20]	; (80103a8 <_SendPacket+0x270>)
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	60d3      	str	r3, [r2, #12]
 8010398:	e00f      	b.n	80103ba <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 801039a:	4b03      	ldr	r3, [pc, #12]	; (80103a8 <_SendPacket+0x270>)
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	3301      	adds	r3, #1
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	4b01      	ldr	r3, [pc, #4]	; (80103a8 <_SendPacket+0x270>)
 80103a4:	701a      	strb	r2, [r3, #0]
 80103a6:	e008      	b.n	80103ba <_SendPacket+0x282>
 80103a8:	20008f2c 	.word	0x20008f2c
 80103ac:	e0001004 	.word	0xe0001004
    goto SendDone;
 80103b0:	bf00      	nop
 80103b2:	e002      	b.n	80103ba <_SendPacket+0x282>
      goto SendDone;
 80103b4:	bf00      	nop
 80103b6:	e000      	b.n	80103ba <_SendPacket+0x282>
      goto SendDone;
 80103b8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80103ba:	4b14      	ldr	r3, [pc, #80]	; (801040c <_SendPacket+0x2d4>)
 80103bc:	7e1b      	ldrb	r3, [r3, #24]
 80103be:	4619      	mov	r1, r3
 80103c0:	4a13      	ldr	r2, [pc, #76]	; (8010410 <_SendPacket+0x2d8>)
 80103c2:	460b      	mov	r3, r1
 80103c4:	005b      	lsls	r3, r3, #1
 80103c6:	440b      	add	r3, r1
 80103c8:	00db      	lsls	r3, r3, #3
 80103ca:	4413      	add	r3, r2
 80103cc:	336c      	adds	r3, #108	; 0x6c
 80103ce:	681a      	ldr	r2, [r3, #0]
 80103d0:	4b0e      	ldr	r3, [pc, #56]	; (801040c <_SendPacket+0x2d4>)
 80103d2:	7e1b      	ldrb	r3, [r3, #24]
 80103d4:	4618      	mov	r0, r3
 80103d6:	490e      	ldr	r1, [pc, #56]	; (8010410 <_SendPacket+0x2d8>)
 80103d8:	4603      	mov	r3, r0
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	4403      	add	r3, r0
 80103de:	00db      	lsls	r3, r3, #3
 80103e0:	440b      	add	r3, r1
 80103e2:	3370      	adds	r3, #112	; 0x70
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d00b      	beq.n	8010402 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80103ea:	4b08      	ldr	r3, [pc, #32]	; (801040c <_SendPacket+0x2d4>)
 80103ec:	789b      	ldrb	r3, [r3, #2]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d107      	bne.n	8010402 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80103f2:	4b06      	ldr	r3, [pc, #24]	; (801040c <_SendPacket+0x2d4>)
 80103f4:	2201      	movs	r2, #1
 80103f6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80103f8:	f7ff fdbc 	bl	800ff74 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80103fc:	4b03      	ldr	r3, [pc, #12]	; (801040c <_SendPacket+0x2d4>)
 80103fe:	2200      	movs	r2, #0
 8010400:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8010402:	bf00      	nop
 8010404:	3728      	adds	r7, #40	; 0x28
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	20008f2c 	.word	0x20008f2c
 8010410:	2000866c 	.word	0x2000866c

08010414 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8010414:	b580      	push	{r7, lr}
 8010416:	b086      	sub	sp, #24
 8010418:	af02      	add	r7, sp, #8
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
 8010420:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8010422:	2300      	movs	r3, #0
 8010424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010428:	4917      	ldr	r1, [pc, #92]	; (8010488 <SEGGER_SYSVIEW_Init+0x74>)
 801042a:	4818      	ldr	r0, [pc, #96]	; (801048c <SEGGER_SYSVIEW_Init+0x78>)
 801042c:	f7ff fc76 	bl	800fd1c <SEGGER_RTT_AllocUpBuffer>
 8010430:	4603      	mov	r3, r0
 8010432:	b2da      	uxtb	r2, r3
 8010434:	4b16      	ldr	r3, [pc, #88]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 8010436:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8010438:	4b15      	ldr	r3, [pc, #84]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 801043a:	785a      	ldrb	r2, [r3, #1]
 801043c:	4b14      	ldr	r3, [pc, #80]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 801043e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8010440:	4b13      	ldr	r3, [pc, #76]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 8010442:	7e1b      	ldrb	r3, [r3, #24]
 8010444:	4618      	mov	r0, r3
 8010446:	2300      	movs	r3, #0
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	2308      	movs	r3, #8
 801044c:	4a11      	ldr	r2, [pc, #68]	; (8010494 <SEGGER_SYSVIEW_Init+0x80>)
 801044e:	490f      	ldr	r1, [pc, #60]	; (801048c <SEGGER_SYSVIEW_Init+0x78>)
 8010450:	f7ff fce8 	bl	800fe24 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8010454:	4b0e      	ldr	r3, [pc, #56]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 8010456:	2200      	movs	r2, #0
 8010458:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 801045a:	4b0f      	ldr	r3, [pc, #60]	; (8010498 <SEGGER_SYSVIEW_Init+0x84>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	4a0c      	ldr	r2, [pc, #48]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 8010460:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8010462:	4a0b      	ldr	r2, [pc, #44]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8010468:	4a09      	ldr	r2, [pc, #36]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 801046e:	4a08      	ldr	r2, [pc, #32]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8010474:	4a06      	ldr	r2, [pc, #24]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 801047a:	4b05      	ldr	r3, [pc, #20]	; (8010490 <SEGGER_SYSVIEW_Init+0x7c>)
 801047c:	2200      	movs	r2, #0
 801047e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8010480:	bf00      	nop
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	20008b24 	.word	0x20008b24
 801048c:	08011bd8 	.word	0x08011bd8
 8010490:	20008f2c 	.word	0x20008f2c
 8010494:	20008f24 	.word	0x20008f24
 8010498:	e0001004 	.word	0xe0001004

0801049c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80104a4:	4a04      	ldr	r2, [pc, #16]	; (80104b8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6113      	str	r3, [r2, #16]
}
 80104aa:	bf00      	nop
 80104ac:	370c      	adds	r7, #12
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop
 80104b8:	20008f2c 	.word	0x20008f2c

080104bc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80104bc:	b580      	push	{r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80104c4:	f3ef 8311 	mrs	r3, BASEPRI
 80104c8:	f04f 0120 	mov.w	r1, #32
 80104cc:	f381 8811 	msr	BASEPRI, r1
 80104d0:	60fb      	str	r3, [r7, #12]
 80104d2:	4808      	ldr	r0, [pc, #32]	; (80104f4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80104d4:	f7ff fd42 	bl	800ff5c <_PreparePacket>
 80104d8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	68b9      	ldr	r1, [r7, #8]
 80104de:	68b8      	ldr	r0, [r7, #8]
 80104e0:	f7ff fe2a 	bl	8010138 <_SendPacket>
  RECORD_END();
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f383 8811 	msr	BASEPRI, r3
}
 80104ea:	bf00      	nop
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	20008f5c 	.word	0x20008f5c

080104f8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b088      	sub	sp, #32
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010502:	f3ef 8311 	mrs	r3, BASEPRI
 8010506:	f04f 0120 	mov.w	r1, #32
 801050a:	f381 8811 	msr	BASEPRI, r1
 801050e:	617b      	str	r3, [r7, #20]
 8010510:	4816      	ldr	r0, [pc, #88]	; (801056c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8010512:	f7ff fd23 	bl	800ff5c <_PreparePacket>
 8010516:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	61fb      	str	r3, [r7, #28]
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	61bb      	str	r3, [r7, #24]
 8010524:	e00b      	b.n	801053e <SEGGER_SYSVIEW_RecordU32+0x46>
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	b2da      	uxtb	r2, r3
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	1c59      	adds	r1, r3, #1
 801052e:	61f9      	str	r1, [r7, #28]
 8010530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010534:	b2d2      	uxtb	r2, r2
 8010536:	701a      	strb	r2, [r3, #0]
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	09db      	lsrs	r3, r3, #7
 801053c:	61bb      	str	r3, [r7, #24]
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	2b7f      	cmp	r3, #127	; 0x7f
 8010542:	d8f0      	bhi.n	8010526 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	1c5a      	adds	r2, r3, #1
 8010548:	61fa      	str	r2, [r7, #28]
 801054a:	69ba      	ldr	r2, [r7, #24]
 801054c:	b2d2      	uxtb	r2, r2
 801054e:	701a      	strb	r2, [r3, #0]
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	68f9      	ldr	r1, [r7, #12]
 8010558:	6938      	ldr	r0, [r7, #16]
 801055a:	f7ff fded 	bl	8010138 <_SendPacket>
  RECORD_END();
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	f383 8811 	msr	BASEPRI, r3
}
 8010564:	bf00      	nop
 8010566:	3720      	adds	r7, #32
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	20008f5c 	.word	0x20008f5c

08010570 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8010570:	b580      	push	{r7, lr}
 8010572:	b08c      	sub	sp, #48	; 0x30
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 801057c:	f3ef 8311 	mrs	r3, BASEPRI
 8010580:	f04f 0120 	mov.w	r1, #32
 8010584:	f381 8811 	msr	BASEPRI, r1
 8010588:	61fb      	str	r3, [r7, #28]
 801058a:	4825      	ldr	r0, [pc, #148]	; (8010620 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 801058c:	f7ff fce6 	bl	800ff5c <_PreparePacket>
 8010590:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	62bb      	str	r3, [r7, #40]	; 0x28
 801059e:	e00b      	b.n	80105b8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80105a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a6:	1c59      	adds	r1, r3, #1
 80105a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80105aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80105ae:	b2d2      	uxtb	r2, r2
 80105b0:	701a      	strb	r2, [r3, #0]
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	09db      	lsrs	r3, r3, #7
 80105b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80105b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ba:	2b7f      	cmp	r3, #127	; 0x7f
 80105bc:	d8f0      	bhi.n	80105a0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	1c5a      	adds	r2, r3, #1
 80105c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80105c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105c6:	b2d2      	uxtb	r2, r2
 80105c8:	701a      	strb	r2, [r3, #0]
 80105ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	627b      	str	r3, [r7, #36]	; 0x24
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	623b      	str	r3, [r7, #32]
 80105d6:	e00b      	b.n	80105f0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	1c59      	adds	r1, r3, #1
 80105e0:	6279      	str	r1, [r7, #36]	; 0x24
 80105e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80105e6:	b2d2      	uxtb	r2, r2
 80105e8:	701a      	strb	r2, [r3, #0]
 80105ea:	6a3b      	ldr	r3, [r7, #32]
 80105ec:	09db      	lsrs	r3, r3, #7
 80105ee:	623b      	str	r3, [r7, #32]
 80105f0:	6a3b      	ldr	r3, [r7, #32]
 80105f2:	2b7f      	cmp	r3, #127	; 0x7f
 80105f4:	d8f0      	bhi.n	80105d8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	1c5a      	adds	r2, r3, #1
 80105fa:	627a      	str	r2, [r7, #36]	; 0x24
 80105fc:	6a3a      	ldr	r2, [r7, #32]
 80105fe:	b2d2      	uxtb	r2, r2
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010606:	68fa      	ldr	r2, [r7, #12]
 8010608:	6979      	ldr	r1, [r7, #20]
 801060a:	69b8      	ldr	r0, [r7, #24]
 801060c:	f7ff fd94 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	f383 8811 	msr	BASEPRI, r3
}
 8010616:	bf00      	nop
 8010618:	3730      	adds	r7, #48	; 0x30
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	20008f5c 	.word	0x20008f5c

08010624 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8010624:	b580      	push	{r7, lr}
 8010626:	b08e      	sub	sp, #56	; 0x38
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8010632:	f3ef 8311 	mrs	r3, BASEPRI
 8010636:	f04f 0120 	mov.w	r1, #32
 801063a:	f381 8811 	msr	BASEPRI, r1
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	4832      	ldr	r0, [pc, #200]	; (801070c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8010642:	f7ff fc8b 	bl	800ff5c <_PreparePacket>
 8010646:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	637b      	str	r3, [r7, #52]	; 0x34
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	633b      	str	r3, [r7, #48]	; 0x30
 8010654:	e00b      	b.n	801066e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8010656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010658:	b2da      	uxtb	r2, r3
 801065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065c:	1c59      	adds	r1, r3, #1
 801065e:	6379      	str	r1, [r7, #52]	; 0x34
 8010660:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010664:	b2d2      	uxtb	r2, r2
 8010666:	701a      	strb	r2, [r3, #0]
 8010668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066a:	09db      	lsrs	r3, r3, #7
 801066c:	633b      	str	r3, [r7, #48]	; 0x30
 801066e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010670:	2b7f      	cmp	r3, #127	; 0x7f
 8010672:	d8f0      	bhi.n	8010656 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8010674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010676:	1c5a      	adds	r2, r3, #1
 8010678:	637a      	str	r2, [r7, #52]	; 0x34
 801067a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801067c:	b2d2      	uxtb	r2, r2
 801067e:	701a      	strb	r2, [r3, #0]
 8010680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010682:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	62bb      	str	r3, [r7, #40]	; 0x28
 801068c:	e00b      	b.n	80106a6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 801068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010690:	b2da      	uxtb	r2, r3
 8010692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010694:	1c59      	adds	r1, r3, #1
 8010696:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801069c:	b2d2      	uxtb	r2, r2
 801069e:	701a      	strb	r2, [r3, #0]
 80106a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a2:	09db      	lsrs	r3, r3, #7
 80106a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80106a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a8:	2b7f      	cmp	r3, #127	; 0x7f
 80106aa:	d8f0      	bhi.n	801068e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80106ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ae:	1c5a      	adds	r2, r3, #1
 80106b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80106b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106b4:	b2d2      	uxtb	r2, r2
 80106b6:	701a      	strb	r2, [r3, #0]
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	627b      	str	r3, [r7, #36]	; 0x24
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	623b      	str	r3, [r7, #32]
 80106c4:	e00b      	b.n	80106de <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80106c6:	6a3b      	ldr	r3, [r7, #32]
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106cc:	1c59      	adds	r1, r3, #1
 80106ce:	6279      	str	r1, [r7, #36]	; 0x24
 80106d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80106d4:	b2d2      	uxtb	r2, r2
 80106d6:	701a      	strb	r2, [r3, #0]
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	09db      	lsrs	r3, r3, #7
 80106dc:	623b      	str	r3, [r7, #32]
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	2b7f      	cmp	r3, #127	; 0x7f
 80106e2:	d8f0      	bhi.n	80106c6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	627a      	str	r2, [r7, #36]	; 0x24
 80106ea:	6a3a      	ldr	r2, [r7, #32]
 80106ec:	b2d2      	uxtb	r2, r2
 80106ee:	701a      	strb	r2, [r3, #0]
 80106f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	6979      	ldr	r1, [r7, #20]
 80106f8:	69b8      	ldr	r0, [r7, #24]
 80106fa:	f7ff fd1d 	bl	8010138 <_SendPacket>
  RECORD_END();
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	f383 8811 	msr	BASEPRI, r3
}
 8010704:	bf00      	nop
 8010706:	3738      	adds	r7, #56	; 0x38
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	20008f5c 	.word	0x20008f5c

08010710 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8010710:	b580      	push	{r7, lr}
 8010712:	b090      	sub	sp, #64	; 0x40
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]
 801071c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801071e:	f3ef 8311 	mrs	r3, BASEPRI
 8010722:	f04f 0120 	mov.w	r1, #32
 8010726:	f381 8811 	msr	BASEPRI, r1
 801072a:	61fb      	str	r3, [r7, #28]
 801072c:	4840      	ldr	r0, [pc, #256]	; (8010830 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 801072e:	f7ff fc15 	bl	800ff5c <_PreparePacket>
 8010732:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010740:	e00b      	b.n	801075a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8010742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010744:	b2da      	uxtb	r2, r3
 8010746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010748:	1c59      	adds	r1, r3, #1
 801074a:	63f9      	str	r1, [r7, #60]	; 0x3c
 801074c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010750:	b2d2      	uxtb	r2, r2
 8010752:	701a      	strb	r2, [r3, #0]
 8010754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010756:	09db      	lsrs	r3, r3, #7
 8010758:	63bb      	str	r3, [r7, #56]	; 0x38
 801075a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075c:	2b7f      	cmp	r3, #127	; 0x7f
 801075e:	d8f0      	bhi.n	8010742 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8010760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010762:	1c5a      	adds	r2, r3, #1
 8010764:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010768:	b2d2      	uxtb	r2, r2
 801076a:	701a      	strb	r2, [r3, #0]
 801076c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801076e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	637b      	str	r3, [r7, #52]	; 0x34
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	633b      	str	r3, [r7, #48]	; 0x30
 8010778:	e00b      	b.n	8010792 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	b2da      	uxtb	r2, r3
 801077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010780:	1c59      	adds	r1, r3, #1
 8010782:	6379      	str	r1, [r7, #52]	; 0x34
 8010784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010788:	b2d2      	uxtb	r2, r2
 801078a:	701a      	strb	r2, [r3, #0]
 801078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078e:	09db      	lsrs	r3, r3, #7
 8010790:	633b      	str	r3, [r7, #48]	; 0x30
 8010792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010794:	2b7f      	cmp	r3, #127	; 0x7f
 8010796:	d8f0      	bhi.n	801077a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8010798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079a:	1c5a      	adds	r2, r3, #1
 801079c:	637a      	str	r2, [r7, #52]	; 0x34
 801079e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a0:	b2d2      	uxtb	r2, r2
 80107a2:	701a      	strb	r2, [r3, #0]
 80107a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80107b0:	e00b      	b.n	80107ca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80107b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b4:	b2da      	uxtb	r2, r3
 80107b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b8:	1c59      	adds	r1, r3, #1
 80107ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80107bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80107c0:	b2d2      	uxtb	r2, r2
 80107c2:	701a      	strb	r2, [r3, #0]
 80107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c6:	09db      	lsrs	r3, r3, #7
 80107c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80107ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107cc:	2b7f      	cmp	r3, #127	; 0x7f
 80107ce:	d8f0      	bhi.n	80107b2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107d8:	b2d2      	uxtb	r2, r2
 80107da:	701a      	strb	r2, [r3, #0]
 80107dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	627b      	str	r3, [r7, #36]	; 0x24
 80107e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107e6:	623b      	str	r3, [r7, #32]
 80107e8:	e00b      	b.n	8010802 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f0:	1c59      	adds	r1, r3, #1
 80107f2:	6279      	str	r1, [r7, #36]	; 0x24
 80107f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80107f8:	b2d2      	uxtb	r2, r2
 80107fa:	701a      	strb	r2, [r3, #0]
 80107fc:	6a3b      	ldr	r3, [r7, #32]
 80107fe:	09db      	lsrs	r3, r3, #7
 8010800:	623b      	str	r3, [r7, #32]
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	2b7f      	cmp	r3, #127	; 0x7f
 8010806:	d8f0      	bhi.n	80107ea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8010808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080a:	1c5a      	adds	r2, r3, #1
 801080c:	627a      	str	r2, [r7, #36]	; 0x24
 801080e:	6a3a      	ldr	r2, [r7, #32]
 8010810:	b2d2      	uxtb	r2, r2
 8010812:	701a      	strb	r2, [r3, #0]
 8010814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010816:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8010818:	68fa      	ldr	r2, [r7, #12]
 801081a:	6979      	ldr	r1, [r7, #20]
 801081c:	69b8      	ldr	r0, [r7, #24]
 801081e:	f7ff fc8b 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	f383 8811 	msr	BASEPRI, r3
}
 8010828:	bf00      	nop
 801082a:	3740      	adds	r7, #64	; 0x40
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	20008f5c 	.word	0x20008f5c

08010834 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8010834:	b580      	push	{r7, lr}
 8010836:	b08c      	sub	sp, #48	; 0x30
 8010838:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 801083a:	4b58      	ldr	r3, [pc, #352]	; (801099c <SEGGER_SYSVIEW_Start+0x168>)
 801083c:	2201      	movs	r2, #1
 801083e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8010840:	f3ef 8311 	mrs	r3, BASEPRI
 8010844:	f04f 0120 	mov.w	r1, #32
 8010848:	f381 8811 	msr	BASEPRI, r1
 801084c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 801084e:	4b53      	ldr	r3, [pc, #332]	; (801099c <SEGGER_SYSVIEW_Start+0x168>)
 8010850:	785b      	ldrb	r3, [r3, #1]
 8010852:	220a      	movs	r2, #10
 8010854:	4952      	ldr	r1, [pc, #328]	; (80109a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8010856:	4618      	mov	r0, r3
 8010858:	f7ef fcca 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8010862:	200a      	movs	r0, #10
 8010864:	f7ff fe2a 	bl	80104bc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8010868:	f3ef 8311 	mrs	r3, BASEPRI
 801086c:	f04f 0120 	mov.w	r1, #32
 8010870:	f381 8811 	msr	BASEPRI, r1
 8010874:	60bb      	str	r3, [r7, #8]
 8010876:	484b      	ldr	r0, [pc, #300]	; (80109a4 <SEGGER_SYSVIEW_Start+0x170>)
 8010878:	f7ff fb70 	bl	800ff5c <_PreparePacket>
 801087c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010886:	4b45      	ldr	r3, [pc, #276]	; (801099c <SEGGER_SYSVIEW_Start+0x168>)
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	62bb      	str	r3, [r7, #40]	; 0x28
 801088c:	e00b      	b.n	80108a6 <SEGGER_SYSVIEW_Start+0x72>
 801088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010890:	b2da      	uxtb	r2, r3
 8010892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010894:	1c59      	adds	r1, r3, #1
 8010896:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801089c:	b2d2      	uxtb	r2, r2
 801089e:	701a      	strb	r2, [r3, #0]
 80108a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a2:	09db      	lsrs	r3, r3, #7
 80108a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	2b7f      	cmp	r3, #127	; 0x7f
 80108aa:	d8f0      	bhi.n	801088e <SEGGER_SYSVIEW_Start+0x5a>
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80108b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108b4:	b2d2      	uxtb	r2, r2
 80108b6:	701a      	strb	r2, [r3, #0]
 80108b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	627b      	str	r3, [r7, #36]	; 0x24
 80108c0:	4b36      	ldr	r3, [pc, #216]	; (801099c <SEGGER_SYSVIEW_Start+0x168>)
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	623b      	str	r3, [r7, #32]
 80108c6:	e00b      	b.n	80108e0 <SEGGER_SYSVIEW_Start+0xac>
 80108c8:	6a3b      	ldr	r3, [r7, #32]
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	1c59      	adds	r1, r3, #1
 80108d0:	6279      	str	r1, [r7, #36]	; 0x24
 80108d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80108d6:	b2d2      	uxtb	r2, r2
 80108d8:	701a      	strb	r2, [r3, #0]
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	09db      	lsrs	r3, r3, #7
 80108de:	623b      	str	r3, [r7, #32]
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	2b7f      	cmp	r3, #127	; 0x7f
 80108e4:	d8f0      	bhi.n	80108c8 <SEGGER_SYSVIEW_Start+0x94>
 80108e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e8:	1c5a      	adds	r2, r3, #1
 80108ea:	627a      	str	r2, [r7, #36]	; 0x24
 80108ec:	6a3a      	ldr	r2, [r7, #32]
 80108ee:	b2d2      	uxtb	r2, r2
 80108f0:	701a      	strb	r2, [r3, #0]
 80108f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	61fb      	str	r3, [r7, #28]
 80108fa:	4b28      	ldr	r3, [pc, #160]	; (801099c <SEGGER_SYSVIEW_Start+0x168>)
 80108fc:	691b      	ldr	r3, [r3, #16]
 80108fe:	61bb      	str	r3, [r7, #24]
 8010900:	e00b      	b.n	801091a <SEGGER_SYSVIEW_Start+0xe6>
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	b2da      	uxtb	r2, r3
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	1c59      	adds	r1, r3, #1
 801090a:	61f9      	str	r1, [r7, #28]
 801090c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010910:	b2d2      	uxtb	r2, r2
 8010912:	701a      	strb	r2, [r3, #0]
 8010914:	69bb      	ldr	r3, [r7, #24]
 8010916:	09db      	lsrs	r3, r3, #7
 8010918:	61bb      	str	r3, [r7, #24]
 801091a:	69bb      	ldr	r3, [r7, #24]
 801091c:	2b7f      	cmp	r3, #127	; 0x7f
 801091e:	d8f0      	bhi.n	8010902 <SEGGER_SYSVIEW_Start+0xce>
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	1c5a      	adds	r2, r3, #1
 8010924:	61fa      	str	r2, [r7, #28]
 8010926:	69ba      	ldr	r2, [r7, #24]
 8010928:	b2d2      	uxtb	r2, r2
 801092a:	701a      	strb	r2, [r3, #0]
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	617b      	str	r3, [r7, #20]
 8010934:	2300      	movs	r3, #0
 8010936:	613b      	str	r3, [r7, #16]
 8010938:	e00b      	b.n	8010952 <SEGGER_SYSVIEW_Start+0x11e>
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	b2da      	uxtb	r2, r3
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	1c59      	adds	r1, r3, #1
 8010942:	6179      	str	r1, [r7, #20]
 8010944:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010948:	b2d2      	uxtb	r2, r2
 801094a:	701a      	strb	r2, [r3, #0]
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	09db      	lsrs	r3, r3, #7
 8010950:	613b      	str	r3, [r7, #16]
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	2b7f      	cmp	r3, #127	; 0x7f
 8010956:	d8f0      	bhi.n	801093a <SEGGER_SYSVIEW_Start+0x106>
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	1c5a      	adds	r2, r3, #1
 801095c:	617a      	str	r2, [r7, #20]
 801095e:	693a      	ldr	r2, [r7, #16]
 8010960:	b2d2      	uxtb	r2, r2
 8010962:	701a      	strb	r2, [r3, #0]
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010968:	2218      	movs	r2, #24
 801096a:	6839      	ldr	r1, [r7, #0]
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7ff fbe3 	bl	8010138 <_SendPacket>
      RECORD_END();
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010978:	4b08      	ldr	r3, [pc, #32]	; (801099c <SEGGER_SYSVIEW_Start+0x168>)
 801097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8010980:	4b06      	ldr	r3, [pc, #24]	; (801099c <SEGGER_SYSVIEW_Start+0x168>)
 8010982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010984:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8010986:	f000 f9eb 	bl	8010d60 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 801098a:	f000 f9b1 	bl	8010cf0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 801098e:	f000 fba9 	bl	80110e4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8010992:	bf00      	nop
 8010994:	3730      	adds	r7, #48	; 0x30
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	20008f2c 	.word	0x20008f2c
 80109a0:	08011d6c 	.word	0x08011d6c
 80109a4:	20008f5c 	.word	0x20008f5c

080109a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80109ae:	f3ef 8311 	mrs	r3, BASEPRI
 80109b2:	f04f 0120 	mov.w	r1, #32
 80109b6:	f381 8811 	msr	BASEPRI, r1
 80109ba:	607b      	str	r3, [r7, #4]
 80109bc:	480b      	ldr	r0, [pc, #44]	; (80109ec <SEGGER_SYSVIEW_Stop+0x44>)
 80109be:	f7ff facd 	bl	800ff5c <_PreparePacket>
 80109c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80109c4:	4b0a      	ldr	r3, [pc, #40]	; (80109f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d007      	beq.n	80109dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80109cc:	220b      	movs	r2, #11
 80109ce:	6839      	ldr	r1, [r7, #0]
 80109d0:	6838      	ldr	r0, [r7, #0]
 80109d2:	f7ff fbb1 	bl	8010138 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80109d6:	4b06      	ldr	r3, [pc, #24]	; (80109f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80109d8:	2200      	movs	r2, #0
 80109da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f383 8811 	msr	BASEPRI, r3
}
 80109e2:	bf00      	nop
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	20008f5c 	.word	0x20008f5c
 80109f0:	20008f2c 	.word	0x20008f2c

080109f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b08c      	sub	sp, #48	; 0x30
 80109f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80109fa:	f3ef 8311 	mrs	r3, BASEPRI
 80109fe:	f04f 0120 	mov.w	r1, #32
 8010a02:	f381 8811 	msr	BASEPRI, r1
 8010a06:	60fb      	str	r3, [r7, #12]
 8010a08:	4845      	ldr	r0, [pc, #276]	; (8010b20 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8010a0a:	f7ff faa7 	bl	800ff5c <_PreparePacket>
 8010a0e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a18:	4b42      	ldr	r3, [pc, #264]	; (8010b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a1e:	e00b      	b.n	8010a38 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8010a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a22:	b2da      	uxtb	r2, r3
 8010a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a26:	1c59      	adds	r1, r3, #1
 8010a28:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010a2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010a2e:	b2d2      	uxtb	r2, r2
 8010a30:	701a      	strb	r2, [r3, #0]
 8010a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a34:	09db      	lsrs	r3, r3, #7
 8010a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8010a3c:	d8f0      	bhi.n	8010a20 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8010a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a46:	b2d2      	uxtb	r2, r2
 8010a48:	701a      	strb	r2, [r3, #0]
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	627b      	str	r3, [r7, #36]	; 0x24
 8010a52:	4b34      	ldr	r3, [pc, #208]	; (8010b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	623b      	str	r3, [r7, #32]
 8010a58:	e00b      	b.n	8010a72 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8010a5a:	6a3b      	ldr	r3, [r7, #32]
 8010a5c:	b2da      	uxtb	r2, r3
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a60:	1c59      	adds	r1, r3, #1
 8010a62:	6279      	str	r1, [r7, #36]	; 0x24
 8010a64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010a68:	b2d2      	uxtb	r2, r2
 8010a6a:	701a      	strb	r2, [r3, #0]
 8010a6c:	6a3b      	ldr	r3, [r7, #32]
 8010a6e:	09db      	lsrs	r3, r3, #7
 8010a70:	623b      	str	r3, [r7, #32]
 8010a72:	6a3b      	ldr	r3, [r7, #32]
 8010a74:	2b7f      	cmp	r3, #127	; 0x7f
 8010a76:	d8f0      	bhi.n	8010a5a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8010a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7a:	1c5a      	adds	r2, r3, #1
 8010a7c:	627a      	str	r2, [r7, #36]	; 0x24
 8010a7e:	6a3a      	ldr	r2, [r7, #32]
 8010a80:	b2d2      	uxtb	r2, r2
 8010a82:	701a      	strb	r2, [r3, #0]
 8010a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	61fb      	str	r3, [r7, #28]
 8010a8c:	4b25      	ldr	r3, [pc, #148]	; (8010b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010a8e:	691b      	ldr	r3, [r3, #16]
 8010a90:	61bb      	str	r3, [r7, #24]
 8010a92:	e00b      	b.n	8010aac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	1c59      	adds	r1, r3, #1
 8010a9c:	61f9      	str	r1, [r7, #28]
 8010a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010aa2:	b2d2      	uxtb	r2, r2
 8010aa4:	701a      	strb	r2, [r3, #0]
 8010aa6:	69bb      	ldr	r3, [r7, #24]
 8010aa8:	09db      	lsrs	r3, r3, #7
 8010aaa:	61bb      	str	r3, [r7, #24]
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	2b7f      	cmp	r3, #127	; 0x7f
 8010ab0:	d8f0      	bhi.n	8010a94 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	1c5a      	adds	r2, r3, #1
 8010ab6:	61fa      	str	r2, [r7, #28]
 8010ab8:	69ba      	ldr	r2, [r7, #24]
 8010aba:	b2d2      	uxtb	r2, r2
 8010abc:	701a      	strb	r2, [r3, #0]
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	617b      	str	r3, [r7, #20]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	613b      	str	r3, [r7, #16]
 8010aca:	e00b      	b.n	8010ae4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	b2da      	uxtb	r2, r3
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	1c59      	adds	r1, r3, #1
 8010ad4:	6179      	str	r1, [r7, #20]
 8010ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010ada:	b2d2      	uxtb	r2, r2
 8010adc:	701a      	strb	r2, [r3, #0]
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	09db      	lsrs	r3, r3, #7
 8010ae2:	613b      	str	r3, [r7, #16]
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8010ae8:	d8f0      	bhi.n	8010acc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	1c5a      	adds	r2, r3, #1
 8010aee:	617a      	str	r2, [r7, #20]
 8010af0:	693a      	ldr	r2, [r7, #16]
 8010af2:	b2d2      	uxtb	r2, r2
 8010af4:	701a      	strb	r2, [r3, #0]
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8010afa:	2218      	movs	r2, #24
 8010afc:	6879      	ldr	r1, [r7, #4]
 8010afe:	68b8      	ldr	r0, [r7, #8]
 8010b00:	f7ff fb1a 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8010b0a:	4b06      	ldr	r3, [pc, #24]	; (8010b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d002      	beq.n	8010b18 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8010b12:	4b04      	ldr	r3, [pc, #16]	; (8010b24 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8010b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b16:	4798      	blx	r3
  }
}
 8010b18:	bf00      	nop
 8010b1a:	3730      	adds	r7, #48	; 0x30
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	20008f5c 	.word	0x20008f5c
 8010b24:	20008f2c 	.word	0x20008f2c

08010b28 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b092      	sub	sp, #72	; 0x48
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8010b30:	f3ef 8311 	mrs	r3, BASEPRI
 8010b34:	f04f 0120 	mov.w	r1, #32
 8010b38:	f381 8811 	msr	BASEPRI, r1
 8010b3c:	617b      	str	r3, [r7, #20]
 8010b3e:	486a      	ldr	r0, [pc, #424]	; (8010ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8010b40:	f7ff fa0c 	bl	800ff5c <_PreparePacket>
 8010b44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	4b66      	ldr	r3, [pc, #408]	; (8010cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8010b54:	691b      	ldr	r3, [r3, #16]
 8010b56:	1ad3      	subs	r3, r2, r3
 8010b58:	643b      	str	r3, [r7, #64]	; 0x40
 8010b5a:	e00b      	b.n	8010b74 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8010b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b5e:	b2da      	uxtb	r2, r3
 8010b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b62:	1c59      	adds	r1, r3, #1
 8010b64:	6479      	str	r1, [r7, #68]	; 0x44
 8010b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010b6a:	b2d2      	uxtb	r2, r2
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b70:	09db      	lsrs	r3, r3, #7
 8010b72:	643b      	str	r3, [r7, #64]	; 0x40
 8010b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b76:	2b7f      	cmp	r3, #127	; 0x7f
 8010b78:	d8f0      	bhi.n	8010b5c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8010b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b7c:	1c5a      	adds	r2, r3, #1
 8010b7e:	647a      	str	r2, [r7, #68]	; 0x44
 8010b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b82:	b2d2      	uxtb	r2, r2
 8010b84:	701a      	strb	r2, [r3, #0]
 8010b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b94:	e00b      	b.n	8010bae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8010b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b98:	b2da      	uxtb	r2, r3
 8010b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b9c:	1c59      	adds	r1, r3, #1
 8010b9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010ba4:	b2d2      	uxtb	r2, r2
 8010ba6:	701a      	strb	r2, [r3, #0]
 8010ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010baa:	09db      	lsrs	r3, r3, #7
 8010bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8010bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8010bb2:	d8f0      	bhi.n	8010b96 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8010bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bb6:	1c5a      	adds	r2, r3, #1
 8010bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bbc:	b2d2      	uxtb	r2, r2
 8010bbe:	701a      	strb	r2, [r3, #0]
 8010bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bc2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	2220      	movs	r2, #32
 8010bca:	4619      	mov	r1, r3
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f7ff f975 	bl	800febc <_EncodeStr>
 8010bd2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8010bd4:	2209      	movs	r2, #9
 8010bd6:	68f9      	ldr	r1, [r7, #12]
 8010bd8:	6938      	ldr	r0, [r7, #16]
 8010bda:	f7ff faad 	bl	8010138 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	637b      	str	r3, [r7, #52]	; 0x34
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	4b40      	ldr	r3, [pc, #256]	; (8010cec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8010bf2:	e00b      	b.n	8010c0c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bfa:	1c59      	adds	r1, r3, #1
 8010bfc:	6379      	str	r1, [r7, #52]	; 0x34
 8010bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010c02:	b2d2      	uxtb	r2, r2
 8010c04:	701a      	strb	r2, [r3, #0]
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	09db      	lsrs	r3, r3, #7
 8010c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8010c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8010c10:	d8f0      	bhi.n	8010bf4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8010c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c14:	1c5a      	adds	r2, r3, #1
 8010c16:	637a      	str	r2, [r7, #52]	; 0x34
 8010c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c1a:	b2d2      	uxtb	r2, r2
 8010c1c:	701a      	strb	r2, [r3, #0]
 8010c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c2c:	e00b      	b.n	8010c46 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8010c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c34:	1c59      	adds	r1, r3, #1
 8010c36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010c38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010c3c:	b2d2      	uxtb	r2, r2
 8010c3e:	701a      	strb	r2, [r3, #0]
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	09db      	lsrs	r3, r3, #7
 8010c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c48:	2b7f      	cmp	r3, #127	; 0x7f
 8010c4a:	d8f0      	bhi.n	8010c2e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8010c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4e:	1c5a      	adds	r2, r3, #1
 8010c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c54:	b2d2      	uxtb	r2, r2
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	623b      	str	r3, [r7, #32]
 8010c66:	e00b      	b.n	8010c80 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8010c68:	6a3b      	ldr	r3, [r7, #32]
 8010c6a:	b2da      	uxtb	r2, r3
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6e:	1c59      	adds	r1, r3, #1
 8010c70:	6279      	str	r1, [r7, #36]	; 0x24
 8010c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010c76:	b2d2      	uxtb	r2, r2
 8010c78:	701a      	strb	r2, [r3, #0]
 8010c7a:	6a3b      	ldr	r3, [r7, #32]
 8010c7c:	09db      	lsrs	r3, r3, #7
 8010c7e:	623b      	str	r3, [r7, #32]
 8010c80:	6a3b      	ldr	r3, [r7, #32]
 8010c82:	2b7f      	cmp	r3, #127	; 0x7f
 8010c84:	d8f0      	bhi.n	8010c68 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	1c5a      	adds	r2, r3, #1
 8010c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8010c8c:	6a3a      	ldr	r2, [r7, #32]
 8010c8e:	b2d2      	uxtb	r2, r2
 8010c90:	701a      	strb	r2, [r3, #0]
 8010c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	61fb      	str	r3, [r7, #28]
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	61bb      	str	r3, [r7, #24]
 8010c9e:	e00b      	b.n	8010cb8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	1c59      	adds	r1, r3, #1
 8010ca8:	61f9      	str	r1, [r7, #28]
 8010caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010cae:	b2d2      	uxtb	r2, r2
 8010cb0:	701a      	strb	r2, [r3, #0]
 8010cb2:	69bb      	ldr	r3, [r7, #24]
 8010cb4:	09db      	lsrs	r3, r3, #7
 8010cb6:	61bb      	str	r3, [r7, #24]
 8010cb8:	69bb      	ldr	r3, [r7, #24]
 8010cba:	2b7f      	cmp	r3, #127	; 0x7f
 8010cbc:	d8f0      	bhi.n	8010ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	61fa      	str	r2, [r7, #28]
 8010cc4:	69ba      	ldr	r2, [r7, #24]
 8010cc6:	b2d2      	uxtb	r2, r2
 8010cc8:	701a      	strb	r2, [r3, #0]
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8010cce:	2215      	movs	r2, #21
 8010cd0:	68f9      	ldr	r1, [r7, #12]
 8010cd2:	6938      	ldr	r0, [r7, #16]
 8010cd4:	f7ff fa30 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	f383 8811 	msr	BASEPRI, r3
}
 8010cde:	bf00      	nop
 8010ce0:	3748      	adds	r7, #72	; 0x48
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20008f5c 	.word	0x20008f5c
 8010cec:	20008f2c 	.word	0x20008f2c

08010cf0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8010cf4:	4b07      	ldr	r3, [pc, #28]	; (8010d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010cf6:	6a1b      	ldr	r3, [r3, #32]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d008      	beq.n	8010d0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8010cfc:	4b05      	ldr	r3, [pc, #20]	; (8010d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010cfe:	6a1b      	ldr	r3, [r3, #32]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d003      	beq.n	8010d0e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8010d06:	4b03      	ldr	r3, [pc, #12]	; (8010d14 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8010d08:	6a1b      	ldr	r3, [r3, #32]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	4798      	blx	r3
  }
}
 8010d0e:	bf00      	nop
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	20008f2c 	.word	0x20008f2c

08010d18 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b086      	sub	sp, #24
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010d20:	f3ef 8311 	mrs	r3, BASEPRI
 8010d24:	f04f 0120 	mov.w	r1, #32
 8010d28:	f381 8811 	msr	BASEPRI, r1
 8010d2c:	617b      	str	r3, [r7, #20]
 8010d2e:	480b      	ldr	r0, [pc, #44]	; (8010d5c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8010d30:	f7ff f914 	bl	800ff5c <_PreparePacket>
 8010d34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010d36:	2280      	movs	r2, #128	; 0x80
 8010d38:	6879      	ldr	r1, [r7, #4]
 8010d3a:	6938      	ldr	r0, [r7, #16]
 8010d3c:	f7ff f8be 	bl	800febc <_EncodeStr>
 8010d40:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8010d42:	220e      	movs	r2, #14
 8010d44:	68f9      	ldr	r1, [r7, #12]
 8010d46:	6938      	ldr	r0, [r7, #16]
 8010d48:	f7ff f9f6 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	f383 8811 	msr	BASEPRI, r3
}
 8010d52:	bf00      	nop
 8010d54:	3718      	adds	r7, #24
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	20008f5c 	.word	0x20008f5c

08010d60 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8010d60:	b590      	push	{r4, r7, lr}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8010d66:	4b15      	ldr	r3, [pc, #84]	; (8010dbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8010d68:	6a1b      	ldr	r3, [r3, #32]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d01a      	beq.n	8010da4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8010d6e:	4b13      	ldr	r3, [pc, #76]	; (8010dbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8010d70:	6a1b      	ldr	r3, [r3, #32]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d015      	beq.n	8010da4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8010d78:	4b10      	ldr	r3, [pc, #64]	; (8010dbc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8010d7a:	6a1b      	ldr	r3, [r3, #32]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4798      	blx	r3
 8010d80:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010d84:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8010d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010d8a:	f04f 0200 	mov.w	r2, #0
 8010d8e:	f04f 0300 	mov.w	r3, #0
 8010d92:	000a      	movs	r2, r1
 8010d94:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8010d96:	4613      	mov	r3, r2
 8010d98:	461a      	mov	r2, r3
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	200d      	movs	r0, #13
 8010d9e:	f7ff fbe7 	bl	8010570 <SEGGER_SYSVIEW_RecordU32x2>
 8010da2:	e006      	b.n	8010db2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8010da4:	4b06      	ldr	r3, [pc, #24]	; (8010dc0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4619      	mov	r1, r3
 8010daa:	200c      	movs	r0, #12
 8010dac:	f7ff fba4 	bl	80104f8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8010db0:	bf00      	nop
 8010db2:	bf00      	nop
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd90      	pop	{r4, r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	20008f2c 	.word	0x20008f2c
 8010dc0:	e0001004 	.word	0xe0001004

08010dc4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8010dca:	f3ef 8311 	mrs	r3, BASEPRI
 8010dce:	f04f 0120 	mov.w	r1, #32
 8010dd2:	f381 8811 	msr	BASEPRI, r1
 8010dd6:	607b      	str	r3, [r7, #4]
 8010dd8:	4807      	ldr	r0, [pc, #28]	; (8010df8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8010dda:	f7ff f8bf 	bl	800ff5c <_PreparePacket>
 8010dde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8010de0:	2211      	movs	r2, #17
 8010de2:	6839      	ldr	r1, [r7, #0]
 8010de4:	6838      	ldr	r0, [r7, #0]
 8010de6:	f7ff f9a7 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f383 8811 	msr	BASEPRI, r3
}
 8010df0:	bf00      	nop
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	20008f5c 	.word	0x20008f5c

08010dfc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b088      	sub	sp, #32
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010e04:	f3ef 8311 	mrs	r3, BASEPRI
 8010e08:	f04f 0120 	mov.w	r1, #32
 8010e0c:	f381 8811 	msr	BASEPRI, r1
 8010e10:	617b      	str	r3, [r7, #20]
 8010e12:	4819      	ldr	r0, [pc, #100]	; (8010e78 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8010e14:	f7ff f8a2 	bl	800ff5c <_PreparePacket>
 8010e18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8010e1e:	4b17      	ldr	r3, [pc, #92]	; (8010e7c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	1ad3      	subs	r3, r2, r3
 8010e26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	61fb      	str	r3, [r7, #28]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	61bb      	str	r3, [r7, #24]
 8010e30:	e00b      	b.n	8010e4a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8010e32:	69bb      	ldr	r3, [r7, #24]
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	1c59      	adds	r1, r3, #1
 8010e3a:	61f9      	str	r1, [r7, #28]
 8010e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010e40:	b2d2      	uxtb	r2, r2
 8010e42:	701a      	strb	r2, [r3, #0]
 8010e44:	69bb      	ldr	r3, [r7, #24]
 8010e46:	09db      	lsrs	r3, r3, #7
 8010e48:	61bb      	str	r3, [r7, #24]
 8010e4a:	69bb      	ldr	r3, [r7, #24]
 8010e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8010e4e:	d8f0      	bhi.n	8010e32 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	1c5a      	adds	r2, r3, #1
 8010e54:	61fa      	str	r2, [r7, #28]
 8010e56:	69ba      	ldr	r2, [r7, #24]
 8010e58:	b2d2      	uxtb	r2, r2
 8010e5a:	701a      	strb	r2, [r3, #0]
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8010e60:	2208      	movs	r2, #8
 8010e62:	68f9      	ldr	r1, [r7, #12]
 8010e64:	6938      	ldr	r0, [r7, #16]
 8010e66:	f7ff f967 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	f383 8811 	msr	BASEPRI, r3
}
 8010e70:	bf00      	nop
 8010e72:	3720      	adds	r7, #32
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	20008f5c 	.word	0x20008f5c
 8010e7c:	20008f2c 	.word	0x20008f2c

08010e80 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b088      	sub	sp, #32
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010e88:	f3ef 8311 	mrs	r3, BASEPRI
 8010e8c:	f04f 0120 	mov.w	r1, #32
 8010e90:	f381 8811 	msr	BASEPRI, r1
 8010e94:	617b      	str	r3, [r7, #20]
 8010e96:	4819      	ldr	r0, [pc, #100]	; (8010efc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8010e98:	f7ff f860 	bl	800ff5c <_PreparePacket>
 8010e9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8010ea2:	4b17      	ldr	r3, [pc, #92]	; (8010f00 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	61fb      	str	r3, [r7, #28]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	61bb      	str	r3, [r7, #24]
 8010eb4:	e00b      	b.n	8010ece <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	b2da      	uxtb	r2, r3
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	1c59      	adds	r1, r3, #1
 8010ebe:	61f9      	str	r1, [r7, #28]
 8010ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010ec4:	b2d2      	uxtb	r2, r2
 8010ec6:	701a      	strb	r2, [r3, #0]
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	09db      	lsrs	r3, r3, #7
 8010ecc:	61bb      	str	r3, [r7, #24]
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8010ed2:	d8f0      	bhi.n	8010eb6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	61fa      	str	r2, [r7, #28]
 8010eda:	69ba      	ldr	r2, [r7, #24]
 8010edc:	b2d2      	uxtb	r2, r2
 8010ede:	701a      	strb	r2, [r3, #0]
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8010ee4:	2204      	movs	r2, #4
 8010ee6:	68f9      	ldr	r1, [r7, #12]
 8010ee8:	6938      	ldr	r0, [r7, #16]
 8010eea:	f7ff f925 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	f383 8811 	msr	BASEPRI, r3
}
 8010ef4:	bf00      	nop
 8010ef6:	3720      	adds	r7, #32
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	20008f5c 	.word	0x20008f5c
 8010f00:	20008f2c 	.word	0x20008f2c

08010f04 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b088      	sub	sp, #32
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8010f0c:	f3ef 8311 	mrs	r3, BASEPRI
 8010f10:	f04f 0120 	mov.w	r1, #32
 8010f14:	f381 8811 	msr	BASEPRI, r1
 8010f18:	617b      	str	r3, [r7, #20]
 8010f1a:	4819      	ldr	r0, [pc, #100]	; (8010f80 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8010f1c:	f7ff f81e 	bl	800ff5c <_PreparePacket>
 8010f20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8010f26:	4b17      	ldr	r3, [pc, #92]	; (8010f84 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8010f28:	691b      	ldr	r3, [r3, #16]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	1ad3      	subs	r3, r2, r3
 8010f2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	61fb      	str	r3, [r7, #28]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	61bb      	str	r3, [r7, #24]
 8010f38:	e00b      	b.n	8010f52 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	b2da      	uxtb	r2, r3
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	1c59      	adds	r1, r3, #1
 8010f42:	61f9      	str	r1, [r7, #28]
 8010f44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8010f48:	b2d2      	uxtb	r2, r2
 8010f4a:	701a      	strb	r2, [r3, #0]
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	09db      	lsrs	r3, r3, #7
 8010f50:	61bb      	str	r3, [r7, #24]
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	2b7f      	cmp	r3, #127	; 0x7f
 8010f56:	d8f0      	bhi.n	8010f3a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	1c5a      	adds	r2, r3, #1
 8010f5c:	61fa      	str	r2, [r7, #28]
 8010f5e:	69ba      	ldr	r2, [r7, #24]
 8010f60:	b2d2      	uxtb	r2, r2
 8010f62:	701a      	strb	r2, [r3, #0]
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8010f68:	2206      	movs	r2, #6
 8010f6a:	68f9      	ldr	r1, [r7, #12]
 8010f6c:	6938      	ldr	r0, [r7, #16]
 8010f6e:	f7ff f8e3 	bl	8010138 <_SendPacket>
  RECORD_END();
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	f383 8811 	msr	BASEPRI, r3
}
 8010f78:	bf00      	nop
 8010f7a:	3720      	adds	r7, #32
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	20008f5c 	.word	0x20008f5c
 8010f84:	20008f2c 	.word	0x20008f2c

08010f88 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8010f90:	4b04      	ldr	r3, [pc, #16]	; (8010fa4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8010f92:	691b      	ldr	r3, [r3, #16]
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	1ad3      	subs	r3, r2, r3
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr
 8010fa4:	20008f2c 	.word	0x20008f2c

08010fa8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b08c      	sub	sp, #48	; 0x30
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	4603      	mov	r3, r0
 8010fb0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8010fb2:	4b3b      	ldr	r3, [pc, #236]	; (80110a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d06d      	beq.n	8011096 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8010fba:	4b39      	ldr	r3, [pc, #228]	; (80110a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fc4:	e008      	b.n	8010fd8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8010fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8010fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d007      	beq.n	8010fe2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8010fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fd8:	79fb      	ldrb	r3, [r7, #7]
 8010fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d3f2      	bcc.n	8010fc6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8010fe0:	e000      	b.n	8010fe4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8010fe2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8010fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d055      	beq.n	8011096 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8010fea:	f3ef 8311 	mrs	r3, BASEPRI
 8010fee:	f04f 0120 	mov.w	r1, #32
 8010ff2:	f381 8811 	msr	BASEPRI, r1
 8010ff6:	617b      	str	r3, [r7, #20]
 8010ff8:	482a      	ldr	r0, [pc, #168]	; (80110a4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8010ffa:	f7fe ffaf 	bl	800ff5c <_PreparePacket>
 8010ffe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	627b      	str	r3, [r7, #36]	; 0x24
 8011008:	79fb      	ldrb	r3, [r7, #7]
 801100a:	623b      	str	r3, [r7, #32]
 801100c:	e00b      	b.n	8011026 <SEGGER_SYSVIEW_SendModule+0x7e>
 801100e:	6a3b      	ldr	r3, [r7, #32]
 8011010:	b2da      	uxtb	r2, r3
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	1c59      	adds	r1, r3, #1
 8011016:	6279      	str	r1, [r7, #36]	; 0x24
 8011018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801101c:	b2d2      	uxtb	r2, r2
 801101e:	701a      	strb	r2, [r3, #0]
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	09db      	lsrs	r3, r3, #7
 8011024:	623b      	str	r3, [r7, #32]
 8011026:	6a3b      	ldr	r3, [r7, #32]
 8011028:	2b7f      	cmp	r3, #127	; 0x7f
 801102a:	d8f0      	bhi.n	801100e <SEGGER_SYSVIEW_SendModule+0x66>
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	1c5a      	adds	r2, r3, #1
 8011030:	627a      	str	r2, [r7, #36]	; 0x24
 8011032:	6a3a      	ldr	r2, [r7, #32]
 8011034:	b2d2      	uxtb	r2, r2
 8011036:	701a      	strb	r2, [r3, #0]
 8011038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	61fb      	str	r3, [r7, #28]
 8011040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011042:	689b      	ldr	r3, [r3, #8]
 8011044:	61bb      	str	r3, [r7, #24]
 8011046:	e00b      	b.n	8011060 <SEGGER_SYSVIEW_SendModule+0xb8>
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	b2da      	uxtb	r2, r3
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	1c59      	adds	r1, r3, #1
 8011050:	61f9      	str	r1, [r7, #28]
 8011052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8011056:	b2d2      	uxtb	r2, r2
 8011058:	701a      	strb	r2, [r3, #0]
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	09db      	lsrs	r3, r3, #7
 801105e:	61bb      	str	r3, [r7, #24]
 8011060:	69bb      	ldr	r3, [r7, #24]
 8011062:	2b7f      	cmp	r3, #127	; 0x7f
 8011064:	d8f0      	bhi.n	8011048 <SEGGER_SYSVIEW_SendModule+0xa0>
 8011066:	69fb      	ldr	r3, [r7, #28]
 8011068:	1c5a      	adds	r2, r3, #1
 801106a:	61fa      	str	r2, [r7, #28]
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	b2d2      	uxtb	r2, r2
 8011070:	701a      	strb	r2, [r3, #0]
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2280      	movs	r2, #128	; 0x80
 801107c:	4619      	mov	r1, r3
 801107e:	68f8      	ldr	r0, [r7, #12]
 8011080:	f7fe ff1c 	bl	800febc <_EncodeStr>
 8011084:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8011086:	2216      	movs	r2, #22
 8011088:	68f9      	ldr	r1, [r7, #12]
 801108a:	6938      	ldr	r0, [r7, #16]
 801108c:	f7ff f854 	bl	8010138 <_SendPacket>
      RECORD_END();
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8011096:	bf00      	nop
 8011098:	3730      	adds	r7, #48	; 0x30
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	20008f54 	.word	0x20008f54
 80110a4:	20008f5c 	.word	0x20008f5c

080110a8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80110ae:	4b0c      	ldr	r3, [pc, #48]	; (80110e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d00f      	beq.n	80110d6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80110b6:	4b0a      	ldr	r3, [pc, #40]	; (80110e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d002      	beq.n	80110ca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d1f2      	bne.n	80110bc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80110d6:	bf00      	nop
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	20008f54 	.word	0x20008f54

080110e4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80110ea:	f3ef 8311 	mrs	r3, BASEPRI
 80110ee:	f04f 0120 	mov.w	r1, #32
 80110f2:	f381 8811 	msr	BASEPRI, r1
 80110f6:	60fb      	str	r3, [r7, #12]
 80110f8:	4817      	ldr	r0, [pc, #92]	; (8011158 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80110fa:	f7fe ff2f 	bl	800ff5c <_PreparePacket>
 80110fe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	617b      	str	r3, [r7, #20]
 8011108:	4b14      	ldr	r3, [pc, #80]	; (801115c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	613b      	str	r3, [r7, #16]
 801110e:	e00b      	b.n	8011128 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	b2da      	uxtb	r2, r3
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	1c59      	adds	r1, r3, #1
 8011118:	6179      	str	r1, [r7, #20]
 801111a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801111e:	b2d2      	uxtb	r2, r2
 8011120:	701a      	strb	r2, [r3, #0]
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	09db      	lsrs	r3, r3, #7
 8011126:	613b      	str	r3, [r7, #16]
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	2b7f      	cmp	r3, #127	; 0x7f
 801112c:	d8f0      	bhi.n	8011110 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	617a      	str	r2, [r7, #20]
 8011134:	693a      	ldr	r2, [r7, #16]
 8011136:	b2d2      	uxtb	r2, r2
 8011138:	701a      	strb	r2, [r3, #0]
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 801113e:	221b      	movs	r2, #27
 8011140:	6879      	ldr	r1, [r7, #4]
 8011142:	68b8      	ldr	r0, [r7, #8]
 8011144:	f7fe fff8 	bl	8010138 <_SendPacket>
  RECORD_END();
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f383 8811 	msr	BASEPRI, r3
}
 801114e:	bf00      	nop
 8011150:	3718      	adds	r7, #24
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	20008f5c 	.word	0x20008f5c
 801115c:	20008f58 	.word	0x20008f58

08011160 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8011160:	b580      	push	{r7, lr}
 8011162:	b08a      	sub	sp, #40	; 0x28
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8011168:	f3ef 8311 	mrs	r3, BASEPRI
 801116c:	f04f 0120 	mov.w	r1, #32
 8011170:	f381 8811 	msr	BASEPRI, r1
 8011174:	617b      	str	r3, [r7, #20]
 8011176:	4827      	ldr	r0, [pc, #156]	; (8011214 <SEGGER_SYSVIEW_Warn+0xb4>)
 8011178:	f7fe fef0 	bl	800ff5c <_PreparePacket>
 801117c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801117e:	2280      	movs	r2, #128	; 0x80
 8011180:	6879      	ldr	r1, [r7, #4]
 8011182:	6938      	ldr	r0, [r7, #16]
 8011184:	f7fe fe9a 	bl	800febc <_EncodeStr>
 8011188:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	627b      	str	r3, [r7, #36]	; 0x24
 801118e:	2301      	movs	r3, #1
 8011190:	623b      	str	r3, [r7, #32]
 8011192:	e00b      	b.n	80111ac <SEGGER_SYSVIEW_Warn+0x4c>
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	b2da      	uxtb	r2, r3
 8011198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119a:	1c59      	adds	r1, r3, #1
 801119c:	6279      	str	r1, [r7, #36]	; 0x24
 801119e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80111a2:	b2d2      	uxtb	r2, r2
 80111a4:	701a      	strb	r2, [r3, #0]
 80111a6:	6a3b      	ldr	r3, [r7, #32]
 80111a8:	09db      	lsrs	r3, r3, #7
 80111aa:	623b      	str	r3, [r7, #32]
 80111ac:	6a3b      	ldr	r3, [r7, #32]
 80111ae:	2b7f      	cmp	r3, #127	; 0x7f
 80111b0:	d8f0      	bhi.n	8011194 <SEGGER_SYSVIEW_Warn+0x34>
 80111b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b4:	1c5a      	adds	r2, r3, #1
 80111b6:	627a      	str	r2, [r7, #36]	; 0x24
 80111b8:	6a3a      	ldr	r2, [r7, #32]
 80111ba:	b2d2      	uxtb	r2, r2
 80111bc:	701a      	strb	r2, [r3, #0]
 80111be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	61fb      	str	r3, [r7, #28]
 80111c6:	2300      	movs	r3, #0
 80111c8:	61bb      	str	r3, [r7, #24]
 80111ca:	e00b      	b.n	80111e4 <SEGGER_SYSVIEW_Warn+0x84>
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	69fb      	ldr	r3, [r7, #28]
 80111d2:	1c59      	adds	r1, r3, #1
 80111d4:	61f9      	str	r1, [r7, #28]
 80111d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80111da:	b2d2      	uxtb	r2, r2
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	09db      	lsrs	r3, r3, #7
 80111e2:	61bb      	str	r3, [r7, #24]
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	2b7f      	cmp	r3, #127	; 0x7f
 80111e8:	d8f0      	bhi.n	80111cc <SEGGER_SYSVIEW_Warn+0x6c>
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	1c5a      	adds	r2, r3, #1
 80111ee:	61fa      	str	r2, [r7, #28]
 80111f0:	69ba      	ldr	r2, [r7, #24]
 80111f2:	b2d2      	uxtb	r2, r2
 80111f4:	701a      	strb	r2, [r3, #0]
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80111fa:	221a      	movs	r2, #26
 80111fc:	68f9      	ldr	r1, [r7, #12]
 80111fe:	6938      	ldr	r0, [r7, #16]
 8011200:	f7fe ff9a 	bl	8010138 <_SendPacket>
  RECORD_END();
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	f383 8811 	msr	BASEPRI, r3
}
 801120a:	bf00      	nop
 801120c:	3728      	adds	r7, #40	; 0x28
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20008f5c 	.word	0x20008f5c

08011218 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8011218:	b580      	push	{r7, lr}
 801121a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 801121c:	4803      	ldr	r0, [pc, #12]	; (801122c <_cbSendSystemDesc+0x14>)
 801121e:	f7ff fd7b 	bl	8010d18 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8011222:	4803      	ldr	r0, [pc, #12]	; (8011230 <_cbSendSystemDesc+0x18>)
 8011224:	f7ff fd78 	bl	8010d18 <SEGGER_SYSVIEW_SendSysDesc>
}
 8011228:	bf00      	nop
 801122a:	bd80      	pop	{r7, pc}
 801122c:	08011be0 	.word	0x08011be0
 8011230:	08011c14 	.word	0x08011c14

08011234 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8011234:	b580      	push	{r7, lr}
 8011236:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8011238:	4b06      	ldr	r3, [pc, #24]	; (8011254 <SEGGER_SYSVIEW_Conf+0x20>)
 801123a:	6818      	ldr	r0, [r3, #0]
 801123c:	4b05      	ldr	r3, [pc, #20]	; (8011254 <SEGGER_SYSVIEW_Conf+0x20>)
 801123e:	6819      	ldr	r1, [r3, #0]
 8011240:	4b05      	ldr	r3, [pc, #20]	; (8011258 <SEGGER_SYSVIEW_Conf+0x24>)
 8011242:	4a06      	ldr	r2, [pc, #24]	; (801125c <SEGGER_SYSVIEW_Conf+0x28>)
 8011244:	f7ff f8e6 	bl	8010414 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8011248:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801124c:	f7ff f926 	bl	801049c <SEGGER_SYSVIEW_SetRAMBase>
}
 8011250:	bf00      	nop
 8011252:	bd80      	pop	{r7, pc}
 8011254:	20000000 	.word	0x20000000
 8011258:	08011219 	.word	0x08011219
 801125c:	08011d78 	.word	0x08011d78

08011260 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8011260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011262:	b085      	sub	sp, #20
 8011264:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8011266:	2300      	movs	r3, #0
 8011268:	607b      	str	r3, [r7, #4]
 801126a:	e033      	b.n	80112d4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 801126c:	491e      	ldr	r1, [pc, #120]	; (80112e8 <_cbSendTaskList+0x88>)
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	4613      	mov	r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	4413      	add	r3, r2
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	440b      	add	r3, r1
 801127a:	6818      	ldr	r0, [r3, #0]
 801127c:	491a      	ldr	r1, [pc, #104]	; (80112e8 <_cbSendTaskList+0x88>)
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	4613      	mov	r3, r2
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	4413      	add	r3, r2
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	440b      	add	r3, r1
 801128a:	3304      	adds	r3, #4
 801128c:	6819      	ldr	r1, [r3, #0]
 801128e:	4c16      	ldr	r4, [pc, #88]	; (80112e8 <_cbSendTaskList+0x88>)
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	4613      	mov	r3, r2
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	4423      	add	r3, r4
 801129c:	3308      	adds	r3, #8
 801129e:	681c      	ldr	r4, [r3, #0]
 80112a0:	4d11      	ldr	r5, [pc, #68]	; (80112e8 <_cbSendTaskList+0x88>)
 80112a2:	687a      	ldr	r2, [r7, #4]
 80112a4:	4613      	mov	r3, r2
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	4413      	add	r3, r2
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	442b      	add	r3, r5
 80112ae:	330c      	adds	r3, #12
 80112b0:	681d      	ldr	r5, [r3, #0]
 80112b2:	4e0d      	ldr	r6, [pc, #52]	; (80112e8 <_cbSendTaskList+0x88>)
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	4613      	mov	r3, r2
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	4413      	add	r3, r2
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	4433      	add	r3, r6
 80112c0:	3310      	adds	r3, #16
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	9300      	str	r3, [sp, #0]
 80112c6:	462b      	mov	r3, r5
 80112c8:	4622      	mov	r2, r4
 80112ca:	f000 f979 	bl	80115c0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3301      	adds	r3, #1
 80112d2:	607b      	str	r3, [r7, #4]
 80112d4:	4b05      	ldr	r3, [pc, #20]	; (80112ec <_cbSendTaskList+0x8c>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d3c6      	bcc.n	801126c <_cbSendTaskList+0xc>
  }
}
 80112de:	bf00      	nop
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112e8:	20009040 	.word	0x20009040
 80112ec:	200090e0 	.word	0x200090e0

080112f0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80112f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112f4:	b082      	sub	sp, #8
 80112f6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80112f8:	f7fd fa92 	bl	800e820 <xTaskGetTickCountFromISR>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2200      	movs	r2, #0
 8011300:	469a      	mov	sl, r3
 8011302:	4693      	mov	fp, r2
 8011304:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8011308:	e9d7 0100 	ldrd	r0, r1, [r7]
 801130c:	4602      	mov	r2, r0
 801130e:	460b      	mov	r3, r1
 8011310:	f04f 0a00 	mov.w	sl, #0
 8011314:	f04f 0b00 	mov.w	fp, #0
 8011318:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 801131c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8011320:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8011324:	4652      	mov	r2, sl
 8011326:	465b      	mov	r3, fp
 8011328:	1a14      	subs	r4, r2, r0
 801132a:	eb63 0501 	sbc.w	r5, r3, r1
 801132e:	f04f 0200 	mov.w	r2, #0
 8011332:	f04f 0300 	mov.w	r3, #0
 8011336:	00ab      	lsls	r3, r5, #2
 8011338:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 801133c:	00a2      	lsls	r2, r4, #2
 801133e:	4614      	mov	r4, r2
 8011340:	461d      	mov	r5, r3
 8011342:	eb14 0800 	adds.w	r8, r4, r0
 8011346:	eb45 0901 	adc.w	r9, r5, r1
 801134a:	f04f 0200 	mov.w	r2, #0
 801134e:	f04f 0300 	mov.w	r3, #0
 8011352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801135a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801135e:	4690      	mov	r8, r2
 8011360:	4699      	mov	r9, r3
 8011362:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8011366:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801136a:	4610      	mov	r0, r2
 801136c:	4619      	mov	r1, r3
 801136e:	3708      	adds	r7, #8
 8011370:	46bd      	mov	sp, r7
 8011372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08011378 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af02      	add	r7, sp, #8
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
 8011384:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8011386:	2205      	movs	r2, #5
 8011388:	492b      	ldr	r1, [pc, #172]	; (8011438 <SYSVIEW_AddTask+0xc0>)
 801138a:	68b8      	ldr	r0, [r7, #8]
 801138c:	f000 f960 	bl	8011650 <memcmp>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d04b      	beq.n	801142e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8011396:	4b29      	ldr	r3, [pc, #164]	; (801143c <SYSVIEW_AddTask+0xc4>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	2b07      	cmp	r3, #7
 801139c:	d903      	bls.n	80113a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 801139e:	4828      	ldr	r0, [pc, #160]	; (8011440 <SYSVIEW_AddTask+0xc8>)
 80113a0:	f7ff fede 	bl	8011160 <SEGGER_SYSVIEW_Warn>
    return;
 80113a4:	e044      	b.n	8011430 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80113a6:	4b25      	ldr	r3, [pc, #148]	; (801143c <SYSVIEW_AddTask+0xc4>)
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	4926      	ldr	r1, [pc, #152]	; (8011444 <SYSVIEW_AddTask+0xcc>)
 80113ac:	4613      	mov	r3, r2
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	4413      	add	r3, r2
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	440b      	add	r3, r1
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80113ba:	4b20      	ldr	r3, [pc, #128]	; (801143c <SYSVIEW_AddTask+0xc4>)
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	4921      	ldr	r1, [pc, #132]	; (8011444 <SYSVIEW_AddTask+0xcc>)
 80113c0:	4613      	mov	r3, r2
 80113c2:	009b      	lsls	r3, r3, #2
 80113c4:	4413      	add	r3, r2
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	440b      	add	r3, r1
 80113ca:	3304      	adds	r3, #4
 80113cc:	68ba      	ldr	r2, [r7, #8]
 80113ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80113d0:	4b1a      	ldr	r3, [pc, #104]	; (801143c <SYSVIEW_AddTask+0xc4>)
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	491b      	ldr	r1, [pc, #108]	; (8011444 <SYSVIEW_AddTask+0xcc>)
 80113d6:	4613      	mov	r3, r2
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	4413      	add	r3, r2
 80113dc:	009b      	lsls	r3, r3, #2
 80113de:	440b      	add	r3, r1
 80113e0:	3308      	adds	r3, #8
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80113e6:	4b15      	ldr	r3, [pc, #84]	; (801143c <SYSVIEW_AddTask+0xc4>)
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	4916      	ldr	r1, [pc, #88]	; (8011444 <SYSVIEW_AddTask+0xcc>)
 80113ec:	4613      	mov	r3, r2
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	440b      	add	r3, r1
 80113f6:	330c      	adds	r3, #12
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80113fc:	4b0f      	ldr	r3, [pc, #60]	; (801143c <SYSVIEW_AddTask+0xc4>)
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	4910      	ldr	r1, [pc, #64]	; (8011444 <SYSVIEW_AddTask+0xcc>)
 8011402:	4613      	mov	r3, r2
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	4413      	add	r3, r2
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	440b      	add	r3, r1
 801140c:	3310      	adds	r3, #16
 801140e:	69ba      	ldr	r2, [r7, #24]
 8011410:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8011412:	4b0a      	ldr	r3, [pc, #40]	; (801143c <SYSVIEW_AddTask+0xc4>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3301      	adds	r3, #1
 8011418:	4a08      	ldr	r2, [pc, #32]	; (801143c <SYSVIEW_AddTask+0xc4>)
 801141a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 801141c:	69bb      	ldr	r3, [r7, #24]
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	68b9      	ldr	r1, [r7, #8]
 8011426:	68f8      	ldr	r0, [r7, #12]
 8011428:	f000 f8ca 	bl	80115c0 <SYSVIEW_SendTaskInfo>
 801142c:	e000      	b.n	8011430 <SYSVIEW_AddTask+0xb8>
    return;
 801142e:	bf00      	nop

}
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	08011c24 	.word	0x08011c24
 801143c:	200090e0 	.word	0x200090e0
 8011440:	08011c2c 	.word	0x08011c2c
 8011444:	20009040 	.word	0x20009040

08011448 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8011450:	4b59      	ldr	r3, [pc, #356]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	f000 80ab 	beq.w	80115b0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 801145a:	2300      	movs	r3, #0
 801145c:	60fb      	str	r3, [r7, #12]
 801145e:	e00d      	b.n	801147c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8011460:	4956      	ldr	r1, [pc, #344]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011462:	68fa      	ldr	r2, [r7, #12]
 8011464:	4613      	mov	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	4413      	add	r3, r2
 801146a:	009b      	lsls	r3, r3, #2
 801146c:	440b      	add	r3, r1
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	687a      	ldr	r2, [r7, #4]
 8011472:	429a      	cmp	r2, r3
 8011474:	d008      	beq.n	8011488 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	3301      	adds	r3, #1
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	4b4e      	ldr	r3, [pc, #312]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	68fa      	ldr	r2, [r7, #12]
 8011482:	429a      	cmp	r2, r3
 8011484:	d3ec      	bcc.n	8011460 <SYSVIEW_DeleteTask+0x18>
 8011486:	e000      	b.n	801148a <SYSVIEW_DeleteTask+0x42>
      break;
 8011488:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 801148a:	4b4b      	ldr	r3, [pc, #300]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	3b01      	subs	r3, #1
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	429a      	cmp	r2, r3
 8011494:	d111      	bne.n	80114ba <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8011496:	68fa      	ldr	r2, [r7, #12]
 8011498:	4613      	mov	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	4413      	add	r3, r2
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	4a46      	ldr	r2, [pc, #280]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 80114a2:	4413      	add	r3, r2
 80114a4:	2214      	movs	r2, #20
 80114a6:	2100      	movs	r1, #0
 80114a8:	4618      	mov	r0, r3
 80114aa:	f000 f8ef 	bl	801168c <memset>
    _NumTasks--;
 80114ae:	4b42      	ldr	r3, [pc, #264]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	3b01      	subs	r3, #1
 80114b4:	4a40      	ldr	r2, [pc, #256]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 80114b6:	6013      	str	r3, [r2, #0]
 80114b8:	e07b      	b.n	80115b2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80114ba:	4b3f      	ldr	r3, [pc, #252]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d276      	bcs.n	80115b2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80114c4:	4b3c      	ldr	r3, [pc, #240]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	1e5a      	subs	r2, r3, #1
 80114ca:	493c      	ldr	r1, [pc, #240]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 80114cc:	4613      	mov	r3, r2
 80114ce:	009b      	lsls	r3, r3, #2
 80114d0:	4413      	add	r3, r2
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	440b      	add	r3, r1
 80114d6:	6819      	ldr	r1, [r3, #0]
 80114d8:	4838      	ldr	r0, [pc, #224]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 80114da:	68fa      	ldr	r2, [r7, #12]
 80114dc:	4613      	mov	r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	4413      	add	r3, r2
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4403      	add	r3, r0
 80114e6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80114e8:	4b33      	ldr	r3, [pc, #204]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	1e5a      	subs	r2, r3, #1
 80114ee:	4933      	ldr	r1, [pc, #204]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 80114f0:	4613      	mov	r3, r2
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	4413      	add	r3, r2
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	440b      	add	r3, r1
 80114fa:	3304      	adds	r3, #4
 80114fc:	6819      	ldr	r1, [r3, #0]
 80114fe:	482f      	ldr	r0, [pc, #188]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011500:	68fa      	ldr	r2, [r7, #12]
 8011502:	4613      	mov	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	4413      	add	r3, r2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	4403      	add	r3, r0
 801150c:	3304      	adds	r3, #4
 801150e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8011510:	4b29      	ldr	r3, [pc, #164]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	1e5a      	subs	r2, r3, #1
 8011516:	4929      	ldr	r1, [pc, #164]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011518:	4613      	mov	r3, r2
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	4413      	add	r3, r2
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	440b      	add	r3, r1
 8011522:	3308      	adds	r3, #8
 8011524:	6819      	ldr	r1, [r3, #0]
 8011526:	4825      	ldr	r0, [pc, #148]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011528:	68fa      	ldr	r2, [r7, #12]
 801152a:	4613      	mov	r3, r2
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	4413      	add	r3, r2
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	4403      	add	r3, r0
 8011534:	3308      	adds	r3, #8
 8011536:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8011538:	4b1f      	ldr	r3, [pc, #124]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	1e5a      	subs	r2, r3, #1
 801153e:	491f      	ldr	r1, [pc, #124]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011540:	4613      	mov	r3, r2
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	4413      	add	r3, r2
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	440b      	add	r3, r1
 801154a:	330c      	adds	r3, #12
 801154c:	6819      	ldr	r1, [r3, #0]
 801154e:	481b      	ldr	r0, [pc, #108]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	4613      	mov	r3, r2
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	4413      	add	r3, r2
 8011558:	009b      	lsls	r3, r3, #2
 801155a:	4403      	add	r3, r0
 801155c:	330c      	adds	r3, #12
 801155e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8011560:	4b15      	ldr	r3, [pc, #84]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	1e5a      	subs	r2, r3, #1
 8011566:	4915      	ldr	r1, [pc, #84]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011568:	4613      	mov	r3, r2
 801156a:	009b      	lsls	r3, r3, #2
 801156c:	4413      	add	r3, r2
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	440b      	add	r3, r1
 8011572:	3310      	adds	r3, #16
 8011574:	6819      	ldr	r1, [r3, #0]
 8011576:	4811      	ldr	r0, [pc, #68]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011578:	68fa      	ldr	r2, [r7, #12]
 801157a:	4613      	mov	r3, r2
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	4413      	add	r3, r2
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4403      	add	r3, r0
 8011584:	3310      	adds	r3, #16
 8011586:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8011588:	4b0b      	ldr	r3, [pc, #44]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	1e5a      	subs	r2, r3, #1
 801158e:	4613      	mov	r3, r2
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	4a09      	ldr	r2, [pc, #36]	; (80115bc <SYSVIEW_DeleteTask+0x174>)
 8011598:	4413      	add	r3, r2
 801159a:	2214      	movs	r2, #20
 801159c:	2100      	movs	r1, #0
 801159e:	4618      	mov	r0, r3
 80115a0:	f000 f874 	bl	801168c <memset>
    _NumTasks--;
 80115a4:	4b04      	ldr	r3, [pc, #16]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	3b01      	subs	r3, #1
 80115aa:	4a03      	ldr	r2, [pc, #12]	; (80115b8 <SYSVIEW_DeleteTask+0x170>)
 80115ac:	6013      	str	r3, [r2, #0]
 80115ae:	e000      	b.n	80115b2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80115b0:	bf00      	nop
  }
}
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	200090e0 	.word	0x200090e0
 80115bc:	20009040 	.word	0x20009040

080115c0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b08a      	sub	sp, #40	; 0x28
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
 80115cc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80115ce:	f107 0314 	add.w	r3, r7, #20
 80115d2:	2214      	movs	r2, #20
 80115d4:	2100      	movs	r1, #0
 80115d6:	4618      	mov	r0, r3
 80115d8:	f000 f858 	bl	801168c <memset>
  TaskInfo.TaskID     = TaskID;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80115ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ee:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80115f0:	f107 0314 	add.w	r3, r7, #20
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7ff fa97 	bl	8010b28 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80115fa:	bf00      	nop
 80115fc:	3728      	adds	r7, #40	; 0x28
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
	...

08011604 <__libc_init_array>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	4d0d      	ldr	r5, [pc, #52]	; (801163c <__libc_init_array+0x38>)
 8011608:	4c0d      	ldr	r4, [pc, #52]	; (8011640 <__libc_init_array+0x3c>)
 801160a:	1b64      	subs	r4, r4, r5
 801160c:	10a4      	asrs	r4, r4, #2
 801160e:	2600      	movs	r6, #0
 8011610:	42a6      	cmp	r6, r4
 8011612:	d109      	bne.n	8011628 <__libc_init_array+0x24>
 8011614:	4d0b      	ldr	r5, [pc, #44]	; (8011644 <__libc_init_array+0x40>)
 8011616:	4c0c      	ldr	r4, [pc, #48]	; (8011648 <__libc_init_array+0x44>)
 8011618:	f000 f902 	bl	8011820 <_init>
 801161c:	1b64      	subs	r4, r4, r5
 801161e:	10a4      	asrs	r4, r4, #2
 8011620:	2600      	movs	r6, #0
 8011622:	42a6      	cmp	r6, r4
 8011624:	d105      	bne.n	8011632 <__libc_init_array+0x2e>
 8011626:	bd70      	pop	{r4, r5, r6, pc}
 8011628:	f855 3b04 	ldr.w	r3, [r5], #4
 801162c:	4798      	blx	r3
 801162e:	3601      	adds	r6, #1
 8011630:	e7ee      	b.n	8011610 <__libc_init_array+0xc>
 8011632:	f855 3b04 	ldr.w	r3, [r5], #4
 8011636:	4798      	blx	r3
 8011638:	3601      	adds	r6, #1
 801163a:	e7f2      	b.n	8011622 <__libc_init_array+0x1e>
 801163c:	08011de8 	.word	0x08011de8
 8011640:	08011de8 	.word	0x08011de8
 8011644:	08011de8 	.word	0x08011de8
 8011648:	08011dec 	.word	0x08011dec

0801164c <__retarget_lock_acquire_recursive>:
 801164c:	4770      	bx	lr

0801164e <__retarget_lock_release_recursive>:
 801164e:	4770      	bx	lr

08011650 <memcmp>:
 8011650:	b510      	push	{r4, lr}
 8011652:	3901      	subs	r1, #1
 8011654:	4402      	add	r2, r0
 8011656:	4290      	cmp	r0, r2
 8011658:	d101      	bne.n	801165e <memcmp+0xe>
 801165a:	2000      	movs	r0, #0
 801165c:	e005      	b.n	801166a <memcmp+0x1a>
 801165e:	7803      	ldrb	r3, [r0, #0]
 8011660:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011664:	42a3      	cmp	r3, r4
 8011666:	d001      	beq.n	801166c <memcmp+0x1c>
 8011668:	1b18      	subs	r0, r3, r4
 801166a:	bd10      	pop	{r4, pc}
 801166c:	3001      	adds	r0, #1
 801166e:	e7f2      	b.n	8011656 <memcmp+0x6>

08011670 <memcpy>:
 8011670:	440a      	add	r2, r1
 8011672:	4291      	cmp	r1, r2
 8011674:	f100 33ff 	add.w	r3, r0, #4294967295
 8011678:	d100      	bne.n	801167c <memcpy+0xc>
 801167a:	4770      	bx	lr
 801167c:	b510      	push	{r4, lr}
 801167e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011686:	4291      	cmp	r1, r2
 8011688:	d1f9      	bne.n	801167e <memcpy+0xe>
 801168a:	bd10      	pop	{r4, pc}

0801168c <memset>:
 801168c:	4402      	add	r2, r0
 801168e:	4603      	mov	r3, r0
 8011690:	4293      	cmp	r3, r2
 8011692:	d100      	bne.n	8011696 <memset+0xa>
 8011694:	4770      	bx	lr
 8011696:	f803 1b01 	strb.w	r1, [r3], #1
 801169a:	e7f9      	b.n	8011690 <memset+0x4>

0801169c <cleanup_glue>:
 801169c:	b538      	push	{r3, r4, r5, lr}
 801169e:	460c      	mov	r4, r1
 80116a0:	6809      	ldr	r1, [r1, #0]
 80116a2:	4605      	mov	r5, r0
 80116a4:	b109      	cbz	r1, 80116aa <cleanup_glue+0xe>
 80116a6:	f7ff fff9 	bl	801169c <cleanup_glue>
 80116aa:	4621      	mov	r1, r4
 80116ac:	4628      	mov	r0, r5
 80116ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116b2:	f000 b869 	b.w	8011788 <_free_r>
	...

080116b8 <_reclaim_reent>:
 80116b8:	4b2c      	ldr	r3, [pc, #176]	; (801176c <_reclaim_reent+0xb4>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4283      	cmp	r3, r0
 80116be:	b570      	push	{r4, r5, r6, lr}
 80116c0:	4604      	mov	r4, r0
 80116c2:	d051      	beq.n	8011768 <_reclaim_reent+0xb0>
 80116c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80116c6:	b143      	cbz	r3, 80116da <_reclaim_reent+0x22>
 80116c8:	68db      	ldr	r3, [r3, #12]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d14a      	bne.n	8011764 <_reclaim_reent+0xac>
 80116ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80116d0:	6819      	ldr	r1, [r3, #0]
 80116d2:	b111      	cbz	r1, 80116da <_reclaim_reent+0x22>
 80116d4:	4620      	mov	r0, r4
 80116d6:	f000 f857 	bl	8011788 <_free_r>
 80116da:	6961      	ldr	r1, [r4, #20]
 80116dc:	b111      	cbz	r1, 80116e4 <_reclaim_reent+0x2c>
 80116de:	4620      	mov	r0, r4
 80116e0:	f000 f852 	bl	8011788 <_free_r>
 80116e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80116e6:	b111      	cbz	r1, 80116ee <_reclaim_reent+0x36>
 80116e8:	4620      	mov	r0, r4
 80116ea:	f000 f84d 	bl	8011788 <_free_r>
 80116ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80116f0:	b111      	cbz	r1, 80116f8 <_reclaim_reent+0x40>
 80116f2:	4620      	mov	r0, r4
 80116f4:	f000 f848 	bl	8011788 <_free_r>
 80116f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80116fa:	b111      	cbz	r1, 8011702 <_reclaim_reent+0x4a>
 80116fc:	4620      	mov	r0, r4
 80116fe:	f000 f843 	bl	8011788 <_free_r>
 8011702:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011704:	b111      	cbz	r1, 801170c <_reclaim_reent+0x54>
 8011706:	4620      	mov	r0, r4
 8011708:	f000 f83e 	bl	8011788 <_free_r>
 801170c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801170e:	b111      	cbz	r1, 8011716 <_reclaim_reent+0x5e>
 8011710:	4620      	mov	r0, r4
 8011712:	f000 f839 	bl	8011788 <_free_r>
 8011716:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011718:	b111      	cbz	r1, 8011720 <_reclaim_reent+0x68>
 801171a:	4620      	mov	r0, r4
 801171c:	f000 f834 	bl	8011788 <_free_r>
 8011720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011722:	b111      	cbz	r1, 801172a <_reclaim_reent+0x72>
 8011724:	4620      	mov	r0, r4
 8011726:	f000 f82f 	bl	8011788 <_free_r>
 801172a:	69a3      	ldr	r3, [r4, #24]
 801172c:	b1e3      	cbz	r3, 8011768 <_reclaim_reent+0xb0>
 801172e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011730:	4620      	mov	r0, r4
 8011732:	4798      	blx	r3
 8011734:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011736:	b1b9      	cbz	r1, 8011768 <_reclaim_reent+0xb0>
 8011738:	4620      	mov	r0, r4
 801173a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801173e:	f7ff bfad 	b.w	801169c <cleanup_glue>
 8011742:	5949      	ldr	r1, [r1, r5]
 8011744:	b941      	cbnz	r1, 8011758 <_reclaim_reent+0xa0>
 8011746:	3504      	adds	r5, #4
 8011748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801174a:	2d80      	cmp	r5, #128	; 0x80
 801174c:	68d9      	ldr	r1, [r3, #12]
 801174e:	d1f8      	bne.n	8011742 <_reclaim_reent+0x8a>
 8011750:	4620      	mov	r0, r4
 8011752:	f000 f819 	bl	8011788 <_free_r>
 8011756:	e7ba      	b.n	80116ce <_reclaim_reent+0x16>
 8011758:	680e      	ldr	r6, [r1, #0]
 801175a:	4620      	mov	r0, r4
 801175c:	f000 f814 	bl	8011788 <_free_r>
 8011760:	4631      	mov	r1, r6
 8011762:	e7ef      	b.n	8011744 <_reclaim_reent+0x8c>
 8011764:	2500      	movs	r5, #0
 8011766:	e7ef      	b.n	8011748 <_reclaim_reent+0x90>
 8011768:	bd70      	pop	{r4, r5, r6, pc}
 801176a:	bf00      	nop
 801176c:	20000010 	.word	0x20000010

08011770 <__malloc_lock>:
 8011770:	4801      	ldr	r0, [pc, #4]	; (8011778 <__malloc_lock+0x8>)
 8011772:	f7ff bf6b 	b.w	801164c <__retarget_lock_acquire_recursive>
 8011776:	bf00      	nop
 8011778:	200090e4 	.word	0x200090e4

0801177c <__malloc_unlock>:
 801177c:	4801      	ldr	r0, [pc, #4]	; (8011784 <__malloc_unlock+0x8>)
 801177e:	f7ff bf66 	b.w	801164e <__retarget_lock_release_recursive>
 8011782:	bf00      	nop
 8011784:	200090e4 	.word	0x200090e4

08011788 <_free_r>:
 8011788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801178a:	2900      	cmp	r1, #0
 801178c:	d044      	beq.n	8011818 <_free_r+0x90>
 801178e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011792:	9001      	str	r0, [sp, #4]
 8011794:	2b00      	cmp	r3, #0
 8011796:	f1a1 0404 	sub.w	r4, r1, #4
 801179a:	bfb8      	it	lt
 801179c:	18e4      	addlt	r4, r4, r3
 801179e:	f7ff ffe7 	bl	8011770 <__malloc_lock>
 80117a2:	4a1e      	ldr	r2, [pc, #120]	; (801181c <_free_r+0x94>)
 80117a4:	9801      	ldr	r0, [sp, #4]
 80117a6:	6813      	ldr	r3, [r2, #0]
 80117a8:	b933      	cbnz	r3, 80117b8 <_free_r+0x30>
 80117aa:	6063      	str	r3, [r4, #4]
 80117ac:	6014      	str	r4, [r2, #0]
 80117ae:	b003      	add	sp, #12
 80117b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117b4:	f7ff bfe2 	b.w	801177c <__malloc_unlock>
 80117b8:	42a3      	cmp	r3, r4
 80117ba:	d908      	bls.n	80117ce <_free_r+0x46>
 80117bc:	6825      	ldr	r5, [r4, #0]
 80117be:	1961      	adds	r1, r4, r5
 80117c0:	428b      	cmp	r3, r1
 80117c2:	bf01      	itttt	eq
 80117c4:	6819      	ldreq	r1, [r3, #0]
 80117c6:	685b      	ldreq	r3, [r3, #4]
 80117c8:	1949      	addeq	r1, r1, r5
 80117ca:	6021      	streq	r1, [r4, #0]
 80117cc:	e7ed      	b.n	80117aa <_free_r+0x22>
 80117ce:	461a      	mov	r2, r3
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	b10b      	cbz	r3, 80117d8 <_free_r+0x50>
 80117d4:	42a3      	cmp	r3, r4
 80117d6:	d9fa      	bls.n	80117ce <_free_r+0x46>
 80117d8:	6811      	ldr	r1, [r2, #0]
 80117da:	1855      	adds	r5, r2, r1
 80117dc:	42a5      	cmp	r5, r4
 80117de:	d10b      	bne.n	80117f8 <_free_r+0x70>
 80117e0:	6824      	ldr	r4, [r4, #0]
 80117e2:	4421      	add	r1, r4
 80117e4:	1854      	adds	r4, r2, r1
 80117e6:	42a3      	cmp	r3, r4
 80117e8:	6011      	str	r1, [r2, #0]
 80117ea:	d1e0      	bne.n	80117ae <_free_r+0x26>
 80117ec:	681c      	ldr	r4, [r3, #0]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	6053      	str	r3, [r2, #4]
 80117f2:	4421      	add	r1, r4
 80117f4:	6011      	str	r1, [r2, #0]
 80117f6:	e7da      	b.n	80117ae <_free_r+0x26>
 80117f8:	d902      	bls.n	8011800 <_free_r+0x78>
 80117fa:	230c      	movs	r3, #12
 80117fc:	6003      	str	r3, [r0, #0]
 80117fe:	e7d6      	b.n	80117ae <_free_r+0x26>
 8011800:	6825      	ldr	r5, [r4, #0]
 8011802:	1961      	adds	r1, r4, r5
 8011804:	428b      	cmp	r3, r1
 8011806:	bf04      	itt	eq
 8011808:	6819      	ldreq	r1, [r3, #0]
 801180a:	685b      	ldreq	r3, [r3, #4]
 801180c:	6063      	str	r3, [r4, #4]
 801180e:	bf04      	itt	eq
 8011810:	1949      	addeq	r1, r1, r5
 8011812:	6021      	streq	r1, [r4, #0]
 8011814:	6054      	str	r4, [r2, #4]
 8011816:	e7ca      	b.n	80117ae <_free_r+0x26>
 8011818:	b003      	add	sp, #12
 801181a:	bd30      	pop	{r4, r5, pc}
 801181c:	200090e8 	.word	0x200090e8

08011820 <_init>:
 8011820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011822:	bf00      	nop
 8011824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011826:	bc08      	pop	{r3}
 8011828:	469e      	mov	lr, r3
 801182a:	4770      	bx	lr

0801182c <_fini>:
 801182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801182e:	bf00      	nop
 8011830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011832:	bc08      	pop	{r3}
 8011834:	469e      	mov	lr, r3
 8011836:	4770      	bx	lr
