
STM32F466_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b758  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800b928  0800b928  0001b928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb50  0800bb50  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb50  0800bb50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb58  0800bb58  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb58  0800bb58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb5c  0800bb5c  0001bb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bb60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004690  20000078  0800bbd8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004708  0800bbd8  00024708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe6a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049f7  00000000  00000000  0003ff12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00044910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  000462f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027739  00000000  00000000  00047ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021848  00000000  00000000  0006f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1301  00000000  00000000  00090a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171d6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df0  00000000  00000000  00171dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b910 	.word	0x0800b910

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800b910 	.word	0x0800b910

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <HAL_Init+0x40>)
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <HAL_Init+0x40>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_Init+0x40>)
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f8fc 	bl	800073a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	200f      	movs	r0, #15
 8000544:	f00a ff90 	bl	800b468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f00a ff62 	bl	800b410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x20>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_IncTick+0x24>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_IncTick+0x24>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	20000004 	.word	0x20000004
 800057c:	20000094 	.word	0x20000094

08000580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <HAL_GetTick+0x14>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000094 	.word	0x20000094

08000598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff ffee 	bl	8000580 <HAL_GetTick>
 80005a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b0:	d005      	beq.n	80005be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_Delay+0x44>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005be:	bf00      	nop
 80005c0:	f7ff ffde 	bl	8000580 <HAL_GetTick>
 80005c4:	4602      	mov	r2, r0
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d8f7      	bhi.n	80005c0 <HAL_Delay+0x28>
  {
  }
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <__NVIC_EnableIRQ+0x38>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ff4c 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000762:	f7ff ff61 	bl	8000628 <__NVIC_GetPriorityGrouping>
 8000766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	68b9      	ldr	r1, [r7, #8]
 800076c:	6978      	ldr	r0, [r7, #20]
 800076e:	f7ff ffb1 	bl	80006d4 <NVIC_EncodePriority>
 8000772:	4602      	mov	r2, r0
 8000774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff80 	bl	8000680 <__NVIC_SetPriority>
}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff54 	bl	8000644 <__NVIC_EnableIRQ>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fee6 	bl	8000580 <HAL_GetTick>
 80007b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d101      	bne.n	80007c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	e099      	b.n	80008f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2202      	movs	r2, #2
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f022 0201 	bic.w	r2, r2, #1
 80007de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80007e0:	e00f      	b.n	8000802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007e2:	f7ff fecd 	bl	8000580 <HAL_GetTick>
 80007e6:	4602      	mov	r2, r0
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	1ad3      	subs	r3, r2, r3
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d908      	bls.n	8000802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2220      	movs	r2, #32
 80007f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2203      	movs	r2, #3
 80007fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80007fe:	2303      	movs	r3, #3
 8000800:	e078      	b.n	80008f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1e8      	bne.n	80007e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	4b38      	ldr	r3, [pc, #224]	; (80008fc <HAL_DMA_Init+0x158>)
 800081c:	4013      	ands	r3, r2
 800081e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800082e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800083a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6a1b      	ldr	r3, [r3, #32]
 800084c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	4313      	orrs	r3, r2
 8000852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000858:	2b04      	cmp	r3, #4
 800085a:	d107      	bne.n	800086c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4313      	orrs	r3, r2
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	4313      	orrs	r3, r2
 800086a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f023 0307 	bic.w	r3, r3, #7
 8000882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4313      	orrs	r3, r2
 800088c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000892:	2b04      	cmp	r3, #4
 8000894:	d117      	bne.n	80008c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4313      	orrs	r3, r2
 800089e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00e      	beq.n	80008c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 fa9d 	bl	8000de8 <DMA_CheckFifoParam>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80008c2:	2301      	movs	r3, #1
 80008c4:	e016      	b.n	80008f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 fa54 	bl	8000d7c <DMA_CalcBaseAndBitshift>
 80008d4:	4603      	mov	r3, r0
 80008d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008dc:	223f      	movs	r2, #63	; 0x3f
 80008de:	409a      	lsls	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	f010803f 	.word	0xf010803f

08000900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
 800090c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000916:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800091e:	2b01      	cmp	r3, #1
 8000920:	d101      	bne.n	8000926 <HAL_DMA_Start_IT+0x26>
 8000922:	2302      	movs	r3, #2
 8000924:	e040      	b.n	80009a8 <HAL_DMA_Start_IT+0xa8>
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b01      	cmp	r3, #1
 8000938:	d12f      	bne.n	800099a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2202      	movs	r2, #2
 800093e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 f9e6 	bl	8000d20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000958:	223f      	movs	r2, #63	; 0x3f
 800095a:	409a      	lsls	r2, r3
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0216 	orr.w	r2, r2, #22
 800096e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	2b00      	cmp	r3, #0
 8000976:	d007      	beq.n	8000988 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f042 0208 	orr.w	r2, r2, #8
 8000986:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0201 	orr.w	r2, r2, #1
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	e005      	b.n	80009a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009a2:	2302      	movs	r3, #2
 80009a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d004      	beq.n	80009ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00c      	b.n	80009e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2205      	movs	r2, #5
 80009d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 0201 	bic.w	r2, r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a00:	4b8e      	ldr	r3, [pc, #568]	; (8000c3c <HAL_DMA_IRQHandler+0x248>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a8e      	ldr	r2, [pc, #568]	; (8000c40 <HAL_DMA_IRQHandler+0x24c>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0a9b      	lsrs	r3, r3, #10
 8000a0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a1e:	2208      	movs	r2, #8
 8000a20:	409a      	lsls	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d01a      	beq.n	8000a60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d013      	beq.n	8000a60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f022 0204 	bic.w	r2, r2, #4
 8000a46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	409a      	lsls	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a58:	f043 0201 	orr.w	r2, r3, #1
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a64:	2201      	movs	r2, #1
 8000a66:	409a      	lsls	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d012      	beq.n	8000a96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00b      	beq.n	8000a96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a82:	2201      	movs	r2, #1
 8000a84:	409a      	lsls	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a8e:	f043 0202 	orr.w	r2, r3, #2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d012      	beq.n	8000acc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00b      	beq.n	8000acc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab8:	2204      	movs	r2, #4
 8000aba:	409a      	lsls	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ac4:	f043 0204 	orr.w	r2, r3, #4
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d043      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d03c      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aee:	2210      	movs	r2, #16
 8000af0:	409a      	lsls	r2, r3
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d018      	beq.n	8000b36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d108      	bne.n	8000b24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d024      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	4798      	blx	r3
 8000b22:	e01f      	b.n	8000b64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d01b      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	4798      	blx	r3
 8000b34:	e016      	b.n	8000b64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0208 	bic.w	r2, r2, #8
 8000b52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b68:	2220      	movs	r2, #32
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 808f 	beq.w	8000c94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0310 	and.w	r3, r3, #16
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 8087 	beq.w	8000c94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d136      	bne.n	8000c0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0216 	bic.w	r2, r2, #22
 8000bac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <HAL_DMA_IRQHandler+0x1da>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0208 	bic.w	r2, r2, #8
 8000bdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be2:	223f      	movs	r2, #63	; 0x3f
 8000be4:	409a      	lsls	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d07e      	beq.n	8000d00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	4798      	blx	r3
        }
        return;
 8000c0a:	e079      	b.n	8000d00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d01d      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10d      	bne.n	8000c44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d031      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	4798      	blx	r3
 8000c38:	e02c      	b.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
 8000c3a:	bf00      	nop
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d023      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	4798      	blx	r3
 8000c54:	e01e      	b.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10f      	bne.n	8000c84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0210 	bic.w	r2, r2, #16
 8000c72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d032      	beq.n	8000d02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d022      	beq.n	8000cee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2205      	movs	r2, #5
 8000cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d307      	bcc.n	8000cdc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f2      	bne.n	8000cc0 <HAL_DMA_IRQHandler+0x2cc>
 8000cda:	e000      	b.n	8000cde <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000cdc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	4798      	blx	r3
 8000cfe:	e000      	b.n	8000d02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8000d00:	bf00      	nop
    }
  }
}
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b40      	cmp	r3, #64	; 0x40
 8000d4c:	d108      	bne.n	8000d60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d5e:	e007      	b.n	8000d70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	60da      	str	r2, [r3, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	3b10      	subs	r3, #16
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <DMA_CalcBaseAndBitshift+0x64>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	091b      	lsrs	r3, r3, #4
 8000d94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <DMA_CalcBaseAndBitshift+0x68>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d909      	bls.n	8000dbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000db2:	f023 0303 	bic.w	r3, r3, #3
 8000db6:	1d1a      	adds	r2, r3, #4
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	659a      	str	r2, [r3, #88]	; 0x58
 8000dbc:	e007      	b.n	8000dce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	aaaaaaab 	.word	0xaaaaaaab
 8000de4:	0800ba3c 	.word	0x0800ba3c

08000de8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d11f      	bne.n	8000e42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d856      	bhi.n	8000eb6 <DMA_CheckFifoParam+0xce>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <DMA_CheckFifoParam+0x28>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e33 	.word	0x08000e33
 8000e18:	08000e21 	.word	0x08000e21
 8000e1c:	08000eb7 	.word	0x08000eb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d046      	beq.n	8000eba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e30:	e043      	b.n	8000eba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e3a:	d140      	bne.n	8000ebe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e40:	e03d      	b.n	8000ebe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e4a:	d121      	bne.n	8000e90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d837      	bhi.n	8000ec2 <DMA_CheckFifoParam+0xda>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DMA_CheckFifoParam+0x70>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e6f 	.word	0x08000e6f
 8000e60:	08000e69 	.word	0x08000e69
 8000e64:	08000e81 	.word	0x08000e81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8000e6c:	e030      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d025      	beq.n	8000ec6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e7e:	e022      	b.n	8000ec6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e88:	d11f      	bne.n	8000eca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e8e:	e01c      	b.n	8000eca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d903      	bls.n	8000e9e <DMA_CheckFifoParam+0xb6>
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d003      	beq.n	8000ea4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e9c:	e018      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8000ea2:	e015      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00e      	beq.n	8000ece <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8000eb4:	e00b      	b.n	8000ece <DMA_CheckFifoParam+0xe6>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e00a      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8000eba:	bf00      	nop
 8000ebc:	e008      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8000ebe:	bf00      	nop
 8000ec0:	e006      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8000ec2:	bf00      	nop
 8000ec4:	e004      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8000ec6:	bf00      	nop
 8000ec8:	e002      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      break;   
 8000eca:	bf00      	nop
 8000ecc:	e000      	b.n	8000ed0 <DMA_CheckFifoParam+0xe8>
      break;
 8000ece:	bf00      	nop
    }
  } 
  
  return status; 
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e165      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8154 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80ae 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_GPIO_Init+0x300>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a5c      	ldr	r2, [pc, #368]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b5a      	ldr	r3, [pc, #360]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a58      	ldr	r2, [pc, #352]	; (80011e4 <HAL_GPIO_Init+0x304>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	; (80011e8 <HAL_GPIO_Init+0x308>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <HAL_GPIO_Init+0x30c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	; (80011f8 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x20a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4a      	ldr	r2, [pc, #296]	; (80011fc <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a49      	ldr	r2, [pc, #292]	; (8001200 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x202>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x304>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b3a      	ldr	r3, [pc, #232]	; (8001204 <HAL_GPIO_Init+0x324>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113e:	4a31      	ldr	r2, [pc, #196]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001168:	4a26      	ldr	r2, [pc, #152]	; (8001204 <HAL_GPIO_Init+0x324>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_GPIO_Init+0x324>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_GPIO_Init+0x324>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011bc:	4a11      	ldr	r2, [pc, #68]	; (8001204 <HAL_GPIO_Init+0x324>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae96 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001218:	787b      	ldrb	r3, [r7, #1]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001224:	e003      	b.n	800122e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001226:	887b      	ldrh	r3, [r7, #2]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123a:	b480      	push	{r7}
 800123c:	b085      	sub	sp, #20
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	460b      	mov	r3, r1
 8001244:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800124c:	887a      	ldrh	r2, [r7, #2]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4013      	ands	r3, r2
 8001252:	041a      	lsls	r2, r3, #16
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43d9      	mvns	r1, r3
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	400b      	ands	r3, r1
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0cc      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90c      	bls.n	80012ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b65      	ldr	r3, [pc, #404]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800129a:	4b63      	ldr	r3, [pc, #396]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0b8      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c4:	4b59      	ldr	r3, [pc, #356]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a58      	ldr	r2, [pc, #352]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e8:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	494d      	ldr	r1, [pc, #308]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d044      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d119      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e07f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800132a:	2b03      	cmp	r3, #3
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e067      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f023 0203 	bic.w	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4934      	ldr	r1, [pc, #208]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff f90e 	bl	8000580 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	e00a      	b.n	800137e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001368:	f7ff f90a 	bl	8000580 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e04f      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 020c 	and.w	r2, r3, #12
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d1eb      	bne.n	8001368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d20c      	bcs.n	80013b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_RCC_ClockConfig+0x1b8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e032      	b.n	800141e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4916      	ldr	r1, [pc, #88]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	490e      	ldr	r1, [pc, #56]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013f6:	f000 fbb1 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 80013fa:	4602      	mov	r2, r0
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001408:	5ccb      	ldrb	r3, [r1, r3]
 800140a:	fa22 f303 	lsr.w	r3, r2, r3
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1c8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f00a f826 	bl	800b468 <HAL_InitTick>

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023c00 	.word	0x40023c00
 800142c:	40023800 	.word	0x40023800
 8001430:	0800bad8 	.word	0x0800bad8
 8001434:	20000010 	.word	0x20000010
 8001438:	20000000 	.word	0x20000000

0800143c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_RCC_GetHCLKFreq+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000010 	.word	0x20000010

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff0 	bl	800143c <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	0800bae8 	.word	0x0800bae8

0800147c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001480:	f7ff ffdc 	bl	800143c <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	0b5b      	lsrs	r3, r3, #13
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	0800bae8 	.word	0x0800bae8

080014a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	220f      	movs	r2, #15
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_RCC_GetClockConfig+0x60>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 020f 	and.w	r2, r3, #15
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d010      	beq.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001540:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001546:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154e:	496c      	ldr	r1, [pc, #432]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001550:	4313      	orrs	r3, r2
 8001552:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800155e:	2301      	movs	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800156e:	4b64      	ldr	r3, [pc, #400]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001574:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157c:	4960      	ldr	r1, [pc, #384]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800157e:	4313      	orrs	r3, r2
 8001580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d017      	beq.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800159c:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800159e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4955      	ldr	r1, [pc, #340]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015ba:	d101      	bne.n	80015c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80015bc:	2301      	movs	r3, #1
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d017      	beq.n	8001608 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80015d8:	4b49      	ldr	r3, [pc, #292]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	4946      	ldr	r1, [pc, #280]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f6:	d101      	bne.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 808a 	beq.w	800172a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a38      	ldr	r2, [pc, #224]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a33      	ldr	r2, [pc, #204]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800163e:	f7fe ff9f 	bl	8000580 <HAL_GetTick>
 8001642:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7fe ff9b 	bl	8000580 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e278      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800166c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02f      	beq.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167c:	6a3a      	ldr	r2, [r7, #32]
 800167e:	429a      	cmp	r2, r3
 8001680:	d028      	beq.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800168a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d114      	bne.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80016aa:	f7fe ff69 	bl	8000580 <HAL_GetTick>
 80016ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7fe ff65 	bl	8000580 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e240      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016e0:	d114      	bne.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80016f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016f6:	4902      	ldr	r1, [pc, #8]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
 80016fc:	e00c      	b.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000
 8001708:	42470e40 	.word	0x42470e40
 800170c:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001712:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001716:	6093      	str	r3, [r2, #8]
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800171a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	4944      	ldr	r1, [pc, #272]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001726:	4313      	orrs	r3, r2
 8001728:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800173e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00a      	beq.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800174c:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	4937      	ldr	r1, [pc, #220]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800175c:	4313      	orrs	r3, r2
 800175e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00a      	beq.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001774:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	492e      	ldr	r1, [pc, #184]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800177e:	4313      	orrs	r3, r2
 8001780:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d011      	beq.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001796:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	4926      	ldr	r1, [pc, #152]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017ae:	d101      	bne.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80017b0:	2301      	movs	r3, #1
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	491a      	ldr	r1, [pc, #104]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d011      	beq.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f0:	4911      	ldr	r1, [pc, #68]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001800:	d101      	bne.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001802:	2301      	movs	r3, #1
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d005      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001814:	f040 80ff 	bne.w	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800181e:	f7fe feaf 	bl	8000580 <HAL_GetTick>
 8001822:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001824:	e00e      	b.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001826:	f7fe feab 	bl	8000580 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d907      	bls.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e188      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001838:	40023800 	.word	0x40023800
 800183c:	424711e0 	.word	0x424711e0
 8001840:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001844:	4b7e      	ldr	r3, [pc, #504]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ea      	bne.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800186c:	2b00      	cmp	r3, #0
 800186e:	d028      	beq.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d124      	bne.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001878:	4b71      	ldr	r3, [pc, #452]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800187a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	3301      	adds	r3, #1
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800188a:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001890:	0e1b      	lsrs	r3, r3, #24
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	085b      	lsrs	r3, r3, #1
 80018a8:	3b01      	subs	r3, #1
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	431a      	orrs	r2, r3
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	061b      	lsls	r3, r3, #24
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	071b      	lsls	r3, r3, #28
 80018ba:	4961      	ldr	r1, [pc, #388]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018d6:	d00a      	beq.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d035      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ec:	d130      	bne.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80018ee:	4b54      	ldr	r3, [pc, #336]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80018f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	3301      	adds	r3, #1
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001906:	0f1b      	lsrs	r3, r3, #28
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	019b      	lsls	r3, r3, #6
 8001918:	431a      	orrs	r2, r3
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	431a      	orrs	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	071b      	lsls	r3, r3, #28
 8001930:	4943      	ldr	r1, [pc, #268]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001932:	4313      	orrs	r3, r2
 8001934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800193a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800193e:	f023 021f 	bic.w	r2, r3, #31
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	493d      	ldr	r1, [pc, #244]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800194a:	4313      	orrs	r3, r2
 800194c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	2b00      	cmp	r3, #0
 800195a:	d029      	beq.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001964:	d124      	bne.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001966:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	3301      	adds	r3, #1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800197a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800197e:	0f1b      	lsrs	r3, r3, #28
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	019b      	lsls	r3, r3, #6
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	431a      	orrs	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	071b      	lsls	r3, r3, #28
 80019a8:	4925      	ldr	r1, [pc, #148]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d016      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	019b      	lsls	r3, r3, #6
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	3b01      	subs	r3, #1
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	071b      	lsls	r3, r3, #28
 80019e2:	4917      	ldr	r1, [pc, #92]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019f0:	f7fe fdc6 	bl	8000580 <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019f8:	f7fe fdc2 	bl	8000580 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e09f      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	f040 8095 	bne.w	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a24:	f7fe fdac 	bl	8000580 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001a2c:	f7fe fda8 	bl	8000580 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d908      	bls.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e085      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	42470068 	.word	0x42470068
 8001a48:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a4c:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a58:	d0e8      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d02b      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d127      	bne.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001a82:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	061b      	lsls	r3, r3, #24
 8001ab0:	4928      	ldr	r1, [pc, #160]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001abe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01d      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ae6:	d118      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	0e1b      	lsrs	r3, r3, #24
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	019b      	lsls	r3, r3, #6
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	061b      	lsls	r3, r3, #24
 8001b12:	4910      	ldr	r1, [pc, #64]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b20:	f7fe fd2e 	bl	8000580 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b28:	f7fe fd2a 	bl	8000580 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e007      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b46:	d1ef      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3730      	adds	r7, #48	; 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	42470070 	.word	0x42470070

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b60:	b0ae      	sub	sp, #184	; 0xb8
 8001b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b82:	4bcb      	ldr	r3, [pc, #812]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	f200 8206 	bhi.w	8001f9c <HAL_RCC_GetSysClockFreq+0x440>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001bcd 	.word	0x08001bcd
 8001b9c:	08001f9d 	.word	0x08001f9d
 8001ba0:	08001f9d 	.word	0x08001f9d
 8001ba4:	08001f9d 	.word	0x08001f9d
 8001ba8:	08001bd5 	.word	0x08001bd5
 8001bac:	08001f9d 	.word	0x08001f9d
 8001bb0:	08001f9d 	.word	0x08001f9d
 8001bb4:	08001f9d 	.word	0x08001f9d
 8001bb8:	08001bdd 	.word	0x08001bdd
 8001bbc:	08001f9d 	.word	0x08001f9d
 8001bc0:	08001f9d 	.word	0x08001f9d
 8001bc4:	08001f9d 	.word	0x08001f9d
 8001bc8:	08001dcd 	.word	0x08001dcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bcc:	4bb9      	ldr	r3, [pc, #740]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001bd2:	e1e7      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bd4:	4bb8      	ldr	r3, [pc, #736]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bda:	e1e3      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bdc:	4bb4      	ldr	r3, [pc, #720]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be8:	4bb1      	ldr	r3, [pc, #708]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d071      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf4:	4bae      	ldr	r3, [pc, #696]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001c00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	0159      	lsls	r1, r3, #5
 8001c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2c:	0150      	lsls	r0, r2, #5
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4621      	mov	r1, r4
 8001c34:	1a51      	subs	r1, r2, r1
 8001c36:	6439      	str	r1, [r7, #64]	; 0x40
 8001c38:	4629      	mov	r1, r5
 8001c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	018b      	lsls	r3, r1, #6
 8001c50:	4641      	mov	r1, r8
 8001c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c56:	4641      	mov	r1, r8
 8001c58:	018a      	lsls	r2, r1, #6
 8001c5a:	4641      	mov	r1, r8
 8001c5c:	1a51      	subs	r1, r2, r1
 8001c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c60:	4649      	mov	r1, r9
 8001c62:	eb63 0301 	sbc.w	r3, r3, r1
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c74:	4649      	mov	r1, r9
 8001c76:	00cb      	lsls	r3, r1, #3
 8001c78:	4641      	mov	r1, r8
 8001c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c7e:	4641      	mov	r1, r8
 8001c80:	00ca      	lsls	r2, r1, #3
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	4622      	mov	r2, r4
 8001c8a:	189b      	adds	r3, r3, r2
 8001c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c8e:	462b      	mov	r3, r5
 8001c90:	460a      	mov	r2, r1
 8001c92:	eb42 0303 	adc.w	r3, r2, r3
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	024b      	lsls	r3, r1, #9
 8001ca8:	4621      	mov	r1, r4
 8001caa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cae:	4621      	mov	r1, r4
 8001cb0:	024a      	lsls	r2, r1, #9
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001cc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001cc8:	f7fe faa2 	bl	8000210 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cd6:	e067      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ce4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cf6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	f04f 0000 	mov.w	r0, #0
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	0159      	lsls	r1, r3, #5
 8001d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0c:	0150      	lsls	r0, r2, #5
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4621      	mov	r1, r4
 8001d14:	1a51      	subs	r1, r2, r1
 8001d16:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d18:	4629      	mov	r1, r5
 8001d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	018b      	lsls	r3, r1, #6
 8001d30:	4641      	mov	r1, r8
 8001d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d36:	4641      	mov	r1, r8
 8001d38:	018a      	lsls	r2, r1, #6
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d40:	4649      	mov	r1, r9
 8001d42:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d5a:	4692      	mov	sl, r2
 8001d5c:	469b      	mov	fp, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	eb1a 0303 	adds.w	r3, sl, r3
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	462b      	mov	r3, r5
 8001d68:	eb4b 0303 	adc.w	r3, fp, r3
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	028b      	lsls	r3, r1, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d84:	4621      	mov	r1, r4
 8001d86:	028a      	lsls	r2, r1, #10
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d90:	2200      	movs	r2, #0
 8001d92:	673b      	str	r3, [r7, #112]	; 0x70
 8001d94:	677a      	str	r2, [r7, #116]	; 0x74
 8001d96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d9a:	f7fe fa39 	bl	8000210 <__aeabi_uldivmod>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4613      	mov	r3, r2
 8001da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001dba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dca:	e0eb      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd8:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d06b      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	2200      	movs	r2, #0
 8001dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df6:	663b      	str	r3, [r7, #96]	; 0x60
 8001df8:	2300      	movs	r3, #0
 8001dfa:	667b      	str	r3, [r7, #100]	; 0x64
 8001dfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e00:	4622      	mov	r2, r4
 8001e02:	462b      	mov	r3, r5
 8001e04:	f04f 0000 	mov.w	r0, #0
 8001e08:	f04f 0100 	mov.w	r1, #0
 8001e0c:	0159      	lsls	r1, r3, #5
 8001e0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e12:	0150      	lsls	r0, r2, #5
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4621      	mov	r1, r4
 8001e1a:	1a51      	subs	r1, r2, r1
 8001e1c:	61b9      	str	r1, [r7, #24]
 8001e1e:	4629      	mov	r1, r5
 8001e20:	eb63 0301 	sbc.w	r3, r3, r1
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e32:	4659      	mov	r1, fp
 8001e34:	018b      	lsls	r3, r1, #6
 8001e36:	4651      	mov	r1, sl
 8001e38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e3c:	4651      	mov	r1, sl
 8001e3e:	018a      	lsls	r2, r1, #6
 8001e40:	4651      	mov	r1, sl
 8001e42:	ebb2 0801 	subs.w	r8, r2, r1
 8001e46:	4659      	mov	r1, fp
 8001e48:	eb63 0901 	sbc.w	r9, r3, r1
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e60:	4690      	mov	r8, r2
 8001e62:	4699      	mov	r9, r3
 8001e64:	4623      	mov	r3, r4
 8001e66:	eb18 0303 	adds.w	r3, r8, r3
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	eb49 0303 	adc.w	r3, r9, r3
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e80:	4629      	mov	r1, r5
 8001e82:	024b      	lsls	r3, r1, #9
 8001e84:	4621      	mov	r1, r4
 8001e86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	024a      	lsls	r2, r1, #9
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e96:	2200      	movs	r2, #0
 8001e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ea0:	f7fe f9b6 	bl	8000210 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eae:	e065      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x420>
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebc:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ecc:	653b      	str	r3, [r7, #80]	; 0x50
 8001ece:	2300      	movs	r3, #0
 8001ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ed2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ed6:	4642      	mov	r2, r8
 8001ed8:	464b      	mov	r3, r9
 8001eda:	f04f 0000 	mov.w	r0, #0
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	0159      	lsls	r1, r3, #5
 8001ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee8:	0150      	lsls	r0, r2, #5
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4641      	mov	r1, r8
 8001ef0:	1a51      	subs	r1, r2, r1
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f08:	4659      	mov	r1, fp
 8001f0a:	018b      	lsls	r3, r1, #6
 8001f0c:	4651      	mov	r1, sl
 8001f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f12:	4651      	mov	r1, sl
 8001f14:	018a      	lsls	r2, r1, #6
 8001f16:	4651      	mov	r1, sl
 8001f18:	1a54      	subs	r4, r2, r1
 8001f1a:	4659      	mov	r1, fp
 8001f1c:	eb63 0501 	sbc.w	r5, r3, r1
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	00eb      	lsls	r3, r5, #3
 8001f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f2e:	00e2      	lsls	r2, r4, #3
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	4643      	mov	r3, r8
 8001f36:	18e3      	adds	r3, r4, r3
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	eb45 0303 	adc.w	r3, r5, r3
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4e:	4629      	mov	r1, r5
 8001f50:	028b      	lsls	r3, r1, #10
 8001f52:	4621      	mov	r1, r4
 8001f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f58:	4621      	mov	r1, r4
 8001f5a:	028a      	lsls	r2, r1, #10
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f64:	2200      	movs	r2, #0
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f6e:	f7fe f94f 	bl	8000210 <__aeabi_uldivmod>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4613      	mov	r3, r2
 8001f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	0f1b      	lsrs	r3, r3, #28
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f9a:	e003      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fa2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	37b8      	adds	r7, #184	; 0xb8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	00f42400 	.word	0x00f42400

08001fbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e28d      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8083 	beq.w	80020e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fdc:	4b94      	ldr	r3, [pc, #592]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d019      	beq.n	800201c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fe8:	4b91      	ldr	r3, [pc, #580]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ff4:	4b8e      	ldr	r3, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002000:	d00c      	beq.n	800201c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002002:	4b8b      	ldr	r3, [pc, #556]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d112      	bne.n	8002034 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b88      	ldr	r3, [pc, #544]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201a:	d10b      	bne.n	8002034 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	4b84      	ldr	r3, [pc, #528]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d05b      	beq.n	80020e0 <HAL_RCC_OscConfig+0x124>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d157      	bne.n	80020e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e25a      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x90>
 800203e:	4b7c      	ldr	r3, [pc, #496]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7b      	ldr	r2, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e01d      	b.n	8002088 <HAL_RCC_OscConfig+0xcc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0xb4>
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a75      	ldr	r2, [pc, #468]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b73      	ldr	r3, [pc, #460]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a72      	ldr	r2, [pc, #456]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0xcc>
 8002070:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6e      	ldr	r2, [pc, #440]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b6c      	ldr	r3, [pc, #432]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6b      	ldr	r2, [pc, #428]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fa76 	bl	8000580 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe fa72 	bl	8000580 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e21f      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b61      	ldr	r3, [pc, #388]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0xdc>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fa62 	bl	8000580 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7fe fa5e 	bl	8000580 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e20b      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x104>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d06f      	beq.n	80021ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ee:	4b50      	ldr	r3, [pc, #320]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d017      	beq.n	800212a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020fa:	4b4d      	ldr	r3, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002102:	2b08      	cmp	r3, #8
 8002104:	d105      	bne.n	8002112 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002106:	4b4a      	ldr	r3, [pc, #296]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b41      	ldr	r3, [pc, #260]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x186>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1d3      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4937      	ldr	r1, [pc, #220]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_OscConfig+0x278>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe fa0b 	bl	8000580 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216e:	f7fe fa07 	bl	8000580 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1b4      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4925      	ldr	r1, [pc, #148]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_OscConfig+0x278>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe f9ea 	bl	8000580 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe f9e6 	bl	8000580 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e193      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d036      	beq.n	8002248 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe f9ca 	bl	8000580 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe f9c6 	bl	8000580 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e173      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x274>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x234>
 800220e:	e01b      	b.n	8002248 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x27c>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe f9b3 	bl	8000580 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	e00e      	b.n	800223c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221e:	f7fe f9af 	bl	8000580 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d907      	bls.n	800223c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e15c      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
 8002230:	40023800 	.word	0x40023800
 8002234:	42470000 	.word	0x42470000
 8002238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b8a      	ldr	r3, [pc, #552]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800223e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ea      	bne.n	800221e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8097 	beq.w	8002384 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b83      	ldr	r3, [pc, #524]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	4b7f      	ldr	r3, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a7e      	ldr	r2, [pc, #504]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b7c      	ldr	r3, [pc, #496]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b79      	ldr	r3, [pc, #484]	; (800246c <HAL_RCC_OscConfig+0x4b0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b76      	ldr	r3, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x4b0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a75      	ldr	r2, [pc, #468]	; (800246c <HAL_RCC_OscConfig+0x4b0>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7fe f96f 	bl	8000580 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7fe f96b 	bl	8000580 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e118      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b6c      	ldr	r3, [pc, #432]	; (800246c <HAL_RCC_OscConfig+0x4b0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x31e>
 80022cc:	4b66      	ldr	r3, [pc, #408]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d0:	4a65      	ldr	r2, [pc, #404]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	; 0x70
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x358>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x340>
 80022e2:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	4a60      	ldr	r2, [pc, #384]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
 80022ee:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6713      	str	r3, [r2, #112]	; 0x70
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x358>
 80022fc:	4b5a      	ldr	r3, [pc, #360]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	6713      	str	r3, [r2, #112]	; 0x70
 8002308:	4b57      	ldr	r3, [pc, #348]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	4a56      	ldr	r2, [pc, #344]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800230e:	f023 0304 	bic.w	r3, r3, #4
 8002312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7fe f930 	bl	8000580 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7fe f92c 	bl	8000580 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0d7      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0ee      	beq.n	8002324 <HAL_RCC_OscConfig+0x368>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe f91a 	bl	8000580 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe f916 	bl	8000580 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0c1      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ee      	bne.n	8002350 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 800237e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80ad 	beq.w	80024e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800238e:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b08      	cmp	r3, #8
 8002398:	d060      	beq.n	800245c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d145      	bne.n	800242e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b33      	ldr	r3, [pc, #204]	; (8002470 <HAL_RCC_OscConfig+0x4b4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe f8ea 	bl	8000580 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe f8e6 	bl	8000580 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e093      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	4b29      	ldr	r3, [pc, #164]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	3b01      	subs	r3, #1
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	071b      	lsls	r3, r3, #28
 80023fa:	491b      	ldr	r1, [pc, #108]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x4b4>)
 8002402:	2201      	movs	r2, #1
 8002404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe f8bb 	bl	8000580 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240e:	f7fe f8b7 	bl	8000580 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e064      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x452>
 800242c:	e05c      	b.n	80024e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_RCC_OscConfig+0x4b4>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe f8a4 	bl	8000580 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe f8a0 	bl	8000580 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e04d      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_RCC_OscConfig+0x4ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x480>
 800245a:	e045      	b.n	80024e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e040      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000
 8002470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_RCC_OscConfig+0x538>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d030      	beq.n	80024e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d129      	bne.n	80024e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d122      	bne.n	80024e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a4:	4013      	ands	r3, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d119      	bne.n	80024e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d10f      	bne.n	80024e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e022      	b.n	8002550 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f008 fe83 	bl	800b228 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2203      	movs	r2, #3
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f814 	bl	8002558 <HAL_SD_InitCard>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00a      	b.n	8002550 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af04      	add	r7, sp, #16
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002574:	2376      	movs	r3, #118	; 0x76
 8002576:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681d      	ldr	r5, [r3, #0]
 800257c:	466c      	mov	r4, sp
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002590:	4628      	mov	r0, r5
 8002592:	f002 f83d 	bl	8004610 <SDIO_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800259c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e04f      	b.n	8002648 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80025a8:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_SD_InitCard+0xf8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 f875 	bl	80046a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_SD_InitCard+0xf8>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80025be:	2002      	movs	r0, #2
 80025c0:	f7fd ffea 	bl	8000598 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 ffef 	bl	80035a8 <SD_PowerON>
 80025ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e02e      	b.n	8002648 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 ff0e 	bl	800340c <SD_InitCard>
 80025f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e01b      	b.n	8002648 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002618:	4618      	mov	r0, r3
 800261a:	f002 f8d4 	bl	80047c6 <SDMMC_CmdBlockLength>
 800261e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <HAL_SD_InitCard+0xfc>)
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bdb0      	pop	{r4, r5, r7, pc}
 8002650:	422580a0 	.word	0x422580a0
 8002654:	004005ff 	.word	0x004005ff

08002658 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0be      	b.n	80027fe <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	f040 80b7 	bne.w	80027fc <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	441a      	add	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	429a      	cmp	r2, r3
 80026a0:	d907      	bls.n	80026b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0a5      	b.n	80027fe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2203      	movs	r2, #3
 80026b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a4b      	ldr	r2, [pc, #300]	; (800280c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80026e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2200      	movs	r2, #0
 80026e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3380      	adds	r3, #128	; 0x80
 8002718:	4619      	mov	r1, r3
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	f7fe f8ed 	bl	8000900 <HAL_DMA_Start_IT>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d017      	beq.n	800275c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a33      	ldr	r2, [pc, #204]	; (8002810 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e050      	b.n	80027fe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	2b01      	cmp	r3, #1
 8002768:	d002      	beq.n	8002770 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	025b      	lsls	r3, r3, #9
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	025b      	lsls	r3, r3, #9
 800277a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800277c:	2390      	movs	r3, #144	; 0x90
 800277e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002780:	2302      	movs	r3, #2
 8002782:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002788:	2301      	movs	r3, #1
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f107 0210 	add.w	r2, r7, #16
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f001 ffe9 	bl	800476e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d90a      	bls.n	80027b8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2282      	movs	r2, #130	; 0x82
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 f84d 	bl	800484e <SDMMC_CmdReadMultiBlock>
 80027b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80027b6:	e009      	b.n	80027cc <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2281      	movs	r2, #129	; 0x81
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 f820 	bl	800480a <SDMMC_CmdReadSingleBlock>
 80027ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e002      	b.n	80027fe <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3730      	adds	r7, #48	; 0x30
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	0800321b 	.word	0x0800321b
 800280c:	0800328d 	.word	0x0800328d
 8002810:	004005ff 	.word	0x004005ff
 8002814:	4225858c 	.word	0x4225858c

08002818 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0c1      	b.n	80029c4 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 80ba 	bne.w	80029c2 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	441a      	add	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	429a      	cmp	r2, r3
 8002860:	d907      	bls.n	8002872 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0a8      	b.n	80029c4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2203      	movs	r2, #3
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 021a 	orr.w	r2, r2, #26
 8002890:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	4a4d      	ldr	r2, [pc, #308]	; (80029cc <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8002898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	4a4c      	ldr	r2, [pc, #304]	; (80029d0 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 80028a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	2200      	movs	r2, #0
 80028a8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d002      	beq.n	80028b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80028b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b4:	025b      	lsls	r3, r3, #9
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d90a      	bls.n	80028d4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	22a0      	movs	r2, #160	; 0xa0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 f803 	bl	80048d6 <SDMMC_CmdWriteMultiBlock>
 80028d0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80028d2:	e009      	b.n	80028e8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2290      	movs	r2, #144	; 0x90
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 ffd6 	bl	8004892 <SDMMC_CmdWriteSingleBlock>
 80028e6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e057      	b.n	80029c4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3380      	adds	r3, #128	; 0x80
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	025b      	lsls	r3, r3, #9
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	f7fd ffd5 	bl	8000900 <HAL_DMA_Start_IT>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01a      	beq.n	8002992 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 021a 	bic.w	r2, r2, #26
 800296a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e018      	b.n	80029c4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800299e:	2390      	movs	r3, #144	; 0x90
 80029a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f107 0210 	add.w	r2, r7, #16
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fed8 	bl	800476e <SDIO_ConfigData>

      return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3730      	adds	r7, #48	; 0x30
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	080031f1 	.word	0x080031f1
 80029d0:	0800328d 	.word	0x0800328d
 80029d4:	004005ff 	.word	0x004005ff
 80029d8:	4225858c 	.word	0x4225858c

080029dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_SD_IRQHandler+0x2e>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 ffef 	bl	80039e6 <SD_Read_IT>
 8002a08:	e155      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 808f 	beq.w	8002b38 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8002a32:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002a36:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d039      	beq.n	8002ac6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d104      	bne.n	8002a66 <HAL_SD_IRQHandler+0x8a>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d011      	beq.n	8002a8a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 ff56 	bl	800491c <SDMMC_CmdStopTransfer>
 8002a70:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f91f 	bl	8002cc8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <HAL_SD_IRQHandler+0xda>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f007 ff14 	bl	800a8e4 <HAL_SD_RxCpltCallback>
 8002abc:	e0fb      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f007 ff06 	bl	800a8d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ac4:	e0f7      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80f2 	beq.w	8002cb6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 ff1b 	bl	800491c <SDMMC_CmdStopTransfer>
 8002ae6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8e4 	bl	8002cc8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 80d5 	bne.w	8002cb6 <HAL_SD_IRQHandler+0x2da>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 80cf 	bne.w	8002cb6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0208 	bic.w	r2, r2, #8
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f007 fecd 	bl	800a8d0 <HAL_SD_TxCpltCallback>
}
 8002b36:	e0be      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_SD_IRQHandler+0x17c>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 ff99 	bl	8003a88 <SD_Write_IT>
 8002b56:	e0ae      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80a7 	beq.w	8002cb6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	f043 0202 	orr.w	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f043 0208 	orr.w	r2, r3, #8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	f043 0210 	orr.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002be8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 fe94 	bl	800491c <SDMMC_CmdStopTransfer>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f855 	bl	8002cc8 <HAL_SD_ErrorCallback>
}
 8002c1e:	e04a      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d045      	beq.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <HAL_SD_IRQHandler+0x262>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d011      	beq.n	8002c62 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_SD_IRQHandler+0x2e4>)
 8002c44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd feb0 	bl	80009b0 <HAL_DMA_Abort_IT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02f      	beq.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fb68 	bl	8003330 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002c60:	e029      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_SD_IRQHandler+0x29a>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d011      	beq.n	8002c9a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_SD_IRQHandler+0x2e8>)
 8002c7c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fe94 	bl	80009b0 <HAL_DMA_Abort_IT>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d013      	beq.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fb83 	bl	800339e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002c98:	e00d      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f007 fe04 	bl	800a8bc <HAL_SD_AbortCallback>
}
 8002cb4:	e7ff      	b.n	8002cb6 <HAL_SD_IRQHandler+0x2da>
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	08003331 	.word	0x08003331
 8002cc4:	0800339f 	.word	0x0800339f

08002cc8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cea:	0f9b      	lsrs	r3, r3, #30
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cf6:	0e9b      	lsrs	r3, r3, #26
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d08:	0e1b      	lsrs	r3, r3, #24
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3c:	0d1b      	lsrs	r3, r3, #20
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5a:	0bdb      	lsrs	r3, r3, #15
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6c:	0b9b      	lsrs	r3, r3, #14
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7e:	0b5b      	lsrs	r3, r3, #13
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d90:	0b1b      	lsrs	r3, r3, #12
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d163      	bne.n	8002e74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db0:	009a      	lsls	r2, r3, #2
 8002db2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002db6:	4013      	ands	r3, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002dbc:	0f92      	lsrs	r2, r2, #30
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc8:	0edb      	lsrs	r3, r3, #27
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dda:	0e1b      	lsrs	r3, r3, #24
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dec:	0d5b      	lsrs	r3, r3, #21
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e10:	0bdb      	lsrs	r3, r3, #15
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	7e1b      	ldrb	r3, [r3, #24]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	3302      	adds	r3, #2
 8002e34:	2201      	movs	r2, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e3e:	fb03 f202 	mul.w	r2, r3, r2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	7a1b      	ldrb	r3, [r3, #8]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	2201      	movs	r2, #1
 8002e52:	409a      	lsls	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e60:	0a52      	lsrs	r2, r2, #9
 8002e62:	fb03 f202 	mul.w	r2, r3, r2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60
 8002e72:	e031      	b.n	8002ed8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d11d      	bne.n	8002eb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	3301      	adds	r3, #1
 8002e98:	029a      	lsls	r2, r3, #10
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
 8002eb6:	e00f      	b.n	8002ed8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_SD_GetCardCSD+0x344>)
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e09d      	b.n	8003014 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002edc:	0b9b      	lsrs	r3, r3, #14
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eee:	09db      	lsrs	r3, r3, #7
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	0fdb      	lsrs	r3, r3, #31
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	0f5b      	lsrs	r3, r3, #29
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	0e9b      	lsrs	r3, r3, #26
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	0d9b      	lsrs	r3, r3, #22
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	0d5b      	lsrs	r3, r3, #21
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	0bdb      	lsrs	r3, r3, #15
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	0b9b      	lsrs	r3, r3, #14
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	0b5b      	lsrs	r3, r3, #13
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	0b1b      	lsrs	r3, r3, #12
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	0a9b      	lsrs	r3, r3, #10
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003002:	b2da      	uxtb	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	004005ff 	.word	0x004005ff

08003024 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af04      	add	r7, sp, #16
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2203      	movs	r2, #3
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	2b03      	cmp	r3, #3
 800309a:	d02e      	beq.n	80030fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d106      	bne.n	80030b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
 80030b0:	e029      	b.n	8003106 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b8:	d10a      	bne.n	80030d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fb2a 	bl	8003714 <SD_WideBus_Enable>
 80030c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
 80030ce:	e01a      	b.n	8003106 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fb67 	bl	80037aa <SD_WideBus_Disable>
 80030dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
 80030ea:	e00c      	b.n	8003106 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
 80030f8:	e005      	b.n	8003106 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a26      	ldr	r2, [pc, #152]	; (80031ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003124:	e01f      	b.n	8003166 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681d      	ldr	r5, [r3, #0]
 800314c:	466c      	mov	r4, sp
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003160:	4628      	mov	r0, r5
 8003162:	f001 fa55 	bl	8004610 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fb29 	bl	80047c6 <SDMMC_CmdBlockLength>
 8003174:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800319e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3728      	adds	r7, #40	; 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bdb0      	pop	{r4, r5, r7, pc}
 80031aa:	bf00      	nop
 80031ac:	004005ff 	.word	0x004005ff

080031b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa7e 	bl	80036c4 <SD_SendStatus>
 80031c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	0a5b      	lsrs	r3, r3, #9
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80031e6:	693b      	ldr	r3, [r7, #16]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	2b82      	cmp	r3, #130	; 0x82
 800322e:	d111      	bne.n	8003254 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f001 fb71 	bl	800491c <SDMMC_CmdStopTransfer>
 800323a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff fd3a 	bl	8002cc8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0208 	bic.w	r2, r2, #8
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f240 523a 	movw	r2, #1338	; 0x53a
 800326c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f007 fb31 	bl	800a8e4 <HAL_SD_RxCpltCallback>
#endif
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fd34 	bl	8000d08 <HAL_DMA_GetError>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d03e      	beq.n	8003324 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d002      	beq.n	80032c2 <SD_DMAError+0x36>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d12d      	bne.n	800331e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a19      	ldr	r2, [pc, #100]	; (800332c <SD_DMAError+0xa0>)
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff62 	bl	80031b0 <HAL_SD_GetCardState>
 80032ec:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d002      	beq.n	80032fa <SD_DMAError+0x6e>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10a      	bne.n	8003310 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 fb0c 	bl	800491c <SDMMC_CmdStopTransfer>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	431a      	orrs	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2200      	movs	r2, #0
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff fcd2 	bl	8002cc8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003324:	bf00      	nop
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	004005ff 	.word	0x004005ff

08003330 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f240 523a 	movw	r2, #1338	; 0x53a
 8003346:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f7ff ff31 	bl	80031b0 <HAL_SD_GetCardState>
 800334e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b06      	cmp	r3, #6
 8003362:	d002      	beq.n	800336a <SD_DMATxAbort+0x3a>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b05      	cmp	r3, #5
 8003368:	d10a      	bne.n	8003380 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f001 fad4 	bl	800491c <SDMMC_CmdStopTransfer>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f007 fa97 	bl	800a8bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800338e:	e002      	b.n	8003396 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff fc99 	bl	8002cc8 <HAL_SD_ErrorCallback>
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f7ff fefa 	bl	80031b0 <HAL_SD_GetCardState>
 80033bc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d002      	beq.n	80033d8 <SD_DMARxAbort+0x3a>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10a      	bne.n	80033ee <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fa9d 	bl	800491c <SDMMC_CmdStopTransfer>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f007 fa60 	bl	800a8bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80033fc:	e002      	b.n	8003404 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fc62 	bl	8002cc8 <HAL_SD_ErrorCallback>
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800340c:	b5b0      	push	{r4, r5, r7, lr}
 800340e:	b094      	sub	sp, #80	; 0x50
 8003410:	af04      	add	r7, sp, #16
 8003412:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003414:	2301      	movs	r3, #1
 8003416:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f001 f94e 	bl	80046be <SDIO_GetPowerState>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003428:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800342c:	e0b8      	b.n	80035a0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	2b03      	cmp	r3, #3
 8003434:	d02f      	beq.n	8003496 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fb78 	bl	8004b30 <SDMMC_CmdSendCID>
 8003440:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <SD_InitCard+0x40>
    {
      return errorstate;
 8003448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344a:	e0a9      	b.n	80035a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f001 f978 	bl	8004748 <SDIO_GetResponse>
 8003458:	4602      	mov	r2, r0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f001 f96f 	bl	8004748 <SDIO_GetResponse>
 800346a:	4602      	mov	r2, r0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2108      	movs	r1, #8
 8003476:	4618      	mov	r0, r3
 8003478:	f001 f966 	bl	8004748 <SDIO_GetResponse>
 800347c:	4602      	mov	r2, r0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	210c      	movs	r1, #12
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f95d 	bl	8004748 <SDIO_GetResponse>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	2b03      	cmp	r3, #3
 800349c:	d00d      	beq.n	80034ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f107 020e 	add.w	r2, r7, #14
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fb7e 	bl	8004baa <SDMMC_CmdSetRelAdd>
 80034ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <SD_InitCard+0xae>
    {
      return errorstate;
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	e072      	b.n	80035a0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d036      	beq.n	8003530 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d2:	041b      	lsls	r3, r3, #16
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f001 fb48 	bl	8004b6c <SDMMC_CmdSendCSD>
 80034dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80034e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e6:	e05b      	b.n	80035a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f001 f92a 	bl	8004748 <SDIO_GetResponse>
 80034f4:	4602      	mov	r2, r0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2104      	movs	r1, #4
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f921 	bl	8004748 <SDIO_GetResponse>
 8003506:	4602      	mov	r2, r0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2108      	movs	r1, #8
 8003512:	4618      	mov	r0, r3
 8003514:	f001 f918 	bl	8004748 <SDIO_GetResponse>
 8003518:	4602      	mov	r2, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	210c      	movs	r1, #12
 8003524:	4618      	mov	r0, r3
 8003526:	f001 f90f 	bl	8004748 <SDIO_GetResponse>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2104      	movs	r1, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f906 	bl	8004748 <SDIO_GetResponse>
 800353c:	4603      	mov	r3, r0
 800353e:	0d1a      	lsrs	r2, r3, #20
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fbc6 	bl	8002cdc <HAL_SD_GetCardCSD>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003556:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800355a:	e021      	b.n	80035a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	2200      	movs	r2, #0
 8003568:	461c      	mov	r4, r3
 800356a:	4615      	mov	r5, r2
 800356c:	4622      	mov	r2, r4
 800356e:	462b      	mov	r3, r5
 8003570:	4608      	mov	r0, r1
 8003572:	f001 f9f5 	bl	8004960 <SDMMC_CmdSelDesel>
 8003576:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <SD_InitCard+0x176>
  {
    return errorstate;
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	e00e      	b.n	80035a0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681d      	ldr	r5, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	466c      	mov	r4, sp
 800358a:	f103 0210 	add.w	r2, r3, #16
 800358e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003594:	3304      	adds	r3, #4
 8003596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003598:	4628      	mov	r0, r5
 800359a:	f001 f839 	bl	8004610 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3740      	adds	r7, #64	; 0x40
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdb0      	pop	{r4, r5, r7, pc}

080035a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 f9f0 	bl	80049a6 <SDMMC_CmdGoIdleState>
 80035c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	e072      	b.n	80036b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f001 fa03 	bl	80049e2 <SDMMC_CmdOperCond>
 80035dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00d      	beq.n	8003600 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 f9d9 	bl	80049a6 <SDMMC_CmdGoIdleState>
 80035f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <SD_PowerON+0x5e>
    {
      return errorstate;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	e05b      	b.n	80036b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	2b01      	cmp	r3, #1
 800360c:	d137      	bne.n	800367e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fa03 	bl	8004a20 <SDMMC_CmdAppCommand>
 800361a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02d      	beq.n	800367e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003626:	e047      	b.n	80036b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f9f6 	bl	8004a20 <SDMMC_CmdAppCommand>
 8003634:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <SD_PowerON+0x98>
    {
      return errorstate;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	e03b      	b.n	80036b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	491e      	ldr	r1, [pc, #120]	; (80036c0 <SD_PowerON+0x118>)
 8003646:	4618      	mov	r0, r3
 8003648:	f001 fa0c 	bl	8004a64 <SDMMC_CmdAppOperCommand>
 800364c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003658:	e02e      	b.n	80036b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f871 	bl	8004748 <SDIO_GetResponse>
 8003666:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	0fdb      	lsrs	r3, r3, #31
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <SD_PowerON+0xcc>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <SD_PowerON+0xce>
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]

    count++;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3301      	adds	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003684:	4293      	cmp	r3, r2
 8003686:	d802      	bhi.n	800368e <SD_PowerON+0xe6>
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0cc      	beq.n	8003628 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003694:	4293      	cmp	r3, r2
 8003696:	d902      	bls.n	800369e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800369c:	e00c      	b.n	80036b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
 80036ae:	e002      	b.n	80036b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	c1100000 	.word	0xc1100000

080036c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80036d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036d8:	e018      	b.n	800370c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f001 fa80 	bl	8004bec <SDMMC_CmdSendStatus>
 80036ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	e009      	b.n	800370c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f822 	bl	8004748 <SDIO_GetResponse>
 8003704:	4602      	mov	r2, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f80c 	bl	8004748 <SDIO_GetResponse>
 8003730:	4603      	mov	r3, r0
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800373a:	d102      	bne.n	8003742 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800373c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003740:	e02f      	b.n	80037a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f879 	bl	8003840 <SD_FindSCR>
 800374e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	e023      	b.n	80037a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01c      	beq.n	800379e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f001 f955 	bl	8004a20 <SDMMC_CmdAppCommand>
 8003776:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	e00f      	b.n	80037a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f98e 	bl	8004aaa <SDMMC_CmdBusWidth>
 800378e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	e003      	b.n	80037a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800379a:	2300      	movs	r3, #0
 800379c:	e001      	b.n	80037a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800379e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2100      	movs	r1, #0
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 ffc1 	bl	8004748 <SDIO_GetResponse>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d0:	d102      	bne.n	80037d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80037d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037d6:	e02f      	b.n	8003838 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80037d8:	f107 030c 	add.w	r3, r7, #12
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f82e 	bl	8003840 <SD_FindSCR>
 80037e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	e023      	b.n	8003838 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01c      	beq.n	8003834 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	041b      	lsls	r3, r3, #16
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f001 f90a 	bl	8004a20 <SDMMC_CmdAppCommand>
 800380c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	e00f      	b.n	8003838 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f943 	bl	8004aaa <SDMMC_CmdBusWidth>
 8003824:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	e003      	b.n	8003838 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003830:	2300      	movs	r3, #0
 8003832:	e001      	b.n	8003838 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003834:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b08f      	sub	sp, #60	; 0x3c
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800384a:	f7fc fe99 	bl	8000580 <HAL_GetTick>
 800384e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2108      	movs	r1, #8
 8003866:	4618      	mov	r0, r3
 8003868:	f000 ffad 	bl	80047c6 <SDMMC_CmdBlockLength>
 800386c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	e0b2      	b.n	80039de <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f001 f8cb 	bl	8004a20 <SDMMC_CmdAppCommand>
 800388a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	e0a3      	b.n	80039de <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800389c:	2308      	movs	r3, #8
 800389e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80038a0:	2330      	movs	r3, #48	; 0x30
 80038a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80038a4:	2302      	movs	r3, #2
 80038a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80038ac:	2301      	movs	r3, #1
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f107 0210 	add.w	r2, r7, #16
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 ff57 	bl	800476e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 f912 	bl	8004aee <SDMMC_CmdSendSCR>
 80038ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02a      	beq.n	8003928 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	e083      	b.n	80039de <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00f      	beq.n	8003904 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6819      	ldr	r1, [r3, #0]
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f107 0208 	add.w	r2, r7, #8
 80038f0:	18d4      	adds	r4, r2, r3
 80038f2:	4608      	mov	r0, r1
 80038f4:	f000 feb7 	bl	8004666 <SDIO_ReadFIFO>
 80038f8:	4603      	mov	r3, r0
 80038fa:	6023      	str	r3, [r4, #0]
      index++;
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	3301      	adds	r3, #1
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
 8003902:	e006      	b.n	8003912 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d012      	beq.n	8003938 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003912:	f7fc fe35 	bl	8000580 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d102      	bne.n	8003928 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003926:	e05a      	b.n	80039de <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0cf      	beq.n	80038d6 <SD_FindSCR+0x96>
 8003936:	e000      	b.n	800393a <SD_FindSCR+0xfa>
      break;
 8003938:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003950:	2308      	movs	r3, #8
 8003952:	e044      	b.n	80039de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2202      	movs	r2, #2
 8003968:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800396a:	2302      	movs	r3, #2
 800396c:	e037      	b.n	80039de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2220      	movs	r2, #32
 8003982:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003984:	2320      	movs	r3, #32
 8003986:	e02a      	b.n	80039de <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003990:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	061a      	lsls	r2, r3, #24
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800399e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	0e1b      	lsrs	r3, r3, #24
 80039ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80039b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b2:	601a      	str	r2, [r3, #0]
    scr++;
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	3304      	adds	r3, #4
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	061a      	lsls	r2, r3, #24
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0e1b      	lsrs	r3, r3, #24
 80039d6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	373c      	adds	r7, #60	; 0x3c
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}

080039e6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d03f      	beq.n	8003a80 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e033      	b.n	8003a6e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fe2b 	bl	8004666 <SDIO_ReadFIFO>
 8003a10:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	0c1b      	lsrs	r3, r3, #16
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	0e1b      	lsrs	r3, r3, #24
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b07      	cmp	r3, #7
 8003a72:	d9c8      	bls.n	8003a06 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003a80:	bf00      	nop
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d043      	beq.n	8003b2a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e037      	b.n	8003b18 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	041a      	lsls	r2, r3, #16
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	061a      	lsls	r2, r3, #24
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3301      	adds	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f107 0208 	add.w	r2, r7, #8
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fdb7 	bl	8004680 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b07      	cmp	r3, #7
 8003b1c:	d9c4      	bls.n	8003aa8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e041      	b.n	8003bc8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f839 	bl	8003bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f000 f9d7 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d001      	beq.n	8003bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e04e      	b.n	8003c9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a23      	ldr	r2, [pc, #140]	; (8003ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d022      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d01d      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_TIM_Base_Start_IT+0xc8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d018      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d00e      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d009      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_TIM_Base_Start_IT+0x80>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d111      	bne.n	8003c88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d010      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c86:	e007      	b.n	8003c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40010400 	.word	0x40010400
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40001800 	.word	0x40001800

08003cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d122      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0202 	mvn.w	r2, #2
 8003cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8ee 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f8e0 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8f1 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0204 	mvn.w	r2, #4
 8003d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8c4 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8b6 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f8c7 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0208 	mvn.w	r2, #8
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f89a 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f88c 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f89d 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0210 	mvn.w	r2, #16
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2208      	movs	r2, #8
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f870 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f862 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f873 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10e      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0201 	mvn.w	r2, #1
 8003e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f007 f818 	bl	800ae78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d10e      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d107      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f902 	bl	8004078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d10e      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f838 	bl	8003f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d10e      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d107      	bne.n	8003ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0220 	mvn.w	r2, #32
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8cc 	bl	8004064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <TIM_Base_SetConfig+0x114>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d00f      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3d      	ldr	r2, [pc, #244]	; (800403c <TIM_Base_SetConfig+0x118>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <TIM_Base_SetConfig+0x11c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <TIM_Base_SetConfig+0x120>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a3a      	ldr	r2, [pc, #232]	; (8004048 <TIM_Base_SetConfig+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d108      	bne.n	8003f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <TIM_Base_SetConfig+0x114>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d02b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d027      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a2c      	ldr	r2, [pc, #176]	; (800403c <TIM_Base_SetConfig+0x118>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d023      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a2b      	ldr	r2, [pc, #172]	; (8004040 <TIM_Base_SetConfig+0x11c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <TIM_Base_SetConfig+0x120>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a29      	ldr	r2, [pc, #164]	; (8004048 <TIM_Base_SetConfig+0x124>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d017      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a28      	ldr	r2, [pc, #160]	; (800404c <TIM_Base_SetConfig+0x128>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a27      	ldr	r2, [pc, #156]	; (8004050 <TIM_Base_SetConfig+0x12c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a26      	ldr	r2, [pc, #152]	; (8004054 <TIM_Base_SetConfig+0x130>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a25      	ldr	r2, [pc, #148]	; (8004058 <TIM_Base_SetConfig+0x134>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <TIM_Base_SetConfig+0x138>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a23      	ldr	r2, [pc, #140]	; (8004060 <TIM_Base_SetConfig+0x13c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a0a      	ldr	r2, [pc, #40]	; (8004038 <TIM_Base_SetConfig+0x114>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0xf8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <TIM_Base_SetConfig+0x124>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	615a      	str	r2, [r3, #20]
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40010000 	.word	0x40010000
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800
 8004044:	40000c00 	.word	0x40000c00
 8004048:	40010400 	.word	0x40010400
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400
 8004054:	40014800 	.word	0x40014800
 8004058:	40001800 	.word	0x40001800
 800405c:	40001c00 	.word	0x40001c00
 8004060:	40002000 	.word	0x40002000

08004064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e03f      	b.n	800411e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f007 fabc 	bl	800b630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2224      	movs	r2, #36	; 0x24
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f829 	bl	8004128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004104:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b0c0      	sub	sp, #256	; 0x100
 800412e:	af00      	add	r7, sp, #0
 8004130:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	ea40 0301 	orr.w	r3, r0, r1
 8004150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004180:	f021 010c 	bic.w	r1, r1, #12
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800418e:	430b      	orrs	r3, r1
 8004190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	6999      	ldr	r1, [r3, #24]
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	ea40 0301 	orr.w	r3, r0, r1
 80041ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <UART_SetConfig+0x2cc>)
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d005      	beq.n	80041c8 <UART_SetConfig+0xa0>
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b8d      	ldr	r3, [pc, #564]	; (80043f8 <UART_SetConfig+0x2d0>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d104      	bne.n	80041d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c8:	f7fd f958 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 80041cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041d0:	e003      	b.n	80041da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041d2:	f7fd f93f 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 80041d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e4:	f040 810c 	bne.w	8004400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	1891      	adds	r1, r2, r2
 8004200:	65b9      	str	r1, [r7, #88]	; 0x58
 8004202:	415b      	adcs	r3, r3
 8004204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800420a:	4621      	mov	r1, r4
 800420c:	eb12 0801 	adds.w	r8, r2, r1
 8004210:	4629      	mov	r1, r5
 8004212:	eb43 0901 	adc.w	r9, r3, r1
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800422a:	4690      	mov	r8, r2
 800422c:	4699      	mov	r9, r3
 800422e:	4623      	mov	r3, r4
 8004230:	eb18 0303 	adds.w	r3, r8, r3
 8004234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004238:	462b      	mov	r3, r5
 800423a:	eb49 0303 	adc.w	r3, r9, r3
 800423e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800424e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004256:	460b      	mov	r3, r1
 8004258:	18db      	adds	r3, r3, r3
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
 800425c:	4613      	mov	r3, r2
 800425e:	eb42 0303 	adc.w	r3, r2, r3
 8004262:	657b      	str	r3, [r7, #84]	; 0x54
 8004264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800426c:	f7fb ffd0 	bl	8000210 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b61      	ldr	r3, [pc, #388]	; (80043fc <UART_SetConfig+0x2d4>)
 8004276:	fba3 2302 	umull	r2, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011c      	lsls	r4, r3, #4
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800428c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	64b9      	str	r1, [r7, #72]	; 0x48
 8004298:	415b      	adcs	r3, r3
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042a0:	4641      	mov	r1, r8
 80042a2:	eb12 0a01 	adds.w	sl, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c0:	4692      	mov	sl, r2
 80042c2:	469b      	mov	fp, r3
 80042c4:	4643      	mov	r3, r8
 80042c6:	eb1a 0303 	adds.w	r3, sl, r3
 80042ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ce:	464b      	mov	r3, r9
 80042d0:	eb4b 0303 	adc.w	r3, fp, r3
 80042d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042ec:	460b      	mov	r3, r1
 80042ee:	18db      	adds	r3, r3, r3
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
 80042f2:	4613      	mov	r3, r2
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004302:	f7fb ff85 	bl	8000210 <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4611      	mov	r1, r2
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <UART_SetConfig+0x2d4>)
 800430e:	fba3 2301 	umull	r2, r3, r3, r1
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2264      	movs	r2, #100	; 0x64
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	1acb      	subs	r3, r1, r3
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004322:	4b36      	ldr	r3, [pc, #216]	; (80043fc <UART_SetConfig+0x2d4>)
 8004324:	fba3 2302 	umull	r2, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004330:	441c      	add	r4, r3
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800433c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	63b9      	str	r1, [r7, #56]	; 0x38
 800434c:	415b      	adcs	r3, r3
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004354:	4641      	mov	r1, r8
 8004356:	1851      	adds	r1, r2, r1
 8004358:	6339      	str	r1, [r7, #48]	; 0x30
 800435a:	4649      	mov	r1, r9
 800435c:	414b      	adcs	r3, r1
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800436c:	4659      	mov	r1, fp
 800436e:	00cb      	lsls	r3, r1, #3
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004376:	4651      	mov	r1, sl
 8004378:	00ca      	lsls	r2, r1, #3
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	4603      	mov	r3, r0
 8004380:	4642      	mov	r2, r8
 8004382:	189b      	adds	r3, r3, r2
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004388:	464b      	mov	r3, r9
 800438a:	460a      	mov	r2, r1
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a8:	460b      	mov	r3, r1
 80043aa:	18db      	adds	r3, r3, r3
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ae:	4613      	mov	r3, r2
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043be:	f7fb ff27 	bl	8000210 <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <UART_SetConfig+0x2d4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <UART_SetConfig+0x2d4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 0207 	and.w	r2, r3, #7
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4422      	add	r2, r4
 80043ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f0:	e105      	b.n	80045fe <UART_SetConfig+0x4d6>
 80043f2:	bf00      	nop
 80043f4:	40011000 	.word	0x40011000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800440a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800440e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	1891      	adds	r1, r2, r2
 8004418:	6239      	str	r1, [r7, #32]
 800441a:	415b      	adcs	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004422:	4641      	mov	r1, r8
 8004424:	1854      	adds	r4, r2, r1
 8004426:	4649      	mov	r1, r9
 8004428:	eb43 0501 	adc.w	r5, r3, r1
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	00eb      	lsls	r3, r5, #3
 8004436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	4643      	mov	r3, r8
 8004442:	18e3      	adds	r3, r4, r3
 8004444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004448:	464b      	mov	r3, r9
 800444a:	eb45 0303 	adc.w	r3, r5, r3
 800444e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800446e:	4629      	mov	r1, r5
 8004470:	008b      	lsls	r3, r1, #2
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004478:	4621      	mov	r1, r4
 800447a:	008a      	lsls	r2, r1, #2
 800447c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004480:	f7fb fec6 	bl	8000210 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <UART_SetConfig+0x4e4>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800449c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	61b9      	str	r1, [r7, #24]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b4:	4641      	mov	r1, r8
 80044b6:	1851      	adds	r1, r2, r1
 80044b8:	6139      	str	r1, [r7, #16]
 80044ba:	4649      	mov	r1, r9
 80044bc:	414b      	adcs	r3, r1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044cc:	4659      	mov	r1, fp
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4651      	mov	r1, sl
 80044d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d6:	4651      	mov	r1, sl
 80044d8:	00ca      	lsls	r2, r1, #3
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	4642      	mov	r2, r8
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e8:	464b      	mov	r3, r9
 80044ea:	460a      	mov	r2, r1
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800450c:	4649      	mov	r1, r9
 800450e:	008b      	lsls	r3, r1, #2
 8004510:	4641      	mov	r1, r8
 8004512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004516:	4641      	mov	r1, r8
 8004518:	008a      	lsls	r2, r1, #2
 800451a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800451e:	f7fb fe77 	bl	8000210 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <UART_SetConfig+0x4e4>)
 8004528:	fba3 1302 	umull	r1, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2164      	movs	r1, #100	; 0x64
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	3332      	adds	r3, #50	; 0x32
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <UART_SetConfig+0x4e4>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004546:	441c      	add	r4, r3
 8004548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454c:	2200      	movs	r2, #0
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
 8004550:	677a      	str	r2, [r7, #116]	; 0x74
 8004552:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004556:	4642      	mov	r2, r8
 8004558:	464b      	mov	r3, r9
 800455a:	1891      	adds	r1, r2, r2
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	415b      	adcs	r3, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004566:	4641      	mov	r1, r8
 8004568:	1851      	adds	r1, r2, r1
 800456a:	6039      	str	r1, [r7, #0]
 800456c:	4649      	mov	r1, r9
 800456e:	414b      	adcs	r3, r1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457e:	4659      	mov	r1, fp
 8004580:	00cb      	lsls	r3, r1, #3
 8004582:	4651      	mov	r1, sl
 8004584:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004588:	4651      	mov	r1, sl
 800458a:	00ca      	lsls	r2, r1, #3
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	4603      	mov	r3, r0
 8004592:	4642      	mov	r2, r8
 8004594:	189b      	adds	r3, r3, r2
 8004596:	66bb      	str	r3, [r7, #104]	; 0x68
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
 80045ac:	667a      	str	r2, [r7, #100]	; 0x64
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ba:	4649      	mov	r1, r9
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4641      	mov	r1, r8
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4641      	mov	r1, r8
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045cc:	f7fb fe20 	bl	8000210 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <UART_SetConfig+0x4e4>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <UART_SetConfig+0x4e4>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4422      	add	r2, r4
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004604:	46bd      	mov	sp, r7
 8004606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460a:	bf00      	nop
 800460c:	51eb851f 	.word	0x51eb851f

08004610 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004610:	b084      	sub	sp, #16
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	f107 001c 	add.w	r0, r7, #28
 800461e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004626:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004628:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800462a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800462e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004632:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004636:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800463a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800464a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	b004      	add	sp, #16
 8004664:	4770      	bx	lr

08004666 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2203      	movs	r2, #3
 80046ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0303 	and.w	r3, r3, #3
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80046da:	b480      	push	{r7}
 80046dc:	b085      	sub	sp, #20
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80046f8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80046fe:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004704:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004714:	f023 030f 	bic.w	r3, r3, #15
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	b2db      	uxtb	r3, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3314      	adds	r3, #20
 8004756:	461a      	mov	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4413      	add	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
}  
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004794:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800479a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80047a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0

}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b088      	sub	sp, #32
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80047d4:	2310      	movs	r3, #16
 80047d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047d8:	2340      	movs	r3, #64	; 0x40
 80047da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ff74 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80047f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f6:	2110      	movs	r1, #16
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa19 	bl	8004c30 <SDMMC_GetCmdResp1>
 80047fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004800:	69fb      	ldr	r3, [r7, #28]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b088      	sub	sp, #32
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004818:	2311      	movs	r3, #17
 800481a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800481c:	2340      	movs	r3, #64	; 0x40
 800481e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004828:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff52 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	2111      	movs	r1, #17
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9f7 	bl	8004c30 <SDMMC_GetCmdResp1>
 8004842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004844:	69fb      	ldr	r3, [r7, #28]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b088      	sub	sp, #32
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800485c:	2312      	movs	r3, #18
 800485e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004860:	2340      	movs	r3, #64	; 0x40
 8004862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800486e:	f107 0308 	add.w	r3, r7, #8
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff30 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	2112      	movs	r1, #18
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f9d5 	bl	8004c30 <SDMMC_GetCmdResp1>
 8004886:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004888:	69fb      	ldr	r3, [r7, #28]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b088      	sub	sp, #32
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80048a0:	2318      	movs	r3, #24
 80048a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048a4:	2340      	movs	r3, #64	; 0x40
 80048a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	4619      	mov	r1, r3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff0e 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	2118      	movs	r1, #24
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f9b3 	bl	8004c30 <SDMMC_GetCmdResp1>
 80048ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048cc:	69fb      	ldr	r3, [r7, #28]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b088      	sub	sp, #32
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80048e4:	2319      	movs	r3, #25
 80048e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048e8:	2340      	movs	r3, #64	; 0x40
 80048ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff feec 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	2119      	movs	r1, #25
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f991 	bl	8004c30 <SDMMC_GetCmdResp1>
 800490e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004910:	69fb      	ldr	r3, [r7, #28]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004928:	230c      	movs	r3, #12
 800492a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800492c:	2340      	movs	r3, #64	; 0x40
 800492e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004938:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff feca 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004946:	4a05      	ldr	r2, [pc, #20]	; (800495c <SDMMC_CmdStopTransfer+0x40>)
 8004948:	210c      	movs	r1, #12
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f970 	bl	8004c30 <SDMMC_GetCmdResp1>
 8004950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004952:	69fb      	ldr	r3, [r7, #28]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	05f5e100 	.word	0x05f5e100

08004960 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004970:	2307      	movs	r3, #7
 8004972:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004974:	2340      	movs	r3, #64	; 0x40
 8004976:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800497c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004980:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004982:	f107 0310 	add.w	r3, r7, #16
 8004986:	4619      	mov	r1, r3
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fea6 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	2107      	movs	r1, #7
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 f94b 	bl	8004c30 <SDMMC_GetCmdResp1>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3728      	adds	r7, #40	; 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b088      	sub	sp, #32
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fe85 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fb65 	bl	80050a0 <SDMMC_GetCmdError>
 80049d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049d8:	69fb      	ldr	r3, [r7, #28]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b088      	sub	sp, #32
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80049ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80049ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80049f0:	2308      	movs	r3, #8
 80049f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049f4:	2340      	movs	r3, #64	; 0x40
 80049f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fe66 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 faf8 	bl	8005004 <SDMMC_GetCmdResp7>
 8004a14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a16:	69fb      	ldr	r3, [r7, #28]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004a2e:	2337      	movs	r3, #55	; 0x37
 8004a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a32:	2340      	movs	r3, #64	; 0x40
 8004a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fe47 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	2137      	movs	r1, #55	; 0x37
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8ec 	bl	8004c30 <SDMMC_GetCmdResp1>
 8004a58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004a7a:	2329      	movs	r3, #41	; 0x29
 8004a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe21 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f9ff 	bl	8004e9c <SDMMC_GetCmdResp3>
 8004a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b088      	sub	sp, #32
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004ab8:	2306      	movs	r3, #6
 8004aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004abc:	2340      	movs	r3, #64	; 0x40
 8004abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aca:	f107 0308 	add.w	r3, r7, #8
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff fe02 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ada:	2106      	movs	r1, #6
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8a7 	bl	8004c30 <SDMMC_GetCmdResp1>
 8004ae2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b088      	sub	sp, #32
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004afa:	2333      	movs	r3, #51	; 0x33
 8004afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004afe:	2340      	movs	r3, #64	; 0x40
 8004b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fde1 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1c:	2133      	movs	r1, #51	; 0x33
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f886 	bl	8004c30 <SDMMC_GetCmdResp1>
 8004b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b26:	69fb      	ldr	r3, [r7, #28]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3720      	adds	r7, #32
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004b40:	23c0      	movs	r3, #192	; 0xc0
 8004b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b4e:	f107 0308 	add.w	r3, r7, #8
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fdc0 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f956 	bl	8004e0c <SDMMC_GetCmdResp2>
 8004b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b62:	69fb      	ldr	r3, [r7, #28]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004b7a:	2309      	movs	r3, #9
 8004b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004b7e:	23c0      	movs	r3, #192	; 0xc0
 8004b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b8c:	f107 0308 	add.w	r3, r7, #8
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fda1 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f937 	bl	8004e0c <SDMMC_GetCmdResp2>
 8004b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b088      	sub	sp, #32
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bbc:	2340      	movs	r3, #64	; 0x40
 8004bbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fd82 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	2103      	movs	r1, #3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f99c 	bl	8004f18 <SDMMC_GetCmdResp6>
 8004be0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004be2:	69fb      	ldr	r3, [r7, #28]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004bfa:	230d      	movs	r3, #13
 8004bfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fd61 	bl	80046da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	210d      	movs	r1, #13
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f806 	bl	8004c30 <SDMMC_GetCmdResp1>
 8004c24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c26:	69fb      	ldr	r3, [r7, #28]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004c3e:	4b70      	ldr	r3, [pc, #448]	; (8004e00 <SDMMC_GetCmdResp1+0x1d0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a70      	ldr	r2, [pc, #448]	; (8004e04 <SDMMC_GetCmdResp1+0x1d4>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	0a5a      	lsrs	r2, r3, #9
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
 8004c50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	61fa      	str	r2, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c60:	e0c9      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0ef      	beq.n	8004c52 <SDMMC_GetCmdResp1+0x22>
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ea      	bne.n	8004c52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c8e:	2304      	movs	r3, #4
 8004c90:	e0b1      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e0a6      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	22c5      	movs	r2, #197	; 0xc5
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff fd3d 	bl	800472e <SDIO_GetCommandResponse>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	7afb      	ldrb	r3, [r7, #11]
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d001      	beq.n	8004cc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e099      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff fd3f 	bl	8004748 <SDIO_GetResponse>
 8004cca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	4b4e      	ldr	r3, [pc, #312]	; (8004e08 <SDMMC_GetCmdResp1+0x1d8>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e08d      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	da02      	bge.n	8004ce6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ce4:	e087      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004cf0:	2340      	movs	r3, #64	; 0x40
 8004cf2:	e080      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	e079      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d10:	e071      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d20:	e069      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d30:	e061      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d40:	e059      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d50:	e051      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d60:	e049      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004d6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d70:	e041      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d80:	e039      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d90:	e031      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004d9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004da0:	e029      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004dac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004db0:	e021      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004dbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dc0:	e019      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004dd0:	e011      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ddc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004de0:	e009      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004dec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004df0:	e001      	b.n	8004df6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000010 	.word	0x20000010
 8004e04:	10624dd3 	.word	0x10624dd3
 8004e08:	fdffe008 	.word	0xfdffe008

08004e0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e14:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <SDMMC_GetCmdResp2+0x88>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <SDMMC_GetCmdResp2+0x8c>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0a5b      	lsrs	r3, r3, #9
 8004e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1e5a      	subs	r2, r3, #1
 8004e2e:	60fa      	str	r2, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e38:	e026      	b.n	8004e88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0ef      	beq.n	8004e2a <SDMMC_GetCmdResp2+0x1e>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ea      	bne.n	8004e2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d004      	beq.n	8004e6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2204      	movs	r2, #4
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e66:	2304      	movs	r3, #4
 8004e68:	e00e      	b.n	8004e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e003      	b.n	8004e88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	22c5      	movs	r2, #197	; 0xc5
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20000010 	.word	0x20000010
 8004e98:	10624dd3 	.word	0x10624dd3

08004e9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <SDMMC_GetCmdResp3+0x74>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <SDMMC_GetCmdResp3+0x78>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	0a5b      	lsrs	r3, r3, #9
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1e5a      	subs	r2, r3, #1
 8004ebe:	60fa      	str	r2, [r7, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ec8:	e01b      	b.n	8004f02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ef      	beq.n	8004eba <SDMMC_GetCmdResp3+0x1e>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	e003      	b.n	8004f02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	22c5      	movs	r2, #197	; 0xc5
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000010 	.word	0x20000010
 8004f14:	10624dd3 	.word	0x10624dd3

08004f18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	460b      	mov	r3, r1
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f26:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <SDMMC_GetCmdResp6+0xe4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a35      	ldr	r2, [pc, #212]	; (8005000 <SDMMC_GetCmdResp6+0xe8>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	0a5b      	lsrs	r3, r3, #9
 8004f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	1e5a      	subs	r2, r3, #1
 8004f40:	61fa      	str	r2, [r7, #28]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f4a:	e052      	b.n	8004ff2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ef      	beq.n	8004f3c <SDMMC_GetCmdResp6+0x24>
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1ea      	bne.n	8004f3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d004      	beq.n	8004f7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2204      	movs	r2, #4
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f78:	2304      	movs	r3, #4
 8004f7a:	e03a      	b.n	8004ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e02f      	b.n	8004ff2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff fbcb 	bl	800472e <SDIO_GetCommandResponse>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	7afb      	ldrb	r3, [r7, #11]
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d001      	beq.n	8004fa6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e025      	b.n	8004ff2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	22c5      	movs	r2, #197	; 0xc5
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fac:	2100      	movs	r1, #0
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff fbca 	bl	8004748 <SDIO_GetResponse>
 8004fb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e011      	b.n	8004ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fdc:	e009      	b.n	8004ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fec:	e001      	b.n	8004ff2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000010 	.word	0x20000010
 8005000:	10624dd3 	.word	0x10624dd3

08005004 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800500c:	4b22      	ldr	r3, [pc, #136]	; (8005098 <SDMMC_GetCmdResp7+0x94>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a22      	ldr	r2, [pc, #136]	; (800509c <SDMMC_GetCmdResp7+0x98>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	0a5b      	lsrs	r3, r3, #9
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	60fa      	str	r2, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800502c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005030:	e02c      	b.n	800508c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0ef      	beq.n	8005022 <SDMMC_GetCmdResp7+0x1e>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ea      	bne.n	8005022 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2204      	movs	r2, #4
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800505e:	2304      	movs	r3, #4
 8005060:	e014      	b.n	800508c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005074:	2301      	movs	r3, #1
 8005076:	e009      	b.n	800508c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2240      	movs	r2, #64	; 0x40
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800508a:	2300      	movs	r3, #0
  
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	20000010 	.word	0x20000010
 800509c:	10624dd3 	.word	0x10624dd3

080050a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <SDMMC_GetCmdError+0x50>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <SDMMC_GetCmdError+0x54>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0a5b      	lsrs	r3, r3, #9
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	60fa      	str	r2, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d102      	bne.n	80050ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050cc:	e009      	b.n	80050e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f1      	beq.n	80050be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	22c5      	movs	r2, #197	; 0xc5
 80050de:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000010 	.word	0x20000010
 80050f4:	10624dd3 	.word	0x10624dd3

080050f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <disk_status+0x30>)
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	79fa      	ldrb	r2, [r7, #7]
 8005110:	4905      	ldr	r1, [pc, #20]	; (8005128 <disk_status+0x30>)
 8005112:	440a      	add	r2, r1
 8005114:	7a12      	ldrb	r2, [r2, #8]
 8005116:	4610      	mov	r0, r2
 8005118:	4798      	blx	r3
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800511e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	200000c0 	.word	0x200000c0

0800512c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <disk_initialize+0x48>)
 800513e:	5cd3      	ldrb	r3, [r2, r3]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	4a0b      	ldr	r2, [pc, #44]	; (8005174 <disk_initialize+0x48>)
 8005148:	2101      	movs	r1, #1
 800514a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	4a09      	ldr	r2, [pc, #36]	; (8005174 <disk_initialize+0x48>)
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	79fa      	ldrb	r2, [r7, #7]
 800515a:	4906      	ldr	r1, [pc, #24]	; (8005174 <disk_initialize+0x48>)
 800515c:	440a      	add	r2, r1
 800515e:	7a12      	ldrb	r2, [r2, #8]
 8005160:	4610      	mov	r0, r2
 8005162:	4798      	blx	r3
 8005164:	4603      	mov	r3, r0
 8005166:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200000c0 	.word	0x200000c0

08005178 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <disk_read+0x3c>)
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	689c      	ldr	r4, [r3, #8]
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <disk_read+0x3c>)
 8005198:	4413      	add	r3, r2
 800519a:	7a18      	ldrb	r0, [r3, #8]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68b9      	ldr	r1, [r7, #8]
 80051a2:	47a0      	blx	r4
 80051a4:	4603      	mov	r3, r0
 80051a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd90      	pop	{r4, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	200000c0 	.word	0x200000c0

080051b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	4a0a      	ldr	r2, [pc, #40]	; (80051f4 <disk_write+0x3c>)
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68dc      	ldr	r4, [r3, #12]
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4a07      	ldr	r2, [pc, #28]	; (80051f4 <disk_write+0x3c>)
 80051d8:	4413      	add	r3, r2
 80051da:	7a18      	ldrb	r0, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	47a0      	blx	r4
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	371c      	adds	r7, #28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	bf00      	nop
 80051f4:	200000c0 	.word	0x200000c0

080051f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	603a      	str	r2, [r7, #0]
 8005202:	71fb      	strb	r3, [r7, #7]
 8005204:	460b      	mov	r3, r1
 8005206:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <disk_ioctl+0x38>)
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	79fa      	ldrb	r2, [r7, #7]
 8005216:	4906      	ldr	r1, [pc, #24]	; (8005230 <disk_ioctl+0x38>)
 8005218:	440a      	add	r2, r1
 800521a:	7a10      	ldrb	r0, [r2, #8]
 800521c:	79b9      	ldrb	r1, [r7, #6]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	4798      	blx	r3
 8005222:	4603      	mov	r3, r0
 8005224:	73fb      	strb	r3, [r7, #15]
  return res;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200000c0 	.word	0x200000c0

08005234 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3301      	adds	r3, #1
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005244:	89fb      	ldrh	r3, [r7, #14]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	b21a      	sxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b21b      	sxth	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b21b      	sxth	r3, r3
 8005254:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005256:	89fb      	ldrh	r3, [r7, #14]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3303      	adds	r3, #3
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	3202      	adds	r2, #2
 800527c:	7812      	ldrb	r2, [r2, #0]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	3201      	adds	r2, #1
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
	return rv;
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	887a      	ldrh	r2, [r7, #2]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	0a1b      	lsrs	r3, r3, #8
 80052fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	0a1b      	lsrs	r3, r3, #8
 800531e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	1c53      	adds	r3, r2, #1
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	6179      	str	r1, [r7, #20]
 800535e:	7812      	ldrb	r2, [r2, #0]
 8005360:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3b01      	subs	r3, #1
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f1      	bne.n	8005352 <mem_cpy+0x1a>
	}
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800537a:	b480      	push	{r7}
 800537c:	b087      	sub	sp, #28
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	617a      	str	r2, [r7, #20]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3b01      	subs	r3, #1
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f3      	bne.n	800538a <mem_set+0x10>
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	4619      	mov	r1, r3
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	61ba      	str	r2, [r7, #24]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	1acb      	subs	r3, r1, r3
 80053dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	607b      	str	r3, [r7, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <mem_cmp+0x40>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0eb      	beq.n	80053c8 <mem_cmp+0x18>

	return r;
 80053f0:	697b      	ldr	r3, [r7, #20]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3724      	adds	r7, #36	; 0x24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005408:	e002      	b.n	8005410 <chk_chr+0x12>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3301      	adds	r3, #1
 800540e:	607b      	str	r3, [r7, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <chk_chr+0x26>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	4293      	cmp	r3, r2
 8005422:	d1f2      	bne.n	800540a <chk_chr+0xc>
	return *str;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	781b      	ldrb	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <lock_fs+0x22>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4618      	mov	r0, r3
 8005448:	f002 fa5b 	bl	8007902 <ff_req_grant>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <lock_fs+0x22>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <lock_fs+0x24>
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <unlock_fs+0x2e>
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d00a      	beq.n	800548e <unlock_fs+0x2e>
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	2b0b      	cmp	r3, #11
 800547c:	d007      	beq.n	800548e <unlock_fs+0x2e>
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d004      	beq.n	800548e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4618      	mov	r0, r3
 800548a:	f002 fa4f 	bl	800792c <ff_rel_grant>
	}
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e029      	b.n	8005500 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80054ac:	4a27      	ldr	r2, [pc, #156]	; (800554c <chk_lock+0xb4>)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4413      	add	r3, r2
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01d      	beq.n	80054f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <chk_lock+0xb4>)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	4413      	add	r3, r2
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d116      	bne.n	80054fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80054cc:	4a1f      	ldr	r2, [pc, #124]	; (800554c <chk_lock+0xb4>)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	4413      	add	r3, r2
 80054d4:	3304      	adds	r3, #4
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054dc:	429a      	cmp	r2, r3
 80054de:	d10c      	bne.n	80054fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054e0:	4a1a      	ldr	r2, [pc, #104]	; (800554c <chk_lock+0xb4>)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	4413      	add	r3, r2
 80054e8:	3308      	adds	r3, #8
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d102      	bne.n	80054fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054f4:	e007      	b.n	8005506 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d9d2      	bls.n	80054ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d109      	bne.n	8005520 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <chk_lock+0x80>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d101      	bne.n	800551c <chk_lock+0x84>
 8005518:	2300      	movs	r3, #0
 800551a:	e010      	b.n	800553e <chk_lock+0xa6>
 800551c:	2312      	movs	r3, #18
 800551e:	e00e      	b.n	800553e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d108      	bne.n	8005538 <chk_lock+0xa0>
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <chk_lock+0xb4>)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	4413      	add	r3, r2
 800552e:	330c      	adds	r3, #12
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005536:	d101      	bne.n	800553c <chk_lock+0xa4>
 8005538:	2310      	movs	r3, #16
 800553a:	e000      	b.n	800553e <chk_lock+0xa6>
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	200000a0 	.word	0x200000a0

08005550 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	e002      	b.n	8005562 <enq_lock+0x12>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3301      	adds	r3, #1
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d806      	bhi.n	8005576 <enq_lock+0x26>
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <enq_lock+0x40>)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	4413      	add	r3, r2
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f2      	bne.n	800555c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b02      	cmp	r3, #2
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
}
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	200000a0 	.word	0x200000a0

08005594 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e01f      	b.n	80055e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80055a4:	4a41      	ldr	r2, [pc, #260]	; (80056ac <inc_lock+0x118>)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	4413      	add	r3, r2
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d113      	bne.n	80055de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80055b6:	4a3d      	ldr	r2, [pc, #244]	; (80056ac <inc_lock+0x118>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	4413      	add	r3, r2
 80055be:	3304      	adds	r3, #4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d109      	bne.n	80055de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80055ca:	4a38      	ldr	r2, [pc, #224]	; (80056ac <inc_lock+0x118>)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	4413      	add	r3, r2
 80055d2:	3308      	adds	r3, #8
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80055da:	429a      	cmp	r2, r3
 80055dc:	d006      	beq.n	80055ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d9dc      	bls.n	80055a4 <inc_lock+0x10>
 80055ea:	e000      	b.n	80055ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80055ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d132      	bne.n	800565a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e002      	b.n	8005600 <inc_lock+0x6c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d806      	bhi.n	8005614 <inc_lock+0x80>
 8005606:	4a29      	ldr	r2, [pc, #164]	; (80056ac <inc_lock+0x118>)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	4413      	add	r3, r2
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f2      	bne.n	80055fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d101      	bne.n	800561e <inc_lock+0x8a>
 800561a:	2300      	movs	r3, #0
 800561c:	e040      	b.n	80056a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4922      	ldr	r1, [pc, #136]	; (80056ac <inc_lock+0x118>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	440b      	add	r3, r1
 800562a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	491e      	ldr	r1, [pc, #120]	; (80056ac <inc_lock+0x118>)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	440b      	add	r3, r1
 8005638:	3304      	adds	r3, #4
 800563a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	491a      	ldr	r1, [pc, #104]	; (80056ac <inc_lock+0x118>)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	440b      	add	r3, r1
 8005648:	3308      	adds	r3, #8
 800564a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <inc_lock+0x118>)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	4413      	add	r3, r2
 8005654:	330c      	adds	r3, #12
 8005656:	2200      	movs	r2, #0
 8005658:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <inc_lock+0xe0>
 8005660:	4a12      	ldr	r2, [pc, #72]	; (80056ac <inc_lock+0x118>)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	4413      	add	r3, r2
 8005668:	330c      	adds	r3, #12
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <inc_lock+0xe0>
 8005670:	2300      	movs	r3, #0
 8005672:	e015      	b.n	80056a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d108      	bne.n	800568c <inc_lock+0xf8>
 800567a:	4a0c      	ldr	r2, [pc, #48]	; (80056ac <inc_lock+0x118>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	4413      	add	r3, r2
 8005682:	330c      	adds	r3, #12
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	3301      	adds	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	e001      	b.n	8005690 <inc_lock+0xfc>
 800568c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005690:	4906      	ldr	r1, [pc, #24]	; (80056ac <inc_lock+0x118>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	440b      	add	r3, r1
 8005698:	330c      	adds	r3, #12
 800569a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	200000a0 	.word	0x200000a0

080056b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d825      	bhi.n	8005710 <dec_lock+0x60>
		n = Files[i].ctr;
 80056c4:	4a17      	ldr	r2, [pc, #92]	; (8005724 <dec_lock+0x74>)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	4413      	add	r3, r2
 80056cc:	330c      	adds	r3, #12
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80056d2:	89fb      	ldrh	r3, [r7, #14]
 80056d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d8:	d101      	bne.n	80056de <dec_lock+0x2e>
 80056da:	2300      	movs	r3, #0
 80056dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <dec_lock+0x3a>
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80056ea:	4a0e      	ldr	r2, [pc, #56]	; (8005724 <dec_lock+0x74>)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	4413      	add	r3, r2
 80056f2:	330c      	adds	r3, #12
 80056f4:	89fa      	ldrh	r2, [r7, #14]
 80056f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056f8:	89fb      	ldrh	r3, [r7, #14]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d105      	bne.n	800570a <dec_lock+0x5a>
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <dec_lock+0x74>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	737b      	strb	r3, [r7, #13]
 800570e:	e001      	b.n	8005714 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005710:	2302      	movs	r3, #2
 8005712:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005714:	7b7b      	ldrb	r3, [r7, #13]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	200000a0 	.word	0x200000a0

08005728 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e010      	b.n	8005758 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005736:	4a0d      	ldr	r2, [pc, #52]	; (800576c <clear_lock+0x44>)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	4413      	add	r3, r2
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d105      	bne.n	8005752 <clear_lock+0x2a>
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <clear_lock+0x44>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	4413      	add	r3, r2
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3301      	adds	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d9eb      	bls.n	8005736 <clear_lock+0xe>
	}
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	200000a0 	.word	0x200000a0

08005770 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	78db      	ldrb	r3, [r3, #3]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d034      	beq.n	80057ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7858      	ldrb	r0, [r3, #1]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005794:	2301      	movs	r3, #1
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	f7ff fd0e 	bl	80051b8 <disk_write>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
 80057a6:	e022      	b.n	80057ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	1ad2      	subs	r2, r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d217      	bcs.n	80057ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	789b      	ldrb	r3, [r3, #2]
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	e010      	b.n	80057e8 <sync_window+0x78>
					wsect += fs->fsize;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	7858      	ldrb	r0, [r3, #1]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057da:	2301      	movs	r3, #1
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	f7ff fceb 	bl	80051b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d8eb      	bhi.n	80057c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d01b      	beq.n	8005848 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff ffad 	bl	8005770 <sync_window>
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d113      	bne.n	8005848 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	7858      	ldrb	r0, [r3, #1]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800582a:	2301      	movs	r3, #1
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	f7ff fca3 	bl	8005178 <disk_read>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff87 	bl	8005770 <sync_window>
 8005862:	4603      	mov	r3, r0
 8005864:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d158      	bne.n	800591e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b03      	cmp	r3, #3
 8005872:	d148      	bne.n	8005906 <sync_fs+0xb2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	791b      	ldrb	r3, [r3, #4]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d144      	bne.n	8005906 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3334      	adds	r3, #52	; 0x34
 8005880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fd77 	bl	800537a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3334      	adds	r3, #52	; 0x34
 8005890:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005894:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fd06 	bl	80052aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3334      	adds	r3, #52	; 0x34
 80058a2:	4921      	ldr	r1, [pc, #132]	; (8005928 <sync_fs+0xd4>)
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fd1b 	bl	80052e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3334      	adds	r3, #52	; 0x34
 80058ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80058b2:	491e      	ldr	r1, [pc, #120]	; (800592c <sync_fs+0xd8>)
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fd13 	bl	80052e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3334      	adds	r3, #52	; 0x34
 80058be:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f7ff fd09 	bl	80052e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3334      	adds	r3, #52	; 0x34
 80058d2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7ff fcff 	bl	80052e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	7858      	ldrb	r0, [r3, #1]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fa:	2301      	movs	r3, #1
 80058fc:	f7ff fc5c 	bl	80051b8 <disk_write>
			fs->fsi_flag = 0;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	2200      	movs	r2, #0
 800590c:	2100      	movs	r1, #0
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fc72 	bl	80051f8 <disk_ioctl>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <sync_fs+0xca>
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	41615252 	.word	0x41615252
 800592c:	61417272 	.word	0x61417272

08005930 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	3b02      	subs	r3, #2
 800593e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	3b02      	subs	r3, #2
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d301      	bcc.n	8005950 <clust2sect+0x20>
 800594c:	2300      	movs	r3, #0
 800594e:	e008      	b.n	8005962 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	895b      	ldrh	r3, [r3, #10]
 8005954:	461a      	mov	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	fb03 f202 	mul.w	r2, r3, r2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4413      	add	r3, r2
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b086      	sub	sp, #24
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d904      	bls.n	800598e <get_fat+0x20>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <get_fat+0x26>
		val = 1;	/* Internal error */
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e08f      	b.n	8005ab4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d062      	beq.n	8005a68 <get_fat+0xfa>
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	dc7c      	bgt.n	8005aa0 <get_fat+0x132>
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d002      	beq.n	80059b0 <get_fat+0x42>
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d042      	beq.n	8005a34 <get_fat+0xc6>
 80059ae:	e077      	b.n	8005aa0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	0a5b      	lsrs	r3, r3, #9
 80059c6:	4413      	add	r3, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	6938      	ldr	r0, [r7, #16]
 80059cc:	f7ff ff14 	bl	80057f8 <move_window>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d167      	bne.n	8005aa6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	60fa      	str	r2, [r7, #12]
 80059dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	0a5b      	lsrs	r3, r3, #9
 80059f2:	4413      	add	r3, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	6938      	ldr	r0, [r7, #16]
 80059f8:	f7ff fefe 	bl	80057f8 <move_window>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d153      	bne.n	8005aaa <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	461a      	mov	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <get_fat+0xbc>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	e002      	b.n	8005a30 <get_fat+0xc2>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a30:	617b      	str	r3, [r7, #20]
			break;
 8005a32:	e03f      	b.n	8005ab4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	4413      	add	r3, r2
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6938      	ldr	r0, [r7, #16]
 8005a42:	f7ff fed9 	bl	80057f8 <move_window>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d130      	bne.n	8005aae <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fbe9 	bl	8005234 <ld_word>
 8005a62:	4603      	mov	r3, r0
 8005a64:	617b      	str	r3, [r7, #20]
			break;
 8005a66:	e025      	b.n	8005ab4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	09db      	lsrs	r3, r3, #7
 8005a70:	4413      	add	r3, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	6938      	ldr	r0, [r7, #16]
 8005a76:	f7ff febf 	bl	80057f8 <move_window>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d118      	bne.n	8005ab2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005a8e:	4413      	add	r3, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fbe7 	bl	8005264 <ld_dword>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a9c:	617b      	str	r3, [r7, #20]
			break;
 8005a9e:	e009      	b.n	8005ab4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e006      	b.n	8005ab4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005aa6:	bf00      	nop
 8005aa8:	e004      	b.n	8005ab4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005aaa:	bf00      	nop
 8005aac:	e002      	b.n	8005ab4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005aae:	bf00      	nop
 8005ab0:	e000      	b.n	8005ab4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ab2:	bf00      	nop
		}
	}

	return val;
 8005ab4:	697b      	ldr	r3, [r7, #20]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005abe:	b590      	push	{r4, r7, lr}
 8005ac0:	b089      	sub	sp, #36	; 0x24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005aca:	2302      	movs	r3, #2
 8005acc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	f240 80d2 	bls.w	8005c7a <put_fat+0x1bc>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	f080 80cc 	bcs.w	8005c7a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	f000 8096 	beq.w	8005c18 <put_fat+0x15a>
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	f300 80cd 	bgt.w	8005c8c <put_fat+0x1ce>
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d002      	beq.n	8005afc <put_fat+0x3e>
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d06e      	beq.n	8005bd8 <put_fat+0x11a>
 8005afa:	e0c7      	b.n	8005c8c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4413      	add	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	0a5b      	lsrs	r3, r3, #9
 8005b12:	4413      	add	r3, r2
 8005b14:	4619      	mov	r1, r3
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff fe6e 	bl	80057f8 <move_window>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b20:	7ffb      	ldrb	r3, [r7, #31]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 80ab 	bne.w	8005c7e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1c59      	adds	r1, r3, #1
 8005b32:	61b9      	str	r1, [r7, #24]
 8005b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b38:	4413      	add	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00d      	beq.n	8005b62 <put_fat+0xa4>
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	b25a      	sxtb	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b25b      	sxtb	r3, r3
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	e001      	b.n	8005b66 <put_fat+0xa8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	0a5b      	lsrs	r3, r3, #9
 8005b78:	4413      	add	r3, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fe3b 	bl	80057f8 <move_window>
 8005b82:	4603      	mov	r3, r0
 8005b84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b86:	7ffb      	ldrb	r3, [r7, #31]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d17a      	bne.n	8005c82 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b98:	4413      	add	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <put_fat+0xf0>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	091b      	lsrs	r3, r3, #4
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	e00e      	b.n	8005bcc <put_fat+0x10e>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	f023 030f 	bic.w	r3, r3, #15
 8005bb8:	b25a      	sxtb	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0a1b      	lsrs	r3, r3, #8
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	b25b      	sxtb	r3, r3
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	70da      	strb	r2, [r3, #3]
			break;
 8005bd6:	e059      	b.n	8005c8c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	4413      	add	r3, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff fe07 	bl	80057f8 <move_window>
 8005bea:	4603      	mov	r3, r0
 8005bec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bee:	7ffb      	ldrb	r3, [r7, #31]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d148      	bne.n	8005c86 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c02:	4413      	add	r3, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	b292      	uxth	r2, r2
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff fb4d 	bl	80052aa <st_word>
			fs->wflag = 1;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	70da      	strb	r2, [r3, #3]
			break;
 8005c16:	e039      	b.n	8005c8c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	09db      	lsrs	r3, r3, #7
 8005c20:	4413      	add	r3, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fde7 	bl	80057f8 <move_window>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d12a      	bne.n	8005c8a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c48:	4413      	add	r3, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fb0a 	bl	8005264 <ld_dword>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c56:	4323      	orrs	r3, r4
 8005c58:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c68:	4413      	add	r3, r2
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fb37 	bl	80052e0 <st_dword>
			fs->wflag = 1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	70da      	strb	r2, [r3, #3]
			break;
 8005c78:	e008      	b.n	8005c8c <put_fat+0x1ce>
		}
	}
 8005c7a:	bf00      	nop
 8005c7c:	e006      	b.n	8005c8c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c7e:	bf00      	nop
 8005c80:	e004      	b.n	8005c8c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c82:	bf00      	nop
 8005c84:	e002      	b.n	8005c8c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c86:	bf00      	nop
 8005c88:	e000      	b.n	8005c8c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005c8a:	bf00      	nop
	return res;
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3724      	adds	r7, #36	; 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd90      	pop	{r4, r7, pc}

08005c96 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b088      	sub	sp, #32
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d904      	bls.n	8005cbc <remove_chain+0x26>
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d301      	bcc.n	8005cc0 <remove_chain+0x2a>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e04b      	b.n	8005d58 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	69b8      	ldr	r0, [r7, #24]
 8005cce:	f7ff fef6 	bl	8005abe <put_fat>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <remove_chain+0x4a>
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	e03b      	b.n	8005d58 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fe43 	bl	800596e <get_fat>
 8005ce8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d031      	beq.n	8005d54 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <remove_chain+0x64>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e02e      	b.n	8005d58 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d101      	bne.n	8005d06 <remove_chain+0x70>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e028      	b.n	8005d58 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d06:	2200      	movs	r2, #0
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	69b8      	ldr	r0, [r7, #24]
 8005d0c:	f7ff fed7 	bl	8005abe <put_fat>
 8005d10:	4603      	mov	r3, r0
 8005d12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <remove_chain+0x88>
 8005d1a:	7ffb      	ldrb	r3, [r7, #31]
 8005d1c:	e01c      	b.n	8005d58 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	3b02      	subs	r3, #2
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d20b      	bcs.n	8005d44 <remove_chain+0xae>
			fs->free_clst++;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d3c6      	bcc.n	8005ce0 <remove_chain+0x4a>
 8005d52:	e000      	b.n	8005d56 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d54:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10d      	bne.n	8005d92 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <create_chain+0x2c>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d31b      	bcc.n	8005dc4 <create_chain+0x64>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	e018      	b.n	8005dc4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff fdea 	bl	800596e <get_fat>
 8005d9a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d801      	bhi.n	8005da6 <create_chain+0x46>
 8005da2:	2301      	movs	r3, #1
 8005da4:	e070      	b.n	8005e88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d101      	bne.n	8005db2 <create_chain+0x52>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	e06a      	b.n	8005e88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d201      	bcs.n	8005dc0 <create_chain+0x60>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	e063      	b.n	8005e88 <create_chain+0x128>
		scl = clst;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d307      	bcc.n	8005de8 <create_chain+0x88>
				ncl = 2;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d901      	bls.n	8005de8 <create_chain+0x88>
 8005de4:	2300      	movs	r3, #0
 8005de6:	e04f      	b.n	8005e88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005de8:	69f9      	ldr	r1, [r7, #28]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff fdbf 	bl	800596e <get_fat>
 8005df0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00e      	beq.n	8005e16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d003      	beq.n	8005e06 <create_chain+0xa6>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e04:	d101      	bne.n	8005e0a <create_chain+0xaa>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	e03e      	b.n	8005e88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d1da      	bne.n	8005dc8 <create_chain+0x68>
 8005e12:	2300      	movs	r3, #0
 8005e14:	e038      	b.n	8005e88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1c:	69f9      	ldr	r1, [r7, #28]
 8005e1e:	6938      	ldr	r0, [r7, #16]
 8005e20:	f7ff fe4d 	bl	8005abe <put_fat>
 8005e24:	4603      	mov	r3, r0
 8005e26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <create_chain+0xe2>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6938      	ldr	r0, [r7, #16]
 8005e3a:	f7ff fe40 	bl	8005abe <put_fat>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d116      	bne.n	8005e76 <create_chain+0x116>
		fs->last_clst = ncl;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	3b02      	subs	r3, #2
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d804      	bhi.n	8005e66 <create_chain+0x106>
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	1e5a      	subs	r2, r3, #1
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	791b      	ldrb	r3, [r3, #4]
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	711a      	strb	r2, [r3, #4]
 8005e74:	e007      	b.n	8005e86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d102      	bne.n	8005e82 <create_chain+0x122>
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	e000      	b.n	8005e84 <create_chain+0x124>
 8005e82:	2301      	movs	r3, #1
 8005e84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e86:	69fb      	ldr	r3, [r7, #28]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3720      	adds	r7, #32
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	0a5b      	lsrs	r3, r3, #9
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	8952      	ldrh	r2, [r2, #10]
 8005eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1d1a      	adds	r2, r3, #4
 8005eba:	613a      	str	r2, [r7, #16]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <clmt_clust+0x3a>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e010      	b.n	8005eec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d307      	bcc.n	8005ee2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3304      	adds	r3, #4
 8005ede:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ee0:	e7e9      	b.n	8005eb6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005ee2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f0e:	d204      	bcs.n	8005f1a <dir_sdi+0x22>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e063      	b.n	8005fe6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <dir_sdi+0x46>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d902      	bls.n	8005f3e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10c      	bne.n	8005f5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	8912      	ldrh	r2, [r2, #8]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d301      	bcc.n	8005f54 <dir_sdi+0x5c>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e048      	b.n	8005fe6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	61da      	str	r2, [r3, #28]
 8005f5c:	e029      	b.n	8005fb2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	895b      	ldrh	r3, [r3, #10]
 8005f62:	025b      	lsls	r3, r3, #9
 8005f64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f66:	e019      	b.n	8005f9c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6979      	ldr	r1, [r7, #20]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fcfe 	bl	800596e <get_fat>
 8005f72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d101      	bne.n	8005f80 <dir_sdi+0x88>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e032      	b.n	8005fe6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d904      	bls.n	8005f90 <dir_sdi+0x98>
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d301      	bcc.n	8005f94 <dir_sdi+0x9c>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e028      	b.n	8005fe6 <dir_sdi+0xee>
			ofs -= csz;
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d2e1      	bcs.n	8005f68 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005fa4:	6979      	ldr	r1, [r7, #20]
 8005fa6:	6938      	ldr	r0, [r7, #16]
 8005fa8:	f7ff fcc2 	bl	8005930 <clust2sect>
 8005fac:	4602      	mov	r2, r0
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <dir_sdi+0xcc>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e010      	b.n	8005fe6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	0a5b      	lsrs	r3, r3, #9
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	441a      	add	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	3320      	adds	r3, #32
 8006004:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <dir_next+0x28>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006014:	d301      	bcc.n	800601a <dir_next+0x2c>
 8006016:	2304      	movs	r3, #4
 8006018:	e0aa      	b.n	8006170 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 8098 	bne.w	8006156 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10b      	bne.n	8006050 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	8912      	ldrh	r2, [r2, #8]
 8006040:	4293      	cmp	r3, r2
 8006042:	f0c0 8088 	bcc.w	8006156 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	61da      	str	r2, [r3, #28]
 800604c:	2304      	movs	r3, #4
 800604e:	e08f      	b.n	8006170 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	0a5b      	lsrs	r3, r3, #9
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	8952      	ldrh	r2, [r2, #10]
 8006058:	3a01      	subs	r2, #1
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d17a      	bne.n	8006156 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f7ff fc80 	bl	800596e <get_fat>
 800606e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d801      	bhi.n	800607a <dir_next+0x8c>
 8006076:	2302      	movs	r3, #2
 8006078:	e07a      	b.n	8006170 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d101      	bne.n	8006086 <dir_next+0x98>
 8006082:	2301      	movs	r3, #1
 8006084:	e074      	b.n	8006170 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	429a      	cmp	r2, r3
 800608e:	d358      	bcc.n	8006142 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	61da      	str	r2, [r3, #28]
 800609c:	2304      	movs	r3, #4
 800609e:	e067      	b.n	8006170 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	4619      	mov	r1, r3
 80060a8:	4610      	mov	r0, r2
 80060aa:	f7ff fe59 	bl	8005d60 <create_chain>
 80060ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <dir_next+0xcc>
 80060b6:	2307      	movs	r3, #7
 80060b8:	e05a      	b.n	8006170 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <dir_next+0xd6>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e055      	b.n	8006170 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d101      	bne.n	80060d0 <dir_next+0xe2>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e04f      	b.n	8006170 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fb4d 	bl	8005770 <sync_window>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <dir_next+0xf2>
 80060dc:	2301      	movs	r3, #1
 80060de:	e047      	b.n	8006170 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3334      	adds	r3, #52	; 0x34
 80060e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f945 	bl	800537a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	6979      	ldr	r1, [r7, #20]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff fc1a 	bl	8005930 <clust2sect>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
 8006102:	e012      	b.n	800612a <dir_next+0x13c>
						fs->wflag = 1;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff fb30 	bl	8005770 <sync_window>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <dir_next+0x12c>
 8006116:	2301      	movs	r3, #1
 8006118:	e02a      	b.n	8006170 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3301      	adds	r3, #1
 800611e:	613b      	str	r3, [r7, #16]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	895b      	ldrh	r3, [r3, #10]
 800612e:	461a      	mov	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4293      	cmp	r3, r2
 8006134:	d3e6      	bcc.n	8006104 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad2      	subs	r2, r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006148:	6979      	ldr	r1, [r7, #20]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff fbf0 	bl	8005930 <clust2sect>
 8006150:	4602      	mov	r2, r0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006168:	441a      	add	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006188:	2100      	movs	r1, #0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff feb4 	bl	8005ef8 <dir_sdi>
 8006190:	4603      	mov	r3, r0
 8006192:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d12b      	bne.n	80061f2 <dir_alloc+0x7a>
		n = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	4619      	mov	r1, r3
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff fb27 	bl	80057f8 <move_window>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d11d      	bne.n	80061f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2be5      	cmp	r3, #229	; 0xe5
 80061bc:	d004      	beq.n	80061c8 <dir_alloc+0x50>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d102      	bne.n	80061dc <dir_alloc+0x64>
 80061d6:	e00c      	b.n	80061f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80061d8:	2300      	movs	r3, #0
 80061da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80061dc:	2101      	movs	r1, #1
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ff05 	bl	8005fee <dir_next>
 80061e4:	4603      	mov	r3, r0
 80061e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0d7      	beq.n	800619e <dir_alloc+0x26>
 80061ee:	e000      	b.n	80061f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80061f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d101      	bne.n	80061fc <dir_alloc+0x84>
 80061f8:	2307      	movs	r3, #7
 80061fa:	75fb      	strb	r3, [r7, #23]
	return res;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	331a      	adds	r3, #26
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff f80d 	bl	8005234 <ld_word>
 800621a:	4603      	mov	r3, r0
 800621c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b03      	cmp	r3, #3
 8006224:	d109      	bne.n	800623a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff f802 	bl	8005234 <ld_word>
 8006230:	4603      	mov	r3, r0
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	331a      	adds	r3, #26
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	b292      	uxth	r2, r2
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff f825 	bl	80052aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d109      	bne.n	800627c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f103 0214 	add.w	r2, r3, #20
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	b29b      	uxth	r3, r3
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f7ff f817 	bl	80052aa <st_word>
	}
}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fe2f 	bl	8005ef8 <dir_sdi>
 800629a:	4603      	mov	r3, r0
 800629c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <dir_find+0x24>
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	e03e      	b.n	8006326 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	4619      	mov	r1, r3
 80062ae:	6938      	ldr	r0, [r7, #16]
 80062b0:	f7ff faa2 	bl	80057f8 <move_window>
 80062b4:	4603      	mov	r3, r0
 80062b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d12f      	bne.n	800631e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <dir_find+0x4e>
 80062cc:	2304      	movs	r3, #4
 80062ce:	75fb      	strb	r3, [r7, #23]
 80062d0:	e028      	b.n	8006324 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	330b      	adds	r3, #11
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	330b      	adds	r3, #11
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <dir_find+0x86>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a18      	ldr	r0, [r3, #32]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3324      	adds	r3, #36	; 0x24
 80062fc:	220b      	movs	r2, #11
 80062fe:	4619      	mov	r1, r3
 8006300:	f7ff f856 	bl	80053b0 <mem_cmp>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800630a:	2100      	movs	r1, #0
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fe6e 	bl	8005fee <dir_next>
 8006312:	4603      	mov	r3, r0
 8006314:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0c5      	beq.n	80062a8 <dir_find+0x24>
 800631c:	e002      	b.n	8006324 <dir_find+0xa0>
		if (res != FR_OK) break;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006322:	bf00      	nop

	return res;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800633c:	2101      	movs	r1, #1
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff ff1a 	bl	8006178 <dir_alloc>
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d11c      	bne.n	8006388 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	4619      	mov	r1, r3
 8006354:	68b8      	ldr	r0, [r7, #8]
 8006356:	f7ff fa4f 	bl	80057f8 <move_window>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d111      	bne.n	8006388 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	2220      	movs	r2, #32
 800636a:	2100      	movs	r1, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f804 	bl	800537a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a18      	ldr	r0, [r3, #32]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3324      	adds	r3, #36	; 0x24
 800637a:	220b      	movs	r2, #11
 800637c:	4619      	mov	r1, r3
 800637e:	f7fe ffdb 	bl	8005338 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2201      	movs	r2, #1
 8006386:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80063aa:	220b      	movs	r2, #11
 80063ac:	2120      	movs	r1, #32
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f7fe ffe3 	bl	800537a <mem_set>
	si = i = 0; ni = 8;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	2308      	movs	r3, #8
 80063be:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80063ce:	7efb      	ldrb	r3, [r7, #27]
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d94e      	bls.n	8006472 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80063d4:	7efb      	ldrb	r3, [r7, #27]
 80063d6:	2b2f      	cmp	r3, #47	; 0x2f
 80063d8:	d006      	beq.n	80063e8 <create_name+0x54>
 80063da:	7efb      	ldrb	r3, [r7, #27]
 80063dc:	2b5c      	cmp	r3, #92	; 0x5c
 80063de:	d110      	bne.n	8006402 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80063e0:	e002      	b.n	80063e8 <create_name+0x54>
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3301      	adds	r3, #1
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b2f      	cmp	r3, #47	; 0x2f
 80063f2:	d0f6      	beq.n	80063e2 <create_name+0x4e>
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b5c      	cmp	r3, #92	; 0x5c
 80063fe:	d0f0      	beq.n	80063e2 <create_name+0x4e>
			break;
 8006400:	e038      	b.n	8006474 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006402:	7efb      	ldrb	r3, [r7, #27]
 8006404:	2b2e      	cmp	r3, #46	; 0x2e
 8006406:	d003      	beq.n	8006410 <create_name+0x7c>
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	429a      	cmp	r2, r3
 800640e:	d30c      	bcc.n	800642a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2b0b      	cmp	r3, #11
 8006414:	d002      	beq.n	800641c <create_name+0x88>
 8006416:	7efb      	ldrb	r3, [r7, #27]
 8006418:	2b2e      	cmp	r3, #46	; 0x2e
 800641a:	d001      	beq.n	8006420 <create_name+0x8c>
 800641c:	2306      	movs	r3, #6
 800641e:	e044      	b.n	80064aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006420:	2308      	movs	r3, #8
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	230b      	movs	r3, #11
 8006426:	617b      	str	r3, [r7, #20]
			continue;
 8006428:	e022      	b.n	8006470 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800642a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800642e:	2b00      	cmp	r3, #0
 8006430:	da04      	bge.n	800643c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006432:	7efb      	ldrb	r3, [r7, #27]
 8006434:	3b80      	subs	r3, #128	; 0x80
 8006436:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <create_name+0x120>)
 8006438:	5cd3      	ldrb	r3, [r2, r3]
 800643a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800643c:	7efb      	ldrb	r3, [r7, #27]
 800643e:	4619      	mov	r1, r3
 8006440:	481d      	ldr	r0, [pc, #116]	; (80064b8 <create_name+0x124>)
 8006442:	f7fe ffdc 	bl	80053fe <chk_chr>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <create_name+0xbc>
 800644c:	2306      	movs	r3, #6
 800644e:	e02c      	b.n	80064aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006450:	7efb      	ldrb	r3, [r7, #27]
 8006452:	2b60      	cmp	r3, #96	; 0x60
 8006454:	d905      	bls.n	8006462 <create_name+0xce>
 8006456:	7efb      	ldrb	r3, [r7, #27]
 8006458:	2b7a      	cmp	r3, #122	; 0x7a
 800645a:	d802      	bhi.n	8006462 <create_name+0xce>
 800645c:	7efb      	ldrb	r3, [r7, #27]
 800645e:	3b20      	subs	r3, #32
 8006460:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	613a      	str	r2, [r7, #16]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	4413      	add	r3, r2
 800646c:	7efa      	ldrb	r2, [r7, #27]
 800646e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006470:	e7a6      	b.n	80063c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006472:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	441a      	add	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <create_name+0xf4>
 8006484:	2306      	movs	r3, #6
 8006486:	e010      	b.n	80064aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2be5      	cmp	r3, #229	; 0xe5
 800648e:	d102      	bne.n	8006496 <create_name+0x102>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2205      	movs	r2, #5
 8006494:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006496:	7efb      	ldrb	r3, [r7, #27]
 8006498:	2b20      	cmp	r3, #32
 800649a:	d801      	bhi.n	80064a0 <create_name+0x10c>
 800649c:	2204      	movs	r2, #4
 800649e:	e000      	b.n	80064a2 <create_name+0x10e>
 80064a0:	2200      	movs	r2, #0
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	330b      	adds	r3, #11
 80064a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80064a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3720      	adds	r7, #32
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	0800ba44 	.word	0x0800ba44
 80064b8:	0800b928 	.word	0x0800b928

080064bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064d0:	e002      	b.n	80064d8 <follow_path+0x1c>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	3301      	adds	r3, #1
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b2f      	cmp	r3, #47	; 0x2f
 80064de:	d0f8      	beq.n	80064d2 <follow_path+0x16>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b5c      	cmp	r3, #92	; 0x5c
 80064e6:	d0f4      	beq.n	80064d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2200      	movs	r2, #0
 80064ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b1f      	cmp	r3, #31
 80064f4:	d80a      	bhi.n	800650c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2280      	movs	r2, #128	; 0x80
 80064fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80064fe:	2100      	movs	r1, #0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fcf9 	bl	8005ef8 <dir_sdi>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
 800650a:	e043      	b.n	8006594 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800650c:	463b      	mov	r3, r7
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ff3f 	bl	8006394 <create_name>
 8006516:	4603      	mov	r3, r0
 8006518:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d134      	bne.n	800658a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff feaf 	bl	8006284 <dir_find>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006530:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	2b04      	cmp	r3, #4
 800653c:	d127      	bne.n	800658e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800653e:	7afb      	ldrb	r3, [r7, #11]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d122      	bne.n	800658e <follow_path+0xd2>
 8006548:	2305      	movs	r3, #5
 800654a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800654c:	e01f      	b.n	800658e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d11c      	bne.n	8006592 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	799b      	ldrb	r3, [r3, #6]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006564:	2305      	movs	r3, #5
 8006566:	75fb      	strb	r3, [r7, #23]
 8006568:	e014      	b.n	8006594 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	4413      	add	r3, r2
 800657a:	4619      	mov	r1, r3
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fe42 	bl	8006206 <ld_clust>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006588:	e7c0      	b.n	800650c <follow_path+0x50>
			if (res != FR_OK) break;
 800658a:	bf00      	nop
 800658c:	e002      	b.n	8006594 <follow_path+0xd8>
				break;
 800658e:	bf00      	nop
 8006590:	e000      	b.n	8006594 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006592:	bf00      	nop
			}
		}
	}

	return res;
 8006594:	7dfb      	ldrb	r3, [r7, #23]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800659e:	b480      	push	{r7}
 80065a0:	b087      	sub	sp, #28
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d031      	beq.n	8006618 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e002      	b.n	80065c2 <get_ldnumber+0x24>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3301      	adds	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d903      	bls.n	80065d2 <get_ldnumber+0x34>
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b3a      	cmp	r3, #58	; 0x3a
 80065d0:	d1f4      	bne.n	80065bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b3a      	cmp	r3, #58	; 0x3a
 80065d8:	d11c      	bne.n	8006614 <get_ldnumber+0x76>
			tp = *path;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	60fa      	str	r2, [r7, #12]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	3b30      	subs	r3, #48	; 0x30
 80065ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b09      	cmp	r3, #9
 80065f0:	d80e      	bhi.n	8006610 <get_ldnumber+0x72>
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d10a      	bne.n	8006610 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d107      	bne.n	8006610 <get_ldnumber+0x72>
					vol = (int)i;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	3301      	adds	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	e002      	b.n	800661a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006618:	693b      	ldr	r3, [r7, #16]
}
 800661a:	4618      	mov	r0, r3
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	70da      	strb	r2, [r3, #3]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f04f 32ff 	mov.w	r2, #4294967295
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff f8d8 	bl	80057f8 <move_window>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <check_fs+0x2a>
 800664e:	2304      	movs	r3, #4
 8006650:	e038      	b.n	80066c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3334      	adds	r3, #52	; 0x34
 8006656:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fdea 	bl	8005234 <ld_word>
 8006660:	4603      	mov	r3, r0
 8006662:	461a      	mov	r2, r3
 8006664:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <check_fs+0x48>
 800666c:	2303      	movs	r3, #3
 800666e:	e029      	b.n	80066c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006676:	2be9      	cmp	r3, #233	; 0xe9
 8006678:	d009      	beq.n	800668e <check_fs+0x66>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006680:	2beb      	cmp	r3, #235	; 0xeb
 8006682:	d11e      	bne.n	80066c2 <check_fs+0x9a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800668a:	2b90      	cmp	r3, #144	; 0x90
 800668c:	d119      	bne.n	80066c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3334      	adds	r3, #52	; 0x34
 8006692:	3336      	adds	r3, #54	; 0x36
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe fde5 	bl	8005264 <ld_dword>
 800669a:	4603      	mov	r3, r0
 800669c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <check_fs+0xa4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d101      	bne.n	80066aa <check_fs+0x82>
 80066a6:	2300      	movs	r3, #0
 80066a8:	e00c      	b.n	80066c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3334      	adds	r3, #52	; 0x34
 80066ae:	3352      	adds	r3, #82	; 0x52
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fe fdd7 	bl	8005264 <ld_dword>
 80066b6:	4603      	mov	r3, r0
 80066b8:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <check_fs+0xa8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d101      	bne.n	80066c2 <check_fs+0x9a>
 80066be:	2300      	movs	r3, #0
 80066c0:	e000      	b.n	80066c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066c2:	2302      	movs	r3, #2
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	00544146 	.word	0x00544146
 80066d0:	33544146 	.word	0x33544146

080066d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b096      	sub	sp, #88	; 0x58
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff ff58 	bl	800659e <get_ldnumber>
 80066ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da01      	bge.n	80066fa <find_volume+0x26>
 80066f6:	230b      	movs	r3, #11
 80066f8:	e235      	b.n	8006b66 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066fa:	4aa5      	ldr	r2, [pc, #660]	; (8006990 <find_volume+0x2bc>)
 80066fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006702:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <find_volume+0x3a>
 800670a:	230c      	movs	r3, #12
 800670c:	e22b      	b.n	8006b66 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800670e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006710:	f7fe fe90 	bl	8005434 <lock_fs>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <find_volume+0x4a>
 800671a:	230f      	movs	r3, #15
 800671c:	e223      	b.n	8006b66 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006722:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	f023 0301 	bic.w	r3, r3, #1
 800672a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01a      	beq.n	800676a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe fcdd 	bl	80050f8 <disk_status>
 800673e:	4603      	mov	r3, r0
 8006740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10c      	bne.n	800676a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d007      	beq.n	8006766 <find_volume+0x92>
 8006756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006762:	230a      	movs	r3, #10
 8006764:	e1ff      	b.n	8006b66 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8006766:	2300      	movs	r3, #0
 8006768:	e1fd      	b.n	8006b66 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006772:	b2da      	uxtb	r2, r3
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fcd5 	bl	800512c <disk_initialize>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006794:	2303      	movs	r3, #3
 8006796:	e1e6      	b.n	8006b66 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <find_volume+0xda>
 800679e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80067aa:	230a      	movs	r3, #10
 80067ac:	e1db      	b.n	8006b66 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80067b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067b6:	f7ff ff37 	bl	8006628 <check_fs>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80067c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d149      	bne.n	800685c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067c8:	2300      	movs	r3, #0
 80067ca:	643b      	str	r3, [r7, #64]	; 0x40
 80067cc:	e01e      	b.n	800680c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80067dc:	4413      	add	r3, r2
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	3304      	adds	r3, #4
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d006      	beq.n	80067f8 <find_volume+0x124>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	3308      	adds	r3, #8
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fd38 	bl	8005264 <ld_dword>
 80067f4:	4602      	mov	r2, r0
 80067f6:	e000      	b.n	80067fa <find_volume+0x126>
 80067f8:	2200      	movs	r2, #0
 80067fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	3358      	adds	r3, #88	; 0x58
 8006800:	443b      	add	r3, r7
 8006802:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006808:	3301      	adds	r3, #1
 800680a:	643b      	str	r3, [r7, #64]	; 0x40
 800680c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680e:	2b03      	cmp	r3, #3
 8006810:	d9dd      	bls.n	80067ce <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006812:	2300      	movs	r3, #0
 8006814:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <find_volume+0x14e>
 800681c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681e:	3b01      	subs	r3, #1
 8006820:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	3358      	adds	r3, #88	; 0x58
 8006828:	443b      	add	r3, r7
 800682a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800682e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <find_volume+0x16e>
 8006836:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800683a:	f7ff fef5 	bl	8006628 <check_fs>
 800683e:	4603      	mov	r3, r0
 8006840:	e000      	b.n	8006844 <find_volume+0x170>
 8006842:	2303      	movs	r3, #3
 8006844:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800684c:	2b01      	cmp	r3, #1
 800684e:	d905      	bls.n	800685c <find_volume+0x188>
 8006850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006852:	3301      	adds	r3, #1
 8006854:	643b      	str	r3, [r7, #64]	; 0x40
 8006856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006858:	2b03      	cmp	r3, #3
 800685a:	d9e2      	bls.n	8006822 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800685c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006860:	2b04      	cmp	r3, #4
 8006862:	d101      	bne.n	8006868 <find_volume+0x194>
 8006864:	2301      	movs	r3, #1
 8006866:	e17e      	b.n	8006b66 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800686c:	2b01      	cmp	r3, #1
 800686e:	d901      	bls.n	8006874 <find_volume+0x1a0>
 8006870:	230d      	movs	r3, #13
 8006872:	e178      	b.n	8006b66 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	3334      	adds	r3, #52	; 0x34
 8006878:	330b      	adds	r3, #11
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fcda 	bl	8005234 <ld_word>
 8006880:	4603      	mov	r3, r0
 8006882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006886:	d001      	beq.n	800688c <find_volume+0x1b8>
 8006888:	230d      	movs	r3, #13
 800688a:	e16c      	b.n	8006b66 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	3334      	adds	r3, #52	; 0x34
 8006890:	3316      	adds	r3, #22
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fcce 	bl	8005234 <ld_word>
 8006898:	4603      	mov	r3, r0
 800689a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800689c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d106      	bne.n	80068b0 <find_volume+0x1dc>
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	3334      	adds	r3, #52	; 0x34
 80068a6:	3324      	adds	r3, #36	; 0x24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fcdb 	bl	8005264 <ld_dword>
 80068ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	789b      	ldrb	r3, [r3, #2]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d005      	beq.n	80068d4 <find_volume+0x200>
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	789b      	ldrb	r3, [r3, #2]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d001      	beq.n	80068d4 <find_volume+0x200>
 80068d0:	230d      	movs	r3, #13
 80068d2:	e148      	b.n	8006b66 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	789b      	ldrb	r3, [r3, #2]
 80068d8:	461a      	mov	r2, r3
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068dc:	fb02 f303 	mul.w	r3, r2, r3
 80068e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	895b      	ldrh	r3, [r3, #10]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <find_volume+0x234>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	895b      	ldrh	r3, [r3, #10]
 80068fa:	461a      	mov	r2, r3
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	895b      	ldrh	r3, [r3, #10]
 8006900:	3b01      	subs	r3, #1
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <find_volume+0x238>
 8006908:	230d      	movs	r3, #13
 800690a:	e12c      	b.n	8006b66 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	3334      	adds	r3, #52	; 0x34
 8006910:	3311      	adds	r3, #17
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fc8e 	bl	8005234 <ld_word>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	891b      	ldrh	r3, [r3, #8]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <find_volume+0x25e>
 800692e:	230d      	movs	r3, #13
 8006930:	e119      	b.n	8006b66 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	3334      	adds	r3, #52	; 0x34
 8006936:	3313      	adds	r3, #19
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe fc7b 	bl	8005234 <ld_word>
 800693e:	4603      	mov	r3, r0
 8006940:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <find_volume+0x282>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	3334      	adds	r3, #52	; 0x34
 800694c:	3320      	adds	r3, #32
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fc88 	bl	8005264 <ld_dword>
 8006954:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	3334      	adds	r3, #52	; 0x34
 800695a:	330e      	adds	r3, #14
 800695c:	4618      	mov	r0, r3
 800695e:	f7fe fc69 	bl	8005234 <ld_word>
 8006962:	4603      	mov	r3, r0
 8006964:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006966:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <find_volume+0x29c>
 800696c:	230d      	movs	r3, #13
 800696e:	e0fa      	b.n	8006b66 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006970:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006974:	4413      	add	r3, r2
 8006976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006978:	8912      	ldrh	r2, [r2, #8]
 800697a:	0912      	lsrs	r2, r2, #4
 800697c:	b292      	uxth	r2, r2
 800697e:	4413      	add	r3, r2
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	429a      	cmp	r2, r3
 8006988:	d204      	bcs.n	8006994 <find_volume+0x2c0>
 800698a:	230d      	movs	r3, #13
 800698c:	e0eb      	b.n	8006b66 <find_volume+0x492>
 800698e:	bf00      	nop
 8006990:	20000098 	.word	0x20000098
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800699c:	8952      	ldrh	r2, [r2, #10]
 800699e:	fbb3 f3f2 	udiv	r3, r3, r2
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <find_volume+0x2da>
 80069aa:	230d      	movs	r3, #13
 80069ac:	e0db      	b.n	8006b66 <find_volume+0x492>
		fmt = FS_FAT32;
 80069ae:	2303      	movs	r3, #3
 80069b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d802      	bhi.n	80069c4 <find_volume+0x2f0>
 80069be:	2302      	movs	r3, #2
 80069c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d802      	bhi.n	80069d4 <find_volume+0x300>
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	1c9a      	adds	r2, r3, #2
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069e0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e6:	441a      	add	r2, r3
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80069ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	441a      	add	r2, r3
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80069f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d11e      	bne.n	8006a3c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	3334      	adds	r3, #52	; 0x34
 8006a02:	332a      	adds	r3, #42	; 0x2a
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe fc15 	bl	8005234 <ld_word>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <find_volume+0x340>
 8006a10:	230d      	movs	r3, #13
 8006a12:	e0a8      	b.n	8006b66 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	891b      	ldrh	r3, [r3, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <find_volume+0x34c>
 8006a1c:	230d      	movs	r3, #13
 8006a1e:	e0a2      	b.n	8006b66 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	3334      	adds	r3, #52	; 0x34
 8006a24:	332c      	adds	r3, #44	; 0x2c
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fc1c 	bl	8005264 <ld_dword>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	647b      	str	r3, [r7, #68]	; 0x44
 8006a3a:	e01f      	b.n	8006a7c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	891b      	ldrh	r3, [r3, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <find_volume+0x374>
 8006a44:	230d      	movs	r3, #13
 8006a46:	e08e      	b.n	8006b66 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	441a      	add	r2, r3
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d103      	bne.n	8006a64 <find_volume+0x390>
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	e00a      	b.n	8006a7a <find_volume+0x3a6>
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	699a      	ldr	r2, [r3, #24]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	4413      	add	r3, r2
 8006a6e:	085a      	lsrs	r2, r3, #1
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a7a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006a86:	0a5b      	lsrs	r3, r3, #9
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d201      	bcs.n	8006a90 <find_volume+0x3bc>
 8006a8c:	230d      	movs	r3, #13
 8006a8e:	e06a      	b.n	8006b66 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	f04f 32ff 	mov.w	r2, #4294967295
 8006a96:	615a      	str	r2, [r3, #20]
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	695a      	ldr	r2, [r3, #20]
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	2280      	movs	r2, #128	; 0x80
 8006aa4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006aa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d149      	bne.n	8006b42 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	3334      	adds	r3, #52	; 0x34
 8006ab2:	3330      	adds	r3, #48	; 0x30
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe fbbd 	bl	8005234 <ld_word>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d140      	bne.n	8006b42 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ac8:	f7fe fe96 	bl	80057f8 <move_window>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d137      	bne.n	8006b42 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	3334      	adds	r3, #52	; 0x34
 8006adc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fba7 	bl	8005234 <ld_word>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d127      	bne.n	8006b42 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	3334      	adds	r3, #52	; 0x34
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fbb4 	bl	8005264 <ld_dword>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <find_volume+0x49c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d11e      	bne.n	8006b42 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	3334      	adds	r3, #52	; 0x34
 8006b08:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe fba9 	bl	8005264 <ld_dword>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <find_volume+0x4a0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d113      	bne.n	8006b42 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	3334      	adds	r3, #52	; 0x34
 8006b1e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe fb9e 	bl	8005264 <ld_dword>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	3334      	adds	r3, #52	; 0x34
 8006b32:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fb94 	bl	8005264 <ld_dword>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006b48:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <find_volume+0x4a4>)
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <find_volume+0x4a4>)
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <find_volume+0x4a4>)
 8006b58:	881a      	ldrh	r2, [r3, #0]
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006b5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b60:	f7fe fde2 	bl	8005728 <clear_lock>
#endif
	return FR_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3758      	adds	r7, #88	; 0x58
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	41615252 	.word	0x41615252
 8006b74:	61417272 	.word	0x61417272
 8006b78:	2000009c 	.word	0x2000009c

08006b7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006b86:	2309      	movs	r3, #9
 8006b88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d02e      	beq.n	8006bee <validate+0x72>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d02a      	beq.n	8006bee <validate+0x72>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d025      	beq.n	8006bee <validate+0x72>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	889a      	ldrh	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d11e      	bne.n	8006bee <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fc3d 	bl	8005434 <lock_fs>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d014      	beq.n	8006bea <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fa96 	bl	80050f8 <disk_status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <validate+0x60>
				res = FR_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
 8006bda:	e008      	b.n	8006bee <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fc3c 	bl	8005460 <unlock_fs>
 8006be8:	e001      	b.n	8006bee <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8006bea:	230f      	movs	r3, #15
 8006bec:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <validate+0x7e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	e000      	b.n	8006bfc <validate+0x80>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	6013      	str	r3, [r2, #0]
	return res;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c1e:	f107 0310 	add.w	r3, r7, #16
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fcbb 	bl	800659e <get_ldnumber>
 8006c28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da01      	bge.n	8006c34 <f_mount+0x28>
 8006c30:	230b      	movs	r3, #11
 8006c32:	e048      	b.n	8006cc6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c34:	4a26      	ldr	r2, [pc, #152]	; (8006cd0 <f_mount+0xc4>)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00f      	beq.n	8006c64 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006c44:	69b8      	ldr	r0, [r7, #24]
 8006c46:	f7fe fd6f 	bl	8005728 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fe4b 	bl	80078ea <ff_del_syncobj>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <f_mount+0x52>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e033      	b.n	8006cc6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00f      	beq.n	8006c8a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	330c      	adds	r3, #12
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f000 fe15 	bl	80078aa <ff_cre_syncobj>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <f_mount+0x7e>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e01d      	b.n	8006cc6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4910      	ldr	r1, [pc, #64]	; (8006cd0 <f_mount+0xc4>)
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <f_mount+0x94>
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <f_mount+0x98>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e010      	b.n	8006cc6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ca4:	f107 010c 	add.w	r1, r7, #12
 8006ca8:	f107 0308 	add.w	r3, r7, #8
 8006cac:	2200      	movs	r2, #0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fd10 	bl	80066d4 <find_volume>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	7dfa      	ldrb	r2, [r7, #23]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fbce 	bl	8005460 <unlock_fs>
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000098 	.word	0x20000098

08006cd4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b098      	sub	sp, #96	; 0x60
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <f_open+0x18>
 8006ce8:	2309      	movs	r3, #9
 8006cea:	e1b4      	b.n	8007056 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006cf4:	79fa      	ldrb	r2, [r7, #7]
 8006cf6:	f107 0110 	add.w	r1, r7, #16
 8006cfa:	f107 0308 	add.w	r3, r7, #8
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fce8 	bl	80066d4 <find_volume>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f040 8191 	bne.w	8007036 <f_open+0x362>
		dj.obj.fs = fs;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	f107 0314 	add.w	r3, r7, #20
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fbcb 	bl	80064bc <follow_path>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11a      	bne.n	8006d6a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d38:	b25b      	sxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da03      	bge.n	8006d46 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d3e:	2306      	movs	r3, #6
 8006d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d44:	e011      	b.n	8006d6a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	f023 0301 	bic.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fb9a 	bl	8005498 <chk_lock>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	f003 031c 	and.w	r3, r3, #28
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d07f      	beq.n	8006e74 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d017      	beq.n	8006dac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d10e      	bne.n	8006da2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d84:	f7fe fbe4 	bl	8005550 <enq_lock>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <f_open+0xc8>
 8006d8e:	f107 0314 	add.w	r3, r7, #20
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff facb 	bl	800632e <dir_register>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	e000      	b.n	8006d9e <f_open+0xca>
 8006d9c:	2312      	movs	r3, #18
 8006d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	f043 0308 	orr.w	r3, r3, #8
 8006da8:	71fb      	strb	r3, [r7, #7]
 8006daa:	e010      	b.n	8006dce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006dac:	7ebb      	ldrb	r3, [r7, #26]
 8006dae:	f003 0311 	and.w	r3, r3, #17
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <f_open+0xea>
					res = FR_DENIED;
 8006db6:	2307      	movs	r3, #7
 8006db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006dbc:	e007      	b.n	8006dce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <f_open+0xfa>
 8006dc8:	2308      	movs	r3, #8
 8006dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d168      	bne.n	8006ea8 <f_open+0x1d4>
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d063      	beq.n	8006ea8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006de0:	f003 fdd0 	bl	800a984 <get_fattime>
 8006de4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	330e      	adds	r3, #14
 8006dea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fa77 	bl	80052e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df4:	3316      	adds	r3, #22
 8006df6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fa71 	bl	80052e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	330b      	adds	r3, #11
 8006e02:	2220      	movs	r2, #32
 8006e04:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff f9fa 	bl	8006206 <ld_clust>
 8006e12:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fa12 	bl	8006244 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	331c      	adds	r3, #28
 8006e24:	2100      	movs	r1, #0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe fa5a 	bl	80052e0 <st_dword>
					fs->wflag = 1;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d037      	beq.n	8006ea8 <f_open+0x1d4>
						dw = fs->winsect;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006e3e:	f107 0314 	add.w	r3, r7, #20
 8006e42:	2200      	movs	r2, #0
 8006e44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe ff25 	bl	8005c96 <remove_chain>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006e52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d126      	bne.n	8006ea8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fcca 	bl	80057f8 <move_window>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	611a      	str	r2, [r3, #16]
 8006e72:	e019      	b.n	8006ea8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d115      	bne.n	8006ea8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e7c:	7ebb      	ldrb	r3, [r7, #26]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006e86:	2304      	movs	r3, #4
 8006e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e8c:	e00c      	b.n	8006ea8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006e8e:	79fb      	ldrb	r3, [r7, #7]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d007      	beq.n	8006ea8 <f_open+0x1d4>
 8006e98:	7ebb      	ldrb	r3, [r7, #26]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <f_open+0x1d4>
						res = FR_DENIED;
 8006ea2:	2307      	movs	r3, #7
 8006ea4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d128      	bne.n	8006f02 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	f023 0301 	bic.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bf14      	ite	ne
 8006eda:	2301      	movne	r3, #1
 8006edc:	2300      	moveq	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f107 0314 	add.w	r3, r7, #20
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fb53 	bl	8005594 <inc_lock>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <f_open+0x22e>
 8006efc:	2302      	movs	r3, #2
 8006efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 8095 	bne.w	8007036 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff f977 	bl	8006206 <ld_clust>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	331c      	adds	r3, #28
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe f99e 	bl	8005264 <ld_dword>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	88da      	ldrh	r2, [r3, #6]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	79fa      	ldrb	r2, [r7, #7]
 8006f46:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3330      	adds	r3, #48	; 0x30
 8006f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fa08 	bl	800537a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d060      	beq.n	8007036 <f_open+0x362>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d05c      	beq.n	8007036 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	895b      	ldrh	r3, [r3, #10]
 8006f88:	025b      	lsls	r3, r3, #9
 8006f8a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	657b      	str	r3, [r7, #84]	; 0x54
 8006f98:	e016      	b.n	8006fc8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fce5 	bl	800596e <get_fat>
 8006fa4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d802      	bhi.n	8006fb2 <f_open+0x2de>
 8006fac:	2302      	movs	r3, #2
 8006fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d102      	bne.n	8006fc0 <f_open+0x2ec>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8006fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d103      	bne.n	8006fd8 <f_open+0x304>
 8006fd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d8e0      	bhi.n	8006f9a <f_open+0x2c6>
				}
				fp->clust = clst;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fdc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d127      	bne.n	8007036 <f_open+0x362>
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d022      	beq.n	8007036 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fc9b 	bl	8005930 <clust2sect>
 8006ffa:	6478      	str	r0, [r7, #68]	; 0x44
 8006ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <f_open+0x336>
						res = FR_INT_ERR;
 8007002:	2302      	movs	r3, #2
 8007004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007008:	e015      	b.n	8007036 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800700a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800700c:	0a5a      	lsrs	r2, r3, #9
 800700e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	7858      	ldrb	r0, [r3, #1]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	2301      	movs	r3, #1
 8007026:	f7fe f8a7 	bl	8005178 <disk_read>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <f_open+0x362>
 8007030:	2301      	movs	r3, #1
 8007032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <f_open+0x370>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fa07 	bl	8005460 <unlock_fs>
 8007052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007056:	4618      	mov	r0, r3
 8007058:	3760      	adds	r7, #96	; 0x60
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b08e      	sub	sp, #56	; 0x38
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f107 0214 	add.w	r2, r7, #20
 800707c:	4611      	mov	r1, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fd7c 	bl	8006b7c <validate>
 8007084:	4603      	mov	r3, r0
 8007086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800708a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <f_read+0x44>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	7d5b      	ldrb	r3, [r3, #21]
 8007096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800709a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <f_read+0x58>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80070a8:	4611      	mov	r1, r2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe f9d8 	bl	8005460 <unlock_fs>
 80070b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070b4:	e13d      	b.n	8007332 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	7d1b      	ldrb	r3, [r3, #20]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <f_read+0x72>
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2107      	movs	r1, #7
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe f9ca 	bl	8005460 <unlock_fs>
 80070cc:	2307      	movs	r3, #7
 80070ce:	e130      	b.n	8007332 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	f240 811c 	bls.w	800731e <f_read+0x2c0>
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80070ea:	e118      	b.n	800731e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f040 80e4 	bne.w	80072c2 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	0a5b      	lsrs	r3, r3, #9
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	8952      	ldrh	r2, [r2, #10]
 8007104:	3a01      	subs	r2, #1
 8007106:	4013      	ands	r3, r2
 8007108:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d139      	bne.n	8007184 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	633b      	str	r3, [r7, #48]	; 0x30
 800711e:	e013      	b.n	8007148 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	4619      	mov	r1, r3
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7fe feae 	bl	8005e90 <clmt_clust>
 8007134:	6338      	str	r0, [r7, #48]	; 0x30
 8007136:	e007      	b.n	8007148 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7fe fc14 	bl	800596e <get_fat>
 8007146:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2b01      	cmp	r3, #1
 800714c:	d809      	bhi.n	8007162 <f_read+0x104>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2202      	movs	r2, #2
 8007152:	755a      	strb	r2, [r3, #21]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2102      	movs	r1, #2
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe f981 	bl	8005460 <unlock_fs>
 800715e:	2302      	movs	r3, #2
 8007160:	e0e7      	b.n	8007332 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d109      	bne.n	800717e <f_read+0x120>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	755a      	strb	r2, [r3, #21]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2101      	movs	r1, #1
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe f973 	bl	8005460 <unlock_fs>
 800717a:	2301      	movs	r3, #1
 800717c:	e0d9      	b.n	8007332 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007182:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f7fe fbcf 	bl	8005930 <clust2sect>
 8007192:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <f_read+0x150>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2202      	movs	r2, #2
 800719e:	755a      	strb	r2, [r3, #21]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2102      	movs	r1, #2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe f95b 	bl	8005460 <unlock_fs>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e0c1      	b.n	8007332 <f_read+0x2d4>
			sect += csect;
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0a5b      	lsrs	r3, r3, #9
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d03e      	beq.n	8007240 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	4413      	add	r3, r2
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	8952      	ldrh	r2, [r2, #10]
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d905      	bls.n	80071dc <f_read+0x17e>
					cc = fs->csize - csect;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	895b      	ldrh	r3, [r3, #10]
 80071d4:	461a      	mov	r2, r3
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	7858      	ldrb	r0, [r3, #1]
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071e6:	f7fd ffc7 	bl	8005178 <disk_read>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <f_read+0x1a6>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	755a      	strb	r2, [r3, #21]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2101      	movs	r1, #1
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe f930 	bl	8005460 <unlock_fs>
 8007200:	2301      	movs	r3, #1
 8007202:	e096      	b.n	8007332 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	7d1b      	ldrb	r3, [r3, #20]
 8007208:	b25b      	sxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	da14      	bge.n	8007238 <f_read+0x1da>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007218:	429a      	cmp	r2, r3
 800721a:	d90d      	bls.n	8007238 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1a      	ldr	r2, [r3, #32]
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	025b      	lsls	r3, r3, #9
 8007226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007228:	18d0      	adds	r0, r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3330      	adds	r3, #48	; 0x30
 800722e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007232:	4619      	mov	r1, r3
 8007234:	f7fe f880 	bl	8005338 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	025b      	lsls	r3, r3, #9
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800723e:	e05a      	b.n	80072f6 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	d038      	beq.n	80072bc <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	7d1b      	ldrb	r3, [r3, #20]
 800724e:	b25b      	sxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	da1d      	bge.n	8007290 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	7858      	ldrb	r0, [r3, #1]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	2301      	movs	r3, #1
 8007264:	f7fd ffa8 	bl	80051b8 <disk_write>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d009      	beq.n	8007282 <f_read+0x224>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	755a      	strb	r2, [r3, #21]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2101      	movs	r1, #1
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe f8f1 	bl	8005460 <unlock_fs>
 800727e:	2301      	movs	r3, #1
 8007280:	e057      	b.n	8007332 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	7d1b      	ldrb	r3, [r3, #20]
 8007286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	7858      	ldrb	r0, [r3, #1]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800729a:	2301      	movs	r3, #1
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	f7fd ff6b 	bl	8005178 <disk_read>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d009      	beq.n	80072bc <f_read+0x25e>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	755a      	strb	r2, [r3, #21]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2101      	movs	r1, #1
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe f8d4 	bl	8005460 <unlock_fs>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e03a      	b.n	8007332 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d901      	bls.n	80072dc <f_read+0x27e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	4413      	add	r3, r2
 80072ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ee:	4619      	mov	r1, r3
 80072f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f2:	f7fe f821 	bl	8005338 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80072f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	4413      	add	r3, r2
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	441a      	add	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	619a      	str	r2, [r3, #24]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	441a      	add	r2, r3
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	f47f aee3 	bne.w	80070ec <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe f898 	bl	8005460 <unlock_fs>
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3738      	adds	r7, #56	; 0x38
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b08c      	sub	sp, #48	; 0x30
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f107 0210 	add.w	r2, r7, #16
 8007358:	4611      	mov	r1, r2
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fc0e 	bl	8006b7c <validate>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800736a:	2b00      	cmp	r3, #0
 800736c:	d107      	bne.n	800737e <f_write+0x44>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	7d5b      	ldrb	r3, [r3, #21]
 8007372:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <f_write+0x58>
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe f86a 	bl	8005460 <unlock_fs>
 800738c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007390:	e173      	b.n	800767a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	7d1b      	ldrb	r3, [r3, #20]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <f_write+0x72>
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2107      	movs	r1, #7
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe f85c 	bl	8005460 <unlock_fs>
 80073a8:	2307      	movs	r3, #7
 80073aa:	e166      	b.n	800767a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	441a      	add	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	f080 814b 	bcs.w	8007654 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	43db      	mvns	r3, r3
 80073c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80073c6:	e145      	b.n	8007654 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f040 8101 	bne.w	80075d8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	0a5b      	lsrs	r3, r3, #9
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	8952      	ldrh	r2, [r2, #10]
 80073e0:	3a01      	subs	r2, #1
 80073e2:	4013      	ands	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d14d      	bne.n	8007488 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10c      	bne.n	800740e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11a      	bne.n	8007436 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe fcab 	bl	8005d60 <create_chain>
 800740a:	62b8      	str	r0, [r7, #40]	; 0x28
 800740c:	e013      	b.n	8007436 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	4619      	mov	r1, r3
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7fe fd37 	bl	8005e90 <clmt_clust>
 8007422:	62b8      	str	r0, [r7, #40]	; 0x28
 8007424:	e007      	b.n	8007436 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7fe fc96 	bl	8005d60 <create_chain>
 8007434:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8110 	beq.w	800765e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	2b01      	cmp	r3, #1
 8007442:	d109      	bne.n	8007458 <f_write+0x11e>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2202      	movs	r2, #2
 8007448:	755a      	strb	r2, [r3, #21]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2102      	movs	r1, #2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe f806 	bl	8005460 <unlock_fs>
 8007454:	2302      	movs	r3, #2
 8007456:	e110      	b.n	800767a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d109      	bne.n	8007474 <f_write+0x13a>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	755a      	strb	r2, [r3, #21]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f7fd fff8 	bl	8005460 <unlock_fs>
 8007470:	2301      	movs	r3, #1
 8007472:	e102      	b.n	800767a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007478:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <f_write+0x14e>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007486:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	7d1b      	ldrb	r3, [r3, #20]
 800748c:	b25b      	sxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	da1d      	bge.n	80074ce <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	7858      	ldrb	r0, [r3, #1]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	2301      	movs	r3, #1
 80074a2:	f7fd fe89 	bl	80051b8 <disk_write>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <f_write+0x186>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	755a      	strb	r2, [r3, #21]
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2101      	movs	r1, #1
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fd ffd2 	bl	8005460 <unlock_fs>
 80074bc:	2301      	movs	r3, #1
 80074be:	e0dc      	b.n	800767a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	7d1b      	ldrb	r3, [r3, #20]
 80074c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7fe fa2a 	bl	8005930 <clust2sect>
 80074dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <f_write+0x1be>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2202      	movs	r2, #2
 80074e8:	755a      	strb	r2, [r3, #21]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2102      	movs	r1, #2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fd ffb6 	bl	8005460 <unlock_fs>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e0c0      	b.n	800767a <f_write+0x340>
			sect += csect;
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	4413      	add	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	0a5b      	lsrs	r3, r3, #9
 8007504:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d041      	beq.n	8007590 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	4413      	add	r3, r2
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	8952      	ldrh	r2, [r2, #10]
 8007516:	4293      	cmp	r3, r2
 8007518:	d905      	bls.n	8007526 <f_write+0x1ec>
					cc = fs->csize - csect;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	895b      	ldrh	r3, [r3, #10]
 800751e:	461a      	mov	r2, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	7858      	ldrb	r0, [r3, #1]
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	69f9      	ldr	r1, [r7, #28]
 8007530:	f7fd fe42 	bl	80051b8 <disk_write>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <f_write+0x214>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	755a      	strb	r2, [r3, #21]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2101      	movs	r1, #1
 8007544:	4618      	mov	r0, r3
 8007546:	f7fd ff8b 	bl	8005460 <unlock_fs>
 800754a:	2301      	movs	r3, #1
 800754c:	e095      	b.n	800767a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1a      	ldr	r2, [r3, #32]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	6a3a      	ldr	r2, [r7, #32]
 8007558:	429a      	cmp	r2, r3
 800755a:	d915      	bls.n	8007588 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	025b      	lsls	r3, r3, #9
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007574:	4619      	mov	r1, r3
 8007576:	f7fd fedf 	bl	8005338 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	7d1b      	ldrb	r3, [r3, #20]
 800757e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007582:	b2da      	uxtb	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	025b      	lsls	r3, r3, #9
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800758e:	e044      	b.n	800761a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	429a      	cmp	r2, r3
 8007598:	d01b      	beq.n	80075d2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d215      	bcs.n	80075d2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	7858      	ldrb	r0, [r3, #1]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075b0:	2301      	movs	r3, #1
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	f7fd fde0 	bl	8005178 <disk_read>
 80075b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	755a      	strb	r2, [r3, #21]
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2101      	movs	r1, #1
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fd ff49 	bl	8005460 <unlock_fs>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e053      	b.n	800767a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80075e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d901      	bls.n	80075f2 <f_write+0x2b8>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007600:	4413      	add	r3, r2
 8007602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007604:	69f9      	ldr	r1, [r7, #28]
 8007606:	4618      	mov	r0, r3
 8007608:	f7fd fe96 	bl	8005338 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	7d1b      	ldrb	r3, [r3, #20]
 8007610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007614:	b2da      	uxtb	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	4413      	add	r3, r2
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	441a      	add	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	619a      	str	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	429a      	cmp	r2, r3
 8007638:	bf38      	it	cc
 800763a:	461a      	movcc	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	60da      	str	r2, [r3, #12]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	441a      	add	r2, r3
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f47f aeb6 	bne.w	80073c8 <f_write+0x8e>
 800765c:	e000      	b.n	8007660 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800765e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	7d1b      	ldrb	r3, [r3, #20]
 8007664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007668:	b2da      	uxtb	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f7fd fef4 	bl	8005460 <unlock_fs>
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3730      	adds	r7, #48	; 0x30
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f107 0208 	add.w	r2, r7, #8
 8007690:	4611      	mov	r1, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff fa72 	bl	8006b7c <validate>
 8007698:	4603      	mov	r3, r0
 800769a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d16d      	bne.n	800777e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	7d1b      	ldrb	r3, [r3, #20]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d067      	beq.n	800777e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7d1b      	ldrb	r3, [r3, #20]
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da1a      	bge.n	80076ee <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	7858      	ldrb	r0, [r3, #1]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1a      	ldr	r2, [r3, #32]
 80076c6:	2301      	movs	r3, #1
 80076c8:	f7fd fd76 	bl	80051b8 <disk_write>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d006      	beq.n	80076e0 <f_sync+0x5e>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2101      	movs	r1, #1
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fd fec2 	bl	8005460 <unlock_fs>
 80076dc:	2301      	movs	r3, #1
 80076de:	e055      	b.n	800778c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	7d1b      	ldrb	r3, [r3, #20]
 80076e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80076ee:	f003 f949 	bl	800a984 <get_fattime>
 80076f2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	4619      	mov	r1, r3
 80076fc:	4610      	mov	r0, r2
 80076fe:	f7fe f87b 	bl	80057f8 <move_window>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d138      	bne.n	800777e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	330b      	adds	r3, #11
 8007716:	781a      	ldrb	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	330b      	adds	r3, #11
 800771c:	f042 0220 	orr.w	r2, r2, #32
 8007720:	b2d2      	uxtb	r2, r2
 8007722:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6818      	ldr	r0, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	461a      	mov	r2, r3
 800772e:	68f9      	ldr	r1, [r7, #12]
 8007730:	f7fe fd88 	bl	8006244 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f103 021c 	add.w	r2, r3, #28
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7fd fdcd 	bl	80052e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3316      	adds	r3, #22
 800774a:	6939      	ldr	r1, [r7, #16]
 800774c:	4618      	mov	r0, r3
 800774e:	f7fd fdc7 	bl	80052e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3312      	adds	r3, #18
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f7fd fda6 	bl	80052aa <st_word>
					fs->wflag = 1;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2201      	movs	r2, #1
 8007762:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe f874 	bl	8005854 <sync_fs>
 800776c:	4603      	mov	r3, r0
 800776e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	7d1b      	ldrb	r3, [r3, #20]
 8007774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007778:	b2da      	uxtb	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	7dfa      	ldrb	r2, [r7, #23]
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f7fd fe6b 	bl	8005460 <unlock_fs>
 800778a:	7dfb      	ldrb	r3, [r7, #23]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff70 	bl	8007682 <f_sync>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11d      	bne.n	80077e8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f107 0208 	add.w	r2, r7, #8
 80077b2:	4611      	mov	r1, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff f9e1 	bl	8006b7c <validate>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d111      	bne.n	80077e8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fd ff71 	bl	80056b0 <dec_lock>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd fe3c 	bl	8005460 <unlock_fs>
#endif
		}
	}
	return res;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007802:	2301      	movs	r3, #1
 8007804:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800780a:	4b1f      	ldr	r3, [pc, #124]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 800780c:	7a5b      	ldrb	r3, [r3, #9]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d131      	bne.n	8007878 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007814:	4b1c      	ldr	r3, [pc, #112]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 8007816:	7a5b      	ldrb	r3, [r3, #9]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 800781e:	2100      	movs	r1, #0
 8007820:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007822:	4b19      	ldr	r3, [pc, #100]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 8007824:	7a5b      	ldrb	r3, [r3, #9]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	4a17      	ldr	r2, [pc, #92]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007832:	4b15      	ldr	r3, [pc, #84]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 8007834:	7a5b      	ldrb	r3, [r3, #9]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	4b13      	ldr	r3, [pc, #76]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 800783c:	4413      	add	r3, r2
 800783e:	79fa      	ldrb	r2, [r7, #7]
 8007840:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007842:	4b11      	ldr	r3, [pc, #68]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 8007844:	7a5b      	ldrb	r3, [r3, #9]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	b2d1      	uxtb	r1, r2
 800784c:	4a0e      	ldr	r2, [pc, #56]	; (8007888 <FATFS_LinkDriverEx+0x94>)
 800784e:	7251      	strb	r1, [r2, #9]
 8007850:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007852:	7dbb      	ldrb	r3, [r7, #22]
 8007854:	3330      	adds	r3, #48	; 0x30
 8007856:	b2da      	uxtb	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	3301      	adds	r3, #1
 8007860:	223a      	movs	r2, #58	; 0x3a
 8007862:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	3302      	adds	r3, #2
 8007868:	222f      	movs	r2, #47	; 0x2f
 800786a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3303      	adds	r3, #3
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
}
 800787a:	4618      	mov	r0, r3
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	200000c0 	.word	0x200000c0

0800788c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007896:	2200      	movs	r2, #0
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff ffaa 	bl	80077f4 <FATFS_LinkDriverEx>
 80078a0:	4603      	mov	r3, r0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b086      	sub	sp, #24
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	4603      	mov	r3, r0
 80078b2:	6039      	str	r1, [r7, #0]
 80078b4:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80078be:	f107 030c 	add.w	r3, r7, #12
 80078c2:	2101      	movs	r1, #1
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f8e9 	bl	8007a9c <osSemaphoreCreate>
 80078ca:	4602      	mov	r2, r0
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bf14      	ite	ne
 80078d8:	2301      	movne	r3, #1
 80078da:	2300      	moveq	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	617b      	str	r3, [r7, #20]

    return ret;
 80078e0:	697b      	ldr	r3, [r7, #20]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f988 	bl	8007c08 <osSemaphoreDelete>
#endif
    return 1;
 80078f8:	2301      	movs	r3, #1
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800790e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8f4 	bl	8007b00 <osSemaphoreWait>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800791e:	2301      	movs	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f931 	bl	8007b9c <osSemaphoreRelease>
#endif
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	4603      	mov	r3, r0
 800794a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007954:	2b84      	cmp	r3, #132	; 0x84
 8007956:	d005      	beq.n	8007964 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007958:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	3303      	adds	r3, #3
 8007962:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007964:	68fb      	ldr	r3, [r7, #12]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007978:	f3ef 8305 	mrs	r3, IPSR
 800797c:	607b      	str	r3, [r7, #4]
  return(result);
 800797e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007980:	2b00      	cmp	r3, #0
 8007982:	bf14      	ite	ne
 8007984:	2301      	movne	r3, #1
 8007986:	2300      	moveq	r3, #0
 8007988:	b2db      	uxtb	r3, r3
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800799a:	f001 fc89 	bl	80092b0 <vTaskStartScheduler>
  
  return osOK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80079a8:	f002 f8b6 	bl	8009b18 <xTaskGetSchedulerState>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <osKernelRunning+0x12>
    return 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e000      	b.n	80079b8 <osKernelRunning+0x14>
  else
    return 1;
 80079b6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}

080079bc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80079c0:	f7ff ffd7 	bl	8007972 <inHandlerMode>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80079ca:	f001 fd95 	bl	80094f8 <xTaskGetTickCountFromISR>
 80079ce:	4603      	mov	r3, r0
 80079d0:	e002      	b.n	80079d8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80079d2:	f001 fd81 	bl	80094d8 <xTaskGetTickCount>
 80079d6:	4603      	mov	r3, r0
  }
}
 80079d8:	4618      	mov	r0, r3
 80079da:	bd80      	pop	{r7, pc}

080079dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80079dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079de:	b089      	sub	sp, #36	; 0x24
 80079e0:	af04      	add	r7, sp, #16
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d020      	beq.n	8007a30 <osThreadCreate+0x54>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01c      	beq.n	8007a30 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685c      	ldr	r4, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681d      	ldr	r5, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691e      	ldr	r6, [r3, #16]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff ff9a 	bl	8007942 <makeFreeRtosPriority>
 8007a0e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a18:	9202      	str	r2, [sp, #8]
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	9100      	str	r1, [sp, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	4632      	mov	r2, r6
 8007a22:	4629      	mov	r1, r5
 8007a24:	4620      	mov	r0, r4
 8007a26:	f001 f9d5 	bl	8008dd4 <xTaskCreateStatic>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e01c      	b.n	8007a6a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685c      	ldr	r4, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a3c:	b29e      	uxth	r6, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7ff ff7c 	bl	8007942 <makeFreeRtosPriority>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	f107 030c 	add.w	r3, r7, #12
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	9200      	str	r2, [sp, #0]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	4632      	mov	r2, r6
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f001 fa17 	bl	8008e8e <xTaskCreate>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d001      	beq.n	8007a6a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <osDelay+0x16>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	e000      	b.n	8007a8c <osDelay+0x18>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 fbdb 	bl	8009248 <vTaskDelay>
  
  return osOK;
 8007a92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af02      	add	r7, sp, #8
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00f      	beq.n	8007ace <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10a      	bne.n	8007aca <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2203      	movs	r2, #3
 8007aba:	9200      	str	r2, [sp, #0]
 8007abc:	2200      	movs	r2, #0
 8007abe:	2100      	movs	r1, #0
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	f000 faad 	bl	8008020 <xQueueGenericCreateStatic>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	e016      	b.n	8007af8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e014      	b.n	8007af8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d110      	bne.n	8007af6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	2001      	movs	r0, #1
 8007ada:	f000 fb19 	bl	8008110 <xQueueGenericCreate>
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <osSemaphoreCreate+0x56>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2100      	movs	r1, #0
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 fb69 	bl	80081c4 <xQueueGenericSend>
      return sema;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	e000      	b.n	8007af8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007af6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	e03a      	b.n	8007b8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b22:	d103      	bne.n	8007b2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	e009      	b.n	8007b40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d006      	beq.n	8007b40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <osSemaphoreWait+0x40>
      ticks = 1;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007b40:	f7ff ff17 	bl	8007972 <inHandlerMode>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d017      	beq.n	8007b7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	461a      	mov	r2, r3
 8007b50:	2100      	movs	r1, #0
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 ff48 	bl	80089e8 <xQueueReceiveFromISR>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d001      	beq.n	8007b62 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007b5e:	23ff      	movs	r3, #255	; 0xff
 8007b60:	e015      	b.n	8007b8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d011      	beq.n	8007b8c <osSemaphoreWait+0x8c>
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <osSemaphoreWait+0x98>)
 8007b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	e008      	b.n	8007b8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007b7a:	68f9      	ldr	r1, [r7, #12]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fe27 	bl	80087d0 <xQueueSemaphoreTake>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d001      	beq.n	8007b8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007b88:	23ff      	movs	r3, #255	; 0xff
 8007b8a:	e000      	b.n	8007b8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007bac:	f7ff fee1 	bl	8007972 <inHandlerMode>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d016      	beq.n	8007be4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007bb6:	f107 0308 	add.w	r3, r7, #8
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fc9a 	bl	80084f6 <xQueueGiveFromISR>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d001      	beq.n	8007bcc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007bc8:	23ff      	movs	r3, #255	; 0xff
 8007bca:	e017      	b.n	8007bfc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d013      	beq.n	8007bfa <osSemaphoreRelease+0x5e>
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <osSemaphoreRelease+0x68>)
 8007bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	e00a      	b.n	8007bfa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007be4:	2300      	movs	r3, #0
 8007be6:	2200      	movs	r2, #0
 8007be8:	2100      	movs	r1, #0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 faea 	bl	80081c4 <xQueueGenericSend>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d001      	beq.n	8007bfa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007bf6:	23ff      	movs	r3, #255	; 0xff
 8007bf8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007c10:	f7ff feaf 	bl	8007972 <inHandlerMode>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007c1a:	2382      	movs	r3, #130	; 0x82
 8007c1c:	e003      	b.n	8007c26 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 ff62 	bl	8008ae8 <vQueueDelete>

  return osOK; 
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007c2e:	b590      	push	{r4, r7, lr}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af02      	add	r7, sp, #8
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d011      	beq.n	8007c64 <osMessageCreate+0x36>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6859      	ldr	r1, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	2400      	movs	r4, #0
 8007c5a:	9400      	str	r4, [sp, #0]
 8007c5c:	f000 f9e0 	bl	8008020 <xQueueGenericCreateStatic>
 8007c60:	4603      	mov	r3, r0
 8007c62:	e008      	b.n	8007c76 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f000 fa4e 	bl	8008110 <xQueueGenericCreate>
 8007c74:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd90      	pop	{r4, r7, pc}
	...

08007c80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <osMessagePut+0x1e>
    ticks = 1;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007c9e:	f7ff fe68 	bl	8007972 <inHandlerMode>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d018      	beq.n	8007cda <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007ca8:	f107 0210 	add.w	r2, r7, #16
 8007cac:	f107 0108 	add.w	r1, r7, #8
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 fb84 	bl	80083c0 <xQueueGenericSendFromISR>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d001      	beq.n	8007cc2 <osMessagePut+0x42>
      return osErrorOS;
 8007cbe:	23ff      	movs	r3, #255	; 0xff
 8007cc0:	e018      	b.n	8007cf4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d014      	beq.n	8007cf2 <osMessagePut+0x72>
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <osMessagePut+0x7c>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	e00b      	b.n	8007cf2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007cda:	f107 0108 	add.w	r1, r7, #8
 8007cde:	2300      	movs	r3, #0
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fa6e 	bl	80081c4 <xQueueGenericSend>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d001      	beq.n	8007cf2 <osMessagePut+0x72>
      return osErrorOS;
 8007cee:	23ff      	movs	r3, #255	; 0xff
 8007cf0:	e000      	b.n	8007cf4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	e000ed04 	.word	0xe000ed04

08007d00 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007d00:	b590      	push	{r4, r7, lr}
 8007d02:	b08b      	sub	sp, #44	; 0x2c
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10a      	bne.n	8007d30 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007d1a:	2380      	movs	r3, #128	; 0x80
 8007d1c:	617b      	str	r3, [r7, #20]
    return event;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	461c      	mov	r4, r3
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d2e:	e054      	b.n	8007dda <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3e:	d103      	bne.n	8007d48 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
 8007d46:	e009      	b.n	8007d5c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d006      	beq.n	8007d5c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <osMessageGet+0x5c>
      ticks = 1;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007d5c:	f7ff fe09 	bl	8007972 <inHandlerMode>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01c      	beq.n	8007da0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007d66:	f107 0220 	add.w	r2, r7, #32
 8007d6a:	f107 0314 	add.w	r3, r7, #20
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	68b8      	ldr	r0, [r7, #8]
 8007d74:	f000 fe38 	bl	80089e8 <xQueueReceiveFromISR>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d102      	bne.n	8007d84 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007d7e:	2310      	movs	r3, #16
 8007d80:	617b      	str	r3, [r7, #20]
 8007d82:	e001      	b.n	8007d88 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d01d      	beq.n	8007dca <osMessageGet+0xca>
 8007d8e:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <osMessageGet+0xe4>)
 8007d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	e014      	b.n	8007dca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007da0:	f107 0314 	add.w	r3, r7, #20
 8007da4:	3304      	adds	r3, #4
 8007da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da8:	4619      	mov	r1, r3
 8007daa:	68b8      	ldr	r0, [r7, #8]
 8007dac:	f000 fc30 	bl	8008610 <xQueueReceive>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007db6:	2310      	movs	r3, #16
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	e006      	b.n	8007dca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <osMessageGet+0xc6>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e000      	b.n	8007dc8 <osMessageGet+0xc8>
 8007dc6:	2340      	movs	r3, #64	; 0x40
 8007dc8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	461c      	mov	r4, r3
 8007dce:	f107 0314 	add.w	r3, r7, #20
 8007dd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	372c      	adds	r7, #44	; 0x2c
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	e000ed04 	.word	0xe000ed04

08007de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f103 0208 	add.w	r2, r3, #8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f103 0208 	add.w	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f103 0208 	add.w	r2, r3, #8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	601a      	str	r2, [r3, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d103      	bne.n	8007eaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e00c      	b.n	8007ec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3308      	adds	r3, #8
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	e002      	b.n	8007eb8 <vListInsert+0x2e>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d2f6      	bcs.n	8007eb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	683a      	ldr	r2, [r7, #0]
 8007ede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	601a      	str	r2, [r3, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	6892      	ldr	r2, [r2, #8]
 8007f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6852      	ldr	r2, [r2, #4]
 8007f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d103      	bne.n	8007f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	1e5a      	subs	r2, r3, #1
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f7a:	f002 f91b 	bl	800a1b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f8a:	fb01 f303 	mul.w	r3, r1, r3
 8007f8e:	441a      	add	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	3b01      	subs	r3, #1
 8007fac:	68f9      	ldr	r1, [r7, #12]
 8007fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb0:	fb01 f303 	mul.w	r3, r1, r3
 8007fb4:	441a      	add	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	22ff      	movs	r2, #255	; 0xff
 8007fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d114      	bne.n	8007ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01a      	beq.n	800800e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3310      	adds	r3, #16
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fbdb 	bl	8009798 <xTaskRemoveFromEventList>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d012      	beq.n	800800e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <xQueueGenericReset+0xcc>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	e009      	b.n	800800e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fef2 	bl	8007de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3324      	adds	r3, #36	; 0x24
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff feed 	bl	8007de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800800e:	f002 f901 	bl	800a214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008012:	2301      	movs	r3, #1
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08e      	sub	sp, #56	; 0x38
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <xQueueGenericCreateStatic+0x52>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <xQueueGenericCreateStatic+0x56>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueGenericCreateStatic+0x58>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	623b      	str	r3, [r7, #32]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <xQueueGenericCreateStatic+0x7e>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <xQueueGenericCreateStatic+0x82>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <xQueueGenericCreateStatic+0x84>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	61fb      	str	r3, [r7, #28]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080be:	2348      	movs	r3, #72	; 0x48
 80080c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b48      	cmp	r3, #72	; 0x48
 80080c6:	d00a      	beq.n	80080de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	61bb      	str	r3, [r7, #24]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00d      	beq.n	8008106 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	4613      	mov	r3, r2
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f83f 	bl	8008184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008108:	4618      	mov	r0, r3
 800810a:	3730      	adds	r7, #48	; 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08a      	sub	sp, #40	; 0x28
 8008114:	af02      	add	r7, sp, #8
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	613b      	str	r3, [r7, #16]
}
 8008136:	bf00      	nop
 8008138:	e7fe      	b.n	8008138 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	3348      	adds	r3, #72	; 0x48
 8008148:	4618      	mov	r0, r3
 800814a:	f002 f955 	bl	800a3f8 <pvPortMalloc>
 800814e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d011      	beq.n	800817a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	3348      	adds	r3, #72	; 0x48
 800815e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008168:	79fa      	ldrb	r2, [r7, #7]
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	4613      	mov	r3, r2
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f805 	bl	8008184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800817a:	69bb      	ldr	r3, [r7, #24]
	}
 800817c:	4618      	mov	r0, r3
 800817e:	3720      	adds	r7, #32
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d103      	bne.n	80081a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e002      	b.n	80081a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081b2:	2101      	movs	r1, #1
 80081b4:	69b8      	ldr	r0, [r7, #24]
 80081b6:	f7ff fecb 	bl	8007f50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081ba:	bf00      	nop
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	; 0x38
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081d2:	2300      	movs	r3, #0
 80081d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xQueueGenericSend+0x32>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <xQueueGenericSend+0x40>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <xQueueGenericSend+0x44>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <xQueueGenericSend+0x46>
 8008208:	2300      	movs	r3, #0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <xQueueGenericSend+0x60>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d103      	bne.n	8008232 <xQueueGenericSend+0x6e>
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <xQueueGenericSend+0x72>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueGenericSend+0x74>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueGenericSend+0x8e>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008252:	f001 fc61 	bl	8009b18 <xTaskGetSchedulerState>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <xQueueGenericSend+0x9e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <xQueueGenericSend+0xa2>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <xQueueGenericSend+0xa4>
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xQueueGenericSend+0xbe>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	61fb      	str	r3, [r7, #28]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008282:	f001 ff97 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	429a      	cmp	r2, r3
 8008290:	d302      	bcc.n	8008298 <xQueueGenericSend+0xd4>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d129      	bne.n	80082ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800829e:	f000 fc5e 	bl	8008b5e <prvCopyDataToQueue>
 80082a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d010      	beq.n	80082ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	3324      	adds	r3, #36	; 0x24
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fa71 	bl	8009798 <xTaskRemoveFromEventList>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d013      	beq.n	80082e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082bc:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <xQueueGenericSend+0x1f8>)
 80082be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	e00a      	b.n	80082e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <xQueueGenericSend+0x1f8>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082e4:	f001 ff96 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e063      	b.n	80083b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d103      	bne.n	80082fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082f2:	f001 ff8f 	bl	800a214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e05c      	b.n	80083b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d106      	bne.n	800830e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008300:	f107 0314 	add.w	r3, r7, #20
 8008304:	4618      	mov	r0, r3
 8008306:	f001 faa9 	bl	800985c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800830a:	2301      	movs	r3, #1
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800830e:	f001 ff81 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008312:	f001 f837 	bl	8009384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008316:	f001 ff4d 	bl	800a1b4 <vPortEnterCritical>
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008320:	b25b      	sxtb	r3, r3
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008326:	d103      	bne.n	8008330 <xQueueGenericSend+0x16c>
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008336:	b25b      	sxtb	r3, r3
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833c:	d103      	bne.n	8008346 <xQueueGenericSend+0x182>
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008346:	f001 ff65 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800834a:	1d3a      	adds	r2, r7, #4
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fa98 	bl	8009888 <xTaskCheckForTimeOut>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d124      	bne.n	80083a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800835e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008360:	f000 fcf5 	bl	8008d4e <prvIsQueueFull>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d018      	beq.n	800839c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	3310      	adds	r3, #16
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f001 f9ec 	bl	8009750 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800837a:	f000 fc80 	bl	8008c7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800837e:	f001 f80f 	bl	80093a0 <xTaskResumeAll>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	f47f af7c 	bne.w	8008282 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <xQueueGenericSend+0x1f8>)
 800838c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	e772      	b.n	8008282 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839e:	f000 fc6e 	bl	8008c7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a2:	f000 fffd 	bl	80093a0 <xTaskResumeAll>
 80083a6:	e76c      	b.n	8008282 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083aa:	f000 fc68 	bl	8008c7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ae:	f000 fff7 	bl	80093a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3738      	adds	r7, #56	; 0x38
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b090      	sub	sp, #64	; 0x40
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10a      	bne.n	80083ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d103      	bne.n	80083fc <xQueueGenericSendFromISR+0x3c>
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <xQueueGenericSendFromISR+0x40>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <xQueueGenericSendFromISR+0x42>
 8008400:	2300      	movs	r3, #0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d103      	bne.n	800842a <xQueueGenericSendFromISR+0x6a>
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <xQueueGenericSendFromISR+0x6e>
 800842a:	2301      	movs	r3, #1
 800842c:	e000      	b.n	8008430 <xQueueGenericSendFromISR+0x70>
 800842e:	2300      	movs	r3, #0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	623b      	str	r3, [r7, #32]
}
 8008446:	bf00      	nop
 8008448:	e7fe      	b.n	8008448 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800844a:	f001 ff95 	bl	800a378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800844e:	f3ef 8211 	mrs	r2, BASEPRI
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	61fa      	str	r2, [r7, #28]
 8008464:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008466:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008468:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	429a      	cmp	r2, r3
 8008474:	d302      	bcc.n	800847c <xQueueGenericSendFromISR+0xbc>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b02      	cmp	r3, #2
 800847a:	d12f      	bne.n	80084dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008492:	f000 fb64 	bl	8008b5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008496:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d112      	bne.n	80084c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d016      	beq.n	80084d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 f973 	bl	8009798 <xTaskRemoveFromEventList>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00e      	beq.n	80084d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e007      	b.n	80084d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084ca:	3301      	adds	r3, #1
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	b25a      	sxtb	r2, r3
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084d6:	2301      	movs	r3, #1
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084da:	e001      	b.n	80084e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3740      	adds	r7, #64	; 0x40
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b08e      	sub	sp, #56	; 0x38
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	2b00      	cmp	r3, #0
 8008508:	d10a      	bne.n	8008520 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	623b      	str	r3, [r7, #32]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <xQueueGiveFromISR+0x48>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	61fb      	str	r3, [r7, #28]
}
 800853a:	bf00      	nop
 800853c:	e7fe      	b.n	800853c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <xQueueGiveFromISR+0x58>
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <xQueueGiveFromISR+0x5c>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <xQueueGiveFromISR+0x5e>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xQueueGiveFromISR+0x78>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	61bb      	str	r3, [r7, #24]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800856e:	f001 ff03 	bl	800a378 <vPortValidateInterruptPriority>
	__asm volatile
 8008572:	f3ef 8211 	mrs	r2, BASEPRI
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	617a      	str	r2, [r7, #20]
 8008588:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800858a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800859a:	429a      	cmp	r2, r3
 800859c:	d22b      	bcs.n	80085f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b8:	d112      	bne.n	80085e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	3324      	adds	r3, #36	; 0x24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 f8e6 	bl	8009798 <xTaskRemoveFromEventList>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00e      	beq.n	80085f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e007      	b.n	80085f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e4:	3301      	adds	r3, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	b25a      	sxtb	r2, r3
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085f0:	2301      	movs	r3, #1
 80085f2:	637b      	str	r3, [r7, #52]	; 0x34
 80085f4:	e001      	b.n	80085fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f383 8811 	msr	BASEPRI, r3
}
 8008604:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008608:	4618      	mov	r0, r3
 800860a:	3738      	adds	r7, #56	; 0x38
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08c      	sub	sp, #48	; 0x30
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800861c:	2300      	movs	r3, #0
 800861e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10a      	bne.n	8008640 <xQueueReceive+0x30>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	623b      	str	r3, [r7, #32]
}
 800863c:	bf00      	nop
 800863e:	e7fe      	b.n	800863e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d103      	bne.n	800864e <xQueueReceive+0x3e>
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <xQueueReceive+0x42>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <xQueueReceive+0x44>
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xQueueReceive+0x5e>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	61fb      	str	r3, [r7, #28]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800866e:	f001 fa53 	bl	8009b18 <xTaskGetSchedulerState>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <xQueueReceive+0x6e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <xQueueReceive+0x72>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <xQueueReceive+0x74>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10a      	bne.n	800869e <xQueueReceive+0x8e>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	61bb      	str	r3, [r7, #24]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800869e:	f001 fd89 	bl	800a1b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01f      	beq.n	80086ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086ae:	68b9      	ldr	r1, [r7, #8]
 80086b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b2:	f000 fabe 	bl	8008c32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00f      	beq.n	80086e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	3310      	adds	r3, #16
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 f864 	bl	8009798 <xTaskRemoveFromEventList>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086d6:	4b3d      	ldr	r3, [pc, #244]	; (80087cc <xQueueReceive+0x1bc>)
 80086d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086e6:	f001 fd95 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e069      	b.n	80087c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d103      	bne.n	80086fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086f4:	f001 fd8e 	bl	800a214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086f8:	2300      	movs	r3, #0
 80086fa:	e062      	b.n	80087c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008702:	f107 0310 	add.w	r3, r7, #16
 8008706:	4618      	mov	r0, r3
 8008708:	f001 f8a8 	bl	800985c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008710:	f001 fd80 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008714:	f000 fe36 	bl	8009384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008718:	f001 fd4c 	bl	800a1b4 <vPortEnterCritical>
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008722:	b25b      	sxtb	r3, r3
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008728:	d103      	bne.n	8008732 <xQueueReceive+0x122>
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008738:	b25b      	sxtb	r3, r3
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d103      	bne.n	8008748 <xQueueReceive+0x138>
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008748:	f001 fd64 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800874c:	1d3a      	adds	r2, r7, #4
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f001 f897 	bl	8009888 <xTaskCheckForTimeOut>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d123      	bne.n	80087a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008762:	f000 fade 	bl	8008d22 <prvIsQueueEmpty>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d017      	beq.n	800879c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	3324      	adds	r3, #36	; 0x24
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f000 ffeb 	bl	8009750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800877a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800877c:	f000 fa7f 	bl	8008c7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008780:	f000 fe0e 	bl	80093a0 <xTaskResumeAll>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d189      	bne.n	800869e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800878a:	4b10      	ldr	r3, [pc, #64]	; (80087cc <xQueueReceive+0x1bc>)
 800878c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	e780      	b.n	800869e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800879c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800879e:	f000 fa6e 	bl	8008c7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087a2:	f000 fdfd 	bl	80093a0 <xTaskResumeAll>
 80087a6:	e77a      	b.n	800869e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087aa:	f000 fa68 	bl	8008c7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ae:	f000 fdf7 	bl	80093a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b4:	f000 fab5 	bl	8008d22 <prvIsQueueEmpty>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f43f af6f 	beq.w	800869e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3730      	adds	r7, #48	; 0x30
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	623b      	str	r3, [r7, #32]
}
 80087fe:	bf00      	nop
 8008800:	e7fe      	b.n	8008800 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	61fb      	str	r3, [r7, #28]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008820:	f001 f97a 	bl	8009b18 <xTaskGetSchedulerState>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d102      	bne.n	8008830 <xQueueSemaphoreTake+0x60>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <xQueueSemaphoreTake+0x64>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <xQueueSemaphoreTake+0x66>
 8008834:	2300      	movs	r3, #0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d10a      	bne.n	8008850 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	61bb      	str	r3, [r7, #24]
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008850:	f001 fcb0 	bl	800a1b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	2b00      	cmp	r3, #0
 800885e:	d024      	beq.n	80088aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	1e5a      	subs	r2, r3, #1
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008866:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008870:	f001 fafa 	bl	8009e68 <pvTaskIncrementMutexHeldCount>
 8008874:	4602      	mov	r2, r0
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00f      	beq.n	80088a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	3310      	adds	r3, #16
 8008886:	4618      	mov	r0, r3
 8008888:	f000 ff86 	bl	8009798 <xTaskRemoveFromEventList>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008892:	4b54      	ldr	r3, [pc, #336]	; (80089e4 <xQueueSemaphoreTake+0x214>)
 8008894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088a2:	f001 fcb7 	bl	800a214 <vPortExitCritical>
				return pdPASS;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e097      	b.n	80089da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d111      	bne.n	80088d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	617b      	str	r3, [r7, #20]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088cc:	f001 fca2 	bl	800a214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088d0:	2300      	movs	r3, #0
 80088d2:	e082      	b.n	80089da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088da:	f107 030c 	add.w	r3, r7, #12
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 ffbc 	bl	800985c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088e4:	2301      	movs	r3, #1
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088e8:	f001 fc94 	bl	800a214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ec:	f000 fd4a 	bl	8009384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088f0:	f001 fc60 	bl	800a1b4 <vPortEnterCritical>
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088fa:	b25b      	sxtb	r3, r3
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008900:	d103      	bne.n	800890a <xQueueSemaphoreTake+0x13a>
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008910:	b25b      	sxtb	r3, r3
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d103      	bne.n	8008920 <xQueueSemaphoreTake+0x150>
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008920:	f001 fc78 	bl	800a214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008924:	463a      	mov	r2, r7
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f000 ffab 	bl	8009888 <xTaskCheckForTimeOut>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d132      	bne.n	800899e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800893a:	f000 f9f2 	bl	8008d22 <prvIsQueueEmpty>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d026      	beq.n	8008992 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d109      	bne.n	8008960 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800894c:	f001 fc32 	bl	800a1b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	4618      	mov	r0, r3
 8008956:	f001 f8fd 	bl	8009b54 <xTaskPriorityInherit>
 800895a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800895c:	f001 fc5a 	bl	800a214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	3324      	adds	r3, #36	; 0x24
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fef1 	bl	8009750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800896e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008970:	f000 f985 	bl	8008c7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008974:	f000 fd14 	bl	80093a0 <xTaskResumeAll>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	f47f af68 	bne.w	8008850 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008980:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <xQueueSemaphoreTake+0x214>)
 8008982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	e75e      	b.n	8008850 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008994:	f000 f973 	bl	8008c7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008998:	f000 fd02 	bl	80093a0 <xTaskResumeAll>
 800899c:	e758      	b.n	8008850 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800899e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a0:	f000 f96d 	bl	8008c7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a4:	f000 fcfc 	bl	80093a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089aa:	f000 f9ba 	bl	8008d22 <prvIsQueueEmpty>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f43f af4d 	beq.w	8008850 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00d      	beq.n	80089d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80089bc:	f001 fbfa 	bl	800a1b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089c2:	f000 f8b4 	bl	8008b2e <prvGetDisinheritPriorityAfterTimeout>
 80089c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 f9bc 	bl	8009d4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80089d4:	f001 fc1e 	bl	800a214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3738      	adds	r7, #56	; 0x38
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	e000ed04 	.word	0xe000ed04

080089e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08e      	sub	sp, #56	; 0x38
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	623b      	str	r3, [r7, #32]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d103      	bne.n	8008a22 <xQueueReceiveFromISR+0x3a>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <xQueueReceiveFromISR+0x3e>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <xQueueReceiveFromISR+0x40>
 8008a26:	2300      	movs	r3, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	61fb      	str	r3, [r7, #28]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a42:	f001 fc99 	bl	800a378 <vPortValidateInterruptPriority>
	__asm volatile
 8008a46:	f3ef 8211 	mrs	r2, BASEPRI
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	61ba      	str	r2, [r7, #24]
 8008a5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d02f      	beq.n	8008ace <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a7c:	f000 f8d9 	bl	8008c32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	1e5a      	subs	r2, r3, #1
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a90:	d112      	bne.n	8008ab8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d016      	beq.n	8008ac8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	3310      	adds	r3, #16
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fe7a 	bl	8009798 <xTaskRemoveFromEventList>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00e      	beq.n	8008ac8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	e007      	b.n	8008ac8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008abc:	3301      	adds	r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	b25a      	sxtb	r2, r3
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
 8008acc:	e001      	b.n	8008ad2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f383 8811 	msr	BASEPRI, r3
}
 8008adc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3738      	adds	r7, #56	; 0x38
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <vQueueDelete+0x28>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	60bb      	str	r3, [r7, #8]
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f935 	bl	8008d80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d102      	bne.n	8008b26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fd35 	bl	800a590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b2e:	b480      	push	{r7}
 8008b30:	b085      	sub	sp, #20
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d006      	beq.n	8008b4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f1c3 0307 	rsb	r3, r3, #7
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	e001      	b.n	8008b50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b50:	68fb      	ldr	r3, [r7, #12]
	}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b086      	sub	sp, #24
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d14d      	bne.n	8008c20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f001 f859 	bl	8009c40 <xTaskPriorityDisinherit>
 8008b8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	609a      	str	r2, [r3, #8]
 8008b96:	e043      	b.n	8008c20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d119      	bne.n	8008bd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6858      	ldr	r0, [r3, #4]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	f002 fdd9 	bl	800b760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	441a      	add	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d32b      	bcc.n	8008c20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	605a      	str	r2, [r3, #4]
 8008bd0:	e026      	b.n	8008c20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68d8      	ldr	r0, [r3, #12]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	461a      	mov	r2, r3
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	f002 fdbf 	bl	800b760 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	425b      	negs	r3, r3
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d207      	bcs.n	8008c0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	425b      	negs	r3, r3
 8008c08:	441a      	add	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d105      	bne.n	8008c20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c28:	697b      	ldr	r3, [r7, #20]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d018      	beq.n	8008c76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4c:	441a      	add	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d303      	bcc.n	8008c66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68d9      	ldr	r1, [r3, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	461a      	mov	r2, r3
 8008c70:	6838      	ldr	r0, [r7, #0]
 8008c72:	f002 fd75 	bl	800b760 <memcpy>
	}
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c86:	f001 fa95 	bl	800a1b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c92:	e011      	b.n	8008cb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d012      	beq.n	8008cc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	3324      	adds	r3, #36	; 0x24
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fd79 	bl	8009798 <xTaskRemoveFromEventList>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cac:	f000 fe4e 	bl	800994c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dce9      	bgt.n	8008c94 <prvUnlockQueue+0x16>
 8008cc0:	e000      	b.n	8008cc4 <prvUnlockQueue+0x46>
					break;
 8008cc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	22ff      	movs	r2, #255	; 0xff
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ccc:	f001 faa2 	bl	800a214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cd0:	f001 fa70 	bl	800a1b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cdc:	e011      	b.n	8008d02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d012      	beq.n	8008d0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3310      	adds	r3, #16
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 fd54 	bl	8009798 <xTaskRemoveFromEventList>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cf6:	f000 fe29 	bl	800994c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	dce9      	bgt.n	8008cde <prvUnlockQueue+0x60>
 8008d0a:	e000      	b.n	8008d0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	22ff      	movs	r2, #255	; 0xff
 8008d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d16:	f001 fa7d 	bl	800a214 <vPortExitCritical>
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d2a:	f001 fa43 	bl	800a1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	e001      	b.n	8008d40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d40:	f001 fa68 	bl	800a214 <vPortExitCritical>

	return xReturn;
 8008d44:	68fb      	ldr	r3, [r7, #12]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d56:	f001 fa2d 	bl	800a1b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d102      	bne.n	8008d6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d66:	2301      	movs	r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]
 8008d6a:	e001      	b.n	8008d70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d70:	f001 fa50 	bl	800a214 <vPortExitCritical>

	return xReturn;
 8008d74:	68fb      	ldr	r3, [r7, #12]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	e016      	b.n	8008dbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008d8e:	4a10      	ldr	r2, [pc, #64]	; (8008dd0 <vQueueUnregisterQueue+0x50>)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	4413      	add	r3, r2
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d10b      	bne.n	8008db6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008d9e:	4a0c      	ldr	r2, [pc, #48]	; (8008dd0 <vQueueUnregisterQueue+0x50>)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2100      	movs	r1, #0
 8008da4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008da8:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <vQueueUnregisterQueue+0x50>)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	4413      	add	r3, r2
 8008db0:	2200      	movs	r2, #0
 8008db2:	605a      	str	r2, [r3, #4]
				break;
 8008db4:	e006      	b.n	8008dc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b07      	cmp	r3, #7
 8008dc0:	d9e5      	bls.n	8008d8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	200000cc 	.word	0x200000cc

08008dd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08e      	sub	sp, #56	; 0x38
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	623b      	str	r3, [r7, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xTaskCreateStatic+0x46>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61fb      	str	r3, [r7, #28]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e1a:	23b4      	movs	r3, #180	; 0xb4
 8008e1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2bb4      	cmp	r3, #180	; 0xb4
 8008e22:	d00a      	beq.n	8008e3a <xTaskCreateStatic+0x66>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	61bb      	str	r3, [r7, #24]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d01e      	beq.n	8008e80 <xTaskCreateStatic+0xac>
 8008e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01b      	beq.n	8008e80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	2202      	movs	r2, #2
 8008e56:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9303      	str	r3, [sp, #12]
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	9302      	str	r3, [sp, #8]
 8008e62:	f107 0314 	add.w	r3, r7, #20
 8008e66:	9301      	str	r3, [sp, #4]
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	68b9      	ldr	r1, [r7, #8]
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f850 	bl	8008f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e7a:	f000 f8eb 	bl	8009054 <prvAddNewTaskToReadyList>
 8008e7e:	e001      	b.n	8008e84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e84:	697b      	ldr	r3, [r7, #20]
	}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3728      	adds	r7, #40	; 0x28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b08c      	sub	sp, #48	; 0x30
 8008e92:	af04      	add	r7, sp, #16
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	603b      	str	r3, [r7, #0]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 faa8 	bl	800a3f8 <pvPortMalloc>
 8008ea8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00e      	beq.n	8008ece <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008eb0:	20b4      	movs	r0, #180	; 0xb4
 8008eb2:	f001 faa1 	bl	800a3f8 <pvPortMalloc>
 8008eb6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ec4:	e005      	b.n	8008ed2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f001 fb62 	bl	800a590 <vPortFree>
 8008ecc:	e001      	b.n	8008ed2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d017      	beq.n	8008f08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ee0:	88fa      	ldrh	r2, [r7, #6]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	9303      	str	r3, [sp, #12]
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f000 f80e 	bl	8008f18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008efc:	69f8      	ldr	r0, [r7, #28]
 8008efe:	f000 f8a9 	bl	8009054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f02:	2301      	movs	r3, #1
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	e002      	b.n	8008f0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f08:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
	}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f30:	3b01      	subs	r3, #1
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	f023 0307 	bic.w	r3, r3, #7
 8008f3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	617b      	str	r3, [r7, #20]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01f      	beq.n	8008fa6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f66:	2300      	movs	r3, #0
 8008f68:	61fb      	str	r3, [r7, #28]
 8008f6a:	e012      	b.n	8008f92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	7819      	ldrb	r1, [r3, #0]
 8008f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	3334      	adds	r3, #52	; 0x34
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d006      	beq.n	8008f9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	2b0f      	cmp	r3, #15
 8008f96:	d9e9      	bls.n	8008f6c <prvInitialiseNewTask+0x54>
 8008f98:	e000      	b.n	8008f9c <prvInitialiseNewTask+0x84>
			{
				break;
 8008f9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fa4:	e003      	b.n	8008fae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	2b06      	cmp	r3, #6
 8008fb2:	d901      	bls.n	8008fb8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fb4:	2306      	movs	r3, #6
 8008fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe ff2a 	bl	8007e28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	3318      	adds	r3, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe ff25 	bl	8007e28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	f1c3 0207 	rsb	r2, r3, #7
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	334c      	adds	r3, #76	; 0x4c
 8009008:	2260      	movs	r2, #96	; 0x60
 800900a:	2100      	movs	r1, #0
 800900c:	4618      	mov	r0, r3
 800900e:	f002 fbb5 	bl	800b77c <memset>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	4a0c      	ldr	r2, [pc, #48]	; (8009048 <prvInitialiseNewTask+0x130>)
 8009016:	651a      	str	r2, [r3, #80]	; 0x50
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	4a0c      	ldr	r2, [pc, #48]	; (800904c <prvInitialiseNewTask+0x134>)
 800901c:	655a      	str	r2, [r3, #84]	; 0x54
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	4a0b      	ldr	r2, [pc, #44]	; (8009050 <prvInitialiseNewTask+0x138>)
 8009022:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009024:	683a      	ldr	r2, [r7, #0]
 8009026:	68f9      	ldr	r1, [r7, #12]
 8009028:	69b8      	ldr	r0, [r7, #24]
 800902a:	f000 ff97 	bl	8009f5c <pxPortInitialiseStack>
 800902e:	4602      	mov	r2, r0
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009040:	bf00      	nop
 8009042:	3720      	adds	r7, #32
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	0800bb10 	.word	0x0800bb10
 800904c:	0800bb30 	.word	0x0800bb30
 8009050:	0800baf0 	.word	0x0800baf0

08009054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800905c:	f001 f8aa 	bl	800a1b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009060:	4b2a      	ldr	r3, [pc, #168]	; (800910c <prvAddNewTaskToReadyList+0xb8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a29      	ldr	r2, [pc, #164]	; (800910c <prvAddNewTaskToReadyList+0xb8>)
 8009068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800906a:	4b29      	ldr	r3, [pc, #164]	; (8009110 <prvAddNewTaskToReadyList+0xbc>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009072:	4a27      	ldr	r2, [pc, #156]	; (8009110 <prvAddNewTaskToReadyList+0xbc>)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009078:	4b24      	ldr	r3, [pc, #144]	; (800910c <prvAddNewTaskToReadyList+0xb8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d110      	bne.n	80090a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009080:	f000 fc88 	bl	8009994 <prvInitialiseTaskLists>
 8009084:	e00d      	b.n	80090a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009086:	4b23      	ldr	r3, [pc, #140]	; (8009114 <prvAddNewTaskToReadyList+0xc0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d109      	bne.n	80090a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800908e:	4b20      	ldr	r3, [pc, #128]	; (8009110 <prvAddNewTaskToReadyList+0xbc>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	429a      	cmp	r2, r3
 800909a:	d802      	bhi.n	80090a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800909c:	4a1c      	ldr	r2, [pc, #112]	; (8009110 <prvAddNewTaskToReadyList+0xbc>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090a2:	4b1d      	ldr	r3, [pc, #116]	; (8009118 <prvAddNewTaskToReadyList+0xc4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3301      	adds	r3, #1
 80090a8:	4a1b      	ldr	r2, [pc, #108]	; (8009118 <prvAddNewTaskToReadyList+0xc4>)
 80090aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b0:	2201      	movs	r2, #1
 80090b2:	409a      	lsls	r2, r3
 80090b4:	4b19      	ldr	r3, [pc, #100]	; (800911c <prvAddNewTaskToReadyList+0xc8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	4a18      	ldr	r2, [pc, #96]	; (800911c <prvAddNewTaskToReadyList+0xc8>)
 80090bc:	6013      	str	r3, [r2, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c2:	4613      	mov	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4a15      	ldr	r2, [pc, #84]	; (8009120 <prvAddNewTaskToReadyList+0xcc>)
 80090cc:	441a      	add	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7fe feb4 	bl	8007e42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090da:	f001 f89b 	bl	800a214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <prvAddNewTaskToReadyList+0xc0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00e      	beq.n	8009104 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090e6:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <prvAddNewTaskToReadyList+0xbc>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d207      	bcs.n	8009104 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090f4:	4b0b      	ldr	r3, [pc, #44]	; (8009124 <prvAddNewTaskToReadyList+0xd0>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	2000020c 	.word	0x2000020c
 8009110:	2000010c 	.word	0x2000010c
 8009114:	20000218 	.word	0x20000218
 8009118:	20000228 	.word	0x20000228
 800911c:	20000214 	.word	0x20000214
 8009120:	20000110 	.word	0x20000110
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009130:	f001 f840 	bl	800a1b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <vTaskDelete+0x18>
 800913a:	4b39      	ldr	r3, [pc, #228]	; (8009220 <vTaskDelete+0xf8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	e000      	b.n	8009142 <vTaskDelete+0x1a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3304      	adds	r3, #4
 8009148:	4618      	mov	r0, r3
 800914a:	f7fe fed7 	bl	8007efc <uxListRemove>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d115      	bne.n	8009180 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009158:	4932      	ldr	r1, [pc, #200]	; (8009224 <vTaskDelete+0xfc>)
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	440b      	add	r3, r1
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <vTaskDelete+0x58>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	2201      	movs	r2, #1
 8009170:	fa02 f303 	lsl.w	r3, r2, r3
 8009174:	43da      	mvns	r2, r3
 8009176:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <vTaskDelete+0x100>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4013      	ands	r3, r2
 800917c:	4a2a      	ldr	r2, [pc, #168]	; (8009228 <vTaskDelete+0x100>)
 800917e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3318      	adds	r3, #24
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe feb5 	bl	8007efc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009192:	4b26      	ldr	r3, [pc, #152]	; (800922c <vTaskDelete+0x104>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	4a24      	ldr	r2, [pc, #144]	; (800922c <vTaskDelete+0x104>)
 800919a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800919c:	4b20      	ldr	r3, [pc, #128]	; (8009220 <vTaskDelete+0xf8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d10b      	bne.n	80091be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4619      	mov	r1, r3
 80091ac:	4820      	ldr	r0, [pc, #128]	; (8009230 <vTaskDelete+0x108>)
 80091ae:	f7fe fe48 	bl	8007e42 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80091b2:	4b20      	ldr	r3, [pc, #128]	; (8009234 <vTaskDelete+0x10c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3301      	adds	r3, #1
 80091b8:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <vTaskDelete+0x10c>)
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	e009      	b.n	80091d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80091be:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <vTaskDelete+0x110>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <vTaskDelete+0x110>)
 80091c6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fc51 	bl	8009a70 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80091ce:	f000 fc83 	bl	8009ad8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80091d2:	f001 f81f 	bl	800a214 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80091d6:	4b19      	ldr	r3, [pc, #100]	; (800923c <vTaskDelete+0x114>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d01b      	beq.n	8009216 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80091de:	4b10      	ldr	r3, [pc, #64]	; (8009220 <vTaskDelete+0xf8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d116      	bne.n	8009216 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80091e8:	4b15      	ldr	r3, [pc, #84]	; (8009240 <vTaskDelete+0x118>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <vTaskDelete+0xde>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60bb      	str	r3, [r7, #8]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8009206:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <vTaskDelete+0x11c>)
 8009208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	2000010c 	.word	0x2000010c
 8009224:	20000110 	.word	0x20000110
 8009228:	20000214 	.word	0x20000214
 800922c:	20000228 	.word	0x20000228
 8009230:	200001e0 	.word	0x200001e0
 8009234:	200001f4 	.word	0x200001f4
 8009238:	2000020c 	.word	0x2000020c
 800923c:	20000218 	.word	0x20000218
 8009240:	20000234 	.word	0x20000234
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d017      	beq.n	800928a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800925a:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <vTaskDelay+0x60>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <vTaskDelay+0x30>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60bb      	str	r3, [r7, #8]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009278:	f000 f884 	bl	8009384 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800927c:	2100      	movs	r1, #0
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fe06 	bl	8009e90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009284:	f000 f88c 	bl	80093a0 <xTaskResumeAll>
 8009288:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d107      	bne.n	80092a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009290:	4b06      	ldr	r3, [pc, #24]	; (80092ac <vTaskDelay+0x64>)
 8009292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009296:	601a      	str	r2, [r3, #0]
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20000234 	.word	0x20000234
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b08a      	sub	sp, #40	; 0x28
 80092b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092be:	463a      	mov	r2, r7
 80092c0:	1d39      	adds	r1, r7, #4
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 fb64 	bl	800a994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	9202      	str	r2, [sp, #8]
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	2300      	movs	r3, #0
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	2300      	movs	r3, #0
 80092dc:	460a      	mov	r2, r1
 80092de:	4921      	ldr	r1, [pc, #132]	; (8009364 <vTaskStartScheduler+0xb4>)
 80092e0:	4821      	ldr	r0, [pc, #132]	; (8009368 <vTaskStartScheduler+0xb8>)
 80092e2:	f7ff fd77 	bl	8008dd4 <xTaskCreateStatic>
 80092e6:	4603      	mov	r3, r0
 80092e8:	4a20      	ldr	r2, [pc, #128]	; (800936c <vTaskStartScheduler+0xbc>)
 80092ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092ec:	4b1f      	ldr	r3, [pc, #124]	; (800936c <vTaskStartScheduler+0xbc>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092f4:	2301      	movs	r3, #1
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	e001      	b.n	80092fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d11b      	bne.n	800933c <vTaskStartScheduler+0x8c>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	613b      	str	r3, [r7, #16]
}
 8009316:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009318:	4b15      	ldr	r3, [pc, #84]	; (8009370 <vTaskStartScheduler+0xc0>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	334c      	adds	r3, #76	; 0x4c
 800931e:	4a15      	ldr	r2, [pc, #84]	; (8009374 <vTaskStartScheduler+0xc4>)
 8009320:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <vTaskStartScheduler+0xc8>)
 8009324:	f04f 32ff 	mov.w	r2, #4294967295
 8009328:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800932a:	4b14      	ldr	r3, [pc, #80]	; (800937c <vTaskStartScheduler+0xcc>)
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009330:	4b13      	ldr	r3, [pc, #76]	; (8009380 <vTaskStartScheduler+0xd0>)
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009336:	f000 fe9b 	bl	800a070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800933a:	e00e      	b.n	800935a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d10a      	bne.n	800935a <vTaskStartScheduler+0xaa>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60fb      	str	r3, [r7, #12]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <vTaskStartScheduler+0xa8>
}
 800935a:	bf00      	nop
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	0800b96c 	.word	0x0800b96c
 8009368:	08009965 	.word	0x08009965
 800936c:	20000230 	.word	0x20000230
 8009370:	2000010c 	.word	0x2000010c
 8009374:	20000014 	.word	0x20000014
 8009378:	2000022c 	.word	0x2000022c
 800937c:	20000218 	.word	0x20000218
 8009380:	20000210 	.word	0x20000210

08009384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009388:	4b04      	ldr	r3, [pc, #16]	; (800939c <vTaskSuspendAll+0x18>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3301      	adds	r3, #1
 800938e:	4a03      	ldr	r2, [pc, #12]	; (800939c <vTaskSuspendAll+0x18>)
 8009390:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009392:	bf00      	nop
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	20000234 	.word	0x20000234

080093a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093ae:	4b41      	ldr	r3, [pc, #260]	; (80094b4 <xTaskResumeAll+0x114>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <xTaskResumeAll+0x2c>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	603b      	str	r3, [r7, #0]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093cc:	f000 fef2 	bl	800a1b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093d0:	4b38      	ldr	r3, [pc, #224]	; (80094b4 <xTaskResumeAll+0x114>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	4a37      	ldr	r2, [pc, #220]	; (80094b4 <xTaskResumeAll+0x114>)
 80093d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093da:	4b36      	ldr	r3, [pc, #216]	; (80094b4 <xTaskResumeAll+0x114>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d161      	bne.n	80094a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093e2:	4b35      	ldr	r3, [pc, #212]	; (80094b8 <xTaskResumeAll+0x118>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d05d      	beq.n	80094a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093ea:	e02e      	b.n	800944a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ec:	4b33      	ldr	r3, [pc, #204]	; (80094bc <xTaskResumeAll+0x11c>)
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3318      	adds	r3, #24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fd7f 	bl	8007efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	3304      	adds	r3, #4
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fd7a 	bl	8007efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	2201      	movs	r2, #1
 800940e:	409a      	lsls	r2, r3
 8009410:	4b2b      	ldr	r3, [pc, #172]	; (80094c0 <xTaskResumeAll+0x120>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4313      	orrs	r3, r2
 8009416:	4a2a      	ldr	r2, [pc, #168]	; (80094c0 <xTaskResumeAll+0x120>)
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a27      	ldr	r2, [pc, #156]	; (80094c4 <xTaskResumeAll+0x124>)
 8009428:	441a      	add	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7fe fd06 	bl	8007e42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943a:	4b23      	ldr	r3, [pc, #140]	; (80094c8 <xTaskResumeAll+0x128>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009440:	429a      	cmp	r2, r3
 8009442:	d302      	bcc.n	800944a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009444:	4b21      	ldr	r3, [pc, #132]	; (80094cc <xTaskResumeAll+0x12c>)
 8009446:	2201      	movs	r2, #1
 8009448:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800944a:	4b1c      	ldr	r3, [pc, #112]	; (80094bc <xTaskResumeAll+0x11c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1cc      	bne.n	80093ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009458:	f000 fb3e 	bl	8009ad8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800945c:	4b1c      	ldr	r3, [pc, #112]	; (80094d0 <xTaskResumeAll+0x130>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d010      	beq.n	800948a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009468:	f000 f858 	bl	800951c <xTaskIncrementTick>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009472:	4b16      	ldr	r3, [pc, #88]	; (80094cc <xTaskResumeAll+0x12c>)
 8009474:	2201      	movs	r2, #1
 8009476:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3b01      	subs	r3, #1
 800947c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1f1      	bne.n	8009468 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009484:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <xTaskResumeAll+0x130>)
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800948a:	4b10      	ldr	r3, [pc, #64]	; (80094cc <xTaskResumeAll+0x12c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d009      	beq.n	80094a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <xTaskResumeAll+0x134>)
 8009498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094a6:	f000 feb5 	bl	800a214 <vPortExitCritical>

	return xAlreadyYielded;
 80094aa:	68bb      	ldr	r3, [r7, #8]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20000234 	.word	0x20000234
 80094b8:	2000020c 	.word	0x2000020c
 80094bc:	200001cc 	.word	0x200001cc
 80094c0:	20000214 	.word	0x20000214
 80094c4:	20000110 	.word	0x20000110
 80094c8:	2000010c 	.word	0x2000010c
 80094cc:	20000220 	.word	0x20000220
 80094d0:	2000021c 	.word	0x2000021c
 80094d4:	e000ed04 	.word	0xe000ed04

080094d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <xTaskGetTickCount+0x1c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094e4:	687b      	ldr	r3, [r7, #4]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	20000210 	.word	0x20000210

080094f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094fe:	f000 ff3b 	bl	800a378 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009502:	2300      	movs	r3, #0
 8009504:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009506:	4b04      	ldr	r3, [pc, #16]	; (8009518 <xTaskGetTickCountFromISR+0x20>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800950c:	683b      	ldr	r3, [r7, #0]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20000210 	.word	0x20000210

0800951c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009526:	4b4e      	ldr	r3, [pc, #312]	; (8009660 <xTaskIncrementTick+0x144>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f040 808e 	bne.w	800964c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009530:	4b4c      	ldr	r3, [pc, #304]	; (8009664 <xTaskIncrementTick+0x148>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3301      	adds	r3, #1
 8009536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009538:	4a4a      	ldr	r2, [pc, #296]	; (8009664 <xTaskIncrementTick+0x148>)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d120      	bne.n	8009586 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009544:	4b48      	ldr	r3, [pc, #288]	; (8009668 <xTaskIncrementTick+0x14c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <xTaskIncrementTick+0x48>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	603b      	str	r3, [r7, #0]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <xTaskIncrementTick+0x46>
 8009564:	4b40      	ldr	r3, [pc, #256]	; (8009668 <xTaskIncrementTick+0x14c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	4b40      	ldr	r3, [pc, #256]	; (800966c <xTaskIncrementTick+0x150>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a3e      	ldr	r2, [pc, #248]	; (8009668 <xTaskIncrementTick+0x14c>)
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	4a3e      	ldr	r2, [pc, #248]	; (800966c <xTaskIncrementTick+0x150>)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	4b3d      	ldr	r3, [pc, #244]	; (8009670 <xTaskIncrementTick+0x154>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	4a3c      	ldr	r2, [pc, #240]	; (8009670 <xTaskIncrementTick+0x154>)
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	f000 faa9 	bl	8009ad8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009586:	4b3b      	ldr	r3, [pc, #236]	; (8009674 <xTaskIncrementTick+0x158>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	d348      	bcc.n	8009622 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009590:	4b35      	ldr	r3, [pc, #212]	; (8009668 <xTaskIncrementTick+0x14c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d104      	bne.n	80095a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959a:	4b36      	ldr	r3, [pc, #216]	; (8009674 <xTaskIncrementTick+0x158>)
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	601a      	str	r2, [r3, #0]
					break;
 80095a2:	e03e      	b.n	8009622 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a4:	4b30      	ldr	r3, [pc, #192]	; (8009668 <xTaskIncrementTick+0x14c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d203      	bcs.n	80095c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095bc:	4a2d      	ldr	r2, [pc, #180]	; (8009674 <xTaskIncrementTick+0x158>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095c2:	e02e      	b.n	8009622 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3304      	adds	r3, #4
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fc97 	bl	8007efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	3318      	adds	r3, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fc8e 	bl	8007efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	2201      	movs	r2, #1
 80095e6:	409a      	lsls	r2, r3
 80095e8:	4b23      	ldr	r3, [pc, #140]	; (8009678 <xTaskIncrementTick+0x15c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	4a22      	ldr	r2, [pc, #136]	; (8009678 <xTaskIncrementTick+0x15c>)
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4a1f      	ldr	r2, [pc, #124]	; (800967c <xTaskIncrementTick+0x160>)
 8009600:	441a      	add	r2, r3
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fe fc1a 	bl	8007e42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009612:	4b1b      	ldr	r3, [pc, #108]	; (8009680 <xTaskIncrementTick+0x164>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009618:	429a      	cmp	r2, r3
 800961a:	d3b9      	bcc.n	8009590 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009620:	e7b6      	b.n	8009590 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009622:	4b17      	ldr	r3, [pc, #92]	; (8009680 <xTaskIncrementTick+0x164>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009628:	4914      	ldr	r1, [pc, #80]	; (800967c <xTaskIncrementTick+0x160>)
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d901      	bls.n	800963e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800963a:	2301      	movs	r3, #1
 800963c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800963e:	4b11      	ldr	r3, [pc, #68]	; (8009684 <xTaskIncrementTick+0x168>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d007      	beq.n	8009656 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009646:	2301      	movs	r3, #1
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	e004      	b.n	8009656 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800964c:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <xTaskIncrementTick+0x16c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	4a0d      	ldr	r2, [pc, #52]	; (8009688 <xTaskIncrementTick+0x16c>)
 8009654:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009656:	697b      	ldr	r3, [r7, #20]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20000234 	.word	0x20000234
 8009664:	20000210 	.word	0x20000210
 8009668:	200001c4 	.word	0x200001c4
 800966c:	200001c8 	.word	0x200001c8
 8009670:	20000224 	.word	0x20000224
 8009674:	2000022c 	.word	0x2000022c
 8009678:	20000214 	.word	0x20000214
 800967c:	20000110 	.word	0x20000110
 8009680:	2000010c 	.word	0x2000010c
 8009684:	20000220 	.word	0x20000220
 8009688:	2000021c 	.word	0x2000021c

0800968c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009692:	4b29      	ldr	r3, [pc, #164]	; (8009738 <vTaskSwitchContext+0xac>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800969a:	4b28      	ldr	r3, [pc, #160]	; (800973c <vTaskSwitchContext+0xb0>)
 800969c:	2201      	movs	r2, #1
 800969e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096a0:	e044      	b.n	800972c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80096a2:	4b26      	ldr	r3, [pc, #152]	; (800973c <vTaskSwitchContext+0xb0>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a8:	4b25      	ldr	r3, [pc, #148]	; (8009740 <vTaskSwitchContext+0xb4>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	fab3 f383 	clz	r3, r3
 80096b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80096b6:	7afb      	ldrb	r3, [r7, #11]
 80096b8:	f1c3 031f 	rsb	r3, r3, #31
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	4921      	ldr	r1, [pc, #132]	; (8009744 <vTaskSwitchContext+0xb8>)
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	440b      	add	r3, r1
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	607b      	str	r3, [r7, #4]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <vTaskSwitchContext+0x5a>
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	4613      	mov	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4413      	add	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4a14      	ldr	r2, [pc, #80]	; (8009744 <vTaskSwitchContext+0xb8>)
 80096f4:	4413      	add	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3308      	adds	r3, #8
 800970a:	429a      	cmp	r2, r3
 800970c:	d104      	bne.n	8009718 <vTaskSwitchContext+0x8c>
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	605a      	str	r2, [r3, #4]
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	4a0a      	ldr	r2, [pc, #40]	; (8009748 <vTaskSwitchContext+0xbc>)
 8009720:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009722:	4b09      	ldr	r3, [pc, #36]	; (8009748 <vTaskSwitchContext+0xbc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	334c      	adds	r3, #76	; 0x4c
 8009728:	4a08      	ldr	r2, [pc, #32]	; (800974c <vTaskSwitchContext+0xc0>)
 800972a:	6013      	str	r3, [r2, #0]
}
 800972c:	bf00      	nop
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	20000234 	.word	0x20000234
 800973c:	20000220 	.word	0x20000220
 8009740:	20000214 	.word	0x20000214
 8009744:	20000110 	.word	0x20000110
 8009748:	2000010c 	.word	0x2000010c
 800974c:	20000014 	.word	0x20000014

08009750 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	60fb      	str	r3, [r7, #12]
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009776:	4b07      	ldr	r3, [pc, #28]	; (8009794 <vTaskPlaceOnEventList+0x44>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3318      	adds	r3, #24
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7fe fb83 	bl	8007e8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009784:	2101      	movs	r1, #1
 8009786:	6838      	ldr	r0, [r7, #0]
 8009788:	f000 fb82 	bl	8009e90 <prvAddCurrentTaskToDelayedList>
}
 800978c:	bf00      	nop
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	2000010c 	.word	0x2000010c

08009798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	60fb      	str	r3, [r7, #12]
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	3318      	adds	r3, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fb97 	bl	8007efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ce:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <xTaskRemoveFromEventList+0xac>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d11c      	bne.n	8009810 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3304      	adds	r3, #4
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe fb8e 	bl	8007efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e4:	2201      	movs	r2, #1
 80097e6:	409a      	lsls	r2, r3
 80097e8:	4b17      	ldr	r3, [pc, #92]	; (8009848 <xTaskRemoveFromEventList+0xb0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	4a16      	ldr	r2, [pc, #88]	; (8009848 <xTaskRemoveFromEventList+0xb0>)
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f6:	4613      	mov	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4a13      	ldr	r2, [pc, #76]	; (800984c <xTaskRemoveFromEventList+0xb4>)
 8009800:	441a      	add	r2, r3
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	3304      	adds	r3, #4
 8009806:	4619      	mov	r1, r3
 8009808:	4610      	mov	r0, r2
 800980a:	f7fe fb1a 	bl	8007e42 <vListInsertEnd>
 800980e:	e005      	b.n	800981c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	3318      	adds	r3, #24
 8009814:	4619      	mov	r1, r3
 8009816:	480e      	ldr	r0, [pc, #56]	; (8009850 <xTaskRemoveFromEventList+0xb8>)
 8009818:	f7fe fb13 	bl	8007e42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <xTaskRemoveFromEventList+0xbc>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009826:	429a      	cmp	r2, r3
 8009828:	d905      	bls.n	8009836 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800982a:	2301      	movs	r3, #1
 800982c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800982e:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <xTaskRemoveFromEventList+0xc0>)
 8009830:	2201      	movs	r2, #1
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	e001      	b.n	800983a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800983a:	697b      	ldr	r3, [r7, #20]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20000234 	.word	0x20000234
 8009848:	20000214 	.word	0x20000214
 800984c:	20000110 	.word	0x20000110
 8009850:	200001cc 	.word	0x200001cc
 8009854:	2000010c 	.word	0x2000010c
 8009858:	20000220 	.word	0x20000220

0800985c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009864:	4b06      	ldr	r3, [pc, #24]	; (8009880 <vTaskInternalSetTimeOutState+0x24>)
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <vTaskInternalSetTimeOutState+0x28>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	605a      	str	r2, [r3, #4]
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	20000224 	.word	0x20000224
 8009884:	20000210 	.word	0x20000210

08009888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b088      	sub	sp, #32
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	613b      	str	r3, [r7, #16]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	60fb      	str	r3, [r7, #12]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098ca:	f000 fc73 	bl	800a1b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098ce:	4b1d      	ldr	r3, [pc, #116]	; (8009944 <xTaskCheckForTimeOut+0xbc>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d102      	bne.n	80098ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	e023      	b.n	8009936 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	4b15      	ldr	r3, [pc, #84]	; (8009948 <xTaskCheckForTimeOut+0xc0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d007      	beq.n	800990a <xTaskCheckForTimeOut+0x82>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	429a      	cmp	r2, r3
 8009902:	d302      	bcc.n	800990a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	61fb      	str	r3, [r7, #28]
 8009908:	e015      	b.n	8009936 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	429a      	cmp	r2, r3
 8009912:	d20b      	bcs.n	800992c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	1ad2      	subs	r2, r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff ff9b 	bl	800985c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009926:	2300      	movs	r3, #0
 8009928:	61fb      	str	r3, [r7, #28]
 800992a:	e004      	b.n	8009936 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009932:	2301      	movs	r3, #1
 8009934:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009936:	f000 fc6d 	bl	800a214 <vPortExitCritical>

	return xReturn;
 800993a:	69fb      	ldr	r3, [r7, #28]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3720      	adds	r7, #32
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	20000210 	.word	0x20000210
 8009948:	20000224 	.word	0x20000224

0800994c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800994c:	b480      	push	{r7}
 800994e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009950:	4b03      	ldr	r3, [pc, #12]	; (8009960 <vTaskMissedYield+0x14>)
 8009952:	2201      	movs	r2, #1
 8009954:	601a      	str	r2, [r3, #0]
}
 8009956:	bf00      	nop
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	20000220 	.word	0x20000220

08009964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800996c:	f000 f852 	bl	8009a14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009970:	4b06      	ldr	r3, [pc, #24]	; (800998c <prvIdleTask+0x28>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d9f9      	bls.n	800996c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <prvIdleTask+0x2c>)
 800997a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009988:	e7f0      	b.n	800996c <prvIdleTask+0x8>
 800998a:	bf00      	nop
 800998c:	20000110 	.word	0x20000110
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800999a:	2300      	movs	r3, #0
 800999c:	607b      	str	r3, [r7, #4]
 800999e:	e00c      	b.n	80099ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4a12      	ldr	r2, [pc, #72]	; (80099f4 <prvInitialiseTaskLists+0x60>)
 80099ac:	4413      	add	r3, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fa1a 	bl	8007de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3301      	adds	r3, #1
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b06      	cmp	r3, #6
 80099be:	d9ef      	bls.n	80099a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099c0:	480d      	ldr	r0, [pc, #52]	; (80099f8 <prvInitialiseTaskLists+0x64>)
 80099c2:	f7fe fa11 	bl	8007de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099c6:	480d      	ldr	r0, [pc, #52]	; (80099fc <prvInitialiseTaskLists+0x68>)
 80099c8:	f7fe fa0e 	bl	8007de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099cc:	480c      	ldr	r0, [pc, #48]	; (8009a00 <prvInitialiseTaskLists+0x6c>)
 80099ce:	f7fe fa0b 	bl	8007de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099d2:	480c      	ldr	r0, [pc, #48]	; (8009a04 <prvInitialiseTaskLists+0x70>)
 80099d4:	f7fe fa08 	bl	8007de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099d8:	480b      	ldr	r0, [pc, #44]	; (8009a08 <prvInitialiseTaskLists+0x74>)
 80099da:	f7fe fa05 	bl	8007de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <prvInitialiseTaskLists+0x78>)
 80099e0:	4a05      	ldr	r2, [pc, #20]	; (80099f8 <prvInitialiseTaskLists+0x64>)
 80099e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <prvInitialiseTaskLists+0x7c>)
 80099e6:	4a05      	ldr	r2, [pc, #20]	; (80099fc <prvInitialiseTaskLists+0x68>)
 80099e8:	601a      	str	r2, [r3, #0]
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20000110 	.word	0x20000110
 80099f8:	2000019c 	.word	0x2000019c
 80099fc:	200001b0 	.word	0x200001b0
 8009a00:	200001cc 	.word	0x200001cc
 8009a04:	200001e0 	.word	0x200001e0
 8009a08:	200001f8 	.word	0x200001f8
 8009a0c:	200001c4 	.word	0x200001c4
 8009a10:	200001c8 	.word	0x200001c8

08009a14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a1a:	e019      	b.n	8009a50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a1c:	f000 fbca 	bl	800a1b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a20:	4b10      	ldr	r3, [pc, #64]	; (8009a64 <prvCheckTasksWaitingTermination+0x50>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	3304      	adds	r3, #4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fa65 	bl	8007efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a32:	4b0d      	ldr	r3, [pc, #52]	; (8009a68 <prvCheckTasksWaitingTermination+0x54>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	4a0b      	ldr	r2, [pc, #44]	; (8009a68 <prvCheckTasksWaitingTermination+0x54>)
 8009a3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a3c:	4b0b      	ldr	r3, [pc, #44]	; (8009a6c <prvCheckTasksWaitingTermination+0x58>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	4a0a      	ldr	r2, [pc, #40]	; (8009a6c <prvCheckTasksWaitingTermination+0x58>)
 8009a44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a46:	f000 fbe5 	bl	800a214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f810 	bl	8009a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a50:	4b06      	ldr	r3, [pc, #24]	; (8009a6c <prvCheckTasksWaitingTermination+0x58>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e1      	bne.n	8009a1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	200001e0 	.word	0x200001e0
 8009a68:	2000020c 	.word	0x2000020c
 8009a6c:	200001f4 	.word	0x200001f4

08009a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	334c      	adds	r3, #76	; 0x4c
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f001 fe93 	bl	800b7a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d108      	bne.n	8009a9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fd7d 	bl	800a590 <vPortFree>
				vPortFree( pxTCB );
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fd7a 	bl	800a590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a9c:	e018      	b.n	8009ad0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d103      	bne.n	8009ab0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fd71 	bl	800a590 <vPortFree>
	}
 8009aae:	e00f      	b.n	8009ad0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d00a      	beq.n	8009ad0 <prvDeleteTCB+0x60>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	60fb      	str	r3, [r7, #12]
}
 8009acc:	bf00      	nop
 8009ace:	e7fe      	b.n	8009ace <prvDeleteTCB+0x5e>
	}
 8009ad0:	bf00      	nop
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <prvResetNextTaskUnblockTime+0x38>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ae8:	4b0a      	ldr	r3, [pc, #40]	; (8009b14 <prvResetNextTaskUnblockTime+0x3c>)
 8009aea:	f04f 32ff 	mov.w	r2, #4294967295
 8009aee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009af0:	e008      	b.n	8009b04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af2:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <prvResetNextTaskUnblockTime+0x38>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	4a04      	ldr	r2, [pc, #16]	; (8009b14 <prvResetNextTaskUnblockTime+0x3c>)
 8009b02:	6013      	str	r3, [r2, #0]
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	200001c4 	.word	0x200001c4
 8009b14:	2000022c 	.word	0x2000022c

08009b18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <xTaskGetSchedulerState+0x34>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d102      	bne.n	8009b2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b26:	2301      	movs	r3, #1
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	e008      	b.n	8009b3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b2c:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <xTaskGetSchedulerState+0x38>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b34:	2302      	movs	r3, #2
 8009b36:	607b      	str	r3, [r7, #4]
 8009b38:	e001      	b.n	8009b3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b3e:	687b      	ldr	r3, [r7, #4]
	}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	20000218 	.word	0x20000218
 8009b50:	20000234 	.word	0x20000234

08009b54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d05e      	beq.n	8009c28 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6e:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <xTaskPriorityInherit+0xe0>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d24e      	bcs.n	8009c16 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	db06      	blt.n	8009b8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b80:	4b2c      	ldr	r3, [pc, #176]	; (8009c34 <xTaskPriorityInherit+0xe0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b86:	f1c3 0207 	rsb	r2, r3, #7
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6959      	ldr	r1, [r3, #20]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4a26      	ldr	r2, [pc, #152]	; (8009c38 <xTaskPriorityInherit+0xe4>)
 8009ba0:	4413      	add	r3, r2
 8009ba2:	4299      	cmp	r1, r3
 8009ba4:	d12f      	bne.n	8009c06 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe f9a6 	bl	8007efc <uxListRemove>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bba:	2201      	movs	r2, #1
 8009bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc0:	43da      	mvns	r2, r3
 8009bc2:	4b1e      	ldr	r3, [pc, #120]	; (8009c3c <xTaskPriorityInherit+0xe8>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	4a1c      	ldr	r2, [pc, #112]	; (8009c3c <xTaskPriorityInherit+0xe8>)
 8009bca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bcc:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <xTaskPriorityInherit+0xe0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	2201      	movs	r2, #1
 8009bdc:	409a      	lsls	r2, r3
 8009bde:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <xTaskPriorityInherit+0xe8>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	4a15      	ldr	r2, [pc, #84]	; (8009c3c <xTaskPriorityInherit+0xe8>)
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bec:	4613      	mov	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4a10      	ldr	r2, [pc, #64]	; (8009c38 <xTaskPriorityInherit+0xe4>)
 8009bf6:	441a      	add	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	f7fe f91f 	bl	8007e42 <vListInsertEnd>
 8009c04:	e004      	b.n	8009c10 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <xTaskPriorityInherit+0xe0>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e008      	b.n	8009c28 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c1a:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <xTaskPriorityInherit+0xe0>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d201      	bcs.n	8009c28 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c28:	68fb      	ldr	r3, [r7, #12]
	}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	2000010c 	.word	0x2000010c
 8009c38:	20000110 	.word	0x20000110
 8009c3c:	20000214 	.word	0x20000214

08009c40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d06e      	beq.n	8009d34 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c56:	4b3a      	ldr	r3, [pc, #232]	; (8009d40 <xTaskPriorityDisinherit+0x100>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d00a      	beq.n	8009c76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60fb      	str	r3, [r7, #12]
}
 8009c72:	bf00      	nop
 8009c74:	e7fe      	b.n	8009c74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	60bb      	str	r3, [r7, #8]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c98:	1e5a      	subs	r2, r3, #1
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d044      	beq.n	8009d34 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d140      	bne.n	8009d34 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe f920 	bl	8007efc <uxListRemove>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d115      	bne.n	8009cee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc6:	491f      	ldr	r1, [pc, #124]	; (8009d44 <xTaskPriorityDisinherit+0x104>)
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	440b      	add	r3, r1
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10a      	bne.n	8009cee <xTaskPriorityDisinherit+0xae>
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	2201      	movs	r2, #1
 8009cde:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce2:	43da      	mvns	r2, r3
 8009ce4:	4b18      	ldr	r3, [pc, #96]	; (8009d48 <xTaskPriorityDisinherit+0x108>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4013      	ands	r3, r2
 8009cea:	4a17      	ldr	r2, [pc, #92]	; (8009d48 <xTaskPriorityDisinherit+0x108>)
 8009cec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfa:	f1c3 0207 	rsb	r2, r3, #7
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d06:	2201      	movs	r2, #1
 8009d08:	409a      	lsls	r2, r3
 8009d0a:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <xTaskPriorityDisinherit+0x108>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	4a0d      	ldr	r2, [pc, #52]	; (8009d48 <xTaskPriorityDisinherit+0x108>)
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4a08      	ldr	r2, [pc, #32]	; (8009d44 <xTaskPriorityDisinherit+0x104>)
 8009d22:	441a      	add	r2, r3
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	3304      	adds	r3, #4
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	f7fe f889 	bl	8007e42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d34:	697b      	ldr	r3, [r7, #20]
	}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	2000010c 	.word	0x2000010c
 8009d44:	20000110 	.word	0x20000110
 8009d48:	20000214 	.word	0x20000214

08009d4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d077      	beq.n	8009e54 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10a      	bne.n	8009d82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	60fb      	str	r3, [r7, #12]
}
 8009d7e:	bf00      	nop
 8009d80:	e7fe      	b.n	8009d80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d902      	bls.n	8009d92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	61fb      	str	r3, [r7, #28]
 8009d90:	e002      	b.n	8009d98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d058      	beq.n	8009e54 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d153      	bne.n	8009e54 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009dac:	4b2b      	ldr	r3, [pc, #172]	; (8009e5c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	69ba      	ldr	r2, [r7, #24]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d10a      	bne.n	8009dcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	60bb      	str	r3, [r7, #8]
}
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	db04      	blt.n	8009dea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	f1c3 0207 	rsb	r2, r3, #7
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	6959      	ldr	r1, [r3, #20]
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	4613      	mov	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4a19      	ldr	r2, [pc, #100]	; (8009e60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009dfa:	4413      	add	r3, r2
 8009dfc:	4299      	cmp	r1, r3
 8009dfe:	d129      	bne.n	8009e54 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe f879 	bl	8007efc <uxListRemove>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10a      	bne.n	8009e26 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	2201      	movs	r2, #1
 8009e16:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1a:	43da      	mvns	r2, r3
 8009e1c:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4013      	ands	r3, r2
 8009e22:	4a10      	ldr	r2, [pc, #64]	; (8009e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	409a      	lsls	r2, r3
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	; (8009e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	4a0b      	ldr	r2, [pc, #44]	; (8009e64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4a06      	ldr	r2, [pc, #24]	; (8009e60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009e46:	441a      	add	r2, r3
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f7fd fff7 	bl	8007e42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e54:	bf00      	nop
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	2000010c 	.word	0x2000010c
 8009e60:	20000110 	.word	0x20000110
 8009e64:	20000214 	.word	0x20000214

08009e68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e74:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e7a:	3201      	adds	r2, #1
 8009e7c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009e7e:	4b03      	ldr	r3, [pc, #12]	; (8009e8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e80:	681b      	ldr	r3, [r3, #0]
	}
 8009e82:	4618      	mov	r0, r3
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	2000010c 	.word	0x2000010c

08009e90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e9a:	4b29      	ldr	r3, [pc, #164]	; (8009f40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ea0:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe f828 	bl	8007efc <uxListRemove>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10b      	bne.n	8009eca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009eb2:	4b24      	ldr	r3, [pc, #144]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	2201      	movs	r2, #1
 8009eba:	fa02 f303 	lsl.w	r3, r2, r3
 8009ebe:	43da      	mvns	r2, r3
 8009ec0:	4b21      	ldr	r3, [pc, #132]	; (8009f48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	4a20      	ldr	r2, [pc, #128]	; (8009f48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ec8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed0:	d10a      	bne.n	8009ee8 <prvAddCurrentTaskToDelayedList+0x58>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ed8:	4b1a      	ldr	r3, [pc, #104]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	481a      	ldr	r0, [pc, #104]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ee2:	f7fd ffae 	bl	8007e42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ee6:	e026      	b.n	8009f36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009ef0:	4b14      	ldr	r3, [pc, #80]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d209      	bcs.n	8009f14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f00:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	4b0f      	ldr	r3, [pc, #60]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f7fd ffbc 	bl	8007e8a <vListInsert>
}
 8009f12:	e010      	b.n	8009f36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f14:	4b0f      	ldr	r3, [pc, #60]	; (8009f54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4610      	mov	r0, r2
 8009f22:	f7fd ffb2 	bl	8007e8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f26:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d202      	bcs.n	8009f36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f30:	4a09      	ldr	r2, [pc, #36]	; (8009f58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	6013      	str	r3, [r2, #0]
}
 8009f36:	bf00      	nop
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000210 	.word	0x20000210
 8009f44:	2000010c 	.word	0x2000010c
 8009f48:	20000214 	.word	0x20000214
 8009f4c:	200001f8 	.word	0x200001f8
 8009f50:	200001c8 	.word	0x200001c8
 8009f54:	200001c4 	.word	0x200001c4
 8009f58:	2000022c 	.word	0x2000022c

08009f5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3b04      	subs	r3, #4
 8009f6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3b04      	subs	r3, #4
 8009f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f023 0201 	bic.w	r2, r3, #1
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3b04      	subs	r3, #4
 8009f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f8c:	4a0c      	ldr	r2, [pc, #48]	; (8009fc0 <pxPortInitialiseStack+0x64>)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3b14      	subs	r3, #20
 8009f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3b04      	subs	r3, #4
 8009fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f06f 0202 	mvn.w	r2, #2
 8009faa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3b20      	subs	r3, #32
 8009fb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	08009fc5 	.word	0x08009fc5

08009fc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fce:	4b12      	ldr	r3, [pc, #72]	; (800a018 <prvTaskExitError+0x54>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	d00a      	beq.n	8009fee <prvTaskExitError+0x2a>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	60fb      	str	r3, [r7, #12]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <prvTaskExitError+0x28>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	60bb      	str	r3, [r7, #8]
}
 800a000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a002:	bf00      	nop
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d0fc      	beq.n	800a004 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a00a:	bf00      	nop
 800a00c:	bf00      	nop
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr
 800a018:	20000008 	.word	0x20000008
 800a01c:	00000000 	.word	0x00000000

0800a020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <pxCurrentTCBConst2>)
 800a022:	6819      	ldr	r1, [r3, #0]
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02a:	f380 8809 	msr	PSP, r0
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8811 	msr	BASEPRI, r0
 800a03a:	4770      	bx	lr
 800a03c:	f3af 8000 	nop.w

0800a040 <pxCurrentTCBConst2>:
 800a040:	2000010c 	.word	0x2000010c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a048:	4808      	ldr	r0, [pc, #32]	; (800a06c <prvPortStartFirstTask+0x24>)
 800a04a:	6800      	ldr	r0, [r0, #0]
 800a04c:	6800      	ldr	r0, [r0, #0]
 800a04e:	f380 8808 	msr	MSP, r0
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	f380 8814 	msr	CONTROL, r0
 800a05a:	b662      	cpsie	i
 800a05c:	b661      	cpsie	f
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	df00      	svc	0
 800a068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a06a:	bf00      	nop
 800a06c:	e000ed08 	.word	0xe000ed08

0800a070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a076:	4b46      	ldr	r3, [pc, #280]	; (800a190 <xPortStartScheduler+0x120>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a46      	ldr	r2, [pc, #280]	; (800a194 <xPortStartScheduler+0x124>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10a      	bne.n	800a096 <xPortStartScheduler+0x26>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	613b      	str	r3, [r7, #16]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a096:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <xPortStartScheduler+0x120>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a3f      	ldr	r2, [pc, #252]	; (800a198 <xPortStartScheduler+0x128>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d10a      	bne.n	800a0b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	60fb      	str	r3, [r7, #12]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0b6:	4b39      	ldr	r3, [pc, #228]	; (800a19c <xPortStartScheduler+0x12c>)
 800a0b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	22ff      	movs	r2, #255	; 0xff
 800a0c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0d8:	b2da      	uxtb	r2, r3
 800a0da:	4b31      	ldr	r3, [pc, #196]	; (800a1a0 <xPortStartScheduler+0x130>)
 800a0dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0de:	4b31      	ldr	r3, [pc, #196]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0e4:	e009      	b.n	800a0fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0e6:	4b2f      	ldr	r3, [pc, #188]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	4a2d      	ldr	r2, [pc, #180]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a0ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a102:	2b80      	cmp	r3, #128	; 0x80
 800a104:	d0ef      	beq.n	800a0e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a106:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f1c3 0307 	rsb	r3, r3, #7
 800a10e:	2b04      	cmp	r3, #4
 800a110:	d00a      	beq.n	800a128 <xPortStartScheduler+0xb8>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60bb      	str	r3, [r7, #8]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a128:	4b1e      	ldr	r3, [pc, #120]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a132:	4b1c      	ldr	r3, [pc, #112]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a13a:	4a1a      	ldr	r2, [pc, #104]	; (800a1a4 <xPortStartScheduler+0x134>)
 800a13c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	b2da      	uxtb	r2, r3
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a146:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a14c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a14      	ldr	r2, [pc, #80]	; (800a1a8 <xPortStartScheduler+0x138>)
 800a158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a15c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a15e:	f000 f8dd 	bl	800a31c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a162:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <xPortStartScheduler+0x13c>)
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a168:	f000 f8fc 	bl	800a364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a16c:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <xPortStartScheduler+0x140>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a0f      	ldr	r2, [pc, #60]	; (800a1b0 <xPortStartScheduler+0x140>)
 800a172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a178:	f7ff ff66 	bl	800a048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a17c:	f7ff fa86 	bl	800968c <vTaskSwitchContext>
	prvTaskExitError();
 800a180:	f7ff ff20 	bl	8009fc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3718      	adds	r7, #24
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	e000ed00 	.word	0xe000ed00
 800a194:	410fc271 	.word	0x410fc271
 800a198:	410fc270 	.word	0x410fc270
 800a19c:	e000e400 	.word	0xe000e400
 800a1a0:	20000238 	.word	0x20000238
 800a1a4:	2000023c 	.word	0x2000023c
 800a1a8:	e000ed20 	.word	0xe000ed20
 800a1ac:	20000008 	.word	0x20000008
 800a1b0:	e000ef34 	.word	0xe000ef34

0800a1b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	607b      	str	r3, [r7, #4]
}
 800a1cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1ce:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <vPortEnterCritical+0x58>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	4a0d      	ldr	r2, [pc, #52]	; (800a20c <vPortEnterCritical+0x58>)
 800a1d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <vPortEnterCritical+0x58>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d10f      	bne.n	800a200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <vPortEnterCritical+0x5c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	603b      	str	r3, [r7, #0]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <vPortEnterCritical+0x4a>
	}
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20000008 	.word	0x20000008
 800a210:	e000ed04 	.word	0xe000ed04

0800a214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a21a:	4b12      	ldr	r3, [pc, #72]	; (800a264 <vPortExitCritical+0x50>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <vPortExitCritical+0x24>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	607b      	str	r3, [r7, #4]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <vPortExitCritical+0x50>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	4a09      	ldr	r2, [pc, #36]	; (800a264 <vPortExitCritical+0x50>)
 800a240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a242:	4b08      	ldr	r3, [pc, #32]	; (800a264 <vPortExitCritical+0x50>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d105      	bne.n	800a256 <vPortExitCritical+0x42>
 800a24a:	2300      	movs	r3, #0
 800a24c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	f383 8811 	msr	BASEPRI, r3
}
 800a254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000008 	.word	0x20000008
	...

0800a270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a270:	f3ef 8009 	mrs	r0, PSP
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <pxCurrentTCBConst>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	f01e 0f10 	tst.w	lr, #16
 800a280:	bf08      	it	eq
 800a282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	6010      	str	r0, [r2, #0]
 800a28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a294:	f380 8811 	msr	BASEPRI, r0
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f7ff f9f4 	bl	800968c <vTaskSwitchContext>
 800a2a4:	f04f 0000 	mov.w	r0, #0
 800a2a8:	f380 8811 	msr	BASEPRI, r0
 800a2ac:	bc09      	pop	{r0, r3}
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	6808      	ldr	r0, [r1, #0]
 800a2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b6:	f01e 0f10 	tst.w	lr, #16
 800a2ba:	bf08      	it	eq
 800a2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2c0:	f380 8809 	msr	PSP, r0
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst>:
 800a2d0:	2000010c 	.word	0x2000010c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
}
 800a2f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2f2:	f7ff f913 	bl	800951c <xTaskIncrementTick>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <SysTick_Handler+0x40>)
 800a2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	f383 8811 	msr	BASEPRI, r3
}
 800a30e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a326:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <vPortSetupTimerInterrupt+0x38>)
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <vPortSetupTimerInterrupt+0x3c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a0a      	ldr	r2, [pc, #40]	; (800a35c <vPortSetupTimerInterrupt+0x40>)
 800a332:	fba2 2303 	umull	r2, r3, r2, r3
 800a336:	099b      	lsrs	r3, r3, #6
 800a338:	4a09      	ldr	r2, [pc, #36]	; (800a360 <vPortSetupTimerInterrupt+0x44>)
 800a33a:	3b01      	subs	r3, #1
 800a33c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a33e:	4b04      	ldr	r3, [pc, #16]	; (800a350 <vPortSetupTimerInterrupt+0x34>)
 800a340:	2207      	movs	r2, #7
 800a342:	601a      	str	r2, [r3, #0]
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	e000e010 	.word	0xe000e010
 800a354:	e000e018 	.word	0xe000e018
 800a358:	20000010 	.word	0x20000010
 800a35c:	10624dd3 	.word	0x10624dd3
 800a360:	e000e014 	.word	0xe000e014

0800a364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a374 <vPortEnableVFP+0x10>
 800a368:	6801      	ldr	r1, [r0, #0]
 800a36a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a36e:	6001      	str	r1, [r0, #0]
 800a370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a372:	bf00      	nop
 800a374:	e000ed88 	.word	0xe000ed88

0800a378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a37e:	f3ef 8305 	mrs	r3, IPSR
 800a382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d914      	bls.n	800a3b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a38a:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <vPortValidateInterruptPriority+0x70>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a394:	4b15      	ldr	r3, [pc, #84]	; (800a3ec <vPortValidateInterruptPriority+0x74>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	7afa      	ldrb	r2, [r7, #11]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d20a      	bcs.n	800a3b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	607b      	str	r3, [r7, #4]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <vPortValidateInterruptPriority+0x78>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3bc:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <vPortValidateInterruptPriority+0x7c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d90a      	bls.n	800a3da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	603b      	str	r3, [r7, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <vPortValidateInterruptPriority+0x60>
	}
 800a3da:	bf00      	nop
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	e000e3f0 	.word	0xe000e3f0
 800a3ec:	20000238 	.word	0x20000238
 800a3f0:	e000ed0c 	.word	0xe000ed0c
 800a3f4:	2000023c 	.word	0x2000023c

0800a3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a404:	f7fe ffbe 	bl	8009384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a408:	4b5b      	ldr	r3, [pc, #364]	; (800a578 <pvPortMalloc+0x180>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a410:	f000 f920 	bl	800a654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a414:	4b59      	ldr	r3, [pc, #356]	; (800a57c <pvPortMalloc+0x184>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4013      	ands	r3, r2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f040 8093 	bne.w	800a548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01d      	beq.n	800a464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a428:	2208      	movs	r2, #8
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b00      	cmp	r3, #0
 800a438:	d014      	beq.n	800a464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f023 0307 	bic.w	r3, r3, #7
 800a440:	3308      	adds	r3, #8
 800a442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <pvPortMalloc+0x6c>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	617b      	str	r3, [r7, #20]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d06e      	beq.n	800a548 <pvPortMalloc+0x150>
 800a46a:	4b45      	ldr	r3, [pc, #276]	; (800a580 <pvPortMalloc+0x188>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d869      	bhi.n	800a548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a474:	4b43      	ldr	r3, [pc, #268]	; (800a584 <pvPortMalloc+0x18c>)
 800a476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a478:	4b42      	ldr	r3, [pc, #264]	; (800a584 <pvPortMalloc+0x18c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a47e:	e004      	b.n	800a48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d903      	bls.n	800a49c <pvPortMalloc+0xa4>
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1f1      	bne.n	800a480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a49c:	4b36      	ldr	r3, [pc, #216]	; (800a578 <pvPortMalloc+0x180>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d050      	beq.n	800a548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2208      	movs	r2, #8
 800a4ac:	4413      	add	r3, r2
 800a4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	685a      	ldr	r2, [r3, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	2308      	movs	r3, #8
 800a4c2:	005b      	lsls	r3, r3, #1
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d91f      	bls.n	800a508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f003 0307 	and.w	r3, r3, #7
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	613b      	str	r3, [r7, #16]
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	1ad2      	subs	r2, r2, r3
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a502:	69b8      	ldr	r0, [r7, #24]
 800a504:	f000 f908 	bl	800a718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a508:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <pvPortMalloc+0x188>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	4a1b      	ldr	r2, [pc, #108]	; (800a580 <pvPortMalloc+0x188>)
 800a514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a516:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <pvPortMalloc+0x188>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	4b1b      	ldr	r3, [pc, #108]	; (800a588 <pvPortMalloc+0x190>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d203      	bcs.n	800a52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a522:	4b17      	ldr	r3, [pc, #92]	; (800a580 <pvPortMalloc+0x188>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a18      	ldr	r2, [pc, #96]	; (800a588 <pvPortMalloc+0x190>)
 800a528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <pvPortMalloc+0x184>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	431a      	orrs	r2, r3
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	2200      	movs	r2, #0
 800a53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <pvPortMalloc+0x194>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	4a11      	ldr	r2, [pc, #68]	; (800a58c <pvPortMalloc+0x194>)
 800a546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a548:	f7fe ff2a 	bl	80093a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <pvPortMalloc+0x174>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	60fb      	str	r3, [r7, #12]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <pvPortMalloc+0x172>
	return pvReturn;
 800a56c:	69fb      	ldr	r3, [r7, #28]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3728      	adds	r7, #40	; 0x28
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20003e48 	.word	0x20003e48
 800a57c:	20003e5c 	.word	0x20003e5c
 800a580:	20003e4c 	.word	0x20003e4c
 800a584:	20003e40 	.word	0x20003e40
 800a588:	20003e50 	.word	0x20003e50
 800a58c:	20003e54 	.word	0x20003e54

0800a590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d04d      	beq.n	800a63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	425b      	negs	r3, r3
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	4b24      	ldr	r3, [pc, #144]	; (800a648 <vPortFree+0xb8>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <vPortFree+0x44>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <vPortFree+0x62>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	60bb      	str	r3, [r7, #8]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	685a      	ldr	r2, [r3, #4]
 800a5f6:	4b14      	ldr	r3, [pc, #80]	; (800a648 <vPortFree+0xb8>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01e      	beq.n	800a63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d11a      	bne.n	800a63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <vPortFree+0xb8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	43db      	mvns	r3, r3
 800a612:	401a      	ands	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a618:	f7fe feb4 	bl	8009384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <vPortFree+0xbc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4413      	add	r3, r2
 800a626:	4a09      	ldr	r2, [pc, #36]	; (800a64c <vPortFree+0xbc>)
 800a628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a62a:	6938      	ldr	r0, [r7, #16]
 800a62c:	f000 f874 	bl	800a718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <vPortFree+0xc0>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	4a06      	ldr	r2, [pc, #24]	; (800a650 <vPortFree+0xc0>)
 800a638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a63a:	f7fe feb1 	bl	80093a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a63e:	bf00      	nop
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20003e5c 	.word	0x20003e5c
 800a64c:	20003e4c 	.word	0x20003e4c
 800a650:	20003e58 	.word	0x20003e58

0800a654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a65a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a660:	4b27      	ldr	r3, [pc, #156]	; (800a700 <prvHeapInit+0xac>)
 800a662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00c      	beq.n	800a688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3307      	adds	r3, #7
 800a672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f023 0307 	bic.w	r3, r3, #7
 800a67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	4a1f      	ldr	r2, [pc, #124]	; (800a700 <prvHeapInit+0xac>)
 800a684:	4413      	add	r3, r2
 800a686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a68c:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <prvHeapInit+0xb0>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a692:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <prvHeapInit+0xb0>)
 800a694:	2200      	movs	r2, #0
 800a696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	4413      	add	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	1a9b      	subs	r3, r3, r2
 800a6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0307 	bic.w	r3, r3, #7
 800a6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4a15      	ldr	r2, [pc, #84]	; (800a708 <prvHeapInit+0xb4>)
 800a6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6b6:	4b14      	ldr	r3, [pc, #80]	; (800a708 <prvHeapInit+0xb4>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6be:	4b12      	ldr	r3, [pc, #72]	; (800a708 <prvHeapInit+0xb4>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6d4:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <prvHeapInit+0xb4>)
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	4a0a      	ldr	r2, [pc, #40]	; (800a70c <prvHeapInit+0xb8>)
 800a6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	4a09      	ldr	r2, [pc, #36]	; (800a710 <prvHeapInit+0xbc>)
 800a6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6ec:	4b09      	ldr	r3, [pc, #36]	; (800a714 <prvHeapInit+0xc0>)
 800a6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6f2:	601a      	str	r2, [r3, #0]
}
 800a6f4:	bf00      	nop
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	20000240 	.word	0x20000240
 800a704:	20003e40 	.word	0x20003e40
 800a708:	20003e48 	.word	0x20003e48
 800a70c:	20003e50 	.word	0x20003e50
 800a710:	20003e4c 	.word	0x20003e4c
 800a714:	20003e5c 	.word	0x20003e5c

0800a718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a720:	4b28      	ldr	r3, [pc, #160]	; (800a7c4 <prvInsertBlockIntoFreeList+0xac>)
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	e002      	b.n	800a72c <prvInsertBlockIntoFreeList+0x14>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	429a      	cmp	r2, r3
 800a734:	d8f7      	bhi.n	800a726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	4413      	add	r3, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	429a      	cmp	r2, r3
 800a746:	d108      	bne.n	800a75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	441a      	add	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	441a      	add	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d118      	bne.n	800a7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d00d      	beq.n	800a796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	441a      	add	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	e008      	b.n	800a7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a796:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	e003      	b.n	800a7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d002      	beq.n	800a7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20003e40 	.word	0x20003e40
 800a7c8:	20003e48 	.word	0x20003e48

0800a7cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a7d6:	f000 f896 	bl	800a906 <BSP_SD_IsDetected>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d001      	beq.n	800a7e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e012      	b.n	800a80a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a7e4:	480b      	ldr	r0, [pc, #44]	; (800a814 <BSP_SD_Init+0x48>)
 800a7e6:	f7f7 fe87 	bl	80024f8 <HAL_SD_Init>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a7f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7f8:	4806      	ldr	r0, [pc, #24]	; (800a814 <BSP_SD_Init+0x48>)
 800a7fa:	f7f8 fc3f 	bl	800307c <HAL_SD_ConfigWideBusOperation>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a808:	79fb      	ldrb	r3, [r7, #7]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20004590 	.word	0x20004590

0800a818 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	68f9      	ldr	r1, [r7, #12]
 800a82e:	4806      	ldr	r0, [pc, #24]	; (800a848 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a830:	f7f7 ff12 	bl	8002658 <HAL_SD_ReadBlocks_DMA>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20004590 	.word	0x20004590

0800a84c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a858:	2300      	movs	r3, #0
 800a85a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	4806      	ldr	r0, [pc, #24]	; (800a87c <BSP_SD_WriteBlocks_DMA+0x30>)
 800a864:	f7f7 ffd8 	bl	8002818 <HAL_SD_WriteBlocks_DMA>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20004590 	.word	0x20004590

0800a880 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a884:	4805      	ldr	r0, [pc, #20]	; (800a89c <BSP_SD_GetCardState+0x1c>)
 800a886:	f7f8 fc93 	bl	80031b0 <HAL_SD_GetCardState>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	bf14      	ite	ne
 800a890:	2301      	movne	r3, #1
 800a892:	2300      	moveq	r3, #0
 800a894:	b2db      	uxtb	r3, r3
}
 800a896:	4618      	mov	r0, r3
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20004590 	.word	0x20004590

0800a8a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	4803      	ldr	r0, [pc, #12]	; (800a8b8 <BSP_SD_GetCardInfo+0x18>)
 800a8ac:	f7f8 fbba 	bl	8003024 <HAL_SD_GetCardInfo>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20004590 	.word	0x20004590

0800a8bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a8c4:	f000 f818 	bl	800a8f8 <BSP_SD_AbortCallback>
}
 800a8c8:	bf00      	nop
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a8d8:	f000 fc6a 	bl	800b1b0 <BSP_SD_WriteCpltCallback>
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a8ec:	f000 fc6e 	bl	800b1cc <BSP_SD_ReadCpltCallback>
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0

}
 800a8fc:	bf00      	nop
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a90c:	2301      	movs	r3, #1
 800a90e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	b2db      	uxtb	r3, r3
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a926:	2300      	movs	r3, #0
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <MX_DMA_Init+0x3c>)
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	4a0b      	ldr	r2, [pc, #44]	; (800a95c <MX_DMA_Init+0x3c>)
 800a930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a934:	6313      	str	r3, [r2, #48]	; 0x30
 800a936:	4b09      	ldr	r3, [pc, #36]	; (800a95c <MX_DMA_Init+0x3c>)
 800a938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a93e:	607b      	str	r3, [r7, #4]
 800a940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800a942:	2200      	movs	r2, #0
 800a944:	2105      	movs	r1, #5
 800a946:	203b      	movs	r0, #59	; 0x3b
 800a948:	f7f5 ff02 	bl	8000750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800a94c:	203b      	movs	r0, #59	; 0x3b
 800a94e:	f7f5 ff1b 	bl	8000788 <HAL_NVIC_EnableIRQ>

}
 800a952:	bf00      	nop
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	40023800 	.word	0x40023800

0800a960 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a964:	4904      	ldr	r1, [pc, #16]	; (800a978 <MX_FATFS_Init+0x18>)
 800a966:	4805      	ldr	r0, [pc, #20]	; (800a97c <MX_FATFS_Init+0x1c>)
 800a968:	f7fc ff90 	bl	800788c <FATFS_LinkDriver>
 800a96c:	4603      	mov	r3, r0
 800a96e:	461a      	mov	r2, r3
 800a970:	4b03      	ldr	r3, [pc, #12]	; (800a980 <MX_FATFS_Init+0x20>)
 800a972:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a974:	bf00      	nop
 800a976:	bd80      	pop	{r7, pc}
 800a978:	20003e64 	.word	0x20003e64
 800a97c:	0800bac4 	.word	0x0800bac4
 800a980:	20003e60 	.word	0x20003e60

0800a984 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a988:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4a07      	ldr	r2, [pc, #28]	; (800a9c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	4a06      	ldr	r2, [pc, #24]	; (800a9c4 <vApplicationGetIdleTaskMemory+0x30>)
 800a9aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2280      	movs	r2, #128	; 0x80
 800a9b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800a9b2:	bf00      	nop
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	200042d8 	.word	0x200042d8
 800a9c4:	2000438c 	.word	0x2000438c

0800a9c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800a9c8:	b5b0      	push	{r4, r5, r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1000);
 800a9ce:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <MX_FREERTOS_Init+0x30>)
 800a9d0:	1d3c      	adds	r4, r7, #4
 800a9d2:	461d      	mov	r5, r3
 800a9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a9dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a9e0:	1d3b      	adds	r3, r7, #4
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fc fff9 	bl	80079dc <osThreadCreate>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	4a03      	ldr	r2, [pc, #12]	; (800a9fc <MX_FREERTOS_Init+0x34>)
 800a9ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800a9f0:	bf00      	nop
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bdb0      	pop	{r4, r5, r7, pc}
 800a9f8:	0800b980 	.word	0x0800b980
 800a9fc:	200042cc 	.word	0x200042cc

0800aa00 <StartDefaultTask>:
  */
uint8_t SD_FileOperationsTest();

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af02      	add	r7, sp, #8
 800aa06:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN StartDefaultTask */
		//static int cnt = 0;
	  volatile uint8_t result = 10;
 800aa08:	230a      	movs	r3, #10
 800aa0a:	72fb      	strb	r3, [r7, #11]

	  result = SD_FileOperationsTest();
 800aa0c:	f000 f840 	bl	800aa90 <SD_FileOperationsTest>
 800aa10:	4603      	mov	r3, r0
 800aa12:	72fb      	strb	r3, [r7, #11]


	  if(result == FR_OK){
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d121      	bne.n	800aa60 <StartDefaultTask+0x60>


		  BaseType_t ret;
		  ret = xTaskCreate( LedBlueTask, "Led Blue task", MAINAPP_STACK_SIZE, NULL, 1, &LedBlueTaskHandle );
 800aa1c:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <StartDefaultTask+0x74>)
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	2301      	movs	r3, #1
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	2300      	movs	r3, #0
 800aa26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa2a:	4913      	ldr	r1, [pc, #76]	; (800aa78 <StartDefaultTask+0x78>)
 800aa2c:	4813      	ldr	r0, [pc, #76]	; (800aa7c <StartDefaultTask+0x7c>)
 800aa2e:	f7fe fa2e 	bl	8008e8e <xTaskCreate>
 800aa32:	60f8      	str	r0, [r7, #12]
		  if ( ret != pdPASS ) for ( ;; ) {
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d000      	beq.n	800aa3c <StartDefaultTask+0x3c>
 800aa3a:	e7fe      	b.n	800aa3a <StartDefaultTask+0x3a>
		  }

		  // Create RTC synchronization task
		  ret = xTaskCreate( LedGreenTask, "Led Green task", SYNCRTC_STACK_SIZE, NULL, 1, &LedGreenTaskHandle );
 800aa3c:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <StartDefaultTask+0x80>)
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	2301      	movs	r3, #1
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	2300      	movs	r3, #0
 800aa46:	2280      	movs	r2, #128	; 0x80
 800aa48:	490e      	ldr	r1, [pc, #56]	; (800aa84 <StartDefaultTask+0x84>)
 800aa4a:	480f      	ldr	r0, [pc, #60]	; (800aa88 <StartDefaultTask+0x88>)
 800aa4c:	f7fe fa1f 	bl	8008e8e <xTaskCreate>
 800aa50:	60f8      	str	r0, [r7, #12]
		  if ( ret != pdPASS ) for ( ;; ) {
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d000      	beq.n	800aa5a <StartDefaultTask+0x5a>
 800aa58:	e7fe      	b.n	800aa58 <StartDefaultTask+0x58>
		  }

		  vTaskDelete( NULL );
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	f7fe fb64 	bl	8009128 <vTaskDelete>
	  }

	  /* Infinite loop */
	  for(;;)
	  {
		HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800aa60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa64:	4809      	ldr	r0, [pc, #36]	; (800aa8c <StartDefaultTask+0x8c>)
 800aa66:	f7f6 fbe8 	bl	800123a <HAL_GPIO_TogglePin>
	    osDelay(200);
 800aa6a:	20c8      	movs	r0, #200	; 0xc8
 800aa6c:	f7fd f802 	bl	8007a74 <osDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800aa70:	e7f6      	b.n	800aa60 <StartDefaultTask+0x60>
 800aa72:	bf00      	nop
 800aa74:	200042d4 	.word	0x200042d4
 800aa78:	0800b99c 	.word	0x0800b99c
 800aa7c:	0800ab9d 	.word	0x0800ab9d
 800aa80:	200042d0 	.word	0x200042d0
 800aa84:	0800b9ac 	.word	0x0800b9ac
 800aa88:	0800abbd 	.word	0x0800abbd
 800aa8c:	40020400 	.word	0x40020400

0800aa90 <SD_FileOperationsTest>:
  * @retval 0 == all fine
  * 		1+ == errors
  */

uint8_t SD_FileOperationsTest()
{
 800aa90:	b5b0      	push	{r4, r5, r7, lr}
 800aa92:	b0b8      	sub	sp, #224	; 0xe0
 800aa94:	af00      	add	r7, sp, #0
  FRESULT res;
  uint32_t byteswritten, bytesread;                     // File write/read counts
  uint8_t wtext[] = "STM32L496 AW: This is AW working with FatFs uSD + DMA + FreeRTOS + USB"; // File write buffer
 800aa96:	4a3c      	ldr	r2, [pc, #240]	; (800ab88 <SD_FileOperationsTest+0xf8>)
 800aa98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2247      	movs	r2, #71	; 0x47
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fe5d 	bl	800b760 <memcpy>
  uint8_t rtext[100];                                   // File read buffer
  char fileNameIntern[40] = "STM32_AW_extendendFilename.TXT";
 800aaa6:	4b39      	ldr	r3, [pc, #228]	; (800ab8c <SD_FileOperationsTest+0xfc>)
 800aaa8:	463c      	mov	r4, r7
 800aaaa:	461d      	mov	r5, r3
 800aaac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aaae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aab0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aab4:	c407      	stmia	r4!, {r0, r1, r2}
 800aab6:	8023      	strh	r3, [r4, #0]
 800aab8:	3402      	adds	r4, #2
 800aaba:	0c1b      	lsrs	r3, r3, #16
 800aabc:	7023      	strb	r3, [r4, #0]
 800aabe:	f107 031f 	add.w	r3, r7, #31
 800aac2:	2200      	movs	r2, #0
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	605a      	str	r2, [r3, #4]
 800aac8:	721a      	strb	r2, [r3, #8]


  // Register the file system object to the FatFs module /
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) == FR_OK)
 800aaca:	2200      	movs	r2, #0
 800aacc:	4930      	ldr	r1, [pc, #192]	; (800ab90 <SD_FileOperationsTest+0x100>)
 800aace:	4831      	ldr	r0, [pc, #196]	; (800ab94 <SD_FileOperationsTest+0x104>)
 800aad0:	f7fc f89c 	bl	8006c0c <f_mount>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d150      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
  {
    // Create and Open a new text file object with write access
    //if(f_open(&SDFile, "STM32_AW.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
    if(f_open(&SDFile, fileNameIntern, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800aada:	463b      	mov	r3, r7
 800aadc:	220a      	movs	r2, #10
 800aade:	4619      	mov	r1, r3
 800aae0:	482d      	ldr	r0, [pc, #180]	; (800ab98 <SD_FileOperationsTest+0x108>)
 800aae2:	f7fc f8f7 	bl	8006cd4 <f_open>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d147      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
    {
      // Write data to the text file
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 800aaec:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800aaf0:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800aaf4:	2247      	movs	r2, #71	; 0x47
 800aaf6:	4828      	ldr	r0, [pc, #160]	; (800ab98 <SD_FileOperationsTest+0x108>)
 800aaf8:	f7fc fc1f 	bl	800733a <f_write>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

      if((byteswritten > 0) && (res == FR_OK))
 800ab02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d038      	beq.n	800ab7c <SD_FileOperationsTest+0xec>
 800ab0a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d134      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
      {
        // Close the open text file
        f_close(&SDFile);
 800ab12:	4821      	ldr	r0, [pc, #132]	; (800ab98 <SD_FileOperationsTest+0x108>)
 800ab14:	f7fc fe3e 	bl	8007794 <f_close>

        // Open the text file object with read access
        if(f_open(&SDFile, fileNameIntern, FA_READ) == FR_OK)
 800ab18:	463b      	mov	r3, r7
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	481e      	ldr	r0, [pc, #120]	; (800ab98 <SD_FileOperationsTest+0x108>)
 800ab20:	f7fc f8d8 	bl	8006cd4 <f_open>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d128      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
        {
          // Read data from the text file
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 800ab2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ab2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ab32:	2264      	movs	r2, #100	; 0x64
 800ab34:	4818      	ldr	r0, [pc, #96]	; (800ab98 <SD_FileOperationsTest+0x108>)
 800ab36:	f7fc fa92 	bl	800705e <f_read>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

          if((bytesread > 0) && (res == FR_OK))
 800ab40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d019      	beq.n	800ab7c <SD_FileOperationsTest+0xec>
 800ab48:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d115      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
          {
            // Close the open text file
           res = f_close(&SDFile);
 800ab50:	4811      	ldr	r0, [pc, #68]	; (800ab98 <SD_FileOperationsTest+0x108>)
 800ab52:	f7fc fe1f 	bl	8007794 <f_close>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
           if(res == FR_OK)
 800ab5c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10b      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
        	 // res = f_unlink( fileNameIntern);	// deleting File

            // Compare read data with the expected data
            if((bytesread == byteswritten)  && (res == FR_OK) )
 800ab64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ab68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d105      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
 800ab70:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <SD_FileOperationsTest+0xec>
            {
              // Success of the demo: no error occurrence
              return FR_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	e001      	b.n	800ab80 <SD_FileOperationsTest+0xf0>
      }
    }
  }
  // Error
  // FATFS_UnLinkDriver(USERPath);
  return res;
 800ab7c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	37e0      	adds	r7, #224	; 0xe0
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bdb0      	pop	{r4, r5, r7, pc}
 800ab88:	0800b9bc 	.word	0x0800b9bc
 800ab8c:	0800ba04 	.word	0x0800ba04
 800ab90:	20003e64 	.word	0x20003e64
 800ab94:	20003e68 	.word	0x20003e68
 800ab98:	2000409c 	.word	0x2000409c

0800ab9c <LedBlueTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedBlueTask( void * pvParameters )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800aba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aba8:	4803      	ldr	r0, [pc, #12]	; (800abb8 <LedBlueTask+0x1c>)
 800abaa:	f7f6 fb46 	bl	800123a <HAL_GPIO_TogglePin>

	  osDelay(300);
 800abae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800abb2:	f7fc ff5f 	bl	8007a74 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800abb6:	e7f5      	b.n	800aba4 <LedBlueTask+0x8>
 800abb8:	40020400 	.word	0x40020400

0800abbc <LedGreenTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedGreenTask( void * pvParameters )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {

	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800abc4:	2180      	movs	r1, #128	; 0x80
 800abc6:	4803      	ldr	r0, [pc, #12]	; (800abd4 <LedGreenTask+0x18>)
 800abc8:	f7f6 fb37 	bl	800123a <HAL_GPIO_TogglePin>
	  osDelay(100);
 800abcc:	2064      	movs	r0, #100	; 0x64
 800abce:	f7fc ff51 	bl	8007a74 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800abd2:	e7f7      	b.n	800abc4 <LedGreenTask+0x8>
 800abd4:	40020400 	.word	0x40020400

0800abd8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08c      	sub	sp, #48	; 0x30
 800abdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abde:	f107 031c 	add.w	r3, r7, #28
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
 800abe6:	605a      	str	r2, [r3, #4]
 800abe8:	609a      	str	r2, [r3, #8]
 800abea:	60da      	str	r2, [r3, #12]
 800abec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800abee:	2300      	movs	r3, #0
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	4b5b      	ldr	r3, [pc, #364]	; (800ad60 <MX_GPIO_Init+0x188>)
 800abf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf6:	4a5a      	ldr	r2, [pc, #360]	; (800ad60 <MX_GPIO_Init+0x188>)
 800abf8:	f043 0304 	orr.w	r3, r3, #4
 800abfc:	6313      	str	r3, [r2, #48]	; 0x30
 800abfe:	4b58      	ldr	r3, [pc, #352]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac02:	f003 0304 	and.w	r3, r3, #4
 800ac06:	61bb      	str	r3, [r7, #24]
 800ac08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	617b      	str	r3, [r7, #20]
 800ac0e:	4b54      	ldr	r3, [pc, #336]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	4a53      	ldr	r2, [pc, #332]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac18:	6313      	str	r3, [r2, #48]	; 0x30
 800ac1a:	4b51      	ldr	r3, [pc, #324]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac26:	2300      	movs	r3, #0
 800ac28:	613b      	str	r3, [r7, #16]
 800ac2a:	4b4d      	ldr	r3, [pc, #308]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2e:	4a4c      	ldr	r2, [pc, #304]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac30:	f043 0302 	orr.w	r3, r3, #2
 800ac34:	6313      	str	r3, [r2, #48]	; 0x30
 800ac36:	4b4a      	ldr	r3, [pc, #296]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	613b      	str	r3, [r7, #16]
 800ac40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	4b46      	ldr	r3, [pc, #280]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4a:	4a45      	ldr	r2, [pc, #276]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac4c:	f043 0308 	orr.w	r3, r3, #8
 800ac50:	6313      	str	r3, [r2, #48]	; 0x30
 800ac52:	4b43      	ldr	r3, [pc, #268]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac56:	f003 0308 	and.w	r3, r3, #8
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60bb      	str	r3, [r7, #8]
 800ac62:	4b3f      	ldr	r3, [pc, #252]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	4a3e      	ldr	r2, [pc, #248]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ac6e:	4b3c      	ldr	r3, [pc, #240]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac76:	60bb      	str	r3, [r7, #8]
 800ac78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	607b      	str	r3, [r7, #4]
 800ac7e:	4b38      	ldr	r3, [pc, #224]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac82:	4a37      	ldr	r2, [pc, #220]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac84:	f043 0301 	orr.w	r3, r3, #1
 800ac88:	6313      	str	r3, [r2, #48]	; 0x30
 800ac8a:	4b35      	ldr	r3, [pc, #212]	; (800ad60 <MX_GPIO_Init+0x188>)
 800ac8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	607b      	str	r3, [r7, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800ac96:	2200      	movs	r2, #0
 800ac98:	f244 0181 	movw	r1, #16513	; 0x4081
 800ac9c:	4831      	ldr	r0, [pc, #196]	; (800ad64 <MX_GPIO_Init+0x18c>)
 800ac9e:	f7f6 fab3 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800aca2:	2200      	movs	r2, #0
 800aca4:	2140      	movs	r1, #64	; 0x40
 800aca6:	4830      	ldr	r0, [pc, #192]	; (800ad68 <MX_GPIO_Init+0x190>)
 800aca8:	f7f6 faae 	bl	8001208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800acac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800acb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800acb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800acb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acb8:	2300      	movs	r3, #0
 800acba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800acbc:	f107 031c 	add.w	r3, r7, #28
 800acc0:	4619      	mov	r1, r3
 800acc2:	482a      	ldr	r0, [pc, #168]	; (800ad6c <MX_GPIO_Init+0x194>)
 800acc4:	f7f6 f90c 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800acc8:	f244 0381 	movw	r3, #16513	; 0x4081
 800accc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800acce:	2301      	movs	r3, #1
 800acd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acd6:	2300      	movs	r3, #0
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acda:	f107 031c 	add.w	r3, r7, #28
 800acde:	4619      	mov	r1, r3
 800ace0:	4820      	ldr	r0, [pc, #128]	; (800ad64 <MX_GPIO_Init+0x18c>)
 800ace2:	f7f6 f8fd 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800ace6:	2340      	movs	r3, #64	; 0x40
 800ace8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800acea:	2301      	movs	r3, #1
 800acec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acee:	2300      	movs	r3, #0
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acf2:	2300      	movs	r3, #0
 800acf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800acf6:	f107 031c 	add.w	r3, r7, #28
 800acfa:	4619      	mov	r1, r3
 800acfc:	481a      	ldr	r0, [pc, #104]	; (800ad68 <MX_GPIO_Init+0x190>)
 800acfe:	f7f6 f8ef 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800ad02:	2380      	movs	r3, #128	; 0x80
 800ad04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad06:	2300      	movs	r3, #0
 800ad08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ad0e:	f107 031c 	add.w	r3, r7, #28
 800ad12:	4619      	mov	r1, r3
 800ad14:	4814      	ldr	r0, [pc, #80]	; (800ad68 <MX_GPIO_Init+0x190>)
 800ad16:	f7f6 f8e3 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ad1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ad1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad20:	2302      	movs	r3, #2
 800ad22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad2c:	230a      	movs	r3, #10
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad30:	f107 031c 	add.w	r3, r7, #28
 800ad34:	4619      	mov	r1, r3
 800ad36:	480e      	ldr	r0, [pc, #56]	; (800ad70 <MX_GPIO_Init+0x198>)
 800ad38:	f7f6 f8d2 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ad3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad42:	2300      	movs	r3, #0
 800ad44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ad4a:	f107 031c 	add.w	r3, r7, #28
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4807      	ldr	r0, [pc, #28]	; (800ad70 <MX_GPIO_Init+0x198>)
 800ad52:	f7f6 f8c5 	bl	8000ee0 <HAL_GPIO_Init>

}
 800ad56:	bf00      	nop
 800ad58:	3730      	adds	r7, #48	; 0x30
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	40023800 	.word	0x40023800
 800ad64:	40020400 	.word	0x40020400
 800ad68:	40021800 	.word	0x40021800
 800ad6c:	40020800 	.word	0x40020800
 800ad70:	40020000 	.word	0x40020000

0800ad74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ad78:	f7f5 fbcc 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ad7c:	f000 f810 	bl	800ada0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ad80:	f7ff ff2a 	bl	800abd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800ad84:	f7ff fdcc 	bl	800a920 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800ad88:	f000 fc28 	bl	800b5dc <MX_USART3_UART_Init>
  MX_SDIO_SD_Init();
 800ad8c:	f000 fa2c 	bl	800b1e8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800ad90:	f7ff fde6 	bl	800a960 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800ad94:	f7ff fe18 	bl	800a9c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800ad98:	f7fc fdfd 	bl	8007996 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ad9c:	e7fe      	b.n	800ad9c <main+0x28>
	...

0800ada0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b094      	sub	sp, #80	; 0x50
 800ada4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ada6:	f107 031c 	add.w	r3, r7, #28
 800adaa:	2234      	movs	r2, #52	; 0x34
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fce4 	bl	800b77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800adb4:	f107 0308 	add.w	r3, r7, #8
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	605a      	str	r2, [r3, #4]
 800adbe:	609a      	str	r2, [r3, #8]
 800adc0:	60da      	str	r2, [r3, #12]
 800adc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800adc4:	2300      	movs	r3, #0
 800adc6:	607b      	str	r3, [r7, #4]
 800adc8:	4b29      	ldr	r3, [pc, #164]	; (800ae70 <SystemClock_Config+0xd0>)
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adcc:	4a28      	ldr	r2, [pc, #160]	; (800ae70 <SystemClock_Config+0xd0>)
 800adce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800add2:	6413      	str	r3, [r2, #64]	; 0x40
 800add4:	4b26      	ldr	r3, [pc, #152]	; (800ae70 <SystemClock_Config+0xd0>)
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800addc:	607b      	str	r3, [r7, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ade0:	2300      	movs	r3, #0
 800ade2:	603b      	str	r3, [r7, #0]
 800ade4:	4b23      	ldr	r3, [pc, #140]	; (800ae74 <SystemClock_Config+0xd4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a22      	ldr	r2, [pc, #136]	; (800ae74 <SystemClock_Config+0xd4>)
 800adea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	4b20      	ldr	r3, [pc, #128]	; (800ae74 <SystemClock_Config+0xd4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800adf8:	603b      	str	r3, [r7, #0]
 800adfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ae00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ae04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ae06:	2302      	movs	r3, #2
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ae0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ae10:	2304      	movs	r3, #4
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800ae14:	23a8      	movs	r3, #168	; 0xa8
 800ae16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ae18:	2302      	movs	r3, #2
 800ae1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800ae1c:	2307      	movs	r3, #7
 800ae1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800ae20:	2302      	movs	r3, #2
 800ae22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ae24:	f107 031c 	add.w	r3, r7, #28
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7f7 f8c7 	bl	8001fbc <HAL_RCC_OscConfig>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800ae34:	f000 f832 	bl	800ae9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ae38:	230f      	movs	r3, #15
 800ae3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ae40:	2300      	movs	r3, #0
 800ae42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ae44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ae48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ae4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ae50:	f107 0308 	add.w	r3, r7, #8
 800ae54:	2105      	movs	r1, #5
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f6 fa0a 	bl	8001270 <HAL_RCC_ClockConfig>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800ae62:	f000 f81b 	bl	800ae9c <Error_Handler>
  }
}
 800ae66:	bf00      	nop
 800ae68:	3750      	adds	r7, #80	; 0x50
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	40023800 	.word	0x40023800
 800ae74:	40007000 	.word	0x40007000

0800ae78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a04      	ldr	r2, [pc, #16]	; (800ae98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d101      	bne.n	800ae8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800ae8a:	f7f5 fb65 	bl	8000558 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ae8e:	bf00      	nop
 800ae90:	3708      	adds	r7, #8
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	40010000 	.word	0x40010000

0800ae9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800aea0:	b672      	cpsid	i
}
 800aea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800aea4:	e7fe      	b.n	800aea4 <Error_Handler+0x8>

0800aea6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800aeae:	f7fc fd85 	bl	80079bc <osKernelSysTick>
 800aeb2:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800aeb4:	e006      	b.n	800aec4 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aeb6:	f7ff fce3 	bl	800a880 <BSP_SD_GetCardState>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	e009      	b.n	800aed8 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800aec4:	f7fc fd7a 	bl	80079bc <osKernelSysTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d8f0      	bhi.n	800aeb6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800aeea:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <SD_CheckStatus+0x38>)
 800aeec:	2201      	movs	r2, #1
 800aeee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aef0:	f7ff fcc6 	bl	800a880 <BSP_SD_GetCardState>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d107      	bne.n	800af0a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800aefa:	4b07      	ldr	r3, [pc, #28]	; (800af18 <SD_CheckStatus+0x38>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	f023 0301 	bic.w	r3, r3, #1
 800af04:	b2da      	uxtb	r2, r3
 800af06:	4b04      	ldr	r3, [pc, #16]	; (800af18 <SD_CheckStatus+0x38>)
 800af08:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800af0a:	4b03      	ldr	r3, [pc, #12]	; (800af18 <SD_CheckStatus+0x38>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b2db      	uxtb	r3, r3
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	2000000c 	.word	0x2000000c

0800af1c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800af1c:	b590      	push	{r4, r7, lr}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800af26:	4b20      	ldr	r3, [pc, #128]	; (800afa8 <SD_initialize+0x8c>)
 800af28:	2201      	movs	r2, #1
 800af2a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800af2c:	f7fc fd3a 	bl	80079a4 <osKernelRunning>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d030      	beq.n	800af98 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800af36:	f7ff fc49 	bl	800a7cc <BSP_SD_Init>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d107      	bne.n	800af50 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff ffcc 	bl	800aee0 <SD_CheckStatus>
 800af48:	4603      	mov	r3, r0
 800af4a:	461a      	mov	r2, r3
 800af4c:	4b16      	ldr	r3, [pc, #88]	; (800afa8 <SD_initialize+0x8c>)
 800af4e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800af50:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <SD_initialize+0x8c>)
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b01      	cmp	r3, #1
 800af58:	d01e      	beq.n	800af98 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <SD_initialize+0x90>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10e      	bne.n	800af80 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800af62:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <SD_initialize+0x94>)
 800af64:	f107 0408 	add.w	r4, r7, #8
 800af68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800af6e:	f107 0308 	add.w	r3, r7, #8
 800af72:	2100      	movs	r1, #0
 800af74:	4618      	mov	r0, r3
 800af76:	f7fc fe5a 	bl	8007c2e <osMessageCreate>
 800af7a:	4603      	mov	r3, r0
 800af7c:	4a0b      	ldr	r2, [pc, #44]	; (800afac <SD_initialize+0x90>)
 800af7e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800af80:	4b0a      	ldr	r3, [pc, #40]	; (800afac <SD_initialize+0x90>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d107      	bne.n	800af98 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <SD_initialize+0x8c>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	f043 0301 	orr.w	r3, r3, #1
 800af92:	b2da      	uxtb	r2, r3
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <SD_initialize+0x8c>)
 800af96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800af98:	4b03      	ldr	r3, [pc, #12]	; (800afa8 <SD_initialize+0x8c>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	b2db      	uxtb	r3, r3
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	371c      	adds	r7, #28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd90      	pop	{r4, r7, pc}
 800afa6:	bf00      	nop
 800afa8:	2000000c 	.word	0x2000000c
 800afac:	2000458c 	.word	0x2000458c
 800afb0:	0800ba2c 	.word	0x0800ba2c

0800afb4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff ff8d 	bl	800aee0 <SD_CheckStatus>
 800afc6:	4603      	mov	r3, r0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	; 0x28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800afe6:	f247 5030 	movw	r0, #30000	; 0x7530
 800afea:	f7ff ff5c 	bl	800aea6 <SD_CheckStatusWithTimeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	da02      	bge.n	800affa <SD_read+0x2a>
  {
    return res;
 800aff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aff8:	e032      	b.n	800b060 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	68b8      	ldr	r0, [r7, #8]
 800b000:	f7ff fc0a 	bl	800a818 <BSP_SD_ReadBlocks_DMA>
 800b004:	4603      	mov	r3, r0
 800b006:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800b00a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d124      	bne.n	800b05c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b012:	4b15      	ldr	r3, [pc, #84]	; (800b068 <SD_read+0x98>)
 800b014:	6819      	ldr	r1, [r3, #0]
 800b016:	f107 0314 	add.w	r3, r7, #20
 800b01a:	f247 5230 	movw	r2, #30000	; 0x7530
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fc fe6e 	bl	8007d00 <osMessageGet>

    if (event.status == osEventMessage)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2b10      	cmp	r3, #16
 800b028:	d118      	bne.n	800b05c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d115      	bne.n	800b05c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800b030:	f7fc fcc4 	bl	80079bc <osKernelSysTick>
 800b034:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b036:	e008      	b.n	800b04a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b038:	f7ff fc22 	bl	800a880 <BSP_SD_GetCardState>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d103      	bne.n	800b04a <SD_read+0x7a>
              {
                res = RES_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b048:	e008      	b.n	800b05c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800b04a:	f7fc fcb7 	bl	80079bc <osKernelSysTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	f247 522f 	movw	r2, #29999	; 0x752f
 800b058:	4293      	cmp	r3, r2
 800b05a:	d9ed      	bls.n	800b038 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b05c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b060:	4618      	mov	r0, r3
 800b062:	3728      	adds	r7, #40	; 0x28
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	2000458c 	.word	0x2000458c

0800b06c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08a      	sub	sp, #40	; 0x28
 800b070:	af00      	add	r7, sp, #0
 800b072:	60b9      	str	r1, [r7, #8]
 800b074:	607a      	str	r2, [r7, #4]
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b082:	f247 5030 	movw	r0, #30000	; 0x7530
 800b086:	f7ff ff0e 	bl	800aea6 <SD_CheckStatusWithTimeout>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	da02      	bge.n	800b096 <SD_write+0x2a>
  {
    return res;
 800b090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b094:	e02e      	b.n	800b0f4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	6879      	ldr	r1, [r7, #4]
 800b09a:	68b8      	ldr	r0, [r7, #8]
 800b09c:	f7ff fbd6 	bl	800a84c <BSP_SD_WriteBlocks_DMA>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d124      	bne.n	800b0f0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800b0a6:	4b15      	ldr	r3, [pc, #84]	; (800b0fc <SD_write+0x90>)
 800b0a8:	6819      	ldr	r1, [r3, #0]
 800b0aa:	f107 0314 	add.w	r3, r7, #20
 800b0ae:	f247 5230 	movw	r2, #30000	; 0x7530
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fc fe24 	bl	8007d00 <osMessageGet>

    if (event.status == osEventMessage)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b10      	cmp	r3, #16
 800b0bc:	d118      	bne.n	800b0f0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d115      	bne.n	800b0f0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800b0c4:	f7fc fc7a 	bl	80079bc <osKernelSysTick>
 800b0c8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b0ca:	e008      	b.n	800b0de <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0cc:	f7ff fbd8 	bl	800a880 <BSP_SD_GetCardState>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <SD_write+0x72>
          {
            res = RES_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800b0dc:	e008      	b.n	800b0f0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800b0de:	f7fc fc6d 	bl	80079bc <osKernelSysTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d9ed      	bls.n	800b0cc <SD_write+0x60>
    }

  }
#endif

  return res;
 800b0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3728      	adds	r7, #40	; 0x28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	2000458c 	.word	0x2000458c

0800b100 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b08c      	sub	sp, #48	; 0x30
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	603a      	str	r2, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
 800b10c:	460b      	mov	r3, r1
 800b10e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b116:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <SD_ioctl+0xac>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <SD_ioctl+0x28>
 800b124:	2303      	movs	r3, #3
 800b126:	e03c      	b.n	800b1a2 <SD_ioctl+0xa2>

  switch (cmd)
 800b128:	79bb      	ldrb	r3, [r7, #6]
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d834      	bhi.n	800b198 <SD_ioctl+0x98>
 800b12e:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <SD_ioctl+0x34>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b14d 	.word	0x0800b14d
 800b13c:	0800b165 	.word	0x0800b165
 800b140:	0800b17f 	.word	0x0800b17f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b14a:	e028      	b.n	800b19e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b14c:	f107 030c 	add.w	r3, r7, #12
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff fba5 	bl	800a8a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b15c:	2300      	movs	r3, #0
 800b15e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b162:	e01c      	b.n	800b19e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b164:	f107 030c 	add.w	r3, r7, #12
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fb99 	bl	800a8a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	b29a      	uxth	r2, r3
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b17c:	e00f      	b.n	800b19e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b17e:	f107 030c 	add.w	r3, r7, #12
 800b182:	4618      	mov	r0, r3
 800b184:	f7ff fb8c 	bl	800a8a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	0a5a      	lsrs	r2, r3, #9
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b196:	e002      	b.n	800b19e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b198:	2304      	movs	r3, #4
 800b19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b19e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3730      	adds	r7, #48	; 0x30
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	2000000c 	.word	0x2000000c

0800b1b0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800b1b4:	4b04      	ldr	r3, [pc, #16]	; (800b1c8 <BSP_SD_WriteCpltCallback+0x18>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2102      	movs	r1, #2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fc fd5f 	bl	8007c80 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b1c2:	bf00      	nop
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	2000458c 	.word	0x2000458c

0800b1cc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <BSP_SD_ReadCpltCallback+0x18>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fc fd51 	bl	8007c80 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	2000458c 	.word	0x2000458c

0800b1e8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800b1ec:	4b0c      	ldr	r3, [pc, #48]	; (800b220 <MX_SDIO_SD_Init+0x38>)
 800b1ee:	4a0d      	ldr	r2, [pc, #52]	; (800b224 <MX_SDIO_SD_Init+0x3c>)
 800b1f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800b1f2:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <MX_SDIO_SD_Init+0x38>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800b1f8:	4b09      	ldr	r3, [pc, #36]	; (800b220 <MX_SDIO_SD_Init+0x38>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b1fe:	4b08      	ldr	r3, [pc, #32]	; (800b220 <MX_SDIO_SD_Init+0x38>)
 800b200:	2200      	movs	r2, #0
 800b202:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800b204:	4b06      	ldr	r3, [pc, #24]	; (800b220 <MX_SDIO_SD_Init+0x38>)
 800b206:	2200      	movs	r2, #0
 800b208:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b20a:	4b05      	ldr	r3, [pc, #20]	; (800b220 <MX_SDIO_SD_Init+0x38>)
 800b20c:	2200      	movs	r2, #0
 800b20e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800b210:	4b03      	ldr	r3, [pc, #12]	; (800b220 <MX_SDIO_SD_Init+0x38>)
 800b212:	2202      	movs	r2, #2
 800b214:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800b216:	bf00      	nop
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	20004590 	.word	0x20004590
 800b224:	40012c00 	.word	0x40012c00

0800b228 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b0a2      	sub	sp, #136	; 0x88
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b230:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800b234:	2200      	movs	r2, #0
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	605a      	str	r2, [r3, #4]
 800b23a:	609a      	str	r2, [r3, #8]
 800b23c:	60da      	str	r2, [r3, #12]
 800b23e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b240:	f107 0318 	add.w	r3, r7, #24
 800b244:	225c      	movs	r2, #92	; 0x5c
 800b246:	2100      	movs	r1, #0
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fa97 	bl	800b77c <memset>
  if(sdHandle->Instance==SDIO)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a68      	ldr	r2, [pc, #416]	; (800b3f4 <HAL_SD_MspInit+0x1cc>)
 800b254:	4293      	cmp	r3, r2
 800b256:	f040 80c9 	bne.w	800b3ec <HAL_SD_MspInit+0x1c4>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800b25a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b25e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b260:	2300      	movs	r3, #0
 800b262:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800b264:	2300      	movs	r3, #0
 800b266:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b268:	f107 0318 	add.w	r3, r7, #24
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7f6 f94b 	bl	8001508 <HAL_RCCEx_PeriphCLKConfig>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800b278:	f7ff fe10 	bl	800ae9c <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800b27c:	2300      	movs	r3, #0
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	4b5d      	ldr	r3, [pc, #372]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b284:	4a5c      	ldr	r2, [pc, #368]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b286:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b28a:	6453      	str	r3, [r2, #68]	; 0x44
 800b28c:	4b5a      	ldr	r3, [pc, #360]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]
 800b29c:	4b56      	ldr	r3, [pc, #344]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a0:	4a55      	ldr	r2, [pc, #340]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2a2:	f043 0302 	orr.w	r3, r3, #2
 800b2a6:	6313      	str	r3, [r2, #48]	; 0x30
 800b2a8:	4b53      	ldr	r3, [pc, #332]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	613b      	str	r3, [r7, #16]
 800b2b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	4b4f      	ldr	r3, [pc, #316]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2bc:	4a4e      	ldr	r2, [pc, #312]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2be:	f043 0304 	orr.w	r3, r3, #4
 800b2c2:	6313      	str	r3, [r2, #48]	; 0x30
 800b2c4:	4b4c      	ldr	r3, [pc, #304]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c8:	f003 0304 	and.w	r3, r3, #4
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60bb      	str	r3, [r7, #8]
 800b2d4:	4b48      	ldr	r3, [pc, #288]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d8:	4a47      	ldr	r2, [pc, #284]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2da:	f043 0308 	orr.w	r3, r3, #8
 800b2de:	6313      	str	r3, [r2, #48]	; 0x30
 800b2e0:	4b45      	ldr	r3, [pc, #276]	; (800b3f8 <HAL_SD_MspInit+0x1d0>)
 800b2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2e4:	f003 0308 	and.w	r3, r3, #8
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800b2ec:	2306      	movs	r3, #6
 800b2ee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b2fe:	230c      	movs	r3, #12
 800b300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b304:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800b308:	4619      	mov	r1, r3
 800b30a:	483c      	ldr	r0, [pc, #240]	; (800b3fc <HAL_SD_MspInit+0x1d4>)
 800b30c:	f7f5 fde8 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 800b310:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800b314:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b316:	2302      	movs	r3, #2
 800b318:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b31e:	2303      	movs	r3, #3
 800b320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b324:	230c      	movs	r3, #12
 800b326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b32a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800b32e:	4619      	mov	r1, r3
 800b330:	4833      	ldr	r0, [pc, #204]	; (800b400 <HAL_SD_MspInit+0x1d8>)
 800b332:	f7f5 fdd5 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b336:	2304      	movs	r3, #4
 800b338:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b33a:	2302      	movs	r3, #2
 800b33c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b342:	2303      	movs	r3, #3
 800b344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800b348:	230c      	movs	r3, #12
 800b34a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b34e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800b352:	4619      	mov	r1, r3
 800b354:	482b      	ldr	r0, [pc, #172]	; (800b404 <HAL_SD_MspInit+0x1dc>)
 800b356:	f7f5 fdc3 	bl	8000ee0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO Init */
    hdma_sdio.Instance = DMA2_Stream3;
 800b35a:	4b2b      	ldr	r3, [pc, #172]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b35c:	4a2b      	ldr	r2, [pc, #172]	; (800b40c <HAL_SD_MspInit+0x1e4>)
 800b35e:	601a      	str	r2, [r3, #0]
    hdma_sdio.Init.Channel = DMA_CHANNEL_4;
 800b360:	4b29      	ldr	r3, [pc, #164]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b366:	605a      	str	r2, [r3, #4]
    hdma_sdio.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b368:	4b27      	ldr	r3, [pc, #156]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	609a      	str	r2, [r3, #8]
    hdma_sdio.Init.PeriphInc = DMA_PINC_DISABLE;
 800b36e:	4b26      	ldr	r3, [pc, #152]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b370:	2200      	movs	r2, #0
 800b372:	60da      	str	r2, [r3, #12]
    hdma_sdio.Init.MemInc = DMA_MINC_ENABLE;
 800b374:	4b24      	ldr	r3, [pc, #144]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b37a:	611a      	str	r2, [r3, #16]
    hdma_sdio.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b37c:	4b22      	ldr	r3, [pc, #136]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b37e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b382:	615a      	str	r2, [r3, #20]
    hdma_sdio.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b384:	4b20      	ldr	r3, [pc, #128]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b38a:	619a      	str	r2, [r3, #24]
    hdma_sdio.Init.Mode = DMA_PFCTRL;
 800b38c:	4b1e      	ldr	r3, [pc, #120]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b38e:	2220      	movs	r2, #32
 800b390:	61da      	str	r2, [r3, #28]
    hdma_sdio.Init.Priority = DMA_PRIORITY_LOW;
 800b392:	4b1d      	ldr	r3, [pc, #116]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b394:	2200      	movs	r2, #0
 800b396:	621a      	str	r2, [r3, #32]
    hdma_sdio.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b398:	4b1b      	ldr	r3, [pc, #108]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b39a:	2204      	movs	r2, #4
 800b39c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800b39e:	4b1a      	ldr	r3, [pc, #104]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3a0:	2203      	movs	r2, #3
 800b3a2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio.Init.MemBurst = DMA_MBURST_INC4;
 800b3a4:	4b18      	ldr	r3, [pc, #96]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b3aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio.Init.PeriphBurst = DMA_PBURST_INC4;
 800b3ac:	4b16      	ldr	r3, [pc, #88]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b3b2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio) != HAL_OK)
 800b3b4:	4814      	ldr	r0, [pc, #80]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3b6:	f7f5 f9f5 	bl	80007a4 <HAL_DMA_Init>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 800b3c0:	f7ff fd6c 	bl	800ae9c <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4a10      	ldr	r2, [pc, #64]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3c8:	641a      	str	r2, [r3, #64]	; 0x40
 800b3ca:	4a0f      	ldr	r2, [pc, #60]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a0d      	ldr	r2, [pc, #52]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3d4:	63da      	str	r2, [r3, #60]	; 0x3c
 800b3d6:	4a0c      	ldr	r2, [pc, #48]	; (800b408 <HAL_SD_MspInit+0x1e0>)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2105      	movs	r1, #5
 800b3e0:	2031      	movs	r0, #49	; 0x31
 800b3e2:	f7f5 f9b5 	bl	8000750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800b3e6:	2031      	movs	r0, #49	; 0x31
 800b3e8:	f7f5 f9ce 	bl	8000788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	3788      	adds	r7, #136	; 0x88
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	40012c00 	.word	0x40012c00
 800b3f8:	40023800 	.word	0x40023800
 800b3fc:	40020400 	.word	0x40020400
 800b400:	40020800 	.word	0x40020800
 800b404:	40020c00 	.word	0x40020c00
 800b408:	20004614 	.word	0x20004614
 800b40c:	40026458 	.word	0x40026458

0800b410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b416:	2300      	movs	r3, #0
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	4b12      	ldr	r3, [pc, #72]	; (800b464 <HAL_MspInit+0x54>)
 800b41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41e:	4a11      	ldr	r2, [pc, #68]	; (800b464 <HAL_MspInit+0x54>)
 800b420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b424:	6453      	str	r3, [r2, #68]	; 0x44
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <HAL_MspInit+0x54>)
 800b428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b42e:	607b      	str	r3, [r7, #4]
 800b430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b432:	2300      	movs	r3, #0
 800b434:	603b      	str	r3, [r7, #0]
 800b436:	4b0b      	ldr	r3, [pc, #44]	; (800b464 <HAL_MspInit+0x54>)
 800b438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43a:	4a0a      	ldr	r2, [pc, #40]	; (800b464 <HAL_MspInit+0x54>)
 800b43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b440:	6413      	str	r3, [r2, #64]	; 0x40
 800b442:	4b08      	ldr	r3, [pc, #32]	; (800b464 <HAL_MspInit+0x54>)
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b44a:	603b      	str	r3, [r7, #0]
 800b44c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b44e:	2200      	movs	r2, #0
 800b450:	210f      	movs	r1, #15
 800b452:	f06f 0001 	mvn.w	r0, #1
 800b456:	f7f5 f97b 	bl	8000750 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	40023800 	.word	0x40023800

0800b468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08c      	sub	sp, #48	; 0x30
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800b474:	2300      	movs	r3, #0
 800b476:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b478:	2300      	movs	r3, #0
 800b47a:	60bb      	str	r3, [r7, #8]
 800b47c:	4b2f      	ldr	r3, [pc, #188]	; (800b53c <HAL_InitTick+0xd4>)
 800b47e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b480:	4a2e      	ldr	r2, [pc, #184]	; (800b53c <HAL_InitTick+0xd4>)
 800b482:	f043 0301 	orr.w	r3, r3, #1
 800b486:	6453      	str	r3, [r2, #68]	; 0x44
 800b488:	4b2c      	ldr	r3, [pc, #176]	; (800b53c <HAL_InitTick+0xd4>)
 800b48a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	60bb      	str	r3, [r7, #8]
 800b492:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b494:	f107 020c 	add.w	r2, r7, #12
 800b498:	f107 0310 	add.w	r3, r7, #16
 800b49c:	4611      	mov	r1, r2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7f6 f800 	bl	80014a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800b4a4:	f7f5 ffea 	bl	800147c <HAL_RCC_GetPCLK2Freq>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	005b      	lsls	r3, r3, #1
 800b4ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800b4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b0:	4a23      	ldr	r2, [pc, #140]	; (800b540 <HAL_InitTick+0xd8>)
 800b4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4b6:	0c9b      	lsrs	r3, r3, #18
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800b4bc:	4b21      	ldr	r3, [pc, #132]	; (800b544 <HAL_InitTick+0xdc>)
 800b4be:	4a22      	ldr	r2, [pc, #136]	; (800b548 <HAL_InitTick+0xe0>)
 800b4c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800b4c2:	4b20      	ldr	r3, [pc, #128]	; (800b544 <HAL_InitTick+0xdc>)
 800b4c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b4c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800b4ca:	4a1e      	ldr	r2, [pc, #120]	; (800b544 <HAL_InitTick+0xdc>)
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800b4d0:	4b1c      	ldr	r3, [pc, #112]	; (800b544 <HAL_InitTick+0xdc>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4d6:	4b1b      	ldr	r3, [pc, #108]	; (800b544 <HAL_InitTick+0xdc>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4dc:	4b19      	ldr	r3, [pc, #100]	; (800b544 <HAL_InitTick+0xdc>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800b4e2:	4818      	ldr	r0, [pc, #96]	; (800b544 <HAL_InitTick+0xdc>)
 800b4e4:	f7f8 fb25 	bl	8003b32 <HAL_TIM_Base_Init>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800b4ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d11b      	bne.n	800b52e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800b4f6:	4813      	ldr	r0, [pc, #76]	; (800b544 <HAL_InitTick+0xdc>)
 800b4f8:	f7f8 fb74 	bl	8003be4 <HAL_TIM_Base_Start_IT>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800b502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b506:	2b00      	cmp	r3, #0
 800b508:	d111      	bne.n	800b52e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800b50a:	2019      	movs	r0, #25
 800b50c:	f7f5 f93c 	bl	8000788 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b0f      	cmp	r3, #15
 800b514:	d808      	bhi.n	800b528 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800b516:	2200      	movs	r2, #0
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	2019      	movs	r0, #25
 800b51c:	f7f5 f918 	bl	8000750 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b520:	4a0a      	ldr	r2, [pc, #40]	; (800b54c <HAL_InitTick+0xe4>)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	e002      	b.n	800b52e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800b52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b532:	4618      	mov	r0, r3
 800b534:	3730      	adds	r7, #48	; 0x30
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	40023800 	.word	0x40023800
 800b540:	431bde83 	.word	0x431bde83
 800b544:	20004674 	.word	0x20004674
 800b548:	40010000 	.word	0x40010000
 800b54c:	20000000 	.word	0x20000000

0800b550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b550:	b480      	push	{r7}
 800b552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b554:	e7fe      	b.n	800b554 <NMI_Handler+0x4>

0800b556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b556:	b480      	push	{r7}
 800b558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b55a:	e7fe      	b.n	800b55a <HardFault_Handler+0x4>

0800b55c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b560:	e7fe      	b.n	800b560 <MemManage_Handler+0x4>

0800b562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b562:	b480      	push	{r7}
 800b564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b566:	e7fe      	b.n	800b566 <BusFault_Handler+0x4>

0800b568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b56c:	e7fe      	b.n	800b56c <UsageFault_Handler+0x4>

0800b56e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b56e:	b480      	push	{r7}
 800b570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b572:	bf00      	nop
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b580:	4802      	ldr	r0, [pc, #8]	; (800b58c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800b582:	f7f8 fb9f 	bl	8003cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b586:	bf00      	nop
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	20004674 	.word	0x20004674

0800b590 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800b594:	4802      	ldr	r0, [pc, #8]	; (800b5a0 <SDIO_IRQHandler+0x10>)
 800b596:	f7f7 fa21 	bl	80029dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800b59a:	bf00      	nop
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20004590 	.word	0x20004590

0800b5a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio);
 800b5a8:	4802      	ldr	r0, [pc, #8]	; (800b5b4 <DMA2_Stream3_IRQHandler+0x10>)
 800b5aa:	f7f5 fa23 	bl	80009f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b5ae:	bf00      	nop
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20004614 	.word	0x20004614

0800b5b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <SystemInit+0x20>)
 800b5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c2:	4a05      	ldr	r2, [pc, #20]	; (800b5d8 <SystemInit+0x20>)
 800b5c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b5cc:	bf00      	nop
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	e000ed00 	.word	0xe000ed00

0800b5dc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b5e0:	4b11      	ldr	r3, [pc, #68]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b5e2:	4a12      	ldr	r2, [pc, #72]	; (800b62c <MX_USART3_UART_Init+0x50>)
 800b5e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800b5e6:	4b10      	ldr	r3, [pc, #64]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b5e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b5ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b5ee:	4b0e      	ldr	r3, [pc, #56]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b5f4:	4b0c      	ldr	r3, [pc, #48]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b5fa:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b600:	4b09      	ldr	r3, [pc, #36]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b602:	220c      	movs	r2, #12
 800b604:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b606:	4b08      	ldr	r3, [pc, #32]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b608:	2200      	movs	r2, #0
 800b60a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b60c:	4b06      	ldr	r3, [pc, #24]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b60e:	2200      	movs	r2, #0
 800b610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b612:	4805      	ldr	r0, [pc, #20]	; (800b628 <MX_USART3_UART_Init+0x4c>)
 800b614:	f7f8 fd3a 	bl	800408c <HAL_UART_Init>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800b61e:	f7ff fc3d 	bl	800ae9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b622:	bf00      	nop
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	200046bc 	.word	0x200046bc
 800b62c:	40004800 	.word	0x40004800

0800b630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	; 0x28
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	2200      	movs	r2, #0
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	605a      	str	r2, [r3, #4]
 800b642:	609a      	str	r2, [r3, #8]
 800b644:	60da      	str	r2, [r3, #12]
 800b646:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a19      	ldr	r2, [pc, #100]	; (800b6b4 <HAL_UART_MspInit+0x84>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d12c      	bne.n	800b6ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b652:	2300      	movs	r3, #0
 800b654:	613b      	str	r3, [r7, #16]
 800b656:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <HAL_UART_MspInit+0x88>)
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <HAL_UART_MspInit+0x88>)
 800b65c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b660:	6413      	str	r3, [r2, #64]	; 0x40
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <HAL_UART_MspInit+0x88>)
 800b664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b66a:	613b      	str	r3, [r7, #16]
 800b66c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <HAL_UART_MspInit+0x88>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	4a10      	ldr	r2, [pc, #64]	; (800b6b8 <HAL_UART_MspInit+0x88>)
 800b678:	f043 0308 	orr.w	r3, r3, #8
 800b67c:	6313      	str	r3, [r2, #48]	; 0x30
 800b67e:	4b0e      	ldr	r3, [pc, #56]	; (800b6b8 <HAL_UART_MspInit+0x88>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b682:	f003 0308 	and.w	r3, r3, #8
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b68a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b68e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b690:	2302      	movs	r3, #2
 800b692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b694:	2300      	movs	r3, #0
 800b696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b698:	2303      	movs	r3, #3
 800b69a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b69c:	2307      	movs	r3, #7
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b6a0:	f107 0314 	add.w	r3, r7, #20
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4805      	ldr	r0, [pc, #20]	; (800b6bc <HAL_UART_MspInit+0x8c>)
 800b6a8:	f7f5 fc1a 	bl	8000ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b6ac:	bf00      	nop
 800b6ae:	3728      	adds	r7, #40	; 0x28
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	40004800 	.word	0x40004800
 800b6b8:	40023800 	.word	0x40023800
 800b6bc:	40020c00 	.word	0x40020c00

0800b6c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b6c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b6f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800b6c4:	480d      	ldr	r0, [pc, #52]	; (800b6fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800b6c6:	490e      	ldr	r1, [pc, #56]	; (800b700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800b6c8:	4a0e      	ldr	r2, [pc, #56]	; (800b704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800b6ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b6cc:	e002      	b.n	800b6d4 <LoopCopyDataInit>

0800b6ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b6ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b6d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b6d2:	3304      	adds	r3, #4

0800b6d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b6d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b6d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b6d8:	d3f9      	bcc.n	800b6ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b6da:	4a0b      	ldr	r2, [pc, #44]	; (800b708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800b6dc:	4c0b      	ldr	r4, [pc, #44]	; (800b70c <LoopFillZerobss+0x26>)
  movs r3, #0
 800b6de:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b6e0:	e001      	b.n	800b6e6 <LoopFillZerobss>

0800b6e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b6e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b6e4:	3204      	adds	r2, #4

0800b6e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b6e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b6e8:	d3fb      	bcc.n	800b6e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b6ea:	f7ff ff65 	bl	800b5b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b6ee:	f000 f811 	bl	800b714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b6f2:	f7ff fb3f 	bl	800ad74 <main>
  bx  lr    
 800b6f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b6f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800b6fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800b700:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800b704:	0800bb60 	.word	0x0800bb60
  ldr r2, =_sbss
 800b708:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800b70c:	20004708 	.word	0x20004708

0800b710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b710:	e7fe      	b.n	800b710 <ADC_IRQHandler>
	...

0800b714 <__libc_init_array>:
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	4d0d      	ldr	r5, [pc, #52]	; (800b74c <__libc_init_array+0x38>)
 800b718:	4c0d      	ldr	r4, [pc, #52]	; (800b750 <__libc_init_array+0x3c>)
 800b71a:	1b64      	subs	r4, r4, r5
 800b71c:	10a4      	asrs	r4, r4, #2
 800b71e:	2600      	movs	r6, #0
 800b720:	42a6      	cmp	r6, r4
 800b722:	d109      	bne.n	800b738 <__libc_init_array+0x24>
 800b724:	4d0b      	ldr	r5, [pc, #44]	; (800b754 <__libc_init_array+0x40>)
 800b726:	4c0c      	ldr	r4, [pc, #48]	; (800b758 <__libc_init_array+0x44>)
 800b728:	f000 f8f2 	bl	800b910 <_init>
 800b72c:	1b64      	subs	r4, r4, r5
 800b72e:	10a4      	asrs	r4, r4, #2
 800b730:	2600      	movs	r6, #0
 800b732:	42a6      	cmp	r6, r4
 800b734:	d105      	bne.n	800b742 <__libc_init_array+0x2e>
 800b736:	bd70      	pop	{r4, r5, r6, pc}
 800b738:	f855 3b04 	ldr.w	r3, [r5], #4
 800b73c:	4798      	blx	r3
 800b73e:	3601      	adds	r6, #1
 800b740:	e7ee      	b.n	800b720 <__libc_init_array+0xc>
 800b742:	f855 3b04 	ldr.w	r3, [r5], #4
 800b746:	4798      	blx	r3
 800b748:	3601      	adds	r6, #1
 800b74a:	e7f2      	b.n	800b732 <__libc_init_array+0x1e>
 800b74c:	0800bb58 	.word	0x0800bb58
 800b750:	0800bb58 	.word	0x0800bb58
 800b754:	0800bb58 	.word	0x0800bb58
 800b758:	0800bb5c 	.word	0x0800bb5c

0800b75c <__retarget_lock_acquire_recursive>:
 800b75c:	4770      	bx	lr

0800b75e <__retarget_lock_release_recursive>:
 800b75e:	4770      	bx	lr

0800b760 <memcpy>:
 800b760:	440a      	add	r2, r1
 800b762:	4291      	cmp	r1, r2
 800b764:	f100 33ff 	add.w	r3, r0, #4294967295
 800b768:	d100      	bne.n	800b76c <memcpy+0xc>
 800b76a:	4770      	bx	lr
 800b76c:	b510      	push	{r4, lr}
 800b76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b772:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b776:	4291      	cmp	r1, r2
 800b778:	d1f9      	bne.n	800b76e <memcpy+0xe>
 800b77a:	bd10      	pop	{r4, pc}

0800b77c <memset>:
 800b77c:	4402      	add	r2, r0
 800b77e:	4603      	mov	r3, r0
 800b780:	4293      	cmp	r3, r2
 800b782:	d100      	bne.n	800b786 <memset+0xa>
 800b784:	4770      	bx	lr
 800b786:	f803 1b01 	strb.w	r1, [r3], #1
 800b78a:	e7f9      	b.n	800b780 <memset+0x4>

0800b78c <cleanup_glue>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	460c      	mov	r4, r1
 800b790:	6809      	ldr	r1, [r1, #0]
 800b792:	4605      	mov	r5, r0
 800b794:	b109      	cbz	r1, 800b79a <cleanup_glue+0xe>
 800b796:	f7ff fff9 	bl	800b78c <cleanup_glue>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7a2:	f000 b869 	b.w	800b878 <_free_r>
	...

0800b7a8 <_reclaim_reent>:
 800b7a8:	4b2c      	ldr	r3, [pc, #176]	; (800b85c <_reclaim_reent+0xb4>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4283      	cmp	r3, r0
 800b7ae:	b570      	push	{r4, r5, r6, lr}
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	d051      	beq.n	800b858 <_reclaim_reent+0xb0>
 800b7b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b7b6:	b143      	cbz	r3, 800b7ca <_reclaim_reent+0x22>
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d14a      	bne.n	800b854 <_reclaim_reent+0xac>
 800b7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c0:	6819      	ldr	r1, [r3, #0]
 800b7c2:	b111      	cbz	r1, 800b7ca <_reclaim_reent+0x22>
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 f857 	bl	800b878 <_free_r>
 800b7ca:	6961      	ldr	r1, [r4, #20]
 800b7cc:	b111      	cbz	r1, 800b7d4 <_reclaim_reent+0x2c>
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 f852 	bl	800b878 <_free_r>
 800b7d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b7d6:	b111      	cbz	r1, 800b7de <_reclaim_reent+0x36>
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 f84d 	bl	800b878 <_free_r>
 800b7de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b7e0:	b111      	cbz	r1, 800b7e8 <_reclaim_reent+0x40>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 f848 	bl	800b878 <_free_r>
 800b7e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b7ea:	b111      	cbz	r1, 800b7f2 <_reclaim_reent+0x4a>
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 f843 	bl	800b878 <_free_r>
 800b7f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7f4:	b111      	cbz	r1, 800b7fc <_reclaim_reent+0x54>
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 f83e 	bl	800b878 <_free_r>
 800b7fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b7fe:	b111      	cbz	r1, 800b806 <_reclaim_reent+0x5e>
 800b800:	4620      	mov	r0, r4
 800b802:	f000 f839 	bl	800b878 <_free_r>
 800b806:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b808:	b111      	cbz	r1, 800b810 <_reclaim_reent+0x68>
 800b80a:	4620      	mov	r0, r4
 800b80c:	f000 f834 	bl	800b878 <_free_r>
 800b810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b812:	b111      	cbz	r1, 800b81a <_reclaim_reent+0x72>
 800b814:	4620      	mov	r0, r4
 800b816:	f000 f82f 	bl	800b878 <_free_r>
 800b81a:	69a3      	ldr	r3, [r4, #24]
 800b81c:	b1e3      	cbz	r3, 800b858 <_reclaim_reent+0xb0>
 800b81e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b820:	4620      	mov	r0, r4
 800b822:	4798      	blx	r3
 800b824:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b826:	b1b9      	cbz	r1, 800b858 <_reclaim_reent+0xb0>
 800b828:	4620      	mov	r0, r4
 800b82a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b82e:	f7ff bfad 	b.w	800b78c <cleanup_glue>
 800b832:	5949      	ldr	r1, [r1, r5]
 800b834:	b941      	cbnz	r1, 800b848 <_reclaim_reent+0xa0>
 800b836:	3504      	adds	r5, #4
 800b838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b83a:	2d80      	cmp	r5, #128	; 0x80
 800b83c:	68d9      	ldr	r1, [r3, #12]
 800b83e:	d1f8      	bne.n	800b832 <_reclaim_reent+0x8a>
 800b840:	4620      	mov	r0, r4
 800b842:	f000 f819 	bl	800b878 <_free_r>
 800b846:	e7ba      	b.n	800b7be <_reclaim_reent+0x16>
 800b848:	680e      	ldr	r6, [r1, #0]
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f814 	bl	800b878 <_free_r>
 800b850:	4631      	mov	r1, r6
 800b852:	e7ef      	b.n	800b834 <_reclaim_reent+0x8c>
 800b854:	2500      	movs	r5, #0
 800b856:	e7ef      	b.n	800b838 <_reclaim_reent+0x90>
 800b858:	bd70      	pop	{r4, r5, r6, pc}
 800b85a:	bf00      	nop
 800b85c:	20000014 	.word	0x20000014

0800b860 <__malloc_lock>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__malloc_lock+0x8>)
 800b862:	f7ff bf7b 	b.w	800b75c <__retarget_lock_acquire_recursive>
 800b866:	bf00      	nop
 800b868:	20004700 	.word	0x20004700

0800b86c <__malloc_unlock>:
 800b86c:	4801      	ldr	r0, [pc, #4]	; (800b874 <__malloc_unlock+0x8>)
 800b86e:	f7ff bf76 	b.w	800b75e <__retarget_lock_release_recursive>
 800b872:	bf00      	nop
 800b874:	20004700 	.word	0x20004700

0800b878 <_free_r>:
 800b878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b87a:	2900      	cmp	r1, #0
 800b87c:	d044      	beq.n	800b908 <_free_r+0x90>
 800b87e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b882:	9001      	str	r0, [sp, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f1a1 0404 	sub.w	r4, r1, #4
 800b88a:	bfb8      	it	lt
 800b88c:	18e4      	addlt	r4, r4, r3
 800b88e:	f7ff ffe7 	bl	800b860 <__malloc_lock>
 800b892:	4a1e      	ldr	r2, [pc, #120]	; (800b90c <_free_r+0x94>)
 800b894:	9801      	ldr	r0, [sp, #4]
 800b896:	6813      	ldr	r3, [r2, #0]
 800b898:	b933      	cbnz	r3, 800b8a8 <_free_r+0x30>
 800b89a:	6063      	str	r3, [r4, #4]
 800b89c:	6014      	str	r4, [r2, #0]
 800b89e:	b003      	add	sp, #12
 800b8a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8a4:	f7ff bfe2 	b.w	800b86c <__malloc_unlock>
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	d908      	bls.n	800b8be <_free_r+0x46>
 800b8ac:	6825      	ldr	r5, [r4, #0]
 800b8ae:	1961      	adds	r1, r4, r5
 800b8b0:	428b      	cmp	r3, r1
 800b8b2:	bf01      	itttt	eq
 800b8b4:	6819      	ldreq	r1, [r3, #0]
 800b8b6:	685b      	ldreq	r3, [r3, #4]
 800b8b8:	1949      	addeq	r1, r1, r5
 800b8ba:	6021      	streq	r1, [r4, #0]
 800b8bc:	e7ed      	b.n	800b89a <_free_r+0x22>
 800b8be:	461a      	mov	r2, r3
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	b10b      	cbz	r3, 800b8c8 <_free_r+0x50>
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	d9fa      	bls.n	800b8be <_free_r+0x46>
 800b8c8:	6811      	ldr	r1, [r2, #0]
 800b8ca:	1855      	adds	r5, r2, r1
 800b8cc:	42a5      	cmp	r5, r4
 800b8ce:	d10b      	bne.n	800b8e8 <_free_r+0x70>
 800b8d0:	6824      	ldr	r4, [r4, #0]
 800b8d2:	4421      	add	r1, r4
 800b8d4:	1854      	adds	r4, r2, r1
 800b8d6:	42a3      	cmp	r3, r4
 800b8d8:	6011      	str	r1, [r2, #0]
 800b8da:	d1e0      	bne.n	800b89e <_free_r+0x26>
 800b8dc:	681c      	ldr	r4, [r3, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	6053      	str	r3, [r2, #4]
 800b8e2:	4421      	add	r1, r4
 800b8e4:	6011      	str	r1, [r2, #0]
 800b8e6:	e7da      	b.n	800b89e <_free_r+0x26>
 800b8e8:	d902      	bls.n	800b8f0 <_free_r+0x78>
 800b8ea:	230c      	movs	r3, #12
 800b8ec:	6003      	str	r3, [r0, #0]
 800b8ee:	e7d6      	b.n	800b89e <_free_r+0x26>
 800b8f0:	6825      	ldr	r5, [r4, #0]
 800b8f2:	1961      	adds	r1, r4, r5
 800b8f4:	428b      	cmp	r3, r1
 800b8f6:	bf04      	itt	eq
 800b8f8:	6819      	ldreq	r1, [r3, #0]
 800b8fa:	685b      	ldreq	r3, [r3, #4]
 800b8fc:	6063      	str	r3, [r4, #4]
 800b8fe:	bf04      	itt	eq
 800b900:	1949      	addeq	r1, r1, r5
 800b902:	6021      	streq	r1, [r4, #0]
 800b904:	6054      	str	r4, [r2, #4]
 800b906:	e7ca      	b.n	800b89e <_free_r+0x26>
 800b908:	b003      	add	sp, #12
 800b90a:	bd30      	pop	{r4, r5, pc}
 800b90c:	20004704 	.word	0x20004704

0800b910 <_init>:
 800b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b912:	bf00      	nop
 800b914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b916:	bc08      	pop	{r3}
 800b918:	469e      	mov	lr, r3
 800b91a:	4770      	bx	lr

0800b91c <_fini>:
 800b91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91e:	bf00      	nop
 800b920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b922:	bc08      	pop	{r3}
 800b924:	469e      	mov	lr, r3
 800b926:	4770      	bx	lr
