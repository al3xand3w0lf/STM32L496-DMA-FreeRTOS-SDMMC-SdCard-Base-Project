
SD_Card_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800ed90  0800ed90  0001ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f254  0800f254  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f254  0800f254  0001f254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f25c  0800f25c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f25c  0800f25c  0001f25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f260  0800f260  0001f260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000321c  20000074  0800f2d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003290  0800f2d8  00023290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002485a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e81  00000000  00000000  000448fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00049780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b10  00000000  00000000  0004b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fbe4  00000000  00000000  0004cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029abc  00000000  00000000  0007cb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b000  00000000  00000000  000a6648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b78  00000000  00000000  001c1698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ed78 	.word	0x0800ed78

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800ed78 	.word	0x0800ed78

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <vApplicationGetIdleTaskMemory+0x2c>)
 8000514:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <vApplicationGetIdleTaskMemory+0x30>)
 800051a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000009c 	.word	0x2000009c
 8000534:	20000150 	.word	0x20000150

08000538 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1000);
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <MX_FREERTOS_Init+0x30>)
 8000540:	1d3c      	adds	r4, r7, #4
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f00b fc1b 	bl	800bd90 <osThreadCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <MX_FREERTOS_Init+0x34>)
 800055e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bdb0      	pop	{r4, r5, r7, pc}
 8000568:	0800ed9c 	.word	0x0800ed9c
 800056c:	20000090 	.word	0x20000090

08000570 <StartDefaultTask>:

uint8_t SD_FileOperationsTest();

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN StartDefaultTask */
		//static int cnt = 0;
	  volatile uint8_t result = 10;
 8000578:	230a      	movs	r3, #10
 800057a:	72fb      	strb	r3, [r7, #11]

	  result = SD_FileOperationsTest();
 800057c:	f000 f83e 	bl	80005fc <SD_FileOperationsTest>
 8000580:	4603      	mov	r3, r0
 8000582:	72fb      	strb	r3, [r7, #11]


	  if(result == FR_OK){
 8000584:	7afb      	ldrb	r3, [r7, #11]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d121      	bne.n	80005d0 <StartDefaultTask+0x60>


		  BaseType_t ret;
		  ret = xTaskCreate( LedBlueTask, "Led Blue task", MAINAPP_STACK_SIZE, NULL, 1, &LedBlueTaskHandle );
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <StartDefaultTask+0x70>)
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2301      	movs	r3, #1
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059a:	4912      	ldr	r1, [pc, #72]	; (80005e4 <StartDefaultTask+0x74>)
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <StartDefaultTask+0x78>)
 800059e:	f00c fe50 	bl	800d242 <xTaskCreate>
 80005a2:	60f8      	str	r0, [r7, #12]
		  if ( ret != pdPASS ) for ( ;; ) {
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d000      	beq.n	80005ac <StartDefaultTask+0x3c>
 80005aa:	e7fe      	b.n	80005aa <StartDefaultTask+0x3a>
		  }

		  // Create RTC synchronization task
		  ret = xTaskCreate( LedGreenTask, "Led Green task", SYNCRTC_STACK_SIZE, NULL, 1, &LedGreenTaskHandle );
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <StartDefaultTask+0x7c>)
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	490d      	ldr	r1, [pc, #52]	; (80005f0 <StartDefaultTask+0x80>)
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <StartDefaultTask+0x84>)
 80005bc:	f00c fe41 	bl	800d242 <xTaskCreate>
 80005c0:	60f8      	str	r0, [r7, #12]
		  if ( ret != pdPASS ) for ( ;; ) {
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d000      	beq.n	80005ca <StartDefaultTask+0x5a>
 80005c8:	e7fe      	b.n	80005c8 <StartDefaultTask+0x58>
		  }

		  vTaskDelete( NULL );
 80005ca:	2000      	movs	r0, #0
 80005cc:	f00c ff86 	bl	800d4dc <vTaskDelete>
	  }

	  /* Infinite loop */
	  for(;;)
	  {
	    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <StartDefaultTask+0x88>)
 80005d4:	f001 f990 	bl	80018f8 <HAL_GPIO_TogglePin>
	    osDelay(200);
 80005d8:	20c8      	movs	r0, #200	; 0xc8
 80005da:	f00b fc25 	bl	800be28 <osDelay>
	    HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80005de:	e7f7      	b.n	80005d0 <StartDefaultTask+0x60>
 80005e0:	20000098 	.word	0x20000098
 80005e4:	0800edb8 	.word	0x0800edb8
 80005e8:	08000709 	.word	0x08000709
 80005ec:	20000094 	.word	0x20000094
 80005f0:	0800edc8 	.word	0x0800edc8
 80005f4:	08000729 	.word	0x08000729
 80005f8:	48000400 	.word	0x48000400

080005fc <SD_FileOperationsTest>:
  * @retval 0 == all fine
  * 		1+ == errors
  */

uint8_t SD_FileOperationsTest()
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b0b8      	sub	sp, #224	; 0xe0
 8000600:	af00      	add	r7, sp, #0
  FRESULT res;
  uint32_t byteswritten, bytesread;                     // File write/read counts
  uint8_t wtext[] = "STM32L496 AW: This is AW working with FatFs uSD + DMA + FreeRTOS + USB"; // File write buffer
 8000602:	4a3c      	ldr	r2, [pc, #240]	; (80006f4 <SD_FileOperationsTest+0xf8>)
 8000604:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000608:	4611      	mov	r1, r2
 800060a:	2247      	movs	r2, #71	; 0x47
 800060c:	4618      	mov	r0, r3
 800060e:	f00e fadb 	bl	800ebc8 <memcpy>
  uint8_t rtext[100];                                   // File read buffer
  char fileNameIntern[40] = "STM32_AW_extendendFilename.TXT";
 8000612:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <SD_FileOperationsTest+0xfc>)
 8000614:	463c      	mov	r4, r7
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000620:	c407      	stmia	r4!, {r0, r1, r2}
 8000622:	8023      	strh	r3, [r4, #0]
 8000624:	3402      	adds	r4, #2
 8000626:	0c1b      	lsrs	r3, r3, #16
 8000628:	7023      	strb	r3, [r4, #0]
 800062a:	f107 031f 	add.w	r3, r7, #31
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	721a      	strb	r2, [r3, #8]


  // Register the file system object to the FatFs module /
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) == FR_OK)
 8000636:	2200      	movs	r2, #0
 8000638:	4930      	ldr	r1, [pc, #192]	; (80006fc <SD_FileOperationsTest+0x100>)
 800063a:	4831      	ldr	r0, [pc, #196]	; (8000700 <SD_FileOperationsTest+0x104>)
 800063c:	f00a fcc0 	bl	800afc0 <f_mount>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d150      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
  {
    // Create and Open a new text file object with write access
    //if(f_open(&SDFile, "STM32_AW.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
    if(f_open(&SDFile, fileNameIntern, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	220a      	movs	r2, #10
 800064a:	4619      	mov	r1, r3
 800064c:	482d      	ldr	r0, [pc, #180]	; (8000704 <SD_FileOperationsTest+0x108>)
 800064e:	f00a fd1b 	bl	800b088 <f_open>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d147      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
    {
      // Write data to the text file
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8000658:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800065c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000660:	2247      	movs	r2, #71	; 0x47
 8000662:	4828      	ldr	r0, [pc, #160]	; (8000704 <SD_FileOperationsTest+0x108>)
 8000664:	f00b f843 	bl	800b6ee <f_write>
 8000668:	4603      	mov	r3, r0
 800066a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

      if((byteswritten > 0) && (res == FR_OK))
 800066e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000672:	2b00      	cmp	r3, #0
 8000674:	d038      	beq.n	80006e8 <SD_FileOperationsTest+0xec>
 8000676:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800067a:	2b00      	cmp	r3, #0
 800067c:	d134      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
      {
        // Close the open text file
        f_close(&SDFile);
 800067e:	4821      	ldr	r0, [pc, #132]	; (8000704 <SD_FileOperationsTest+0x108>)
 8000680:	f00b fa62 	bl	800bb48 <f_close>

        // Open the text file object with read access
        if(f_open(&SDFile, fileNameIntern, FA_READ) == FR_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	481e      	ldr	r0, [pc, #120]	; (8000704 <SD_FileOperationsTest+0x108>)
 800068c:	f00a fcfc 	bl	800b088 <f_open>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d128      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
        {
          // Read data from the text file
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000696:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800069a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800069e:	2264      	movs	r2, #100	; 0x64
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <SD_FileOperationsTest+0x108>)
 80006a2:	f00a feb6 	bl	800b412 <f_read>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

          if((bytesread > 0) && (res == FR_OK))
 80006ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d019      	beq.n	80006e8 <SD_FileOperationsTest+0xec>
 80006b4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d115      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
          {
            // Close the open text file
           res = f_close(&SDFile);
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <SD_FileOperationsTest+0x108>)
 80006be:	f00b fa43 	bl	800bb48 <f_close>
 80006c2:	4603      	mov	r3, r0
 80006c4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
           if(res == FR_OK)
 80006c8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10b      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
        	 // res = f_unlink( fileNameIntern);	// deleting File

            // Compare read data with the expected data
            if((bytesread == byteswritten)  && (res == FR_OK) )
 80006d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80006d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80006d8:	429a      	cmp	r2, r3
 80006da:	d105      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
 80006dc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <SD_FileOperationsTest+0xec>
            {
              // Success of the demo: no error occurrence
              return FR_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	e001      	b.n	80006ec <SD_FileOperationsTest+0xf0>
      }
    }
  }
  // Error
  // FATFS_UnLinkDriver(USERPath);
  return res;
 80006e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	37e0      	adds	r7, #224	; 0xe0
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	0800edd8 	.word	0x0800edd8
 80006f8:	0800ee20 	.word	0x0800ee20
 80006fc:	20000544 	.word	0x20000544
 8000700:	20000548 	.word	0x20000548
 8000704:	2000077c 	.word	0x2000077c

08000708 <LedBlueTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedBlueTask( void * pvParameters )
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000710:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <LedBlueTask+0x1c>)
 8000716:	f001 f8ef 	bl	80018f8 <HAL_GPIO_TogglePin>

	  osDelay(300);
 800071a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800071e:	f00b fb83 	bl	800be28 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000722:	e7f5      	b.n	8000710 <LedBlueTask+0x8>
 8000724:	48000400 	.word	0x48000400

08000728 <LedGreenTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedGreenTask( void * pvParameters )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {

	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <LedGreenTask+0x18>)
 8000734:	f001 f8e0 	bl	80018f8 <HAL_GPIO_TogglePin>
	  osDelay(200);
 8000738:	20c8      	movs	r0, #200	; 0xc8
 800073a:	f00b fb75 	bl	800be28 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800073e:	e7f7      	b.n	8000730 <LedGreenTask+0x8>
 8000740:	48000400 	.word	0x48000400

08000744 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075a:	4b97      	ldr	r3, [pc, #604]	; (80009b8 <MX_GPIO_Init+0x274>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a96      	ldr	r2, [pc, #600]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b94      	ldr	r3, [pc, #592]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b91      	ldr	r3, [pc, #580]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a90      	ldr	r2, [pc, #576]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b8e      	ldr	r3, [pc, #568]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	61fb      	str	r3, [r7, #28]
 8000788:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4b8b      	ldr	r3, [pc, #556]	; (80009b8 <MX_GPIO_Init+0x274>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a8a      	ldr	r2, [pc, #552]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b88      	ldr	r3, [pc, #544]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b85      	ldr	r3, [pc, #532]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a84      	ldr	r2, [pc, #528]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b82      	ldr	r3, [pc, #520]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a7e      	ldr	r2, [pc, #504]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b7c      	ldr	r3, [pc, #496]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b79      	ldr	r3, [pc, #484]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a78      	ldr	r2, [pc, #480]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b76      	ldr	r3, [pc, #472]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	4b73      	ldr	r3, [pc, #460]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a72      	ldr	r2, [pc, #456]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b70      	ldr	r3, [pc, #448]	; (80009b8 <MX_GPIO_Init+0x274>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	4b6d      	ldr	r3, [pc, #436]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a6c      	ldr	r2, [pc, #432]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <MX_GPIO_Init+0x274>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800081a:	f001 f969 	bl	8001af0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000824:	4865      	ldr	r0, [pc, #404]	; (80009bc <MX_GPIO_Init+0x278>)
 8000826:	f001 f837 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4864      	ldr	r0, [pc, #400]	; (80009c0 <MX_GPIO_Init+0x27c>)
 8000830:	f001 f832 	bl	8001898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	485e      	ldr	r0, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x280>)
 800084a:	f000 fda7 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000854:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4858      	ldr	r0, [pc, #352]	; (80009c8 <MX_GPIO_Init+0x284>)
 8000866:	f000 fd99 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	4853      	ldr	r0, [pc, #332]	; (80009cc <MX_GPIO_Init+0x288>)
 8000880:	f000 fd8c 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000884:	23ff      	movs	r3, #255	; 0xff
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000888:	2303      	movs	r3, #3
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	484c      	ldr	r0, [pc, #304]	; (80009c8 <MX_GPIO_Init+0x284>)
 8000898:	f000 fd80 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800089c:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a2:	2303      	movs	r3, #3
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 fd72 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008b8:	f64b 7377 	movw	r3, #49015	; 0xbf77
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	4619      	mov	r1, r3
 80008cc:	483b      	ldr	r0, [pc, #236]	; (80009bc <MX_GPIO_Init+0x278>)
 80008ce:	f000 fd65 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008d2:	f64f 631f 	movw	r3, #65055	; 0xfe1f
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4619      	mov	r1, r3
 80008e6:	4836      	ldr	r0, [pc, #216]	; (80009c0 <MX_GPIO_Init+0x27c>)
 80008e8:	f000 fd58 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008ec:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	482d      	ldr	r0, [pc, #180]	; (80009bc <MX_GPIO_Init+0x278>)
 8000906:	f000 fd49 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800090a:	f64f 43fb 	movw	r3, #64763	; 0xfcfb
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000910:	2303      	movs	r3, #3
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	482c      	ldr	r0, [pc, #176]	; (80009d0 <MX_GPIO_Init+0x28c>)
 8000920:	f000 fd3c 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <MX_GPIO_Init+0x27c>)
 800093c:	f000 fd2e 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000940:	2340      	movs	r3, #64	; 0x40
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <MX_GPIO_Init+0x27c>)
 8000954:	f000 fd22 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000958:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096a:	230a      	movs	r3, #10
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 fd10 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800097c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f000 fd02 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000998:	2308      	movs	r3, #8
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099c:	2303      	movs	r3, #3
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	480a      	ldr	r0, [pc, #40]	; (80009d4 <MX_GPIO_Init+0x290>)
 80009ac:	f000 fcf6 	bl	800139c <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3738      	adds	r7, #56	; 0x38
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400
 80009c0:	48001800 	.word	0x48001800
 80009c4:	48001000 	.word	0x48001000
 80009c8:	48000800 	.word	0x48000800
 80009cc:	48001400 	.word	0x48001400
 80009d0:	48000c00 	.word	0x48000c00
 80009d4:	48001c00 	.word	0x48001c00

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fb6f 	bl	80010be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f80f 	bl	8000a02 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff feae 	bl	8000744 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80009e8:	f000 fa00 	bl	8000dec <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80009ec:	f000 fa4c 	bl	8000e88 <MX_USART3_UART_Init>
  MX_SDMMC1_SD_Init();
 80009f0:	f000 f87c 	bl	8000aec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80009f4:	f008 fb06 	bl	8009004 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009f8:	f7ff fd9e 	bl	8000538 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009fc:	f00b f9a5 	bl	800bd4a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x28>

08000a02 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b096      	sub	sp, #88	; 0x58
 8000a06:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2244      	movs	r2, #68	; 0x44
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00e f8e7 	bl	800ebe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 ffaf 	bl	8001988 <HAL_PWREx_ControlVoltageScaling>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a30:	f000 f84c 	bl	8000acc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000a34:	2322      	movs	r3, #34	; 0x22
 8000a36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000a52:	231e      	movs	r3, #30
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f852 	bl	8001b10 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a72:	f000 f82b 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2105      	movs	r1, #5
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fd8f 	bl	80025b4 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9c:	f000 f816 	bl	8000acc <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3758      	adds	r7, #88	; 0x58
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 fb19 	bl	80010f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40012c00 	.word	0x40012c00

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>

08000ad6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <MX_SDMMC1_SD_Init+0x40>)
 8000af4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000b04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b08:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <MX_SDMMC1_SD_Init+0x3c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000350 	.word	0x20000350
 8000b2c:	50062400 	.word	0x50062400

08000b30 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0b0      	sub	sp, #192	; 0xc0
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	f107 0318 	add.w	r3, r7, #24
 8000b4c:	2294      	movs	r2, #148	; 0x94
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00e f847 	bl	800ebe4 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a37      	ldr	r2, [pc, #220]	; (8000c38 <HAL_SD_MspInit+0x108>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d166      	bne.n	8000c2e <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000b60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 f8e3 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000b7c:	f7ff ffa6 	bl	8000acc <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9c:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_SD_MspInit+0x10c>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000bc8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be2:	230c      	movs	r3, #12
 8000be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bec:	4619      	mov	r1, r3
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <HAL_SD_MspInit+0x110>)
 8000bf0:	f000 fbd4 	bl	800139c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c16:	4619      	mov	r1, r3
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <HAL_SD_MspInit+0x114>)
 8000c1a:	f000 fbbf 	bl	800139c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	2031      	movs	r0, #49	; 0x31
 8000c24:	f000 fb76 	bl	8001314 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000c28:	2031      	movs	r0, #49	; 0x31
 8000c2a:	f000 fb9f 	bl	800136c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	37c0      	adds	r7, #192	; 0xc0
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	50062400 	.word	0x50062400
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	; 0x58
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_MspInit+0x4c>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210f      	movs	r1, #15
 8000c82:	f06f 0001 	mvn.w	r0, #1
 8000c86:	f000 fb45 	bl	8001314 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <HAL_InitTick+0xc8>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000caa:	4a2d      	ldr	r2, [pc, #180]	; (8000d60 <HAL_InitTick+0xc8>)
 8000cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <HAL_InitTick+0xc8>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbe:	f107 020c 	add.w	r2, r7, #12
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 ff35 	bl	8002b38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cce:	f001 ff1d 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8000cd2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <HAL_InitTick+0xcc>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_InitTick+0xd0>)
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <HAL_InitTick+0xd4>)
 8000ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <HAL_InitTick+0xd0>)
 8000cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_InitTick+0xd0>)
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_InitTick+0xd0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_InitTick+0xd0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_InitTick+0xd0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d08:	4817      	ldr	r0, [pc, #92]	; (8000d68 <HAL_InitTick+0xd0>)
 8000d0a:	f005 fdfb 	bl	8006904 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d11b      	bne.n	8000d54 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d1c:	4812      	ldr	r0, [pc, #72]	; (8000d68 <HAL_InitTick+0xd0>)
 8000d1e:	f005 ff05 	bl	8006b2c <HAL_TIM_Base_Start_IT>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d111      	bne.n	8000d54 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d30:	2019      	movs	r0, #25
 8000d32:	f000 fb1b 	bl	800136c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d808      	bhi.n	8000d4e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	2019      	movs	r0, #25
 8000d42:	f000 fae7 	bl	8001314 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_InitTick+0xd8>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e002      	b.n	8000d54 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3730      	adds	r7, #48	; 0x30
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40021000 	.word	0x40021000
 8000d64:	431bde83 	.word	0x431bde83
 8000d68:	200003d0 	.word	0x200003d0
 8000d6c:	40012c00 	.word	0x40012c00
 8000d70:	20000004 	.word	0x20000004

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000da6:	f005 ff75 	bl	8006c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200003d0 	.word	0x200003d0

08000db4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <SDMMC1_IRQHandler+0x10>)
 8000dba:	f004 fb13 	bl	80053e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000350 	.word	0x20000350

08000dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_LPUART1_UART_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000df8:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <MX_LPUART1_UART_Init+0x98>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e36:	f006 f92d 	bl	8007094 <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e40:	f7ff fe44 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e48:	f007 f88a 	bl	8007f60 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f7ff fe3b 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e5a:	f007 f90d 	bl	8008078 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f7ff fe32 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_LPUART1_UART_Init+0x90>)
 8000e6a:	f007 f811 	bl	8007e90 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f7ff fe2a 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000041c 	.word	0x2000041c
 8000e80:	40008000 	.word	0x40008000
 8000e84:	00033324 	.word	0x00033324

08000e88 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_USART3_UART_Init+0x94>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ed2:	f006 f8df 	bl	8007094 <HAL_UART_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000edc:	f7ff fdf6 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ee4:	f007 f83c 	bl	8007f60 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eee:	f7ff fded 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000ef6:	f007 f8bf 	bl	8008078 <HAL_UARTEx_SetRxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f7ff fde4 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_USART3_UART_Init+0x90>)
 8000f06:	f006 ffc3 	bl	8007e90 <HAL_UARTEx_DisableFifoMode>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f10:	f7ff fddc 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200004ac 	.word	0x200004ac
 8000f1c:	40004800 	.word	0x40004800

08000f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0b0      	sub	sp, #192	; 0xc0
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	2294      	movs	r2, #148	; 0x94
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00d fe4f 	bl	800ebe4 <memset>
  if(uartHandle->Instance==LPUART1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <HAL_UART_MspInit+0x138>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d13e      	bne.n	8000fce <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f50:	2320      	movs	r3, #32
 8000f52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0318 	add.w	r3, r7, #24
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f001 feed 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f7ff fdb0 	bl	8000acc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f6c:	4b3b      	ldr	r3, [pc, #236]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f70:	4a3a      	ldr	r2, [pc, #232]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f78:	4b38      	ldr	r3, [pc, #224]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a34      	ldr	r2, [pc, #208]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000f9c:	f000 fda8 	bl	8001af0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000fa0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4826      	ldr	r0, [pc, #152]	; (8001060 <HAL_UART_MspInit+0x140>)
 8000fc8:	f000 f9e8 	bl	800139c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fcc:	e040      	b.n	8001050 <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a24      	ldr	r2, [pc, #144]	; (8001064 <HAL_UART_MspInit+0x144>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d13b      	bne.n	8001050 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fea9 	bl	8002d3c <HAL_RCCEx_PeriphCLKConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000ff0:	f7ff fd6c 	bl	8000acc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff8:	4a18      	ldr	r2, [pc, #96]	; (800105c <HAL_UART_MspInit+0x13c>)
 8000ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_UART_MspInit+0x13c>)
 8001002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_UART_MspInit+0x13c>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	4a12      	ldr	r2, [pc, #72]	; (800105c <HAL_UART_MspInit+0x13c>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_UART_MspInit+0x13c>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001024:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103e:	2307      	movs	r3, #7
 8001040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001048:	4619      	mov	r1, r3
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <HAL_UART_MspInit+0x148>)
 800104c:	f000 f9a6 	bl	800139c <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	37c0      	adds	r7, #192	; 0xc0
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40008000 	.word	0x40008000
 800105c:	40021000 	.word	0x40021000
 8001060:	48001800 	.word	0x48001800
 8001064:	40004800 	.word	0x40004800
 8001068:	48000c00 	.word	0x48000c00

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001070:	f7ff feaa 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f00d fd6f 	bl	800eb7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff fc9b 	bl	80009d8 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010b0:	0800f264 	.word	0x0800f264
  ldr r2, =_sbss
 80010b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010b8:	20003290 	.word	0x20003290

080010bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_IRQHandler>

080010be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f903 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	200f      	movs	r0, #15
 80010d0:	f7ff fde2 	bl	8000c98 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	e001      	b.n	80010e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e0:	f7ff fdb2 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e4:	79fb      	ldrb	r3, [r7, #7]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	2000053c 	.word	0x2000053c

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000053c 	.word	0x2000053c

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b07      	cmp	r3, #7
 80012e0:	d00f      	beq.n	8001302 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b06      	cmp	r3, #6
 80012e6:	d00c      	beq.n	8001302 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d009      	beq.n	8001302 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d006      	beq.n	8001302 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d003      	beq.n	8001302 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80012fa:	21a6      	movs	r1, #166	; 0xa6
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80012fe:	f7ff fbea 	bl	8000ad6 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ff38 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	0800ee48 	.word	0x0800ee48

08001314 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d903      	bls.n	8001334 <HAL_NVIC_SetPriority+0x20>
 800132c:	21be      	movs	r1, #190	; 0xbe
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <HAL_NVIC_SetPriority+0x54>)
 8001330:	f7ff fbd1 	bl	8000ad6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	d903      	bls.n	8001342 <HAL_NVIC_SetPriority+0x2e>
 800133a:	21bf      	movs	r1, #191	; 0xbf
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <HAL_NVIC_SetPriority+0x54>)
 800133e:	f7ff fbca 	bl	8000ad6 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001342:	f7ff ff3d 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001346:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff8d 	bl	800126c <NVIC_EncodePriority>
 8001352:	4602      	mov	r2, r0
 8001354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff5c 	bl	8001218 <__NVIC_SetPriority>
}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	0800ee48 	.word	0x0800ee48

0800136c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	da03      	bge.n	8001386 <HAL_NVIC_EnableIRQ+0x1a>
 800137e:	21d2      	movs	r1, #210	; 0xd2
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_NVIC_EnableIRQ+0x2c>)
 8001382:	f7ff fba8 	bl	8000ad6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff26 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0800ee48 	.word	0x0800ee48

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013b0:	d023      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <HAL_GPIO_Init+0x114>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <HAL_GPIO_Init+0x118>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01b      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a3c      	ldr	r2, [pc, #240]	; (80014b8 <HAL_GPIO_Init+0x11c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d017      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a3b      	ldr	r2, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x120>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <HAL_GPIO_Init+0x124>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00f      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a39      	ldr	r2, [pc, #228]	; (80014c4 <HAL_GPIO_Init+0x128>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00b      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a38      	ldr	r2, [pc, #224]	; (80014c8 <HAL_GPIO_Init+0x12c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a37      	ldr	r2, [pc, #220]	; (80014cc <HAL_GPIO_Init+0x130>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x5e>
 80013f2:	21aa      	movs	r1, #170	; 0xaa
 80013f4:	4836      	ldr	r0, [pc, #216]	; (80014d0 <HAL_GPIO_Init+0x134>)
 80013f6:	f7ff fb6e 	bl	8000ad6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_GPIO_Init+0x74>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	041b      	lsls	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x7c>
 8001410:	21ab      	movs	r1, #171	; 0xab
 8001412:	482f      	ldr	r0, [pc, #188]	; (80014d0 <HAL_GPIO_Init+0x134>)
 8001414:	f7ff fb5f 	bl	8000ad6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 822a 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	f000 8225 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b11      	cmp	r3, #17
 8001432:	f000 8220 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	f000 821b 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b12      	cmp	r3, #18
 8001446:	f000 8216 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001452:	f000 8210 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800145e:	f000 820a 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800146a:	f000 8204 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001476:	f000 81fe 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001482:	f000 81f8 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800148e:	f000 81f2 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b03      	cmp	r3, #3
 8001498:	f000 81ed 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b0b      	cmp	r3, #11
 80014a2:	f000 81e8 	beq.w	8001876 <HAL_GPIO_Init+0x4da>
 80014a6:	21ac      	movs	r1, #172	; 0xac
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <HAL_GPIO_Init+0x134>)
 80014aa:	f7ff fb14 	bl	8000ad6 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e1e2      	b.n	8001876 <HAL_GPIO_Init+0x4da>
 80014b0:	48000400 	.word	0x48000400
 80014b4:	48000800 	.word	0x48000800
 80014b8:	48000c00 	.word	0x48000c00
 80014bc:	48001000 	.word	0x48001000
 80014c0:	48001400 	.word	0x48001400
 80014c4:	48001800 	.word	0x48001800
 80014c8:	48001c00 	.word	0x48001c00
 80014cc:	48002000 	.word	0x48002000
 80014d0:	0800ee84 	.word	0x0800ee84
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2101      	movs	r1, #1
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa01 f303 	lsl.w	r3, r1, r3
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 81c2 	beq.w	8001870 <HAL_GPIO_Init+0x4d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d005      	beq.n	8001504 <HAL_GPIO_Init+0x168>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d144      	bne.n	800158e <HAL_GPIO_Init+0x1f2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00f      	beq.n	800152c <HAL_GPIO_Init+0x190>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d00b      	beq.n	800152c <HAL_GPIO_Init+0x190>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x190>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x190>
 8001524:	21bb      	movs	r1, #187	; 0xbb
 8001526:	4895      	ldr	r0, [pc, #596]	; (800177c <HAL_GPIO_Init+0x3e0>)
 8001528:	f7ff fad5 	bl	8000ad6 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001562:	2201      	movs	r2, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	f003 0201 	and.w	r2, r3, #1
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b03      	cmp	r3, #3
 8001598:	d027      	beq.n	80015ea <HAL_GPIO_Init+0x24e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <HAL_GPIO_Init+0x21e>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x21e>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x21e>
 80015b2:	21dc      	movs	r1, #220	; 0xdc
 80015b4:	4871      	ldr	r0, [pc, #452]	; (800177c <HAL_GPIO_Init+0x3e0>)
 80015b6:	f7ff fa8e 	bl	8000ad6 <assert_failed>

        temp = GPIOx->PUPDR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d153      	bne.n	800169e <HAL_GPIO_Init+0x302>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015fc:	d023      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a5f      	ldr	r2, [pc, #380]	; (8001780 <HAL_GPIO_Init+0x3e4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a5e      	ldr	r2, [pc, #376]	; (8001784 <HAL_GPIO_Init+0x3e8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d01b      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a5d      	ldr	r2, [pc, #372]	; (8001788 <HAL_GPIO_Init+0x3ec>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d017      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a5c      	ldr	r2, [pc, #368]	; (800178c <HAL_GPIO_Init+0x3f0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a5b      	ldr	r2, [pc, #364]	; (8001790 <HAL_GPIO_Init+0x3f4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00f      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_GPIO_Init+0x3f8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00b      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a59      	ldr	r2, [pc, #356]	; (8001798 <HAL_GPIO_Init+0x3fc>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_GPIO_Init+0x400>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x2aa>
 800163e:	21e8      	movs	r1, #232	; 0xe8
 8001640:	484e      	ldr	r0, [pc, #312]	; (800177c <HAL_GPIO_Init+0x3e0>)
 8001642:	f7ff fa48 	bl	8000ad6 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	d903      	bls.n	8001656 <HAL_GPIO_Init+0x2ba>
 800164e:	21e9      	movs	r1, #233	; 0xe9
 8001650:	484a      	ldr	r0, [pc, #296]	; (800177c <HAL_GPIO_Init+0x3e0>)
 8001652:	f7ff fa40 	bl	8000ad6 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0203 	and.w	r2, r3, #3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80c8 	beq.w	8001870 <HAL_GPIO_Init+0x4d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_GPIO_Init+0x404>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e4:	4a2e      	ldr	r2, [pc, #184]	; (80017a0 <HAL_GPIO_Init+0x404>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6613      	str	r3, [r2, #96]	; 0x60
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_GPIO_Init+0x404>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <HAL_GPIO_Init+0x408>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001722:	d041      	beq.n	80017a8 <HAL_GPIO_Init+0x40c>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a16      	ldr	r2, [pc, #88]	; (8001780 <HAL_GPIO_Init+0x3e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d025      	beq.n	8001778 <HAL_GPIO_Init+0x3dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <HAL_GPIO_Init+0x3e8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d01f      	beq.n	8001774 <HAL_GPIO_Init+0x3d8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <HAL_GPIO_Init+0x3ec>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d019      	beq.n	8001770 <HAL_GPIO_Init+0x3d4>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <HAL_GPIO_Init+0x3f0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d013      	beq.n	800176c <HAL_GPIO_Init+0x3d0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_GPIO_Init+0x3f4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00d      	beq.n	8001768 <HAL_GPIO_Init+0x3cc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <HAL_GPIO_Init+0x3f8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <HAL_GPIO_Init+0x3c8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_GPIO_Init+0x3fc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d101      	bne.n	8001760 <HAL_GPIO_Init+0x3c4>
 800175c:	2307      	movs	r3, #7
 800175e:	e024      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 8001760:	2308      	movs	r3, #8
 8001762:	e022      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 8001764:	2306      	movs	r3, #6
 8001766:	e020      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 8001768:	2305      	movs	r3, #5
 800176a:	e01e      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 800176c:	2304      	movs	r3, #4
 800176e:	e01c      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 8001770:	2303      	movs	r3, #3
 8001772:	e01a      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 8001774:	2302      	movs	r3, #2
 8001776:	e018      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 8001778:	2301      	movs	r3, #1
 800177a:	e016      	b.n	80017aa <HAL_GPIO_Init+0x40e>
 800177c:	0800ee84 	.word	0x0800ee84
 8001780:	48000400 	.word	0x48000400
 8001784:	48000800 	.word	0x48000800
 8001788:	48000c00 	.word	0x48000c00
 800178c:	48001000 	.word	0x48001000
 8001790:	48001400 	.word	0x48001400
 8001794:	48001800 	.word	0x48001800
 8001798:	48001c00 	.word	0x48001c00
 800179c:	48002000 	.word	0x48002000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	2300      	movs	r3, #0
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	f002 0203 	and.w	r2, r2, #3
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	4093      	lsls	r3, r2
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ba:	4935      	ldr	r1, [pc, #212]	; (8001890 <HAL_GPIO_Init+0x4f4>)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c8:	4b32      	ldr	r3, [pc, #200]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ec:	4a29      	ldr	r2, [pc, #164]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001816:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x4a4>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x4ce>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_GPIO_Init+0x4f8>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa22 f303 	lsr.w	r3, r2, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	f47f ae27 	bne.w	80014d4 <HAL_GPIO_Init+0x138>
  }
}
 8001886:	bf00      	nop
 8001888:	bf00      	nop
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40010000 	.word	0x40010000
 8001894:	40010400 	.word	0x40010400

08001898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
 80018a4:	4613      	mov	r3, r2
 80018a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_GPIO_WritePin+0x20>
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_GPIO_WritePin+0x2a>
 80018b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <HAL_GPIO_WritePin+0x5c>)
 80018be:	f7ff f90a 	bl	8000ad6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80018c2:	787b      	ldrb	r3, [r7, #1]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_WritePin+0x40>
 80018c8:	787b      	ldrb	r3, [r7, #1]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d004      	beq.n	80018d8 <HAL_GPIO_WritePin+0x40>
 80018ce:	f240 11af 	movw	r1, #431	; 0x1af
 80018d2:	4808      	ldr	r0, [pc, #32]	; (80018f4 <HAL_GPIO_WritePin+0x5c>)
 80018d4:	f7ff f8ff 	bl	8000ad6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	0800ee84 	.word	0x0800ee84

080018f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_GPIO_TogglePin+0x1c>
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	041b      	lsls	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d004      	beq.n	800191e <HAL_GPIO_TogglePin+0x26>
 8001914:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001918:	480a      	ldr	r0, [pc, #40]	; (8001944 <HAL_GPIO_TogglePin+0x4c>)
 800191a:	f7ff f8dc 	bl	8000ad6 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	041a      	lsls	r2, r3, #16
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43d9      	mvns	r1, r3
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	400b      	ands	r3, r1
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	0800ee84 	.word	0x0800ee84

08001948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_PWREx_GetVoltageRange+0x3c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001958:	d102      	bne.n	8001960 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	e00b      	b.n	8001978 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196e:	d102      	bne.n	8001976 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001974:	e000      	b.n	8001978 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001976:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00b      	beq.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x26>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199c:	d007      	beq.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x26>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a4:	d003      	beq.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x26>
 80019a6:	21a7      	movs	r1, #167	; 0xa7
 80019a8:	484d      	ldr	r0, [pc, #308]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x158>)
 80019aa:	f7ff f894 	bl	8000ad6 <assert_failed>

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d141      	bne.n	8001a38 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d131      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019c2:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80019c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019c8:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80019ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d2:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019da:	4a42      	ldr	r2, [pc, #264]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80019dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2232      	movs	r2, #50	; 0x32
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x164>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9b      	lsrs	r3, r3, #18
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f8:	e002      	b.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0c:	d102      	bne.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f2      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a20:	d158      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e057      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a26:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a36:	e04d      	b.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a3e:	d141      	bne.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4c:	d131      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2232      	movs	r2, #50	; 0x32
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x164>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0c9b      	lsrs	r3, r3, #18
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a84:	e002      	b.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d102      	bne.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x118>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f2      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aac:	d112      	bne.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e011      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ac2:	e007      	b.n	8001ad4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8001ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	0800eec0 	.word	0x0800eec0
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afe:	6053      	str	r3, [r2, #4]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40007000 	.word	0x40007000

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f000 bd40 	b.w	80025a4 <HAL_RCC_OscConfig+0xa94>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00a      	beq.n	8001b42 <HAL_RCC_OscConfig+0x32>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_RCC_OscConfig+0x32>
 8001b38:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001b3c:	489b      	ldr	r0, [pc, #620]	; (8001dac <HAL_RCC_OscConfig+0x29c>)
 8001b3e:	f7fe ffca 	bl	8000ad6 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b42:	4b9b      	ldr	r3, [pc, #620]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4c:	4b98      	ldr	r3, [pc, #608]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 813f 	beq.w	8001de2 <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_OscConfig+0x6e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d004      	beq.n	8001b7e <HAL_RCC_OscConfig+0x6e>
 8001b74:	f240 11a9 	movw	r1, #425	; 0x1a9
 8001b78:	488c      	ldr	r0, [pc, #560]	; (8001dac <HAL_RCC_OscConfig+0x29c>)
 8001b7a:	f7fe ffac 	bl	8000ad6 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d904      	bls.n	8001b90 <HAL_RCC_OscConfig+0x80>
 8001b86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b8a:	4888      	ldr	r0, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x29c>)
 8001b8c:	f7fe ffa3 	bl	8000ad6 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d030      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d02c      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d028      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	2b30      	cmp	r3, #48	; 0x30
 8001bae:	d024      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d020      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	2b50      	cmp	r3, #80	; 0x50
 8001bbe:	d01c      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	2b60      	cmp	r3, #96	; 0x60
 8001bc6:	d018      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	2b70      	cmp	r3, #112	; 0x70
 8001bce:	d014      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	2b80      	cmp	r3, #128	; 0x80
 8001bd6:	d010      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	2b90      	cmp	r3, #144	; 0x90
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	2ba0      	cmp	r3, #160	; 0xa0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	2bb0      	cmp	r3, #176	; 0xb0
 8001bee:	d004      	beq.n	8001bfa <HAL_RCC_OscConfig+0xea>
 8001bf0:	f240 11ab 	movw	r1, #427	; 0x1ab
 8001bf4:	486d      	ldr	r0, [pc, #436]	; (8001dac <HAL_RCC_OscConfig+0x29c>)
 8001bf6:	f7fe ff6e 	bl	8000ad6 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <HAL_RCC_OscConfig+0x100>
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	f040 808f 	bne.w	8001d26 <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f040 808b 	bne.w	8001d26 <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c10:	4b67      	ldr	r3, [pc, #412]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <HAL_RCC_OscConfig+0x11a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f000 bcbd 	b.w	80025a4 <HAL_RCC_OscConfig+0xa94>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1a      	ldr	r2, [r3, #32]
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d004      	beq.n	8001c44 <HAL_RCC_OscConfig+0x134>
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c42:	e005      	b.n	8001c50 <HAL_RCC_OscConfig+0x140>
 8001c44:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d224      	bcs.n	8001c9e <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 ffaf 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f000 bc9d 	b.w	80025a4 <HAL_RCC_OscConfig+0xa94>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6a:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b4e      	ldr	r3, [pc, #312]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	494b      	ldr	r1, [pc, #300]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c88:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	4946      	ldr	r1, [pc, #280]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
 8001c9c:	e026      	b.n	8001cec <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	493e      	ldr	r1, [pc, #248]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbc:	4b3c      	ldr	r3, [pc, #240]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	4939      	ldr	r1, [pc, #228]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10a      	bne.n	8001cec <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 ff6e 	bl	8002bbc <RCC_SetFlashLatencyFromMSIRange>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f000 bc5c 	b.w	80025a4 <HAL_RCC_OscConfig+0xa94>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cec:	f000 fe60 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	492d      	ldr	r1, [pc, #180]	; (8001db4 <HAL_RCC_OscConfig+0x2a4>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x2a8>)
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe ffc1 	bl	8000c98 <HAL_InitTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05f      	beq.n	8001de0 <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	f000 bc3f 	b.w	80025a4 <HAL_RCC_OscConfig+0xa94>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d033      	beq.n	8001d96 <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f9ed 	bl	8001118 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d42:	f7ff f9e9 	bl	8001118 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d902      	bls.n	8001d56 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	f000 bc27 	b.w	80025a4 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ef      	beq.n	8001d42 <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	490d      	ldr	r1, [pc, #52]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
 8001d94:	e025      	b.n	8001de2 <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_RCC_OscConfig+0x2a0>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f9b9 	bl	8001118 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001da8:	e013      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2c2>
 8001daa:	bf00      	nop
 8001dac:	0800eefc 	.word	0x0800eefc
 8001db0:	40021000 	.word	0x40021000
 8001db4:	0800f0f0 	.word	0x0800f0f0
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f9aa 	bl	8001118 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e3e8      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd2:	4b97      	ldr	r3, [pc, #604]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2b0>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d07e      	beq.n	8001eec <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00e      	beq.n	8001e14 <HAL_RCC_OscConfig+0x304>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_OscConfig+0x304>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e08:	d004      	beq.n	8001e14 <HAL_RCC_OscConfig+0x304>
 8001e0a:	f240 2117 	movw	r1, #535	; 0x217
 8001e0e:	4889      	ldr	r0, [pc, #548]	; (8002034 <HAL_RCC_OscConfig+0x524>)
 8001e10:	f7fe fe61 	bl	8000ad6 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x316>
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	d10e      	bne.n	8001e3e <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d10b      	bne.n	8001e3e <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e26:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d05b      	beq.n	8001eea <HAL_RCC_OscConfig+0x3da>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d157      	bne.n	8001eea <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e3b2      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x346>
 8001e48:	4b79      	ldr	r3, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a78      	ldr	r2, [pc, #480]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e01d      	b.n	8001e92 <HAL_RCC_OscConfig+0x382>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x36a>
 8001e60:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6f      	ldr	r2, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e00b      	b.n	8001e92 <HAL_RCC_OscConfig+0x382>
 8001e7a:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6c      	ldr	r2, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a69      	ldr	r2, [pc, #420]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d013      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f93d 	bl	8001118 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7ff f939 	bl	8001118 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e377      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x392>
 8001ec0:	e014      	b.n	8001eec <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f929 	bl	8001118 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eca:	f7ff f925 	bl	8001118 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	; 0x64
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e363      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001edc:	4b54      	ldr	r3, [pc, #336]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x3ba>
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d077      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <HAL_RCC_OscConfig+0x404>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f08:	d004      	beq.n	8001f14 <HAL_RCC_OscConfig+0x404>
 8001f0a:	f240 214a 	movw	r1, #586	; 0x24a
 8001f0e:	4849      	ldr	r0, [pc, #292]	; (8002034 <HAL_RCC_OscConfig+0x524>)
 8001f10:	f7fe fde1 	bl	8000ad6 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b7f      	cmp	r3, #127	; 0x7f
 8001f1a:	d904      	bls.n	8001f26 <HAL_RCC_OscConfig+0x416>
 8001f1c:	f240 214b 	movw	r1, #587	; 0x24b
 8001f20:	4844      	ldr	r0, [pc, #272]	; (8002034 <HAL_RCC_OscConfig+0x524>)
 8001f22:	f7fe fdd8 	bl	8000ad6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x428>
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d119      	bne.n	8001f66 <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d116      	bne.n	8001f66 <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x440>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e329      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	4934      	ldr	r1, [pc, #208]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	e040      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d023      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f8cd 	bl	8001118 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff f8c9 	bl	8001118 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e307      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	4920      	ldr	r1, [pc, #128]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	e018      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f8a9 	bl	8001118 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff f8a5 	bl	8001118 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e2e3      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d04e      	beq.n	8002092 <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_OscConfig+0x4fe>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d004      	beq.n	800200e <HAL_RCC_OscConfig+0x4fe>
 8002004:	f240 218b 	movw	r1, #651	; 0x28b
 8002008:	480a      	ldr	r0, [pc, #40]	; (8002034 <HAL_RCC_OscConfig+0x524>)
 800200a:	f7fe fd64 	bl	8000ad6 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d021      	beq.n	800205a <HAL_RCC_OscConfig+0x54a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 8002018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_RCC_OscConfig+0x520>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff f877 	bl	8001118 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800202c:	e00d      	b.n	800204a <HAL_RCC_OscConfig+0x53a>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	0800eefc 	.word	0x0800eefc
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff f86e 	bl	8001118 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x53a>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e2ac      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	4b93      	ldr	r3, [pc, #588]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 800204c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCC_OscConfig+0x528>
 8002058:	e01b      	b.n	8002092 <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002060:	4a8d      	ldr	r2, [pc, #564]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7ff f855 	bl	8001118 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7ff f851 	bl	8001118 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e28f      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ef      	bne.n	8002072 <HAL_RCC_OscConfig+0x562>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80b2 	beq.w	8002204 <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x5b6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_OscConfig+0x5b6>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d004      	beq.n	80020c6 <HAL_RCC_OscConfig+0x5b6>
 80020bc:	f240 21de 	movw	r1, #734	; 0x2de
 80020c0:	4876      	ldr	r0, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x78c>)
 80020c2:	f7fe fd08 	bl	8000ad6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c6:	4b74      	ldr	r3, [pc, #464]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10d      	bne.n	80020ee <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b71      	ldr	r3, [pc, #452]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4a70      	ldr	r2, [pc, #448]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
 80020de:	4b6e      	ldr	r3, [pc, #440]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0x790>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fa:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x790>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a68      	ldr	r2, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x790>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7ff f807 	bl	8001118 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7ff f803 	bl	8001118 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e241      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x790>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d108      	bne.n	8002146 <HAL_RCC_OscConfig+0x636>
 8002134:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a57      	ldr	r2, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002144:	e024      	b.n	8002190 <HAL_RCC_OscConfig+0x680>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b05      	cmp	r3, #5
 800214c:	d110      	bne.n	8002170 <HAL_RCC_OscConfig+0x660>
 800214e:	4b52      	ldr	r3, [pc, #328]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	4a50      	ldr	r2, [pc, #320]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800215e:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800216e:	e00f      	b.n	8002190 <HAL_RCC_OscConfig+0x680>
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002180:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	4a44      	ldr	r2, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d016      	beq.n	80021c6 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe ffbe 	bl	8001118 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe ffba 	bl	8001118 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1f6      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ed      	beq.n	80021a0 <HAL_RCC_OscConfig+0x690>
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7fe ffa7 	bl	8001118 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe ffa3 	bl	8001118 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e1df      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ed      	bne.n	80021ce <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d050      	beq.n	80022b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_OscConfig+0x71a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2b01      	cmp	r3, #1
 800221e:	d004      	beq.n	800222a <HAL_RCC_OscConfig+0x71a>
 8002220:	f240 3143 	movw	r1, #835	; 0x343
 8002224:	481d      	ldr	r0, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x78c>)
 8002226:	f7fe fc56 	bl	8000ad6 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01c      	beq.n	800226c <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7fe ff69 	bl	8001118 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800224a:	f7fe ff65 	bl	8001118 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1a3      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 800225e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ef      	beq.n	800224a <HAL_RCC_OscConfig+0x73a>
 800226a:	e022      	b.n	80022b2 <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 800226e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x788>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7fe ff4c 	bl	8001118 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002284:	f7fe ff48 	bl	8001118 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d908      	bls.n	80022a4 <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e186      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	0800eefc 	.word	0x0800eefc
 80022a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022a4:	4b96      	ldr	r3, [pc, #600]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80022a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e8      	bne.n	8002284 <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x7c4>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d008      	beq.n	80022d4 <HAL_RCC_OscConfig+0x7c4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d004      	beq.n	80022d4 <HAL_RCC_OscConfig+0x7c4>
 80022ca:	f44f 715b 	mov.w	r1, #876	; 0x36c
 80022ce:	488d      	ldr	r0, [pc, #564]	; (8002504 <HAL_RCC_OscConfig+0x9f4>)
 80022d0:	f7fe fc01 	bl	8000ad6 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8162 	beq.w	80025a2 <HAL_RCC_OscConfig+0xa92>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	f040 8138 	bne.w	8002558 <HAL_RCC_OscConfig+0xa48>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d010      	beq.n	8002312 <HAL_RCC_OscConfig+0x802>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d00c      	beq.n	8002312 <HAL_RCC_OscConfig+0x802>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_OscConfig+0x802>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	2b03      	cmp	r3, #3
 8002306:	d004      	beq.n	8002312 <HAL_RCC_OscConfig+0x802>
 8002308:	f44f 715d 	mov.w	r1, #884	; 0x374
 800230c:	487d      	ldr	r0, [pc, #500]	; (8002504 <HAL_RCC_OscConfig+0x9f4>)
 800230e:	f7fe fbe2 	bl	8000ad6 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_RCC_OscConfig+0x812>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	2b10      	cmp	r3, #16
 8002320:	d904      	bls.n	800232c <HAL_RCC_OscConfig+0x81c>
 8002322:	f240 3175 	movw	r1, #885	; 0x375
 8002326:	4877      	ldr	r0, [pc, #476]	; (8002504 <HAL_RCC_OscConfig+0x9f4>)
 8002328:	f7fe fbd5 	bl	8000ad6 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	2b07      	cmp	r3, #7
 8002332:	d903      	bls.n	800233c <HAL_RCC_OscConfig+0x82c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	2b56      	cmp	r3, #86	; 0x56
 800233a:	d904      	bls.n	8002346 <HAL_RCC_OscConfig+0x836>
 800233c:	f240 3176 	movw	r1, #886	; 0x376
 8002340:	4870      	ldr	r0, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x9f4>)
 8002342:	f7fe fbc8 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	2b01      	cmp	r3, #1
 800234c:	d903      	bls.n	8002356 <HAL_RCC_OscConfig+0x846>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002352:	2b1f      	cmp	r3, #31
 8002354:	d904      	bls.n	8002360 <HAL_RCC_OscConfig+0x850>
 8002356:	f44f 715e 	mov.w	r1, #888	; 0x378
 800235a:	486a      	ldr	r0, [pc, #424]	; (8002504 <HAL_RCC_OscConfig+0x9f4>)
 800235c:	f7fe fbbb 	bl	8000ad6 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	2b02      	cmp	r3, #2
 8002366:	d010      	beq.n	800238a <HAL_RCC_OscConfig+0x87a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	2b04      	cmp	r3, #4
 800236e:	d00c      	beq.n	800238a <HAL_RCC_OscConfig+0x87a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002374:	2b06      	cmp	r3, #6
 8002376:	d008      	beq.n	800238a <HAL_RCC_OscConfig+0x87a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	2b08      	cmp	r3, #8
 800237e:	d004      	beq.n	800238a <HAL_RCC_OscConfig+0x87a>
 8002380:	f240 317a 	movw	r1, #890	; 0x37a
 8002384:	485f      	ldr	r0, [pc, #380]	; (8002504 <HAL_RCC_OscConfig+0x9f4>)
 8002386:	f7fe fba6 	bl	8000ad6 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b02      	cmp	r3, #2
 8002390:	d010      	beq.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b04      	cmp	r3, #4
 8002398:	d00c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d008      	beq.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d004      	beq.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
 80023aa:	f240 317b 	movw	r1, #891	; 0x37b
 80023ae:	4855      	ldr	r0, [pc, #340]	; (8002504 <HAL_RCC_OscConfig+0x9f4>)
 80023b0:	f7fe fb91 	bl	8000ad6 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023b4:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d12c      	bne.n	8002422 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	3b01      	subs	r3, #1
 80023d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d123      	bne.n	8002422 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d11b      	bne.n	8002422 <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d113      	bne.n	8002422 <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	3b01      	subs	r3, #1
 8002408:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d109      	bne.n	8002422 <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d074      	beq.n	800250c <HAL_RCC_OscConfig+0x9fc>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d068      	beq.n	80024fa <HAL_RCC_OscConfig+0x9ea>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x930>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_RCC_OscConfig+0x934>
#endif
            )
          {
            return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0af      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002444:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2d      	ldr	r2, [pc, #180]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 800244a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800244e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002450:	f7fe fe62 	bl	8001118 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x95a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe fe5e 	bl	8001118 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x95a>
              {
                return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e09c      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x948>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_RCC_OscConfig+0x9f8>)
 800247c:	4013      	ands	r3, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002486:	3a01      	subs	r2, #1
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002490:	0212      	lsls	r2, r2, #8
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002498:	0852      	lsrs	r2, r2, #1
 800249a:	3a01      	subs	r2, #1
 800249c:	0552      	lsls	r2, r2, #21
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0652      	lsls	r2, r2, #25
 80024aa:	4311      	orrs	r1, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b0:	06d2      	lsls	r2, r2, #27
 80024b2:	430a      	orrs	r2, r1
 80024b4:	4912      	ldr	r1, [pc, #72]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a10      	ldr	r2, [pc, #64]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80024c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80024cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024d2:	f7fe fe21 	bl	8001118 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x9dc>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fe1d 	bl	8001118 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x9dc>
              {
                return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e05b      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RCC_OscConfig+0x9f0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x9ca>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f8:	e053      	b.n	80025a2 <HAL_RCC_OscConfig+0xa92>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e052      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	0800eefc 	.word	0x0800eefc
 8002508:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d144      	bne.n	80025a2 <HAL_RCC_OscConfig+0xa92>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 800251e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002530:	f7fe fdf2 	bl	8001118 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xa3a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fdee 	bl	8001118 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xa3a>
            {
              return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e02c      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xa28>
 8002556:	e024      	b.n	80025a2 <HAL_RCC_OscConfig+0xa92>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d01f      	beq.n	800259e <HAL_RCC_OscConfig+0xa8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 8002564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe fdd5 	bl	8001118 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0xa74>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe fdd1 	bl	8001118 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0xa74>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e00f      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0xa62>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	4905      	ldr	r1, [pc, #20]	; (80025ac <HAL_RCC_OscConfig+0xa9c>)
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0xaa0>)
 8002598:	4013      	ands	r3, r2
 800259a:	60cb      	str	r3, [r1, #12]
 800259c:	e001      	b.n	80025a2 <HAL_RCC_OscConfig+0xa92>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0xa94>
      }
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	feeefffc 	.word	0xfeeefffc

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e1e1      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_RCC_ClockConfig+0x28>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b0f      	cmp	r3, #15
 80025da:	d904      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x32>
 80025dc:	f240 4157 	movw	r1, #1111	; 0x457
 80025e0:	488e      	ldr	r0, [pc, #568]	; (800281c <HAL_RCC_ClockConfig+0x268>)
 80025e2:	f7fe fa78 	bl	8000ad6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d031      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d02e      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d02b      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d028      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d025      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2b05      	cmp	r3, #5
 8002608:	d022      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b06      	cmp	r3, #6
 800260e:	d01f      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b07      	cmp	r3, #7
 8002614:	d01c      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d019      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b09      	cmp	r3, #9
 8002620:	d016      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b0a      	cmp	r3, #10
 8002626:	d013      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b0b      	cmp	r3, #11
 800262c:	d010      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d00d      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b0d      	cmp	r3, #13
 8002638:	d00a      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b0e      	cmp	r3, #14
 800263e:	d007      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	d004      	beq.n	8002650 <HAL_RCC_ClockConfig+0x9c>
 8002646:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800264a:	4874      	ldr	r0, [pc, #464]	; (800281c <HAL_RCC_ClockConfig+0x268>)
 800264c:	f7fe fa43 	bl	8000ad6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b73      	ldr	r3, [pc, #460]	; (8002820 <HAL_RCC_ClockConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d910      	bls.n	8002680 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <HAL_RCC_ClockConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 020f 	bic.w	r2, r3, #15
 8002666:	496e      	ldr	r1, [pc, #440]	; (8002820 <HAL_RCC_ClockConfig+0x26c>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <HAL_RCC_ClockConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e187      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d039      	beq.n	8002700 <HAL_RCC_ClockConfig+0x14c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d024      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b90      	cmp	r3, #144	; 0x90
 80026a2:	d01c      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2ba0      	cmp	r3, #160	; 0xa0
 80026aa:	d018      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2bb0      	cmp	r3, #176	; 0xb0
 80026b2:	d014      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2bc0      	cmp	r3, #192	; 0xc0
 80026ba:	d010      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2bd0      	cmp	r3, #208	; 0xd0
 80026c2:	d00c      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2be0      	cmp	r3, #224	; 0xe0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2bf0      	cmp	r3, #240	; 0xf0
 80026d2:	d004      	beq.n	80026de <HAL_RCC_ClockConfig+0x12a>
 80026d4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80026d8:	4850      	ldr	r0, [pc, #320]	; (800281c <HAL_RCC_ClockConfig+0x268>)
 80026da:	f7fe f9fc 	bl	8000ad6 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d908      	bls.n	8002700 <HAL_RCC_ClockConfig+0x14c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	494a      	ldr	r1, [pc, #296]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8098 	beq.w	800283e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d010      	beq.n	8002738 <HAL_RCC_ClockConfig+0x184>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d00c      	beq.n	8002738 <HAL_RCC_ClockConfig+0x184>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d008      	beq.n	8002738 <HAL_RCC_ClockConfig+0x184>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d004      	beq.n	8002738 <HAL_RCC_ClockConfig+0x184>
 800272e:	f240 417b 	movw	r1, #1147	; 0x47b
 8002732:	483a      	ldr	r0, [pc, #232]	; (800281c <HAL_RCC_ClockConfig+0x268>)
 8002734:	f7fe f9cf 	bl	8000ad6 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d11e      	bne.n	800277e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002740:	4b38      	ldr	r3, [pc, #224]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x19c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e11f      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002750:	f000 fa8e 	bl	8002c70 <RCC_GetSysClockFreqFromPLLSource>
 8002754:	4603      	mov	r3, r0
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <HAL_RCC_ClockConfig+0x274>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d946      	bls.n	80027ea <HAL_RCC_ClockConfig+0x236>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d140      	bne.n	80027ea <HAL_RCC_ClockConfig+0x236>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002768:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e035      	b.n	80027ea <HAL_RCC_ClockConfig+0x236>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0x1e2>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0fc      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0x1fa>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0f0      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0x20a>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e8      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80027be:	f000 f8f7 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a18      	ldr	r2, [pc, #96]	; (8002828 <HAL_RCC_ClockConfig+0x274>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d90f      	bls.n	80027ea <HAL_RCC_ClockConfig+0x236>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0x236>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80027e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	490b      	ldr	r1, [pc, #44]	; (8002824 <HAL_RCC_ClockConfig+0x270>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe fc8c 	bl	8001118 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e013      	b.n	800282c <HAL_RCC_ClockConfig+0x278>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fc88 	bl	8001118 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d90a      	bls.n	800282c <HAL_RCC_ClockConfig+0x278>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0ba      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
 800281a:	bf00      	nop
 800281c:	0800eefc 	.word	0x0800eefc
 8002820:	40022000 	.word	0x40022000
 8002824:	40021000 	.word	0x40021000
 8002828:	04c4b400 	.word	0x04c4b400
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282c:	4b5a      	ldr	r3, [pc, #360]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 020c 	and.w	r2, r3, #12
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	429a      	cmp	r2, r3
 800283c:	d1e2      	bne.n	8002804 <HAL_RCC_ClockConfig+0x250>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d105      	bne.n	8002850 <HAL_RCC_ClockConfig+0x29c>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002844:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a53      	ldr	r2, [pc, #332]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 800284a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800284e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d010      	beq.n	800287e <HAL_RCC_ClockConfig+0x2ca>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002868:	429a      	cmp	r2, r3
 800286a:	d208      	bcs.n	800287e <HAL_RCC_ClockConfig+0x2ca>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	4947      	ldr	r1, [pc, #284]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x3e8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d210      	bcs.n	80028ae <HAL_RCC_ClockConfig+0x2fa>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCC_ClockConfig+0x3e8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 020f 	bic.w	r2, r3, #15
 8002894:	4941      	ldr	r1, [pc, #260]	; (800299c <HAL_RCC_ClockConfig+0x3e8>)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800289c:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_ClockConfig+0x3e8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_ClockConfig+0x2fa>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e070      	b.n	8002990 <HAL_RCC_ClockConfig+0x3dc>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d025      	beq.n	8002906 <HAL_RCC_ClockConfig+0x352>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d018      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x340>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x340>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028d4:	d00e      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x340>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028de:	d009      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x340>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028e8:	d004      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x340>
 80028ea:	f240 41f3 	movw	r1, #1267	; 0x4f3
 80028ee:	482c      	ldr	r0, [pc, #176]	; (80029a0 <HAL_RCC_ClockConfig+0x3ec>)
 80028f0:	f7fe f8f1 	bl	8000ad6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4925      	ldr	r1, [pc, #148]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d026      	beq.n	8002960 <HAL_RCC_ClockConfig+0x3ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d018      	beq.n	800294c <HAL_RCC_ClockConfig+0x398>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d013      	beq.n	800294c <HAL_RCC_ClockConfig+0x398>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800292c:	d00e      	beq.n	800294c <HAL_RCC_ClockConfig+0x398>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002936:	d009      	beq.n	800294c <HAL_RCC_ClockConfig+0x398>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002940:	d004      	beq.n	800294c <HAL_RCC_ClockConfig+0x398>
 8002942:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8002946:	4816      	ldr	r0, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x3ec>)
 8002948:	f7fe f8c5 	bl	8000ad6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	490f      	ldr	r1, [pc, #60]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002960:	f000 f826 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_ClockConfig+0x3e4>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <HAL_RCC_ClockConfig+0x3f0>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x3f4>)
 800297e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x3f8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f987 	bl	8000c98 <HAL_InitTick>
 800298a:	4603      	mov	r3, r0
 800298c:	73fb      	strb	r3, [r7, #15]

  return status;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	40022000 	.word	0x40022000
 80029a0:	0800eefc 	.word	0x0800eefc
 80029a4:	0800f0f0 	.word	0x0800f0f0
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029be:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c8:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x34>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d121      	bne.n	8002a22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d11e      	bne.n	8002a22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a0c:	4a2b      	ldr	r2, [pc, #172]	; (8002abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10d      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	e004      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a34:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b0c      	cmp	r3, #12
 8002a3c:	d134      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d003      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0xac>
 8002a54:	e005      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a58:	617b      	str	r3, [r7, #20]
      break;
 8002a5a:	e005      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a5e:	617b      	str	r3, [r7, #20]
      break;
 8002a60:	e002      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	617b      	str	r3, [r7, #20]
      break;
 8002a66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3301      	adds	r3, #1
 8002a74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	fb03 f202 	mul.w	r2, r3, r2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	0e5b      	lsrs	r3, r3, #25
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aa8:	69bb      	ldr	r3, [r7, #24]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	0800f108 	.word	0x0800f108
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200

08002ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ace:	681b      	ldr	r3, [r3, #0]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000000 	.word	0x20000000

08002ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae4:	f7ff fff0 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4904      	ldr	r1, [pc, #16]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	0800f100 	.word	0x0800f100

08002b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b10:	f7ff ffda 	bl	8002ac8 <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0adb      	lsrs	r3, r3, #11
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4904      	ldr	r1, [pc, #16]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	0800f100 	.word	0x0800f100

08002b38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d104      	bne.n	8002b52 <HAL_RCC_GetClockConfig+0x1a>
 8002b48:	f240 6192 	movw	r1, #1682	; 0x692
 8002b4c:	4818      	ldr	r0, [pc, #96]	; (8002bb0 <HAL_RCC_GetClockConfig+0x78>)
 8002b4e:	f7fd ffc2 	bl	8000ad6 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d104      	bne.n	8002b62 <HAL_RCC_GetClockConfig+0x2a>
 8002b58:	f240 6193 	movw	r1, #1683	; 0x693
 8002b5c:	4814      	ldr	r0, [pc, #80]	; (8002bb0 <HAL_RCC_GetClockConfig+0x78>)
 8002b5e:	f7fd ffba 	bl	8000ad6 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	220f      	movs	r2, #15
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0203 	and.w	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b74:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_GetClockConfig+0x7c>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RCC_GetClockConfig+0x80>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	0800eefc 	.word	0x0800eefc
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40022000 	.word	0x40022000

08002bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bd4:	f7fe feb8 	bl	8001948 <HAL_PWREx_GetVoltageRange>
 8002bd8:	6178      	str	r0, [r7, #20]
 8002bda:	e014      	b.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a21      	ldr	r2, [pc, #132]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bf4:	f7fe fea8 	bl	8001948 <HAL_PWREx_GetVoltageRange>
 8002bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d10b      	bne.n	8002c26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d913      	bls.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2ba0      	cmp	r3, #160	; 0xa0
 8002c18:	d902      	bls.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	e00d      	b.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	e00a      	b.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b7f      	cmp	r3, #127	; 0x7f
 8002c2a:	d902      	bls.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	e004      	b.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b70      	cmp	r3, #112	; 0x70
 8002c36:	d101      	bne.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c38:	2301      	movs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 020f 	bic.w	r2, r3, #15
 8002c44:	4909      	ldr	r1, [pc, #36]	; (8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40022000 	.word	0x40022000

08002c70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c76:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d00b      	beq.n	8002c9e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d825      	bhi.n	8002cd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d008      	beq.n	8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d11f      	bne.n	8002cd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c9a:	613b      	str	r3, [r7, #16]
    break;
 8002c9c:	e01f      	b.n	8002cde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002c9e:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ca0:	613b      	str	r3, [r7, #16]
    break;
 8002ca2:	e01c      	b.n	8002cde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e005      	b.n	8002ccc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cc0:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ccc:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	613b      	str	r3, [r7, #16]
    break;
 8002cd6:	e002      	b.n	8002cde <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
    break;
 8002cdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	fb03 f202 	mul.w	r2, r3, r2
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	0e5b      	lsrs	r3, r3, #25
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d1e:	683b      	ldr	r3, [r7, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200
 8002d38:	0800f108 	.word	0x0800f108

08002d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d44:	2300      	movs	r3, #0
 8002d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d48:	2300      	movs	r3, #0
 8002d4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b92      	ldr	r3, [pc, #584]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x30>
 8002d64:	21c9      	movs	r1, #201	; 0xc9
 8002d66:	4891      	ldr	r0, [pc, #580]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002d68:	f7fd feb5 	bl	8000ad6 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d058      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d00f      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d00b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d94:	2b60      	cmp	r3, #96	; 0x60
 8002d96:	d007      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d003      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002da0:	21d1      	movs	r1, #209	; 0xd1
 8002da2:	4882      	ldr	r0, [pc, #520]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002da4:	f7fd fe97 	bl	8000ad6 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dac:	2b80      	cmp	r3, #128	; 0x80
 8002dae:	d02a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d825      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8002db4:	2b60      	cmp	r3, #96	; 0x60
 8002db6:	d026      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002db8:	2b60      	cmp	r3, #96	; 0x60
 8002dba:	d821      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d006      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x92>
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d81d      	bhi.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d010      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002dcc:	e018      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dce:	4b78      	ldr	r3, [pc, #480]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a77      	ldr	r2, [pc, #476]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dda:	e015      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xcc>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f001 fc1e 	bl	8004624 <RCCEx_PLLSAI1_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dec:	e00c      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xcc>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3320      	adds	r3, #32
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fd95 	bl	8004924 <RCCEx_PLLSAI2_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfe:	e003      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xcc>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	74fb      	strb	r3, [r7, #19]
      break;
 8002e04:	e000      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      break;
 8002e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0e:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e14:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1c:	4964      	ldr	r1, [pc, #400]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e24:	e001      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xee>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d064      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d018      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e46:	d013      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d00e      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e5a:	d009      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d004      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002e66:	f240 110f 	movw	r1, #271	; 0x10f
 8002e6a:	4850      	ldr	r0, [pc, #320]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002e6c:	f7fd fe33 	bl	8000ad6 <assert_failed>

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e78:	d030      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d82a      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8002e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e84:	d02a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 8002e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e8a:	d824      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8002e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e96:	d81e      	bhi.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8002e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002ea2:	e018      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ea4:	4b42      	ldr	r3, [pc, #264]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a41      	ldr	r2, [pc, #260]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eb0:	e015      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1a2>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fbb3 	bl	8004624 <RCCEx_PLLSAI1_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ec2:	e00c      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1a2>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3320      	adds	r3, #32
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 fd2a 	bl	8004924 <RCCEx_PLLSAI2_Config>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      break;
 8002edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	492f      	ldr	r1, [pc, #188]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002efa:	e001      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80c6 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d010      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f3e:	d004      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8002f40:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002f44:	4819      	ldr	r0, [pc, #100]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002f46:	f7fd fdc6 	bl	8000ad6 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f88:	f7fe f8c6 	bl	8001118 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f8e:	e013      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f90:	f7fe f8c2 	bl	8001118 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d90c      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        ret = HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	74fb      	strb	r3, [r7, #19]
        break;
 8002fa2:	e00f      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002fa4:	013f7fff 	.word	0x013f7fff
 8002fa8:	fec08000 	.word	0xfec08000
 8002fac:	0800ef34 	.word	0x0800ef34
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0e5      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x254>
      }
    }

    if(ret == HAL_OK)
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d15c      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01f      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d019      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff4:	4b22      	ldr	r3, [pc, #136]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	4a21      	ldr	r2, [pc, #132]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800300c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003014:	4a1a      	ldr	r2, [pc, #104]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x318>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe f877 	bl	8001118 <HAL_GetTick>
 800302a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302c:	e00b      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe f873 	bl	8001118 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d902      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x30a>
          {
            ret = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	74fb      	strb	r3, [r7, #19]
            break;
 8003044:	e006      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x318>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ec      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
          }
        }
      }

      if(ret == HAL_OK)
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x338>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	4905      	ldr	r1, [pc, #20]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003072:	e009      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800307a:	bf00      	nop
 800307c:	40007000 	.word	0x40007000
 8003080:	40021000 	.word	0x40021000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003088:	7c7b      	ldrb	r3, [r7, #17]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	4a8c      	ldr	r2, [pc, #560]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01f      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d00c      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d008      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d004      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80030c6:	f240 1199 	movw	r1, #409	; 0x199
 80030ca:	487f      	ldr	r0, [pc, #508]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80030cc:	f7fd fd03 	bl	8000ad6 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d0:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	4979      	ldr	r1, [pc, #484]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01f      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d010      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d00c      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d008      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b08      	cmp	r3, #8
 8003110:	d004      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003112:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003116:	486c      	ldr	r0, [pc, #432]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003118:	f7fd fcdd 	bl	8000ad6 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800311c:	4b69      	ldr	r3, [pc, #420]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f023 020c 	bic.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4966      	ldr	r1, [pc, #408]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01f      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	2b10      	cmp	r3, #16
 800314c:	d00c      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	2b30      	cmp	r3, #48	; 0x30
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	2b20      	cmp	r3, #32
 800315c:	d004      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800315e:	f240 11af 	movw	r1, #431	; 0x1af
 8003162:	4859      	ldr	r0, [pc, #356]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003164:	f7fd fcb7 	bl	8000ad6 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003168:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4953      	ldr	r1, [pc, #332]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01f      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d00c      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319e:	2bc0      	cmp	r3, #192	; 0xc0
 80031a0:	d008      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d004      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80031aa:	f240 11bd 	movw	r1, #445	; 0x1bd
 80031ae:	4846      	ldr	r0, [pc, #280]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80031b0:	f7fd fc91 	bl	8000ad6 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	4940      	ldr	r1, [pc, #256]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d022      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d013      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e6:	d00e      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f0:	d009      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fa:	d004      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80031fc:	f240 11cb 	movw	r1, #459	; 0x1cb
 8003200:	4831      	ldr	r0, [pc, #196]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003202:	f7fd fc68 	bl	8000ad6 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003214:	492b      	ldr	r1, [pc, #172]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	2b00      	cmp	r3, #0
 800322e:	d013      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d00e      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	d004      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 800324e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003252:	481d      	ldr	r0, [pc, #116]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003254:	f7fd fc3f 	bl	8000ad6 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	4917      	ldr	r1, [pc, #92]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327e:	2b00      	cmp	r3, #0
 8003280:	d013      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800328a:	d00e      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x56e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003290:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003294:	d009      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800329e:	d004      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80032a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80032a4:	4808      	ldr	r0, [pc, #32]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80032a6:	f7fd fc16 	bl	8000ad6 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b8:	4902      	ldr	r1, [pc, #8]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032c0:	e004      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x590>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	0800ef34 	.word	0x0800ef34
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d022      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e8:	d00e      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f2:	d009      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032fc:	d004      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032fe:	f240 11e7 	movw	r1, #487	; 0x1e7
 8003302:	489f      	ldr	r0, [pc, #636]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003304:	f7fd fbe7 	bl	8000ad6 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003308:	4b9e      	ldr	r3, [pc, #632]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003316:	499b      	ldr	r1, [pc, #620]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01d      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	d009      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003344:	d004      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003346:	f240 11ef 	movw	r1, #495	; 0x1ef
 800334a:	488d      	ldr	r0, [pc, #564]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800334c:	f7fd fbc3 	bl	8000ad6 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003350:	4b8c      	ldr	r3, [pc, #560]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	4989      	ldr	r1, [pc, #548]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01d      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x672>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003382:	d009      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338c:	d004      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800338e:	f240 11fb 	movw	r1, #507	; 0x1fb
 8003392:	487b      	ldr	r0, [pc, #492]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003394:	f7fd fb9f 	bl	8000ad6 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003398:	4b7a      	ldr	r3, [pc, #488]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	4977      	ldr	r1, [pc, #476]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01d      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00e      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ca:	d009      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033d4:	d004      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80033d6:	f240 2107 	movw	r1, #519	; 0x207
 80033da:	4869      	ldr	r0, [pc, #420]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80033dc:	f7fd fb7b 	bl	8000ad6 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	4965      	ldr	r1, [pc, #404]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01b      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	2b01      	cmp	r3, #1
 8003410:	d008      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003416:	2b02      	cmp	r3, #2
 8003418:	d004      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 800341a:	f240 2113 	movw	r1, #531	; 0x213
 800341e:	4858      	ldr	r0, [pc, #352]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003420:	f7fd fb59 	bl	8000ad6 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003424:	4b57      	ldr	r3, [pc, #348]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342a:	f023 0203 	bic.w	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003432:	4954      	ldr	r1, [pc, #336]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d040      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	2b00      	cmp	r3, #0
 800344c:	d013      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003456:	d00e      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003460:	d009      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800346a:	d004      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800346c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003470:	4843      	ldr	r0, [pc, #268]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003472:	f7fd fb30 	bl	8000ad6 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003476:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	493f      	ldr	r1, [pc, #252]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003494:	d106      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003496:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a3a      	ldr	r2, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800349c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a0:	60d3      	str	r3, [r2, #12]
 80034a2:	e011      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f001 f8b5 	bl	8004624 <RCCEx_PLLSAI1_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
        {
          /* set overall return value */
          status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d06b      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x870>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034dc:	d017      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ee:	d00e      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f8:	d009      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003502:	d004      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003504:	f240 2141 	movw	r1, #577	; 0x241
 8003508:	481d      	ldr	r0, [pc, #116]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800350a:	f7fd fae4 	bl	8000ad6 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003516:	d108      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800351a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003528:	e012      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x814>
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800352c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003536:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003548:	490e      	ldr	r1, [pc, #56]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003558:	d106      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x82c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003564:	60d3      	str	r3, [r2, #12]
 8003566:	e021      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x870>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003570:	d10a      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003572:	4b04      	ldr	r3, [pc, #16]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4a03      	ldr	r2, [pc, #12]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	60d3      	str	r3, [r2, #12]
 800357e:	e015      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x870>
 8003580:	0800ef34 	.word	0x0800ef34
 8003584:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x870>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f001 f843 	bl	8004624 <RCCEx_PLLSAI1_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x870>
      {
        /* set overall return value */
        status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d040      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c8:	d00e      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d2:	d009      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80035dc:	d004      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 80035de:	f240 2166 	movw	r1, #614	; 0x266
 80035e2:	4873      	ldr	r0, [pc, #460]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 80035e4:	f7fd fa77 	bl	8000ad6 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e8:	4b72      	ldr	r3, [pc, #456]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f6:	496f      	ldr	r1, [pc, #444]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003606:	d106      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003608:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a69      	ldr	r2, [pc, #420]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800360e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003612:	60d3      	str	r3, [r2, #12]
 8003614:	e011      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800361a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800361e:	d10c      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	2101      	movs	r1, #1
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fffc 	bl	8004624 <RCCEx_PLLSAI1_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      {
        /* set overall return value */
        status = ret;
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d034      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d010      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x936>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003662:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003666:	d004      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8003668:	f240 2186 	movw	r1, #646	; 0x286
 800366c:	4850      	ldr	r0, [pc, #320]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 800366e:	f7fd fa32 	bl	8000ad6 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003672:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003682:	494c      	ldr	r1, [pc, #304]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 ffc1 	bl	8004624 <RCCEx_PLLSAI1_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      {
        /* set overall return value */
        status = ret;
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d004      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80036d0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80036d4:	4836      	ldr	r0, [pc, #216]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 80036d6:	f7fd f9fe 	bl	8000ad6 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80036dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036e0:	f023 0204 	bic.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ea:	4932      	ldr	r1, [pc, #200]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01f      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xa02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	2b08      	cmp	r3, #8
 8003710:	d009      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	2b10      	cmp	r3, #16
 800371a:	d004      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
 800371c:	f240 21cb 	movw	r1, #715	; 0x2cb
 8003720:	4823      	ldr	r0, [pc, #140]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8003722:	f7fd f9d8 	bl	8000ad6 <assert_failed>

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003728:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800372c:	f023 0218 	bic.w	r2, r3, #24
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	491f      	ldr	r1, [pc, #124]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02d      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d010      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800376a:	d004      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800376c:	f240 311f 	movw	r1, #799	; 0x31f
 8003770:	480f      	ldr	r0, [pc, #60]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xa74>)
 8003772:	f7fd f9b0 	bl	8000ad6 <assert_failed>

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003776:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800377c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003786:	490b      	ldr	r1, [pc, #44]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003798:	d105      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	4a05      	ldr	r2, [pc, #20]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80037a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	0800ef34 	.word	0x0800ef34
 80037b4:	40021000 	.word	0x40021000

080037b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61fb      	str	r3, [r7, #28]
#if defined(SDMMC1) && defined(RCC_CCIPR2_SDMMCSEL)
  uint32_t pllp;  /* no init needed */
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x148>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 80037d8:	f240 4187 	movw	r1, #1159	; 0x487
 80037dc:	484a      	ldr	r0, [pc, #296]	; (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80037de:	f7fd f97a 	bl	8000ad6 <assert_failed>

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037e8:	d13e      	bne.n	8003868 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80037ea:	4b48      	ldr	r3, [pc, #288]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f4:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fc:	d028      	beq.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003804:	f200 86f9 	bhi.w	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d005      	beq.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003816:	d00e      	beq.n	8003836 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003818:	f000 beef 	b.w	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	f040 86e9 	bne.w	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
        frequency = LSE_VALUE;
 800382c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003830:	61fb      	str	r3, [r7, #28]
      break;
 8003832:	f000 bee4 	b.w	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003836:	4b35      	ldr	r3, [pc, #212]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	f040 86de 	bne.w	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSI_VALUE;
 8003846:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800384a:	61fb      	str	r3, [r7, #28]
      break;
 800384c:	f000 bed9 	b.w	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003850:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800385c:	f040 86d3 	bne.w	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
        frequency = HSE_VALUE / 32U;
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003862:	61fb      	str	r3, [r7, #28]
      break;
 8003864:	f000 becf 	b.w	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003868:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d036      	beq.n	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d850      	bhi.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d003      	beq.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d020      	beq.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800388a:	e049      	b.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d116      	bne.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003898:	4b1c      	ldr	r3, [pc, #112]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	e005      	b.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80038b0:	4b16      	ldr	r3, [pc, #88]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80038be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038c4:	e02f      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
      break;
 80038ca:	e02c      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d8:	d102      	bne.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      {
        pllvco = HSI_VALUE;
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80038dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038de:	e022      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
      break;
 80038e4:	e01f      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f2:	d102      	bne.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        pllvco = HSE_VALUE;
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038f6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80038f8:	e015      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        pllvco = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
      break;
 80038fe:	e012      	b.n	8003926 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8003900:	013f7fff 	.word	0x013f7fff
 8003904:	fec08000 	.word	0xfec08000
 8003908:	0800ef34 	.word	0x0800ef34
 800390c:	40021000 	.word	0x40021000
 8003910:	0003d090 	.word	0x0003d090
 8003914:	0800f108 	.word	0x0800f108
 8003918:	00f42400 	.word	0x00f42400
 800391c:	007a1200 	.word	0x007a1200
    default:
      /* No source */
      pllvco = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
      break;
 8003924:	bf00      	nop
    }

    switch(PeriphClk)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800392c:	f000 85fb 	beq.w	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003936:	f200 8668 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003940:	f000 845e 	beq.w	8004200 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800394a:	f200 865e 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003954:	f000 8526 	beq.w	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395e:	f200 8654 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003968:	f000 817c 	beq.w	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003972:	f200 864a 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800397c:	f000 80c2 	beq.w	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003986:	f200 8640 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	f000 8425 	beq.w	80041de <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	f200 8636 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a4:	f000 83d9 	beq.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ae:	f200 862c 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b8:	f000 80a4 	beq.w	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	f200 8622 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039cc:	f000 8092 	beq.w	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d6:	f200 8618 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e0:	f000 8080 	beq.w	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ea:	f200 860e 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	f000 8549 	beq.w	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fe:	f200 8604 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a08:	f000 84f5 	beq.w	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	f200 85fa 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1c:	f000 8496 	beq.w	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a26:	f200 85f0 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b80      	cmp	r3, #128	; 0x80
 8003a2e:	f000 8461 	beq.w	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	f200 85e8 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d84b      	bhi.n	8003ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 85e1 	beq.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	2b1f      	cmp	r3, #31
 8003a4e:	f200 85dc 	bhi.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003e59 	.word	0x08003e59
 8003a5c:	08003ec7 	.word	0x08003ec7
 8003a60:	0800460b 	.word	0x0800460b
 8003a64:	08003f5b 	.word	0x08003f5b
 8003a68:	0800460b 	.word	0x0800460b
 8003a6c:	0800460b 	.word	0x0800460b
 8003a70:	0800460b 	.word	0x0800460b
 8003a74:	08003fd3 	.word	0x08003fd3
 8003a78:	0800460b 	.word	0x0800460b
 8003a7c:	0800460b 	.word	0x0800460b
 8003a80:	0800460b 	.word	0x0800460b
 8003a84:	0800460b 	.word	0x0800460b
 8003a88:	0800460b 	.word	0x0800460b
 8003a8c:	0800460b 	.word	0x0800460b
 8003a90:	0800460b 	.word	0x0800460b
 8003a94:	08004057 	.word	0x08004057
 8003a98:	0800460b 	.word	0x0800460b
 8003a9c:	0800460b 	.word	0x0800460b
 8003aa0:	0800460b 	.word	0x0800460b
 8003aa4:	0800460b 	.word	0x0800460b
 8003aa8:	0800460b 	.word	0x0800460b
 8003aac:	0800460b 	.word	0x0800460b
 8003ab0:	0800460b 	.word	0x0800460b
 8003ab4:	0800460b 	.word	0x0800460b
 8003ab8:	0800460b 	.word	0x0800460b
 8003abc:	0800460b 	.word	0x0800460b
 8003ac0:	0800460b 	.word	0x0800460b
 8003ac4:	0800460b 	.word	0x0800460b
 8003ac8:	0800460b 	.word	0x0800460b
 8003acc:	0800460b 	.word	0x0800460b
 8003ad0:	0800460b 	.word	0x0800460b
 8003ad4:	080040d9 	.word	0x080040d9
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	f000 83de 	beq.w	800429c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003ae0:	f000 bd93 	b.w	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xe52>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003ae4:	69b9      	ldr	r1, [r7, #24]
 8003ae6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003aea:	f001 f89b 	bl	8004c24 <RCCEx_GetSAIxPeriphCLKFreq>
 8003aee:	61f8      	str	r0, [r7, #28]
      break;
 8003af0:	f000 bd8e 	b.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003af4:	69b9      	ldr	r1, [r7, #24]
 8003af6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003afa:	f001 f893 	bl	8004c24 <RCCEx_GetSAIxPeriphCLKFreq>
 8003afe:	61f8      	str	r0, [r7, #28]
      break;
 8003b00:	f000 bd86 	b.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003b04:	4b9a      	ldr	r3, [pc, #616]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b16:	d015      	beq.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003b1e:	f200 8092 	bhi.w	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b28:	d029      	beq.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b30:	f200 8089 	bhi.w	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d07b      	beq.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b40:	d04a      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          break;
 8003b42:	e080      	b.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003b44:	4b8a      	ldr	r3, [pc, #552]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d17d      	bne.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003b50:	4b87      	ldr	r3, [pc, #540]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 8003b5c:	4b84      	ldr	r3, [pc, #528]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	e005      	b.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8003b68:	4b81      	ldr	r3, [pc, #516]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	4a7f      	ldr	r2, [pc, #508]	; (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	61fb      	str	r3, [r7, #28]
          break;
 8003b7c:	e066      	b.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x494>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003b7e:	4b7c      	ldr	r3, [pc, #496]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b8a:	d162      	bne.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003b8c:	4b78      	ldr	r3, [pc, #480]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b98:	d15b      	bne.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003b9a:	4b75      	ldr	r3, [pc, #468]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	fb03 f202 	mul.w	r2, r3, r2
 8003bae:	4b70      	ldr	r3, [pc, #448]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	3301      	adds	r3, #1
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0d5b      	lsrs	r3, r3, #21
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	61fb      	str	r3, [r7, #28]
          break;
 8003bd6:	e03c      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003bd8:	4b65      	ldr	r3, [pc, #404]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be4:	d138      	bne.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003be6:	4b62      	ldr	r3, [pc, #392]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf2:	d131      	bne.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003bf4:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfe:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	fb03 f202 	mul.w	r2, r3, r2
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	3301      	adds	r3, #1
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003c1a:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	0d5b      	lsrs	r3, r3, #21
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	3301      	adds	r3, #1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	61fb      	str	r3, [r7, #28]
          break;
 8003c30:	e012      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003c32:	4b4f      	ldr	r3, [pc, #316]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d10e      	bne.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
            frequency = HSI48_VALUE;
 8003c40:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>)
 8003c42:	61fb      	str	r3, [r7, #28]
          break;
 8003c44:	e00b      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          break;
 8003c46:	bf00      	nop
 8003c48:	f000 bce2 	b.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003c4c:	bf00      	nop
 8003c4e:	f000 bcdf 	b.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003c52:	bf00      	nop
 8003c54:	f000 bcdc 	b.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003c58:	bf00      	nop
 8003c5a:	f000 bcd9 	b.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003c5e:	bf00      	nop
        break;
 8003c60:	f000 bcd6 	b.w	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003c64:	4b42      	ldr	r3, [pc, #264]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c72:	d13d      	bne.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c74:	4b3e      	ldr	r3, [pc, #248]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c80:	f040 84c5 	bne.w	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003c84:	4b3a      	ldr	r3, [pc, #232]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c90:	f040 84bd 	bne.w	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c94:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9e:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	fb03 f202 	mul.w	r2, r3, r2
 8003ca8:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003cba:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	0edb      	lsrs	r3, r3, #27
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x526>
                pllp = 17U;
 8003cd8:	2311      	movs	r3, #17
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
                pllp = 7U;
 8003cde:	2307      	movs	r3, #7
 8003ce0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	61fb      	str	r3, [r7, #28]
      break;
 8003cec:	f000 bc8f 	b.w	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d02:	d016      	beq.n	8003d32 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003d0a:	f200 809b 	bhi.w	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d14:	d032      	beq.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1c:	f200 8092 	bhi.w	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8084 	beq.w	8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d2e:	d052      	beq.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8003d30:	e088      	b.n	8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	f040 8084 	bne.w	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	e005      	b.n	8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	4a03      	ldr	r2, [pc, #12]	; (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>)
 8003d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6a:	61fb      	str	r3, [r7, #28]
          break;
 8003d6c:	e06c      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	0800f108 	.word	0x0800f108
 8003d78:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d7c:	4ba5      	ldr	r3, [pc, #660]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d88:	d160      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003d8a:	4ba2      	ldr	r3, [pc, #648]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d159      	bne.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d98:	4b9e      	ldr	r3, [pc, #632]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	0a1b      	lsrs	r3, r3, #8
 8003d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003da2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	fb03 f202 	mul.w	r2, r3, r2
 8003dac:	4b99      	ldr	r3, [pc, #612]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	3301      	adds	r3, #1
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003dbe:	4b95      	ldr	r3, [pc, #596]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	0d5b      	lsrs	r3, r3, #21
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	61fb      	str	r3, [r7, #28]
          break;
 8003dd4:	e03a      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x694>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003dd6:	4b8f      	ldr	r3, [pc, #572]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de2:	d135      	bne.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003de4:	4b8b      	ldr	r3, [pc, #556]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df0:	d12e      	bne.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003df2:	4b88      	ldr	r3, [pc, #544]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfc:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	fb03 f202 	mul.w	r2, r3, r2
 8003e06:	4b83      	ldr	r3, [pc, #524]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	3301      	adds	r3, #1
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003e18:	4b7e      	ldr	r3, [pc, #504]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	0d5b      	lsrs	r3, r3, #21
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	61fb      	str	r3, [r7, #28]
          break;
 8003e2e:	e00f      	b.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003e30:	4b78      	ldr	r3, [pc, #480]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d10a      	bne.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI48_VALUE;
 8003e3e:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x860>)
 8003e40:	61fb      	str	r3, [r7, #28]
          break;
 8003e42:	e007      	b.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          break;
 8003e44:	bf00      	nop
 8003e46:	e3e2      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 8003e48:	bf00      	nop
 8003e4a:	e3e0      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 8003e4c:	bf00      	nop
 8003e4e:	e3de      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 8003e50:	bf00      	nop
 8003e52:	e3dc      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
          break;
 8003e54:	bf00      	nop
      break;
 8003e56:	e3da      	b.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xe56>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003e58:	4b6e      	ldr	r3, [pc, #440]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d827      	bhi.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e89 	.word	0x08003e89
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003ea5 	.word	0x08003ea5
          frequency = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7fe fe44 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8003e84:	61f8      	str	r0, [r7, #28]
          break;
 8003e86:	e01d      	b.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e88:	f7fe fd92 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8003e8c:	61f8      	str	r0, [r7, #28]
          break;
 8003e8e:	e019      	b.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e90:	4b60      	ldr	r3, [pc, #384]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9c:	d10f      	bne.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x706>
            frequency = HSI_VALUE;
 8003e9e:	4b5f      	ldr	r3, [pc, #380]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8003ea0:	61fb      	str	r3, [r7, #28]
          break;
 8003ea2:	e00c      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x706>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ea4:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
            frequency = LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	61fb      	str	r3, [r7, #28]
          break;
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          break;
 8003eba:	bf00      	nop
 8003ebc:	e3a8      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003ebe:	bf00      	nop
 8003ec0:	e3a6      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003ec2:	bf00      	nop
        break;
 8003ec4:	e3a4      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d83a      	bhi.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f4f 	.word	0x08003f4f
 8003ee8:	08003f4f 	.word	0x08003f4f
 8003eec:	08003f4f 	.word	0x08003f4f
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f4f 	.word	0x08003f4f
 8003ef8:	08003f4f 	.word	0x08003f4f
 8003efc:	08003f4f 	.word	0x08003f4f
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f4f 	.word	0x08003f4f
 8003f08:	08003f4f 	.word	0x08003f4f
 8003f0c:	08003f4f 	.word	0x08003f4f
 8003f10:	08003f39 	.word	0x08003f39
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe fde4 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003f18:	61f8      	str	r0, [r7, #28]
          break;
 8003f1a:	e01d      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f1c:	f7fe fd48 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8003f20:	61f8      	str	r0, [r7, #28]
          break;
 8003f22:	e019      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f24:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d10f      	bne.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
            frequency = HSI_VALUE;
 8003f32:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8003f34:	61fb      	str	r3, [r7, #28]
          break;
 8003f36:	e00c      	b.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f38:	4b36      	ldr	r3, [pc, #216]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d107      	bne.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
            frequency = LSE_VALUE;
 8003f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4a:	61fb      	str	r3, [r7, #28]
          break;
 8003f4c:	e003      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
          break;
 8003f4e:	bf00      	nop
 8003f50:	e35e      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003f52:	bf00      	nop
 8003f54:	e35c      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003f56:	bf00      	nop
        break;
 8003f58:	e35a      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003f5a:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b30      	cmp	r3, #48	; 0x30
 8003f6a:	d021      	beq.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b30      	cmp	r3, #48	; 0x30
 8003f70:	d829      	bhi.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d011      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d823      	bhi.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d004      	beq.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          break;
 8003f8a:	e01c      	b.n	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe fda8 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8003f90:	61f8      	str	r0, [r7, #28]
          break;
 8003f92:	e01d      	b.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f94:	f7fe fd0c 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8003f98:	61f8      	str	r0, [r7, #28]
          break;
 8003f9a:	e019      	b.n	8003fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa8:	d10f      	bne.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            frequency = HSI_VALUE;
 8003faa:	4b1c      	ldr	r3, [pc, #112]	; (800401c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8003fac:	61fb      	str	r3, [r7, #28]
          break;
 8003fae:	e00c      	b.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fb0:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d107      	bne.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc2:	61fb      	str	r3, [r7, #28]
          break;
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          break;
 8003fc6:	bf00      	nop
 8003fc8:	e322      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003fca:	bf00      	nop
 8003fcc:	e320      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8003fce:	bf00      	nop
        break;
 8003fd0:	e31e      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2bc0      	cmp	r3, #192	; 0xc0
 8003fe2:	d027      	beq.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fe8:	d82f      	bhi.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d017      	beq.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b80      	cmp	r3, #128	; 0x80
 8003ff4:	d829      	bhi.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d004      	beq.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
          break;
 8004002:	e022      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe fd6c 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004008:	61f8      	str	r0, [r7, #28]
          break;
 800400a:	e023      	b.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
          frequency = HAL_RCC_GetSysClockFreq();
 800400c:	f7fe fcd0 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8004010:	61f8      	str	r0, [r7, #28]
          break;
 8004012:	e01f      	b.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004014:	40021000 	.word	0x40021000
 8004018:	02dc6c00 	.word	0x02dc6c00
 800401c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004020:	4b9b      	ldr	r3, [pc, #620]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d10f      	bne.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800402e:	4b99      	ldr	r3, [pc, #612]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004030:	61fb      	str	r3, [r7, #28]
          break;
 8004032:	e00c      	b.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004034:	4b96      	ldr	r3, [pc, #600]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61fb      	str	r3, [r7, #28]
          break;
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
          break;
 800404a:	bf00      	nop
 800404c:	e2e0      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800404e:	bf00      	nop
 8004050:	e2de      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004052:	bf00      	nop
        break;
 8004054:	e2dc      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004056:	4b8e      	ldr	r3, [pc, #568]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004068:	d025      	beq.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004070:	d82c      	bhi.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d013      	beq.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004080:	d824      	bhi.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d004      	beq.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d004      	beq.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
          break;
 8004090:	e01c      	b.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004092:	f7fe fd25 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004096:	61f8      	str	r0, [r7, #28]
          break;
 8004098:	e01d      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          frequency = HAL_RCC_GetSysClockFreq();
 800409a:	f7fe fc89 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800409e:	61f8      	str	r0, [r7, #28]
          break;
 80040a0:	e019      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040a2:	4b7b      	ldr	r3, [pc, #492]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ae:	d10f      	bne.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            frequency = HSI_VALUE;
 80040b0:	4b78      	ldr	r3, [pc, #480]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80040b2:	61fb      	str	r3, [r7, #28]
          break;
 80040b4:	e00c      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040b6:	4b76      	ldr	r3, [pc, #472]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d107      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = LSE_VALUE;
 80040c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c8:	61fb      	str	r3, [r7, #28]
          break;
 80040ca:	e003      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          break;
 80040cc:	bf00      	nop
 80040ce:	e29f      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80040d0:	bf00      	nop
 80040d2:	e29d      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80040d4:	bf00      	nop
        break;
 80040d6:	e29b      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80040d8:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ea:	d025      	beq.n	8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f2:	d82c      	bhi.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fa:	d013      	beq.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004102:	d824      	bhi.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004110:	d004      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          break;
 8004112:	e01c      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x996>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004114:	f7fe fce4 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004118:	61f8      	str	r0, [r7, #28]
          break;
 800411a:	e01d      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800411c:	f7fe fc48 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8004120:	61f8      	str	r0, [r7, #28]
          break;
 8004122:	e019      	b.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004124:	4b5a      	ldr	r3, [pc, #360]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004130:	d10f      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            frequency = HSI_VALUE;
 8004132:	4b58      	ldr	r3, [pc, #352]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004134:	61fb      	str	r3, [r7, #28]
          break;
 8004136:	e00c      	b.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004138:	4b55      	ldr	r3, [pc, #340]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d107      	bne.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414a:	61fb      	str	r3, [r7, #28]
          break;
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          break;
 800414e:	bf00      	nop
 8004150:	e25e      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004152:	bf00      	nop
 8004154:	e25c      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004156:	bf00      	nop
        break;
 8004158:	e25a      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800415a:	4b4d      	ldr	r3, [pc, #308]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416c:	d007      	beq.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004174:	d12f      	bne.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004176:	f7fe fc1b 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800417a:	61f8      	str	r0, [r7, #28]
          break;
 800417c:	e02e      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800417e:	4b44      	ldr	r3, [pc, #272]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418a:	d126      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 800418c:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004198:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	fb03 f202 	mul.w	r2, r3, r2
 80041ac:	4b38      	ldr	r3, [pc, #224]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3301      	adds	r3, #1
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80041be:	4b34      	ldr	r3, [pc, #208]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	0e5b      	lsrs	r3, r3, #25
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	3301      	adds	r3, #1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	61fb      	str	r3, [r7, #28]
          break;
 80041d4:	e001      	b.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80041d6:	bf00      	nop
 80041d8:	e21a      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80041da:	bf00      	nop
        break;
 80041dc:	e218      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80041de:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80041e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7fe fc8c 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 80041f4:	61f8      	str	r0, [r7, #28]
        break;
 80041f6:	e20b      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          frequency = HAL_RCC_GetSysClockFreq();
 80041f8:	f7fe fbda 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80041fc:	61f8      	str	r0, [r7, #28]
        break;
 80041fe:	e207      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004200:	4b23      	ldr	r3, [pc, #140]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004206:	f003 0318 	and.w	r3, r3, #24
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b10      	cmp	r3, #16
 8004210:	d010      	beq.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b10      	cmp	r3, #16
 8004216:	d834      	bhi.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d024      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          break;
 8004224:	e02d      	b.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800422c:	f000 fcfa 	bl	8004c24 <RCCEx_GetSAIxPeriphCLKFreq>
 8004230:	61f8      	str	r0, [r7, #28]
          break;
 8004232:	e02b      	b.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004234:	4b16      	ldr	r3, [pc, #88]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d122      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 800424c:	4b10      	ldr	r3, [pc, #64]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	e005      	b.n	8004264 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8004266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426a:	61fb      	str	r3, [r7, #28]
          break;
 800426c:	e00b      	b.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d106      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            frequency = HSI_VALUE;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800427e:	61fb      	str	r3, [r7, #28]
          break;
 8004280:	e003      	b.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
          break;
 8004282:	bf00      	nop
 8004284:	e1c4      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004286:	bf00      	nop
 8004288:	e1c2      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800428a:	bf00      	nop
        break;
 800428c:	e1c0      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	00f42400 	.word	0x00f42400
 8004298:	0800f108 	.word	0x0800f108
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800429c:	4b96      	ldr	r3, [pc, #600]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ae:	d013      	beq.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b6:	d819      	bhi.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c4:	d004      	beq.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
          break;
 80042c6:	e011      	b.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe fc0a 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80042cc:	61f8      	str	r0, [r7, #28]
          break;
 80042ce:	e010      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
          frequency = HAL_RCC_GetSysClockFreq();
 80042d0:	f7fe fb6e 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80042d4:	61f8      	str	r0, [r7, #28]
          break;
 80042d6:	e00c      	b.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042d8:	4b87      	ldr	r3, [pc, #540]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d104      	bne.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            frequency = HSI_VALUE;
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80042e8:	61fb      	str	r3, [r7, #28]
          break;
 80042ea:	e001      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 80042ec:	bf00      	nop
 80042ee:	e18f      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80042f0:	bf00      	nop
        break;
 80042f2:	e18d      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80042f4:	4b80      	ldr	r3, [pc, #512]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004306:	d013      	beq.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430e:	d819      	bhi.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431c:	d004      	beq.n	8004328 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          break;
 800431e:	e011      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004320:	f7fe fbde 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004324:	61f8      	str	r0, [r7, #28]
          break;
 8004326:	e010      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          frequency = HAL_RCC_GetSysClockFreq();
 8004328:	f7fe fb42 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800432c:	61f8      	str	r0, [r7, #28]
          break;
 800432e:	e00c      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004330:	4b71      	ldr	r3, [pc, #452]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d104      	bne.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            frequency = HSI_VALUE;
 800433e:	4b6f      	ldr	r3, [pc, #444]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004340:	61fb      	str	r3, [r7, #28]
          break;
 8004342:	e001      	b.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
          break;
 8004344:	bf00      	nop
 8004346:	e163      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004348:	bf00      	nop
        break;
 800434a:	e161      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800434c:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800435e:	d013      	beq.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004366:	d819      	bhi.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004374:	d004      	beq.n	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
          break;
 8004376:	e011      	b.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004378:	f7fe fbb2 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 800437c:	61f8      	str	r0, [r7, #28]
          break;
 800437e:	e010      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          frequency = HAL_RCC_GetSysClockFreq();
 8004380:	f7fe fb16 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8004384:	61f8      	str	r0, [r7, #28]
          break;
 8004386:	e00c      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004388:	4b5b      	ldr	r3, [pc, #364]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d104      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            frequency = HSI_VALUE;
 8004396:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004398:	61fb      	str	r3, [r7, #28]
          break;
 800439a:	e001      	b.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          break;
 800439c:	bf00      	nop
 800439e:	e137      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80043a0:	bf00      	nop
        break;
 80043a2:	e135      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80043a4:	4b54      	ldr	r3, [pc, #336]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80043a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d011      	beq.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d818      	bhi.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d004      	beq.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
          break;
 80043c8:	e011      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043ca:	f7fe fb89 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80043ce:	61f8      	str	r0, [r7, #28]
          break;
 80043d0:	e010      	b.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
          frequency = HAL_RCC_GetSysClockFreq();
 80043d2:	f7fe faed 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80043d6:	61f8      	str	r0, [r7, #28]
          break;
 80043d8:	e00c      	b.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e6:	d104      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            frequency = HSI_VALUE;
 80043e8:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80043ea:	61fb      	str	r3, [r7, #28]
          break;
 80043ec:	e001      	b.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
          break;
 80043ee:	bf00      	nop
 80043f0:	e10e      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80043f2:	bf00      	nop
        break;
 80043f4:	e10c      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80043f6:	4b40      	ldr	r3, [pc, #256]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004408:	d02c      	beq.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004410:	d833      	bhi.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004418:	d01a      	beq.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004420:	d82b      	bhi.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442e:	d004      	beq.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
          break;
 8004430:	e023      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004432:	f7fe fb55 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 8004436:	61f8      	str	r0, [r7, #28]
          break;
 8004438:	e026      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800443a:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800443c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b02      	cmp	r3, #2
 8004446:	d11a      	bne.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 8004448:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800444c:	61fb      	str	r3, [r7, #28]
          break;
 800444e:	e016      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004450:	4b29      	ldr	r3, [pc, #164]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d111      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            frequency = HSI_VALUE;
 800445e:	4b27      	ldr	r3, [pc, #156]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004460:	61fb      	str	r3, [r7, #28]
          break;
 8004462:	e00e      	b.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d109      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            frequency = LSE_VALUE;
 8004472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004476:	61fb      	str	r3, [r7, #28]
          break;
 8004478:	e005      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
          break;
 800447a:	bf00      	nop
 800447c:	e0c8      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800447e:	bf00      	nop
 8004480:	e0c6      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004482:	bf00      	nop
 8004484:	e0c4      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004486:	bf00      	nop
        break;
 8004488:	e0c2      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800449c:	d030      	beq.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044a4:	d837      	bhi.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ac:	d01a      	beq.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044b4:	d82f      	bhi.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c2:	d004      	beq.n	80044ce <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
          break;
 80044c4:	e027      	b.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044c6:	f7fe fb0b 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80044ca:	61f8      	str	r0, [r7, #28]
          break;
 80044cc:	e02a      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80044d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11e      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 80044dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044e0:	61fb      	str	r3, [r7, #28]
          break;
 80044e2:	e01a      	b.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f0:	d115      	bne.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
            frequency = HSI_VALUE;
 80044f2:	4b02      	ldr	r3, [pc, #8]	; (80044fc <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80044f4:	61fb      	str	r3, [r7, #28]
          break;
 80044f6:	e012      	b.n	800451e <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 80044f8:	40021000 	.word	0x40021000
 80044fc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004500:	4b46      	ldr	r3, [pc, #280]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d109      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            frequency = LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004512:	61fb      	str	r3, [r7, #28]
          break;
 8004514:	e005      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 8004516:	bf00      	nop
 8004518:	e07a      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800451a:	bf00      	nop
 800451c:	e078      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 800451e:	bf00      	nop
 8004520:	e076      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 8004522:	bf00      	nop
        break;
 8004524:	e074      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004526:	4b3d      	ldr	r3, [pc, #244]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8004528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800452c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004538:	d02c      	beq.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004540:	d855      	bhi.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454e:	d004      	beq.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xda2>
          break;
 8004550:	e04d      	b.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
          frequency = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe fa2d 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8004556:	61f8      	str	r0, [r7, #28]
          break;
 8004558:	e04e      	b.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800455a:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d145      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004566:	4b2d      	ldr	r3, [pc, #180]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xdc6>
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	e005      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 800457e:	4b27      	ldr	r3, [pc, #156]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	4a25      	ldr	r2, [pc, #148]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>)
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	61fb      	str	r3, [r7, #28]
          break;
 8004592:	e02e      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045a0:	d129      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80045a2:	4b1e      	ldr	r3, [pc, #120]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ae:	d122      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ba:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	fb03 f202 	mul.w	r2, r3, r2
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3301      	adds	r3, #1
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	0d5b      	lsrs	r3, r3, #21
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	3301      	adds	r3, #1
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	61fb      	str	r3, [r7, #28]
          break;
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
          break;
 80045ee:	bf00      	nop
 80045f0:	e00e      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80045f2:	bf00      	nop
 80045f4:	e00c      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
          break;
 80045f6:	bf00      	nop
        break;
 80045f8:	e00a      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 80045fa:	bf00      	nop
 80045fc:	e008      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 80045fe:	bf00      	nop
 8004600:	e006      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8004602:	bf00      	nop
 8004604:	e004      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
      break;
 800460e:	bf00      	nop
    }
  }

  return(frequency);
 8004610:	69fb      	ldr	r3, [r7, #28]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000
 8004620:	0800f108 	.word	0x0800f108

08004624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d010      	beq.n	800465c <RCCEx_PLLSAI1_Config+0x38>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d00c      	beq.n	800465c <RCCEx_PLLSAI1_Config+0x38>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d008      	beq.n	800465c <RCCEx_PLLSAI1_Config+0x38>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d004      	beq.n	800465c <RCCEx_PLLSAI1_Config+0x38>
 8004652:	f640 315e 	movw	r1, #2910	; 0xb5e
 8004656:	4882      	ldr	r0, [pc, #520]	; (8004860 <RCCEx_PLLSAI1_Config+0x23c>)
 8004658:	f7fc fa3d 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <RCCEx_PLLSAI1_Config+0x48>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b10      	cmp	r3, #16
 800466a:	d904      	bls.n	8004676 <RCCEx_PLLSAI1_Config+0x52>
 800466c:	f640 315f 	movw	r1, #2911	; 0xb5f
 8004670:	487b      	ldr	r0, [pc, #492]	; (8004860 <RCCEx_PLLSAI1_Config+0x23c>)
 8004672:	f7fc fa30 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b07      	cmp	r3, #7
 800467c:	d903      	bls.n	8004686 <RCCEx_PLLSAI1_Config+0x62>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b7f      	cmp	r3, #127	; 0x7f
 8004684:	d904      	bls.n	8004690 <RCCEx_PLLSAI1_Config+0x6c>
 8004686:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800468a:	4875      	ldr	r0, [pc, #468]	; (8004860 <RCCEx_PLLSAI1_Config+0x23c>)
 800468c:	f7fc fa23 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x90>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x90>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d007      	beq.n	80046c4 <RCCEx_PLLSAI1_Config+0xa0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80046bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <RCCEx_PLLSAI1_Config+0xaa>
 80046c4:	f640 3161 	movw	r1, #2913	; 0xb61
 80046c8:	4865      	ldr	r0, [pc, #404]	; (8004860 <RCCEx_PLLSAI1_Config+0x23c>)
 80046ca:	f7fc fa04 	bl	8000ad6 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ce:	4b65      	ldr	r3, [pc, #404]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00e      	beq.n	80046f8 <RCCEx_PLLSAI1_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046da:	4b62      	ldr	r3, [pc, #392]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0203 	and.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d103      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0xce>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
       ||
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d142      	bne.n	8004778 <RCCEx_PLLSAI1_Config+0x154>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
 80046f6:	e03f      	b.n	8004778 <RCCEx_PLLSAI1_Config+0x154>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d018      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0x10e>
 8004700:	2b03      	cmp	r3, #3
 8004702:	d825      	bhi.n	8004750 <RCCEx_PLLSAI1_Config+0x12c>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d002      	beq.n	800470e <RCCEx_PLLSAI1_Config+0xea>
 8004708:	2b02      	cmp	r3, #2
 800470a:	d009      	beq.n	8004720 <RCCEx_PLLSAI1_Config+0xfc>
 800470c:	e020      	b.n	8004750 <RCCEx_PLLSAI1_Config+0x12c>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800470e:	4b55      	ldr	r3, [pc, #340]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11d      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x132>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471e:	e01a      	b.n	8004756 <RCCEx_PLLSAI1_Config+0x132>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d116      	bne.n	800475a <RCCEx_PLLSAI1_Config+0x136>
      {
        status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004730:	e013      	b.n	800475a <RCCEx_PLLSAI1_Config+0x136>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004732:	4b4c      	ldr	r3, [pc, #304]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <RCCEx_PLLSAI1_Config+0x13a>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800473e:	4b49      	ldr	r3, [pc, #292]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <RCCEx_PLLSAI1_Config+0x13a>
        {
          status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800474e:	e006      	b.n	800475e <RCCEx_PLLSAI1_Config+0x13a>
    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e004      	b.n	8004760 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <RCCEx_PLLSAI1_Config+0x13c>
      break;
 800475e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <RCCEx_PLLSAI1_Config+0x154>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004766:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	493c      	ldr	r1, [pc, #240]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004774:	4313      	orrs	r3, r2
 8004776:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 80c6 	bne.w	800490c <RCCEx_PLLSAI1_Config+0x2e8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004780:	4b38      	ldr	r3, [pc, #224]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a37      	ldr	r2, [pc, #220]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004786:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800478a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800478c:	f7fc fcc4 	bl	8001118 <HAL_GetTick>
 8004790:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004792:	e009      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0x184>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004794:	f7fc fcc0 	bl	8001118 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d902      	bls.n	80047a8 <RCCEx_PLLSAI1_Config+0x184>
      {
        status = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	73fb      	strb	r3, [r7, #15]
        break;
 80047a6:	e005      	b.n	80047b4 <RCCEx_PLLSAI1_Config+0x190>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047a8:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ef      	bne.n	8004794 <RCCEx_PLLSAI1_Config+0x170>
      }
    }

    if(status == HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 80a8 	bne.w	800490c <RCCEx_PLLSAI1_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d120      	bne.n	8004804 <RCCEx_PLLSAI1_Config+0x1e0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d903      	bls.n	80047d2 <RCCEx_PLLSAI1_Config+0x1ae>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b1f      	cmp	r3, #31
 80047d0:	d904      	bls.n	80047dc <RCCEx_PLLSAI1_Config+0x1b8>
 80047d2:	f640 31b4 	movw	r1, #2996	; 0xbb4
 80047d6:	4822      	ldr	r0, [pc, #136]	; (8004860 <RCCEx_PLLSAI1_Config+0x23c>)
 80047d8:	f7fc f97d 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <RCCEx_PLLSAI1_Config+0x244>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	0211      	lsls	r1, r2, #8
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68d2      	ldr	r2, [r2, #12]
 80047ee:	06d2      	lsls	r2, r2, #27
 80047f0:	4311      	orrs	r1, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6852      	ldr	r2, [r2, #4]
 80047f6:	3a01      	subs	r2, #1
 80047f8:	0112      	lsls	r2, r2, #4
 80047fa:	430a      	orrs	r2, r1
 80047fc:	4919      	ldr	r1, [pc, #100]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	610b      	str	r3, [r1, #16]
 8004802:	e05f      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x2a0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d132      	bne.n	8004870 <RCCEx_PLLSAI1_Config+0x24c>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d010      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x210>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00c      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x210>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d008      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x210>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b08      	cmp	r3, #8
 8004828:	d004      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x210>
 800482a:	f640 31d8 	movw	r1, #3032	; 0xbd8
 800482e:	480c      	ldr	r0, [pc, #48]	; (8004860 <RCCEx_PLLSAI1_Config+0x23c>)
 8004830:	f7fc f951 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <RCCEx_PLLSAI1_Config+0x248>)
 800483a:	4013      	ands	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6892      	ldr	r2, [r2, #8]
 8004840:	0211      	lsls	r1, r2, #8
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6912      	ldr	r2, [r2, #16]
 8004846:	0852      	lsrs	r2, r2, #1
 8004848:	3a01      	subs	r2, #1
 800484a:	0552      	lsls	r2, r2, #21
 800484c:	4311      	orrs	r1, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6852      	ldr	r2, [r2, #4]
 8004852:	3a01      	subs	r2, #1
 8004854:	0112      	lsls	r2, r2, #4
 8004856:	430a      	orrs	r2, r1
 8004858:	4902      	ldr	r1, [pc, #8]	; (8004864 <RCCEx_PLLSAI1_Config+0x240>)
 800485a:	4313      	orrs	r3, r2
 800485c:	610b      	str	r3, [r1, #16]
 800485e:	e031      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x2a0>
 8004860:	0800ef34 	.word	0x0800ef34
 8004864:	40021000 	.word	0x40021000
 8004868:	07ff800f 	.word	0x07ff800f
 800486c:	ff9f800f 	.word	0xff9f800f
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d010      	beq.n	800489a <RCCEx_PLLSAI1_Config+0x276>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	2b04      	cmp	r3, #4
 800487e:	d00c      	beq.n	800489a <RCCEx_PLLSAI1_Config+0x276>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d008      	beq.n	800489a <RCCEx_PLLSAI1_Config+0x276>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d004      	beq.n	800489a <RCCEx_PLLSAI1_Config+0x276>
 8004890:	f640 31ea 	movw	r1, #3050	; 0xbea
 8004894:	4820      	ldr	r0, [pc, #128]	; (8004918 <RCCEx_PLLSAI1_Config+0x2f4>)
 8004896:	f7fc f91e 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800489a:	4b20      	ldr	r3, [pc, #128]	; (800491c <RCCEx_PLLSAI1_Config+0x2f8>)
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <RCCEx_PLLSAI1_Config+0x2fc>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6892      	ldr	r2, [r2, #8]
 80048a6:	0211      	lsls	r1, r2, #8
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6952      	ldr	r2, [r2, #20]
 80048ac:	0852      	lsrs	r2, r2, #1
 80048ae:	3a01      	subs	r2, #1
 80048b0:	0652      	lsls	r2, r2, #25
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6852      	ldr	r2, [r2, #4]
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0112      	lsls	r2, r2, #4
 80048bc:	430a      	orrs	r2, r1
 80048be:	4917      	ldr	r1, [pc, #92]	; (800491c <RCCEx_PLLSAI1_Config+0x2f8>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c4:	4b15      	ldr	r3, [pc, #84]	; (800491c <RCCEx_PLLSAI1_Config+0x2f8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a14      	ldr	r2, [pc, #80]	; (800491c <RCCEx_PLLSAI1_Config+0x2f8>)
 80048ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fc fc22 	bl	8001118 <HAL_GetTick>
 80048d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d6:	e009      	b.n	80048ec <RCCEx_PLLSAI1_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d8:	f7fc fc1e 	bl	8001118 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d902      	bls.n	80048ec <RCCEx_PLLSAI1_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	73fb      	strb	r3, [r7, #15]
          break;
 80048ea:	e005      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x2d4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <RCCEx_PLLSAI1_Config+0x2f8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0ef      	beq.n	80048d8 <RCCEx_PLLSAI1_Config+0x2b4>
        }
      }

      if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <RCCEx_PLLSAI1_Config+0x2e8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <RCCEx_PLLSAI1_Config+0x2f8>)
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	4905      	ldr	r1, [pc, #20]	; (800491c <RCCEx_PLLSAI1_Config+0x2f8>)
 8004908:	4313      	orrs	r3, r2
 800490a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	0800ef34 	.word	0x0800ef34
 800491c:	40021000 	.word	0x40021000
 8004920:	f9ff800f 	.word	0xf9ff800f

08004924 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI2 Parameters used to output PLLSAI2CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI2SOURCE(PllSai2->PLLSAI2Source));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <RCCEx_PLLSAI2_Config+0x38>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d00c      	beq.n	800495c <RCCEx_PLLSAI2_Config+0x38>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d008      	beq.n	800495c <RCCEx_PLLSAI2_Config+0x38>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b03      	cmp	r3, #3
 8004950:	d004      	beq.n	800495c <RCCEx_PLLSAI2_Config+0x38>
 8004952:	f640 412b 	movw	r1, #3115	; 0xc2b
 8004956:	4882      	ldr	r0, [pc, #520]	; (8004b60 <RCCEx_PLLSAI2_Config+0x23c>)
 8004958:	f7fc f8bd 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <RCCEx_PLLSAI2_Config+0x48>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d904      	bls.n	8004976 <RCCEx_PLLSAI2_Config+0x52>
 800496c:	f640 412c 	movw	r1, #3116	; 0xc2c
 8004970:	487b      	ldr	r0, [pc, #492]	; (8004b60 <RCCEx_PLLSAI2_Config+0x23c>)
 8004972:	f7fc f8b0 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b07      	cmp	r3, #7
 800497c:	d903      	bls.n	8004986 <RCCEx_PLLSAI2_Config+0x62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b7f      	cmp	r3, #127	; 0x7f
 8004984:	d904      	bls.n	8004990 <RCCEx_PLLSAI2_Config+0x6c>
 8004986:	f640 412d 	movw	r1, #3117	; 0xc2d
 800498a:	4875      	ldr	r0, [pc, #468]	; (8004b60 <RCCEx_PLLSAI2_Config+0x23c>)
 800498c:	f7fc f8a3 	bl	8000ad6 <assert_failed>
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <RCCEx_PLLSAI2_Config+0x90>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <RCCEx_PLLSAI2_Config+0x90>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <RCCEx_PLLSAI2_Config+0xa0>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <RCCEx_PLLSAI2_Config+0xaa>
 80049c4:	f640 412e 	movw	r1, #3118	; 0xc2e
 80049c8:	4865      	ldr	r0, [pc, #404]	; (8004b60 <RCCEx_PLLSAI2_Config+0x23c>)
 80049ca:	f7fc f884 	bl	8000ad6 <assert_failed>

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ce:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <RCCEx_PLLSAI2_Config+0xd4>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049da:	4b62      	ldr	r3, [pc, #392]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0203 	and.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d103      	bne.n	80049f2 <RCCEx_PLLSAI2_Config+0xce>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
       ||
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d142      	bne.n	8004a78 <RCCEx_PLLSAI2_Config+0x154>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e03f      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x154>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d018      	beq.n	8004a32 <RCCEx_PLLSAI2_Config+0x10e>
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d825      	bhi.n	8004a50 <RCCEx_PLLSAI2_Config+0x12c>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d002      	beq.n	8004a0e <RCCEx_PLLSAI2_Config+0xea>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d009      	beq.n	8004a20 <RCCEx_PLLSAI2_Config+0xfc>
 8004a0c:	e020      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x12c>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a0e:	4b55      	ldr	r3, [pc, #340]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0x132>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1e:	e01a      	b.n	8004a56 <RCCEx_PLLSAI2_Config+0x132>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x136>
      {
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a30:	e013      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0x136>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a32:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0x13a>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a3e:	4b49      	ldr	r3, [pc, #292]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0x13a>
        {
          status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a4e:	e006      	b.n	8004a5e <RCCEx_PLLSAI2_Config+0x13a>
    default:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e004      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x13c>
      break;
 8004a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <RCCEx_PLLSAI2_Config+0x154>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a66:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	493c      	ldr	r1, [pc, #240]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 80c6 	bne.w	8004c0c <RCCEx_PLLSAI2_Config+0x2e8>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a80:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a37      	ldr	r2, [pc, #220]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fc fb44 	bl	8001118 <HAL_GetTick>
 8004a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a92:	e009      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x184>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a94:	f7fc fb40 	bl	8001118 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <RCCEx_PLLSAI2_Config+0x184>
      {
        status = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa6:	e005      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x190>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa8:	4b2e      	ldr	r3, [pc, #184]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <RCCEx_PLLSAI2_Config+0x170>
      }
    }

    if(status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f040 80a8 	bne.w	8004c0c <RCCEx_PLLSAI2_Config+0x2e8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d120      	bne.n	8004b04 <RCCEx_PLLSAI2_Config+0x1e0>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d903      	bls.n	8004ad2 <RCCEx_PLLSAI2_Config+0x1ae>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b1f      	cmp	r3, #31
 8004ad0:	d904      	bls.n	8004adc <RCCEx_PLLSAI2_Config+0x1b8>
 8004ad2:	f640 4181 	movw	r1, #3201	; 0xc81
 8004ad6:	4822      	ldr	r0, [pc, #136]	; (8004b60 <RCCEx_PLLSAI2_Config+0x23c>)
 8004ad8:	f7fb fffd 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004adc:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <RCCEx_PLLSAI2_Config+0x244>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6892      	ldr	r2, [r2, #8]
 8004ae8:	0211      	lsls	r1, r2, #8
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	06d2      	lsls	r2, r2, #27
 8004af0:	4311      	orrs	r1, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6852      	ldr	r2, [r2, #4]
 8004af6:	3a01      	subs	r2, #1
 8004af8:	0112      	lsls	r2, r2, #4
 8004afa:	430a      	orrs	r2, r1
 8004afc:	4919      	ldr	r1, [pc, #100]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	614b      	str	r3, [r1, #20]
 8004b02:	e05f      	b.n	8004bc4 <RCCEx_PLLSAI2_Config+0x2a0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d132      	bne.n	8004b70 <RCCEx_PLLSAI2_Config+0x24c>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d010      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x210>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d00c      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x210>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d008      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x210>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d004      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x210>
 8004b2a:	f640 41a6 	movw	r1, #3238	; 0xca6
 8004b2e:	480c      	ldr	r0, [pc, #48]	; (8004b60 <RCCEx_PLLSAI2_Config+0x23c>)
 8004b30:	f7fb ffd1 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <RCCEx_PLLSAI2_Config+0x248>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6892      	ldr	r2, [r2, #8]
 8004b40:	0211      	lsls	r1, r2, #8
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6912      	ldr	r2, [r2, #16]
 8004b46:	0852      	lsrs	r2, r2, #1
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	0552      	lsls	r2, r2, #21
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6852      	ldr	r2, [r2, #4]
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0112      	lsls	r2, r2, #4
 8004b56:	430a      	orrs	r2, r1
 8004b58:	4902      	ldr	r1, [pc, #8]	; (8004b64 <RCCEx_PLLSAI2_Config+0x240>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	614b      	str	r3, [r1, #20]
 8004b5e:	e031      	b.n	8004bc4 <RCCEx_PLLSAI2_Config+0x2a0>
 8004b60:	0800ef34 	.word	0x0800ef34
 8004b64:	40021000 	.word	0x40021000
 8004b68:	07ff800f 	.word	0x07ff800f
 8004b6c:	ff9f800f 	.word	0xff9f800f
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#endif /* RCC_PLLSAI2Q_DIV_SUPPORT */
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d010      	beq.n	8004b9a <RCCEx_PLLSAI2_Config+0x276>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d00c      	beq.n	8004b9a <RCCEx_PLLSAI2_Config+0x276>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d008      	beq.n	8004b9a <RCCEx_PLLSAI2_Config+0x276>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d004      	beq.n	8004b9a <RCCEx_PLLSAI2_Config+0x276>
 8004b90:	f640 41b9 	movw	r1, #3257	; 0xcb9
 8004b94:	4820      	ldr	r0, [pc, #128]	; (8004c18 <RCCEx_PLLSAI2_Config+0x2f4>)
 8004b96:	f7fb ff9e 	bl	8000ad6 <assert_failed>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <RCCEx_PLLSAI2_Config+0x2f8>)
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <RCCEx_PLLSAI2_Config+0x2fc>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	0211      	lsls	r1, r2, #8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6952      	ldr	r2, [r2, #20]
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0652      	lsls	r2, r2, #25
 8004bb2:	4311      	orrs	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6852      	ldr	r2, [r2, #4]
 8004bb8:	3a01      	subs	r2, #1
 8004bba:	0112      	lsls	r2, r2, #4
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	4917      	ldr	r1, [pc, #92]	; (8004c1c <RCCEx_PLLSAI2_Config+0x2f8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bc4:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <RCCEx_PLLSAI2_Config+0x2f8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <RCCEx_PLLSAI2_Config+0x2f8>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd0:	f7fc faa2 	bl	8001118 <HAL_GetTick>
 8004bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bd6:	e009      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bd8:	f7fc fa9e 	bl	8001118 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d902      	bls.n	8004bec <RCCEx_PLLSAI2_Config+0x2c8>
        {
          status = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bea:	e005      	b.n	8004bf8 <RCCEx_PLLSAI2_Config+0x2d4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <RCCEx_PLLSAI2_Config+0x2f8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0ef      	beq.n	8004bd8 <RCCEx_PLLSAI2_Config+0x2b4>
        }
      }

      if(status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <RCCEx_PLLSAI2_Config+0x2e8>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <RCCEx_PLLSAI2_Config+0x2f8>)
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	4905      	ldr	r1, [pc, #20]	; (8004c1c <RCCEx_PLLSAI2_Config+0x2f8>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	0800ef34 	.word	0x0800ef34
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	f9ff800f 	.word	0xf9ff800f

08004c24 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	; 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c40:	d10b      	bne.n	8004c5a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004c42:	4b7e      	ldr	r3, [pc, #504]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c48:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004c4c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d112      	bne.n	8004c7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c54:	4b7a      	ldr	r3, [pc, #488]	; (8004e40 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e00f      	b.n	8004c7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c60:	d10b      	bne.n	8004c7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004c62:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c6c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c74:	d101      	bne.n	8004c7a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004c76:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004c78:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 80d6 	bne.w	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d003      	beq.n	8004c94 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c92:	d13b      	bne.n	8004d0c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004c94:	4b69      	ldr	r3, [pc, #420]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca0:	f040 80c4 	bne.w	8004e2c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004ca4:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80bd 	beq.w	8004e2c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cb2:	4b62      	ldr	r3, [pc, #392]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004cc6:	4b5d      	ldr	r3, [pc, #372]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004cd2:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	0edb      	lsrs	r3, r3, #27
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004ce4:	4b55      	ldr	r3, [pc, #340]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004cf0:	2311      	movs	r3, #17
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e001      	b.n	8004cfa <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004cf6:	2307      	movs	r3, #7
 8004cf8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	fb03 f202 	mul.w	r2, r3, r2
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d0a:	e08f      	b.n	8004e2c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d13a      	bne.n	8004d88 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004d12:	4b4a      	ldr	r3, [pc, #296]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d1e:	f040 8086 	bne.w	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004d22:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d07f      	beq.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004d2e:	4b43      	ldr	r3, [pc, #268]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	3301      	adds	r3, #1
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d42:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	0edb      	lsrs	r3, r3, #27
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004d60:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004d6c:	2311      	movs	r3, #17
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e001      	b.n	8004d76 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004d72:	2307      	movs	r3, #7
 8004d74:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	fb03 f202 	mul.w	r2, r3, r2
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e052      	b.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d003      	beq.n	8004d96 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d109      	bne.n	8004daa <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da2:	d144      	bne.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004da4:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004da6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004da8:	e041      	b.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d003      	beq.n	8004db8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db6:	d13a      	bne.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004db8:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc4:	d133      	bne.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d02d      	beq.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	3301      	adds	r3, #1
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004de6:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	0edb      	lsrs	r3, r3, #27
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004e10:	2311      	movs	r3, #17
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e001      	b.n	8004e1a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004e16:	2307      	movs	r3, #7
 8004e18:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	fb03 f202 	mul.w	r2, r3, r2
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	e000      	b.n	8004e2e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004e2c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3724      	adds	r7, #36	; 0x24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	001fff68 	.word	0x001fff68
 8004e44:	00f42400 	.word	0x00f42400

08004e48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	; 0x28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0c9      	b.n	8004fee <HAL_SD_Init+0x1a6>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a66      	ldr	r2, [pc, #408]	; (8004ff8 <HAL_SD_Init+0x1b0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_SD_Init+0x26>
 8004e64:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004e68:	4864      	ldr	r0, [pc, #400]	; (8004ffc <HAL_SD_Init+0x1b4>)
 8004e6a:	f7fb fe34 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(hsd->Init.ClockEdge));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <HAL_SD_Init+0x42>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d004      	beq.n	8004e8a <HAL_SD_Init+0x42>
 8004e80:	f240 1175 	movw	r1, #373	; 0x175
 8004e84:	485d      	ldr	r0, [pc, #372]	; (8004ffc <HAL_SD_Init+0x1b4>)
 8004e86:	f7fb fe26 	bl	8000ad6 <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(hsd->Init.ClockBypass));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_SD_Init+0x5e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9a:	d004      	beq.n	8004ea6 <HAL_SD_Init+0x5e>
 8004e9c:	f240 1179 	movw	r1, #377	; 0x179
 8004ea0:	4856      	ldr	r0, [pc, #344]	; (8004ffc <HAL_SD_Init+0x1b4>)
 8004ea2:	f7fb fe18 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00e      	beq.n	8004ecc <HAL_SD_Init+0x84>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb6:	d009      	beq.n	8004ecc <HAL_SD_Init+0x84>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec0:	d004      	beq.n	8004ecc <HAL_SD_Init+0x84>
 8004ec2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004ec6:	484d      	ldr	r0, [pc, #308]	; (8004ffc <HAL_SD_Init+0x1b4>)
 8004ec8:	f7fb fe05 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d009      	beq.n	8004ee8 <HAL_SD_Init+0xa0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004edc:	d004      	beq.n	8004ee8 <HAL_SD_Init+0xa0>
 8004ede:	f240 117b 	movw	r1, #379	; 0x17b
 8004ee2:	4846      	ldr	r0, [pc, #280]	; (8004ffc <HAL_SD_Init+0x1b4>)
 8004ee4:	f7fb fdf7 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef0:	d304      	bcc.n	8004efc <HAL_SD_Init+0xb4>
 8004ef2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8004ef6:	4841      	ldr	r0, [pc, #260]	; (8004ffc <HAL_SD_Init+0x1b4>)
 8004ef8:	f7fb fded 	bl	8000ad6 <assert_failed>

  if(hsd->State == HAL_SD_STATE_RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_SD_Init+0xcc>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fb fe0e 	bl	8000b30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2203      	movs	r2, #3
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f86f 	bl	8005000 <HAL_SD_InitCard>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <HAL_SD_Init+0xe4>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e060      	b.n	8004fee <HAL_SD_Init+0x1a6>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8004f2c:	f107 0308 	add.w	r3, r7, #8
 8004f30:	4619      	mov	r1, r3
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fdba 	bl	8005aac <HAL_SD_GetCardStatus>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_SD_Init+0xfa>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e055      	b.n	8004fee <HAL_SD_Init+0x1a6>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004f42:	7e3b      	ldrb	r3, [r7, #24]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8004f48:	7e7b      	ldrb	r3, [r7, #25]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d10a      	bne.n	8004f6c <HAL_SD_Init+0x124>
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d102      	bne.n	8004f62 <HAL_SD_Init+0x11a>
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <HAL_SD_Init+0x124>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f68:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f6a:	e00b      	b.n	8004f84 <HAL_SD_Init+0x13c>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d104      	bne.n	8004f7e <HAL_SD_Init+0x136>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f7c:	e002      	b.n	8004f84 <HAL_SD_Init+0x13c>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fe70 	bl	8005c70 <HAL_SD_ConfigWideBusOperation>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_SD_Init+0x152>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e029      	b.n	8004fee <HAL_SD_Init+0x1a6>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004f9a:	f7fc f8bd 	bl	8001118 <HAL_GetTick>
 8004f9e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004fa0:	e014      	b.n	8004fcc <HAL_SD_Init+0x184>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8004fa2:	f7fc f8b9 	bl	8001118 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb0:	d10c      	bne.n	8004fcc <HAL_SD_Init+0x184>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e010      	b.n	8004fee <HAL_SD_Init+0x1a6>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 ff75 	bl	8005ebc <HAL_SD_GetCardState>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d1e4      	bne.n	8004fa2 <HAL_SD_Init+0x15a>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3728      	adds	r7, #40	; 0x28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	50062400 	.word	0x50062400
 8004ffc:	0800ef70 	.word	0x0800ef70

08005000 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005000:	b5b0      	push	{r4, r5, r7, lr}
 8005002:	b08e      	sub	sp, #56	; 0x38
 8005004:	af04      	add	r7, sp, #16
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005008:	2300      	movs	r3, #0
 800500a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005018:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800501c:	f7fe fbcc 	bl	80037b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005020:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e079      	b.n	8005130 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	0a1b      	lsrs	r3, r3, #8
 8005040:	4a3d      	ldr	r2, [pc, #244]	; (8005138 <HAL_SD_InitCard+0x138>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0210 	orr.w	r2, r2, #16
 8005066:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681d      	ldr	r5, [r3, #0]
 800506c:	466c      	mov	r4, sp
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005080:	4628      	mov	r0, r5
 8005082:	f003 f8d3 	bl	800822c <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f003 f95a 	bl	8008344 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800509c:	4a27      	ldr	r2, [pc, #156]	; (800513c <HAL_SD_InitCard+0x13c>)
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	3301      	adds	r3, #1
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc f842 	bl	8001130 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 ffe5 	bl	800607c <SD_PowerON>
 80050b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e02e      	b.n	8005130 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 ff12 	bl	8005efc <SD_InitCard>
 80050d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e01b      	b.n	8005130 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005100:	4618      	mov	r0, r3
 8005102:	f003 fa77 	bl	80085f4 <SDMMC_CmdBlockLength>
 8005106:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00f      	beq.n	800512e <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <HAL_SD_InitCard+0x140>)
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	; 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bdb0      	pop	{r4, r5, r7, pc}
 8005138:	014f8b59 	.word	0x014f8b59
 800513c:	00012110 	.word	0x00012110
 8005140:	1fe00fff 	.word	0x1fe00fff

08005144 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08c      	sub	sp, #48	; 0x30
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d107      	bne.n	800516c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e08d      	b.n	8005288 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	f040 8086 	bne.w	8005286 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	429a      	cmp	r2, r3
 800518c:	d907      	bls.n	800519e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e074      	b.n	8005288 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2203      	movs	r2, #3
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	025a      	lsls	r2, r3, #9
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d002      	beq.n	80051ca <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	025b      	lsls	r3, r3, #9
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	025b      	lsls	r3, r3, #9
 80051d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80051d6:	2390      	movs	r3, #144	; 0x90
 80051d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80051da:	2302      	movs	r3, #2
 80051dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80051de:	2300      	movs	r3, #0
 80051e0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f107 0210 	add.w	r2, r7, #16
 80051ee:	4611      	mov	r1, r2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f003 f961 	bl	80084b8 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005204:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2201      	movs	r2, #1
 8005214:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d90a      	bls.n	8005232 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2282      	movs	r2, #130	; 0x82
 8005220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005228:	4618      	mov	r0, r3
 800522a:	f003 fa29 	bl	8008680 <SDMMC_CmdReadMultiBlock>
 800522e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005230:	e009      	b.n	8005246 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2281      	movs	r2, #129	; 0x81
 8005236:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800523e:	4618      	mov	r0, r3
 8005240:	f003 f9fb 	bl	800863a <SDMMC_CmdReadSingleBlock>
 8005244:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d012      	beq.n	8005272 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0f      	ldr	r2, [pc, #60]	; (8005290 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005252:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	431a      	orrs	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e00a      	b.n	8005288 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3730      	adds	r7, #48	; 0x30
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	1fe00fff 	.word	0x1fe00fff

08005294 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08c      	sub	sp, #48	; 0x30
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e08d      	b.n	80053d8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	f040 8086 	bne.w	80053d6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80052d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	441a      	add	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	429a      	cmp	r2, r3
 80052dc:	d907      	bls.n	80052ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e074      	b.n	80053d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2203      	movs	r2, #3
 80052f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	025a      	lsls	r2, r3, #9
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d002      	beq.n	800531a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	025b      	lsls	r3, r3, #9
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	025b      	lsls	r3, r3, #9
 8005324:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005326:	2390      	movs	r3, #144	; 0x90
 8005328:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800532e:	2300      	movs	r3, #0
 8005330:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005332:	2300      	movs	r3, #0
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f107 0210 	add.w	r2, r7, #16
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f003 f8b9 	bl	80084b8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005354:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d90a      	bls.n	8005382 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	22a0      	movs	r2, #160	; 0xa0
 8005370:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005378:	4618      	mov	r0, r3
 800537a:	f003 f9c7 	bl	800870c <SDMMC_CmdWriteMultiBlock>
 800537e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005380:	e009      	b.n	8005396 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2290      	movs	r2, #144	; 0x90
 8005386:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800538e:	4618      	mov	r0, r3
 8005390:	f003 f999 	bl	80086c6 <SDMMC_CmdWriteSingleBlock>
 8005394:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d012      	beq.n	80053c2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a0f      	ldr	r2, [pc, #60]	; (80053e0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	431a      	orrs	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e00a      	b.n	80053d8 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80053d0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3730      	adds	r7, #48	; 0x30
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	1fe00fff 	.word	0x1fe00fff

080053e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_SD_IRQHandler+0x2e>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 f9a0 	bl	8006750 <SD_Read_IT>
 8005410:	e199      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80ae 	beq.w	800557e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800542a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800543a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800543e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800544e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800545e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d038      	beq.n	80054dc <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <HAL_SD_IRQHandler+0x9a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f003 f966 	bl	8008754 <SDMMC_CmdStopTransfer>
 8005488:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f957 	bl	8005750 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a90      	ldr	r2, [pc, #576]	; (80056e8 <HAL_SD_IRQHandler+0x304>)
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d104      	bne.n	80054cc <HAL_SD_IRQHandler+0xe8>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f003 fe35 	bl	800913c <HAL_SD_RxCpltCallback>
 80054d2:	e138      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f003 fe27 	bl	8009128 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80054da:	e134      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 812f 	beq.w	8005746 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2200      	movs	r2, #0
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2200      	movs	r2, #0
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <HAL_SD_IRQHandler+0x130>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d011      	beq.n	8005538 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f003 f91b 	bl	8008754 <SDMMC_CmdStopTransfer>
 800551e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f90c 	bl	8005750 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_SD_IRQHandler+0x176>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f003 fde4 	bl	8009128 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d105      	bne.n	8005576 <HAL_SD_IRQHandler+0x192>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80e8 	beq.w	8005746 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f003 fde0 	bl	800913c <HAL_SD_RxCpltCallback>
}
 800557c:	e0e3      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_SD_IRQHandler+0x1ba>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f001 f92b 	bl	80067f2 <SD_Write_IT>
 800559c:	e0d3      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 809f 	beq.w	80056ec <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	f043 0202 	orr.w	r2, r3, #2
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	f043 0208 	orr.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f043 0210 	orr.w	r2, r3, #16
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a33      	ldr	r2, [pc, #204]	; (80056e8 <HAL_SD_IRQHandler+0x304>)
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800564c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800565c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f003 f876 	bl	8008754 <SDMMC_CmdStopTransfer>
 8005668:	4602      	mov	r2, r0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005682:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f852 	bl	8005750 <HAL_SD_ErrorCallback>
}
 80056ac:	e04b      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d046      	beq.n	8005746 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d042      	beq.n	8005746 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80056ce:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f835 	bl	8005750 <HAL_SD_ErrorCallback>
}
 80056e6:	e02e      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
 80056e8:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d025      	beq.n	8005746 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10c      	bne.n	800572c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f8e6 	bl	80068ee <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8005722:	e010      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 f8ce 	bl	80068c6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800572a:	e00c      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 f8cf 	bl	80068da <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800573c:	e003      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f001 f8b7 	bl	80068b2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8005744:	e7ff      	b.n	8005746 <HAL_SD_IRQHandler+0x362>
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop

08005750 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005772:	0f9b      	lsrs	r3, r3, #30
 8005774:	b2da      	uxtb	r2, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577e:	0e9b      	lsrs	r3, r3, #26
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	0e1b      	lsrs	r3, r3, #24
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	b2da      	uxtb	r2, r3
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	0c1b      	lsrs	r3, r3, #16
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c4:	0d1b      	lsrs	r3, r3, #20
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057e2:	0bdb      	lsrs	r3, r3, #15
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f4:	0b9b      	lsrs	r3, r3, #14
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005806:	0b5b      	lsrs	r3, r3, #13
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	b2da      	uxtb	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005818:	0b1b      	lsrs	r3, r3, #12
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	b2da      	uxtb	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2200      	movs	r2, #0
 800582a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d163      	bne.n	80058fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005838:	009a      	lsls	r2, r3, #2
 800583a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800583e:	4013      	ands	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005844:	0f92      	lsrs	r2, r2, #30
 8005846:	431a      	orrs	r2, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005850:	0edb      	lsrs	r3, r3, #27
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	b2da      	uxtb	r2, r3
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005862:	0e1b      	lsrs	r3, r3, #24
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	b2da      	uxtb	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005874:	0d5b      	lsrs	r3, r3, #21
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	b2da      	uxtb	r2, r3
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005886:	0c9b      	lsrs	r3, r3, #18
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	b2da      	uxtb	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005898:	0bdb      	lsrs	r3, r3, #15
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	7e1b      	ldrb	r3, [r3, #24]
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	3302      	adds	r3, #2
 80058bc:	2201      	movs	r2, #1
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058c6:	fb03 f202 	mul.w	r2, r3, r2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	7a1b      	ldrb	r3, [r3, #8]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	2201      	movs	r2, #1
 80058da:	409a      	lsls	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058e8:	0a52      	lsrs	r2, r2, #9
 80058ea:	fb03 f202 	mul.w	r2, r3, r2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f8:	659a      	str	r2, [r3, #88]	; 0x58
 80058fa:	e031      	b.n	8005960 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d11d      	bne.n	8005940 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	431a      	orrs	r2, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	3301      	adds	r3, #1
 8005920:	029a      	lsls	r2, r3, #10
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005934:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	659a      	str	r2, [r3, #88]	; 0x58
 800593e:	e00f      	b.n	8005960 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a58      	ldr	r2, [pc, #352]	; (8005aa8 <HAL_SD_GetCardCSD+0x344>)
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e09d      	b.n	8005a9c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005964:	0b9b      	lsrs	r3, r3, #14
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005976:	09db      	lsrs	r3, r3, #7
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005988:	b2db      	uxtb	r3, r3
 800598a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800598e:	b2da      	uxtb	r2, r3
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005998:	0fdb      	lsrs	r3, r3, #31
 800599a:	b2da      	uxtb	r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a4:	0f5b      	lsrs	r3, r3, #29
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b6:	0e9b      	lsrs	r3, r3, #26
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c8:	0d9b      	lsrs	r3, r3, #22
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059da:	0d5b      	lsrs	r3, r3, #21
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a0a:	0bdb      	lsrs	r3, r3, #15
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1e:	0b9b      	lsrs	r3, r3, #14
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a32:	0b5b      	lsrs	r3, r3, #13
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a46:	0b1b      	lsrs	r3, r3, #12
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a5a:	0a9b      	lsrs	r3, r3, #10
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8a:	b2da      	uxtb	r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	1fe00fff 	.word	0x1fe00fff

08005aac <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b094      	sub	sp, #80	; 0x50
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8005abc:	f107 0308 	add.w	r3, r7, #8
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fbe6 	bl	8006294 <SD_SendSDStatus>
 8005ac8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d011      	beq.n	8005af4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a4f      	ldr	r2, [pc, #316]	; (8005c14 <HAL_SD_GetCardStatus+0x168>)
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005af2:	e070      	b.n	8005bd6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	099b      	lsrs	r3, r3, #6
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	0a1b      	lsrs	r3, r3, #8
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	0e1b      	lsrs	r3, r3, #24
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4313      	orrs	r3, r2
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	061a      	lsls	r2, r3, #24
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b3a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b44:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	0e1b      	lsrs	r3, r3, #24
 8005b4a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	0d1b      	lsrs	r3, r3, #20
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4313      	orrs	r3, r2
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	0a9b      	lsrs	r3, r3, #10
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	0e1b      	lsrs	r3, r3, #24
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bde:	4618      	mov	r0, r3
 8005be0:	f002 fd08 	bl	80085f4 <SDMMC_CmdBlockLength>
 8005be4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8005be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <HAL_SD_GetCardStatus+0x168>)
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8005c08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3750      	adds	r7, #80	; 0x50
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	1fe00fff 	.word	0x1fe00fff

08005c18 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005c70:	b5b0      	push	{r4, r5, r7, lr}
 8005c72:	b090      	sub	sp, #64	; 0x40
 8005c74:	af04      	add	r7, sp, #16
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_SD_ConfigWideBusOperation+0x30>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c8c:	d008      	beq.n	8005ca0 <HAL_SD_ConfigWideBusOperation+0x30>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c94:	d004      	beq.n	8005ca0 <HAL_SD_ConfigWideBusOperation+0x30>
 8005c96:	f640 2146 	movw	r1, #2630	; 0xa46
 8005c9a:	4883      	ldr	r0, [pc, #524]	; (8005ea8 <HAL_SD_ConfigWideBusOperation+0x238>)
 8005c9c:	f7fa ff1b 	bl	8000ad6 <assert_failed>

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d02e      	beq.n	8005d0e <HAL_SD_ConfigWideBusOperation+0x9e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb6:	d106      	bne.n	8005cc6 <HAL_SD_ConfigWideBusOperation+0x56>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8005cc4:	e029      	b.n	8005d1a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fbd8 	bl	8006484 <SD_WideBus_Enable>
 8005cd4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ce2:	e01a      	b.n	8005d1a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_SD_ConfigWideBusOperation+0x90>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fc15 	bl	800651a <SD_WideBus_Disable>
 8005cf0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8005cfe:	e00c      	b.n	8005d1a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38
 8005d0c:	e005      	b.n	8005d1a <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <HAL_SD_ConfigWideBusOperation+0xc2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a61      	ldr	r2, [pc, #388]	; (8005eac <HAL_SD_ConfigWideBusOperation+0x23c>)
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d30:	e097      	b.n	8005e62 <HAL_SD_ConfigWideBusOperation+0x1f2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005d32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005d36:	f7fd fd3f 	bl	80037b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d3a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8086 	beq.w	8005e50 <HAL_SD_ConfigWideBusOperation+0x1e0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	4953      	ldr	r1, [pc, #332]	; (8005eb0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8005d62:	fba1 1303 	umull	r1, r3, r1, r3
 8005d66:	0e1b      	lsrs	r3, r3, #24
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d303      	bcc.n	8005d74 <HAL_SD_ConfigWideBusOperation+0x104>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	e05a      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7c:	d103      	bne.n	8005d86 <HAL_SD_ConfigWideBusOperation+0x116>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	e051      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8e:	d126      	bne.n	8005dde <HAL_SD_ConfigWideBusOperation+0x16e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10e      	bne.n	8005db6 <HAL_SD_ConfigWideBusOperation+0x146>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	4a46      	ldr	r2, [pc, #280]	; (8005eb4 <HAL_SD_ConfigWideBusOperation+0x244>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d906      	bls.n	8005dae <HAL_SD_ConfigWideBusOperation+0x13e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	4a43      	ldr	r2, [pc, #268]	; (8005eb0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	0e5b      	lsrs	r3, r3, #25
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e03d      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	e039      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	4a3c      	ldr	r2, [pc, #240]	; (8005eb4 <HAL_SD_ConfigWideBusOperation+0x244>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d906      	bls.n	8005dd6 <HAL_SD_ConfigWideBusOperation+0x166>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	4a39      	ldr	r2, [pc, #228]	; (8005eb0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8005dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd0:	0e5b      	lsrs	r3, r3, #25
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	e029      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e025      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10e      	bne.n	8005e04 <HAL_SD_ConfigWideBusOperation+0x194>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	4a33      	ldr	r2, [pc, #204]	; (8005eb8 <HAL_SD_ConfigWideBusOperation+0x248>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d906      	bls.n	8005dfc <HAL_SD_ConfigWideBusOperation+0x18c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	4a2f      	ldr	r2, [pc, #188]	; (8005eb0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	0e1b      	lsrs	r3, r3, #24
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e016      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	e012      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	4a29      	ldr	r2, [pc, #164]	; (8005eb8 <HAL_SD_ConfigWideBusOperation+0x248>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d906      	bls.n	8005e24 <HAL_SD_ConfigWideBusOperation+0x1b4>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	4a25      	ldr	r2, [pc, #148]	; (8005eb0 <HAL_SD_ConfigWideBusOperation+0x240>)
 8005e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1e:	0e1b      	lsrs	r3, r3, #24
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e002      	b.n	8005e2a <HAL_SD_ConfigWideBusOperation+0x1ba>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681d      	ldr	r5, [r3, #0]
 8005e34:	466c      	mov	r4, sp
 8005e36:	f107 0318 	add.w	r3, r7, #24
 8005e3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e42:	f107 030c 	add.w	r3, r7, #12
 8005e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f002 f9ef 	bl	800822c <SDMMC_Init>
 8005e4e:	e008      	b.n	8005e62 <HAL_SD_ConfigWideBusOperation+0x1f2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f002 fbc2 	bl	80085f4 <SDMMC_CmdBlockLength>
 8005e70:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00c      	beq.n	8005e92 <HAL_SD_ConfigWideBusOperation+0x222>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a0b      	ldr	r2, [pc, #44]	; (8005eac <HAL_SD_ConfigWideBusOperation+0x23c>)
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3730      	adds	r7, #48	; 0x30
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	0800ef70 	.word	0x0800ef70
 8005eac:	1fe00fff 	.word	0x1fe00fff
 8005eb0:	55e63b89 	.word	0x55e63b89
 8005eb4:	02faf080 	.word	0x02faf080
 8005eb8:	017d7840 	.word	0x017d7840

08005ebc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ec8:	f107 030c 	add.w	r3, r7, #12
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fab0 	bl	8006434 <SD_SendStatus>
 8005ed4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0a5b      	lsrs	r3, r3, #9
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005ef2:	693b      	ldr	r3, [r7, #16]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b090      	sub	sp, #64	; 0x40
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005f04:	2301      	movs	r3, #1
 8005f06:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f002 fa2b 	bl	8008368 <SDMMC_GetPowerState>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f1c:	e0a9      	b.n	8006072 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d02e      	beq.n	8005f84 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f002 fd32 	bl	8008994 <SDMMC_CmdSendCID>
 8005f30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SD_InitCard+0x40>
    {
      return errorstate;
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	e09a      	b.n	8006072 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f002 fa94 	bl	8008470 <SDMMC_GetResponse>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2104      	movs	r1, #4
 8005f54:	4618      	mov	r0, r3
 8005f56:	f002 fa8b 	bl	8008470 <SDMMC_GetResponse>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2108      	movs	r1, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f002 fa82 	bl	8008470 <SDMMC_GetResponse>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	210c      	movs	r1, #12
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f002 fa79 	bl	8008470 <SDMMC_GetResponse>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d00d      	beq.n	8005fa8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f107 020e 	add.w	r2, r7, #14
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f002 fd3b 	bl	8008a12 <SDMMC_CmdSetRelAdd>
 8005f9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <SD_InitCard+0xac>
    {
      return errorstate;
 8005fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa6:	e064      	b.n	8006072 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d036      	beq.n	800601e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005fb0:	89fb      	ldrh	r3, [r7, #14]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f002 fd04 	bl	80089d2 <SDMMC_CmdSendCSD>
 8005fca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <SD_InitCard+0xda>
    {
      return errorstate;
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd4:	e04d      	b.n	8006072 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f002 fa47 	bl	8008470 <SDMMC_GetResponse>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2104      	movs	r1, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f002 fa3e 	bl	8008470 <SDMMC_GetResponse>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2108      	movs	r1, #8
 8006000:	4618      	mov	r0, r3
 8006002:	f002 fa35 	bl	8008470 <SDMMC_GetResponse>
 8006006:	4602      	mov	r2, r0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	210c      	movs	r1, #12
 8006012:	4618      	mov	r0, r3
 8006014:	f002 fa2c 	bl	8008470 <SDMMC_GetResponse>
 8006018:	4602      	mov	r2, r0
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2104      	movs	r1, #4
 8006024:	4618      	mov	r0, r3
 8006026:	f002 fa23 	bl	8008470 <SDMMC_GetResponse>
 800602a:	4603      	mov	r3, r0
 800602c:	0d1a      	lsrs	r2, r3, #20
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006032:	f107 0310 	add.w	r3, r7, #16
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fb93 	bl	8005764 <HAL_SD_GetCardCSD>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006044:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006048:	e013      	b.n	8006072 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6819      	ldr	r1, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	2200      	movs	r2, #0
 8006056:	461c      	mov	r4, r3
 8006058:	4615      	mov	r5, r2
 800605a:	4622      	mov	r2, r4
 800605c:	462b      	mov	r3, r5
 800605e:	4608      	mov	r0, r1
 8006060:	f002 fbae 	bl	80087c0 <SDMMC_CmdSelDesel>
 8006064:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <SD_InitCard+0x174>
  {
    return errorstate;
 800606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606e:	e000      	b.n	8006072 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3740      	adds	r7, #64	; 0x40
 8006076:	46bd      	mov	sp, r7
 8006078:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800607c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006090:	f7fb f842 	bl	8001118 <HAL_GetTick>
 8006094:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f002 fbb4 	bl	8008808 <SDMMC_CmdGoIdleState>
 80060a0:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <SD_PowerON+0x30>
  {
    return errorstate;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	e0ed      	b.n	8006288 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f002 fbc7 	bl	8008844 <SDMMC_CmdOperCond>
 80060b6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f002 fb9d 	bl	8008808 <SDMMC_CmdGoIdleState>
 80060ce:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <SD_PowerON+0x64>
    {
      return errorstate;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	e0d6      	b.n	8006288 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d137      	bne.n	8006158 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f002 fbc8 	bl	8008884 <SDMMC_CmdAppCommand>
 80060f4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d02d      	beq.n	8006158 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006100:	e0c2      	b.n	8006288 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2100      	movs	r1, #0
 8006108:	4618      	mov	r0, r3
 800610a:	f002 fbbb 	bl	8008884 <SDMMC_CmdAppCommand>
 800610e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <SD_PowerON+0x9e>
    {
      return errorstate;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	e0b6      	b.n	8006288 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	495c      	ldr	r1, [pc, #368]	; (8006290 <SD_PowerON+0x214>)
 8006120:	4618      	mov	r0, r3
 8006122:	f002 fbd2 	bl	80088ca <SDMMC_CmdAppOperCommand>
 8006126:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800612e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006132:	e0a9      	b.n	8006288 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f002 f998 	bl	8008470 <SDMMC_GetResponse>
 8006140:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	0fdb      	lsrs	r3, r3, #31
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <SD_PowerON+0xd2>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <SD_PowerON+0xd4>
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]

    count++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800615e:	4293      	cmp	r3, r2
 8006160:	d802      	bhi.n	8006168 <SD_PowerON+0xec>
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0cc      	beq.n	8006102 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800616e:	4293      	cmp	r3, r2
 8006170:	d902      	bls.n	8006178 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006176:	e087      	b.n	8006288 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d07e      	beq.n	8006280 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d17a      	bne.n	8006286 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d075      	beq.n	8006286 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0208 	orr.w	r2, r2, #8
 80061b0:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f002 fc92 	bl	8008ae0 <SDMMC_CmdVoltageSwitch>
 80061bc:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00c      	beq.n	80061de <SD_PowerON+0x162>
        {
          return errorstate;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	e05f      	b.n	8006288 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80061c8:	f7fa ffa6 	bl	8001118 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d102      	bne.n	80061de <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80061d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061dc:	e054      	b.n	8006288 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061ec:	d1ec      	bne.n	80061c8 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006206:	d002      	beq.n	800620e <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006208:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800620c:	e03c      	b.n	8006288 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800620e:	2001      	movs	r0, #1
 8006210:	f000 fb44 	bl	800689c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0204 	orr.w	r2, r2, #4
 8006222:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006224:	e00a      	b.n	800623c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006226:	f7fa ff77 	bl	8001118 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d102      	bne.n	800623c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006236:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800623a:	e025      	b.n	8006288 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800624a:	d1ec      	bne.n	8006226 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006254:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006264:	d102      	bne.n	800626c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800626a:	e00d      	b.n	8006288 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2213      	movs	r2, #19
 8006272:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	639a      	str	r2, [r3, #56]	; 0x38
 800627e:	e002      	b.n	8006286 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	c1100000 	.word	0xc1100000

08006294 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08c      	sub	sp, #48	; 0x30
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800629e:	f7fa ff3b 	bl	8001118 <HAL_GetTick>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f002 f8de 	bl	8008470 <SDMMC_GetResponse>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062be:	d102      	bne.n	80062c6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80062c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062c4:	e0b0      	b.n	8006428 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2140      	movs	r1, #64	; 0x40
 80062cc:	4618      	mov	r0, r3
 80062ce:	f002 f991 	bl	80085f4 <SDMMC_CmdBlockLength>
 80062d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	e0a0      	b.n	8006428 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f002 fac6 	bl	8008884 <SDMMC_CmdAppCommand>
 80062f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	e08d      	b.n	8006428 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006312:	2340      	movs	r3, #64	; 0x40
 8006314:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006316:	2360      	movs	r3, #96	; 0x60
 8006318:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800631a:	2302      	movs	r3, #2
 800631c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800631e:	2300      	movs	r3, #0
 8006320:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006322:	2301      	movs	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f107 0208 	add.w	r2, r7, #8
 800632e:	4611      	mov	r1, r2
 8006330:	4618      	mov	r0, r3
 8006332:	f002 f8c1 	bl	80084b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f002 fbae 	bl	8008a9c <SDMMC_CmdStatusRegister>
 8006340:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d02b      	beq.n	80063a0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	e069      	b.n	8006428 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d013      	beq.n	800638a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006362:	2300      	movs	r3, #0
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006366:	e00d      	b.n	8006384 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f001 ffcb 	bl	8008308 <SDMMC_ReadFIFO>
 8006372:	4602      	mov	r2, r0
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	601a      	str	r2, [r3, #0]
        pData++;
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	3304      	adds	r3, #4
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	3301      	adds	r3, #1
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	2b07      	cmp	r3, #7
 8006388:	d9ee      	bls.n	8006368 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800638a:	f7fa fec5 	bl	8001118 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d102      	bne.n	80063a0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800639a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800639e:	e043      	b.n	8006428 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0d2      	beq.n	8006354 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80063bc:	2308      	movs	r3, #8
 80063be:	e033      	b.n	8006428 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80063ce:	2302      	movs	r3, #2
 80063d0:	e02a      	b.n	8006428 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d017      	beq.n	8006410 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80063e0:	2320      	movs	r3, #32
 80063e2:	e021      	b.n	8006428 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 ff8d 	bl	8008308 <SDMMC_ReadFIFO>
 80063ee:	4602      	mov	r2, r0
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	601a      	str	r2, [r3, #0]
    pData++;
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	3304      	adds	r3, #4
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80063fa:	f7fa fe8d 	bl	8001118 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d102      	bne.n	8006410 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800640a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800640e:	e00b      	b.n	8006428 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1e2      	bne.n	80063e4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a03      	ldr	r2, [pc, #12]	; (8006430 <SD_SendSDStatus+0x19c>)
 8006424:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3730      	adds	r7, #48	; 0x30
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	18000f3a 	.word	0x18000f3a

08006434 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006448:	e018      	b.n	800647c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f002 fafd 	bl	8008a56 <SDMMC_CmdSendStatus>
 800645c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e009      	b.n	800647c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f001 fffe 	bl	8008470 <SDMMC_GetResponse>
 8006474:	4602      	mov	r2, r0
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	2300      	movs	r3, #0
 8006492:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f001 ffe8 	bl	8008470 <SDMMC_GetResponse>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064aa:	d102      	bne.n	80064b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b0:	e02f      	b.n	8006512 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064b2:	f107 030c 	add.w	r3, r7, #12
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f879 	bl	80065b0 <SD_FindSCR>
 80064be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	e023      	b.n	8006512 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01c      	beq.n	800650e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f002 f9cf 	bl	8008884 <SDMMC_CmdAppCommand>
 80064e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	e00f      	b.n	8006512 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2102      	movs	r1, #2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f002 fa06 	bl	800890a <SDMMC_CmdBusWidth>
 80064fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	e003      	b.n	8006512 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800650a:	2300      	movs	r3, #0
 800650c:	e001      	b.n	8006512 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800650e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	2300      	movs	r3, #0
 8006528:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f001 ff9d 	bl	8008470 <SDMMC_GetResponse>
 8006536:	4603      	mov	r3, r0
 8006538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006540:	d102      	bne.n	8006548 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006546:	e02f      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006548:	f107 030c 	add.w	r3, r7, #12
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f82e 	bl	80065b0 <SD_FindSCR>
 8006554:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	e023      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01c      	beq.n	80065a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006572:	041b      	lsls	r3, r3, #16
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f002 f984 	bl	8008884 <SDMMC_CmdAppCommand>
 800657c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	e00f      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2100      	movs	r1, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f002 f9bb 	bl	800890a <SDMMC_CmdBusWidth>
 8006594:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	e003      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e001      	b.n	80065a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08e      	sub	sp, #56	; 0x38
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065ba:	f7fa fdad 	bl	8001118 <HAL_GetTick>
 80065be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2108      	movs	r1, #8
 80065d6:	4618      	mov	r0, r3
 80065d8:	f002 f80c 	bl	80085f4 <SDMMC_CmdBlockLength>
 80065dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	e0ad      	b.n	8006744 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	4619      	mov	r1, r3
 80065f4:	4610      	mov	r0, r2
 80065f6:	f002 f945 	bl	8008884 <SDMMC_CmdAppCommand>
 80065fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	e09e      	b.n	8006744 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800660c:	2308      	movs	r3, #8
 800660e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006610:	2330      	movs	r3, #48	; 0x30
 8006612:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006614:	2302      	movs	r3, #2
 8006616:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006618:	2300      	movs	r3, #0
 800661a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800661c:	2301      	movs	r3, #1
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f107 0210 	add.w	r2, r7, #16
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f001 ff44 	bl	80084b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f002 f98b 	bl	8008950 <SDMMC_CmdSendSCR>
 800663a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d027      	beq.n	8006692 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	e07e      	b.n	8006744 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d113      	bne.n	800667c <SD_FindSCR+0xcc>
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	2b00      	cmp	r3, #0
 8006658:	d110      	bne.n	800667c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fe52 	bl	8008308 <SDMMC_ReadFIFO>
 8006664:	4603      	mov	r3, r0
 8006666:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f001 fe4b 	bl	8008308 <SDMMC_ReadFIFO>
 8006672:	4603      	mov	r3, r0
 8006674:	60fb      	str	r3, [r7, #12]
      index++;
 8006676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006678:	3301      	adds	r3, #1
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800667c:	f7fa fd4c 	bl	8001118 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d102      	bne.n	8006692 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800668c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006690:	e058      	b.n	8006744 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006698:	f240 532a 	movw	r3, #1322	; 0x52a
 800669c:	4013      	ands	r3, r2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0d1      	beq.n	8006646 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	f003 0308 	and.w	r3, r3, #8
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2208      	movs	r2, #8
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066b8:	2308      	movs	r3, #8
 80066ba:	e043      	b.n	8006744 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2202      	movs	r2, #2
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066d2:	2302      	movs	r3, #2
 80066d4:	e036      	b.n	8006744 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2220      	movs	r2, #32
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066ec:	2320      	movs	r3, #32
 80066ee:	e029      	b.n	8006744 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a15      	ldr	r2, [pc, #84]	; (800674c <SD_FindSCR+0x19c>)
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	061a      	lsls	r2, r3, #24
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006704:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800670e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	0e1b      	lsrs	r3, r3, #24
 8006714:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	601a      	str	r2, [r3, #0]
    scr++;
 800671a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671c:	3304      	adds	r3, #4
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	061a      	lsls	r2, r3, #24
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	021b      	lsls	r3, r3, #8
 8006728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800672c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	0a1b      	lsrs	r3, r3, #8
 8006732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006736:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	0e1b      	lsrs	r3, r3, #24
 800673c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3738      	adds	r7, #56	; 0x38
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	18000f3a 	.word	0x18000f3a

08006750 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d03f      	beq.n	80067ea <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	e033      	b.n	80067d8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fdc7 	bl	8008308 <SDMMC_ReadFIFO>
 800677a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3b01      	subs	r3, #1
 800678e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b2da      	uxtb	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	701a      	strb	r2, [r3, #0]
      tmp++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	0e1b      	lsrs	r3, r3, #24
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	3301      	adds	r3, #1
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b07      	cmp	r3, #7
 80067dc:	d9c8      	bls.n	8006770 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80067ea:	bf00      	nop
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d043      	beq.n	8006894 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e037      	b.n	8006882 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3b01      	subs	r3, #1
 8006822:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	021a      	lsls	r2, r3, #8
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4313      	orrs	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3301      	adds	r3, #1
 8006834:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	3b01      	subs	r3, #1
 800683a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	041a      	lsls	r2, r3, #16
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	4313      	orrs	r3, r2
 8006846:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3b01      	subs	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	061a      	lsls	r2, r3, #24
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4313      	orrs	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	3b01      	subs	r3, #1
 800686a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f107 0208 	add.w	r2, r7, #8
 8006874:	4611      	mov	r1, r2
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fd53 	bl	8008322 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3301      	adds	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b07      	cmp	r3, #7
 8006886:	d9c4      	bls.n	8006812 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006894:	bf00      	nop
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e0e6      	b.n	8006ae4 <HAL_TIM_Base_Init+0x1e0>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a74      	ldr	r2, [pc, #464]	; (8006aec <HAL_TIM_Base_Init+0x1e8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d036      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d031      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a70      	ldr	r2, [pc, #448]	; (8006af0 <HAL_TIM_Base_Init+0x1ec>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d02c      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a6e      	ldr	r2, [pc, #440]	; (8006af4 <HAL_TIM_Base_Init+0x1f0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d027      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6d      	ldr	r2, [pc, #436]	; (8006af8 <HAL_TIM_Base_Init+0x1f4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d022      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a6b      	ldr	r2, [pc, #428]	; (8006afc <HAL_TIM_Base_Init+0x1f8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01d      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a6a      	ldr	r2, [pc, #424]	; (8006b00 <HAL_TIM_Base_Init+0x1fc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d018      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a68      	ldr	r2, [pc, #416]	; (8006b04 <HAL_TIM_Base_Init+0x200>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a67      	ldr	r2, [pc, #412]	; (8006b08 <HAL_TIM_Base_Init+0x204>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00e      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a65      	ldr	r2, [pc, #404]	; (8006b0c <HAL_TIM_Base_Init+0x208>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a64      	ldr	r2, [pc, #400]	; (8006b10 <HAL_TIM_Base_Init+0x20c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <HAL_TIM_Base_Init+0x8a>
 8006984:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006988:	4862      	ldr	r0, [pc, #392]	; (8006b14 <HAL_TIM_Base_Init+0x210>)
 800698a:	f7fa f8a4 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d014      	beq.n	80069c0 <HAL_TIM_Base_Init+0xbc>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b10      	cmp	r3, #16
 800699c:	d010      	beq.n	80069c0 <HAL_TIM_Base_Init+0xbc>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d00c      	beq.n	80069c0 <HAL_TIM_Base_Init+0xbc>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d008      	beq.n	80069c0 <HAL_TIM_Base_Init+0xbc>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b60      	cmp	r3, #96	; 0x60
 80069b4:	d004      	beq.n	80069c0 <HAL_TIM_Base_Init+0xbc>
 80069b6:	f240 1117 	movw	r1, #279	; 0x117
 80069ba:	4856      	ldr	r0, [pc, #344]	; (8006b14 <HAL_TIM_Base_Init+0x210>)
 80069bc:	f7fa f88b 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <HAL_TIM_Base_Init+0xe2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d0:	d009      	beq.n	80069e6 <HAL_TIM_Base_Init+0xe2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069da:	d004      	beq.n	80069e6 <HAL_TIM_Base_Init+0xe2>
 80069dc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80069e0:	484c      	ldr	r0, [pc, #304]	; (8006b14 <HAL_TIM_Base_Init+0x210>)
 80069e2:	f7fa f878 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_Base_Init+0xf6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a40      	ldr	r2, [pc, #256]	; (8006af8 <HAL_TIM_Base_Init+0x1f4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d107      	bne.n	8006a0a <HAL_TIM_Base_Init+0x106>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	2300      	moveq	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e00e      	b.n	8006a28 <HAL_TIM_Base_Init+0x124>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d006      	beq.n	8006a20 <HAL_TIM_Base_Init+0x11c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1a:	d201      	bcs.n	8006a20 <HAL_TIM_Base_Init+0x11c>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <HAL_TIM_Base_Init+0x11e>
 8006a20:	2300      	movs	r3, #0
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <HAL_TIM_Base_Init+0x132>
 8006a2c:	f240 1119 	movw	r1, #281	; 0x119
 8006a30:	4838      	ldr	r0, [pc, #224]	; (8006b14 <HAL_TIM_Base_Init+0x210>)
 8006a32:	f7fa f850 	bl	8000ad6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_TIM_Base_Init+0x14c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2b80      	cmp	r3, #128	; 0x80
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_Base_Init+0x14c>
 8006a46:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8006a4a:	4832      	ldr	r0, [pc, #200]	; (8006b14 <HAL_TIM_Base_Init+0x210>)
 8006a4c:	f7fa f843 	bl	8000ad6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_TIM_Base_Init+0x166>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f857 	bl	8006b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f000 fa51 	bl	8006f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800
 8006af8:	40000c00 	.word	0x40000c00
 8006afc:	40001000 	.word	0x40001000
 8006b00:	40001400 	.word	0x40001400
 8006b04:	40013400 	.word	0x40013400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800
 8006b14:	0800efa8 	.word	0x0800efa8

08006b18 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a4a      	ldr	r2, [pc, #296]	; (8006c64 <HAL_TIM_Base_Start_IT+0x138>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d036      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b46:	d031      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a46      	ldr	r2, [pc, #280]	; (8006c68 <HAL_TIM_Base_Start_IT+0x13c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02c      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a45      	ldr	r2, [pc, #276]	; (8006c6c <HAL_TIM_Base_Start_IT+0x140>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d027      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a43      	ldr	r2, [pc, #268]	; (8006c70 <HAL_TIM_Base_Start_IT+0x144>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a42      	ldr	r2, [pc, #264]	; (8006c74 <HAL_TIM_Base_Start_IT+0x148>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a40      	ldr	r2, [pc, #256]	; (8006c78 <HAL_TIM_Base_Start_IT+0x14c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a3f      	ldr	r2, [pc, #252]	; (8006c7c <HAL_TIM_Base_Start_IT+0x150>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a3d      	ldr	r2, [pc, #244]	; (8006c80 <HAL_TIM_Base_Start_IT+0x154>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a3c      	ldr	r2, [pc, #240]	; (8006c84 <HAL_TIM_Base_Start_IT+0x158>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a3a      	ldr	r2, [pc, #232]	; (8006c88 <HAL_TIM_Base_Start_IT+0x15c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x80>
 8006ba2:	f240 11d3 	movw	r1, #467	; 0x1d3
 8006ba6:	4839      	ldr	r0, [pc, #228]	; (8006c8c <HAL_TIM_Base_Start_IT+0x160>)
 8006ba8:	f7f9 ff95 	bl	8000ad6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d001      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x90>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e04f      	b.n	8006c5c <HAL_TIM_Base_Start_IT+0x130>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a22      	ldr	r2, [pc, #136]	; (8006c64 <HAL_TIM_Base_Start_IT+0x138>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01d      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xee>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be6:	d018      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xee>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <HAL_TIM_Base_Start_IT+0x13c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xee>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <HAL_TIM_Base_Start_IT+0x140>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xee>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <HAL_TIM_Base_Start_IT+0x144>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xee>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <HAL_TIM_Base_Start_IT+0x150>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIM_Base_Start_IT+0xee>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <HAL_TIM_Base_Start_IT+0x154>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d115      	bne.n	8006c46 <HAL_TIM_Base_Start_IT+0x11a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	4b1b      	ldr	r3, [pc, #108]	; (8006c90 <HAL_TIM_Base_Start_IT+0x164>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b06      	cmp	r3, #6
 8006c2a:	d015      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x12c>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c32:	d011      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x12c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c44:	e008      	b.n	8006c58 <HAL_TIM_Base_Start_IT+0x12c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e000      	b.n	8006c5a <HAL_TIM_Base_Start_IT+0x12e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000800 	.word	0x40000800
 8006c70:	40000c00 	.word	0x40000c00
 8006c74:	40001000 	.word	0x40001000
 8006c78:	40001400 	.word	0x40001400
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800
 8006c8c:	0800efa8 	.word	0x0800efa8
 8006c90:	00010007 	.word	0x00010007

08006c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d122      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f06f 0202 	mvn.w	r2, #2
 8006cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f905 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 8006cdc:	e005      	b.n	8006cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8f7 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f908 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d122      	bne.n	8006d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d11b      	bne.n	8006d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0204 	mvn.w	r2, #4
 8006d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f8db 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 8006d30:	e005      	b.n	8006d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f8cd 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f8de 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d122      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d11b      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0208 	mvn.w	r2, #8
 8006d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8b1 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 8006d84:	e005      	b.n	8006d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8a3 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f8b4 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d122      	bne.n	8006dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d11b      	bne.n	8006dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0210 	mvn.w	r2, #16
 8006dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f887 	bl	8006ee6 <HAL_TIM_IC_CaptureCallback>
 8006dd8:	e005      	b.n	8006de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f879 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f88a 	bl	8006efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d10e      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d107      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0201 	mvn.w	r2, #1
 8006e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7f9 fe48 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e22:	2b80      	cmp	r3, #128	; 0x80
 8006e24:	d10e      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e30:	2b80      	cmp	r3, #128	; 0x80
 8006e32:	d107      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f914 	bl	800706c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e52:	d10e      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5e:	2b80      	cmp	r3, #128	; 0x80
 8006e60:	d107      	bne.n	8006e72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f907 	bl	8007080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7c:	2b40      	cmp	r3, #64	; 0x40
 8006e7e:	d10e      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d107      	bne.n	8006e9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f838 	bl	8006f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 0320 	and.w	r3, r3, #32
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d10e      	bne.n	8006eca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b20      	cmp	r3, #32
 8006eb8:	d107      	bne.n	8006eca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f06f 0220 	mvn.w	r2, #32
 8006ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8c7 	bl	8007058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eca:	bf00      	nop
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a40      	ldr	r2, [pc, #256]	; (8007038 <TIM_Base_SetConfig+0x114>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f42:	d00f      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a3d      	ldr	r2, [pc, #244]	; (800703c <TIM_Base_SetConfig+0x118>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a3c      	ldr	r2, [pc, #240]	; (8007040 <TIM_Base_SetConfig+0x11c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a3b      	ldr	r2, [pc, #236]	; (8007044 <TIM_Base_SetConfig+0x120>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a3a      	ldr	r2, [pc, #232]	; (8007048 <TIM_Base_SetConfig+0x124>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d108      	bne.n	8006f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a2f      	ldr	r2, [pc, #188]	; (8007038 <TIM_Base_SetConfig+0x114>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01f      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d01b      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a2c      	ldr	r2, [pc, #176]	; (800703c <TIM_Base_SetConfig+0x118>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d017      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a2b      	ldr	r2, [pc, #172]	; (8007040 <TIM_Base_SetConfig+0x11c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d013      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <TIM_Base_SetConfig+0x120>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00f      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a29      	ldr	r2, [pc, #164]	; (8007048 <TIM_Base_SetConfig+0x124>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00b      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a28      	ldr	r2, [pc, #160]	; (800704c <TIM_Base_SetConfig+0x128>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d007      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a27      	ldr	r2, [pc, #156]	; (8007050 <TIM_Base_SetConfig+0x12c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d003      	beq.n	8006fbe <TIM_Base_SetConfig+0x9a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a26      	ldr	r2, [pc, #152]	; (8007054 <TIM_Base_SetConfig+0x130>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d108      	bne.n	8006fd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a10      	ldr	r2, [pc, #64]	; (8007038 <TIM_Base_SetConfig+0x114>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00f      	beq.n	800701c <TIM_Base_SetConfig+0xf8>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a12      	ldr	r2, [pc, #72]	; (8007048 <TIM_Base_SetConfig+0x124>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00b      	beq.n	800701c <TIM_Base_SetConfig+0xf8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a11      	ldr	r2, [pc, #68]	; (800704c <TIM_Base_SetConfig+0x128>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d007      	beq.n	800701c <TIM_Base_SetConfig+0xf8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a10      	ldr	r2, [pc, #64]	; (8007050 <TIM_Base_SetConfig+0x12c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_Base_SetConfig+0xf8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a0f      	ldr	r2, [pc, #60]	; (8007054 <TIM_Base_SetConfig+0x130>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d103      	bne.n	8007024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	615a      	str	r2, [r3, #20]
}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40012c00 	.word	0x40012c00
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40013400 	.word	0x40013400
 800704c:	40014000 	.word	0x40014000
 8007050:	40014400 	.word	0x40014400
 8007054:	40014800 	.word	0x40014800

08007058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e08d      	b.n	80071c2 <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d023      	beq.n	80070f6 <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a46      	ldr	r2, [pc, #280]	; (80071cc <HAL_UART_Init+0x138>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d041      	beq.n	800713c <HAL_UART_Init+0xa8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a44      	ldr	r2, [pc, #272]	; (80071d0 <HAL_UART_Init+0x13c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d03c      	beq.n	800713c <HAL_UART_Init+0xa8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a43      	ldr	r2, [pc, #268]	; (80071d4 <HAL_UART_Init+0x140>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d037      	beq.n	800713c <HAL_UART_Init+0xa8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a41      	ldr	r2, [pc, #260]	; (80071d8 <HAL_UART_Init+0x144>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d032      	beq.n	800713c <HAL_UART_Init+0xa8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a40      	ldr	r2, [pc, #256]	; (80071dc <HAL_UART_Init+0x148>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d02d      	beq.n	800713c <HAL_UART_Init+0xa8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a3e      	ldr	r2, [pc, #248]	; (80071e0 <HAL_UART_Init+0x14c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d028      	beq.n	800713c <HAL_UART_Init+0xa8>
 80070ea:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80070ee:	483d      	ldr	r0, [pc, #244]	; (80071e4 <HAL_UART_Init+0x150>)
 80070f0:	f7f9 fcf1 	bl	8000ad6 <assert_failed>
 80070f4:	e022      	b.n	800713c <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a34      	ldr	r2, [pc, #208]	; (80071cc <HAL_UART_Init+0x138>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d01d      	beq.n	800713c <HAL_UART_Init+0xa8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a32      	ldr	r2, [pc, #200]	; (80071d0 <HAL_UART_Init+0x13c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d018      	beq.n	800713c <HAL_UART_Init+0xa8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a31      	ldr	r2, [pc, #196]	; (80071d4 <HAL_UART_Init+0x140>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <HAL_UART_Init+0xa8>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2f      	ldr	r2, [pc, #188]	; (80071d8 <HAL_UART_Init+0x144>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00e      	beq.n	800713c <HAL_UART_Init+0xa8>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2e      	ldr	r2, [pc, #184]	; (80071dc <HAL_UART_Init+0x148>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_UART_Init+0xa8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a2c      	ldr	r2, [pc, #176]	; (80071e0 <HAL_UART_Init+0x14c>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_UART_Init+0xa8>
 8007132:	f240 1157 	movw	r1, #343	; 0x157
 8007136:	482b      	ldr	r0, [pc, #172]	; (80071e4 <HAL_UART_Init+0x150>)
 8007138:	f7f9 fccd 	bl	8000ad6 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7f9 fee6 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	; 0x24
 8007158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f83b 	bl	80071e8 <UART_SetConfig>
 8007172:	4603      	mov	r3, r0
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UART_Init+0xe8>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e022      	b.n	80071c2 <HAL_UART_Init+0x12e>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_UART_Init+0xf6>
  {
    UART_AdvFeatureConfig(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fc0f 	bl	80079a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fd54 	bl	8007c68 <UART_CheckIdleState>
 80071c0:	4603      	mov	r3, r0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40013800 	.word	0x40013800
 80071d0:	40004400 	.word	0x40004400
 80071d4:	40004800 	.word	0x40004800
 80071d8:	40004c00 	.word	0x40004c00
 80071dc:	40005000 	.word	0x40005000
 80071e0:	40008000 	.word	0x40008000
 80071e4:	0800efe0 	.word	0x0800efe0

080071e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071ec:	b08c      	sub	sp, #48	; 0x30
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4a17      	ldr	r2, [pc, #92]	; (800725c <UART_SetConfig+0x74>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d904      	bls.n	800720c <UART_SetConfig+0x24>
 8007202:	f640 4157 	movw	r1, #3159	; 0xc57
 8007206:	4816      	ldr	r0, [pc, #88]	; (8007260 <UART_SetConfig+0x78>)
 8007208:	f7f9 fc65 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007214:	d00d      	beq.n	8007232 <UART_SetConfig+0x4a>
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d009      	beq.n	8007232 <UART_SetConfig+0x4a>
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007226:	d004      	beq.n	8007232 <UART_SetConfig+0x4a>
 8007228:	f640 4158 	movw	r1, #3160	; 0xc58
 800722c:	480c      	ldr	r0, [pc, #48]	; (8007260 <UART_SetConfig+0x78>)
 800722e:	f7f9 fc52 	bl	8000ad6 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <UART_SetConfig+0x7c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d115      	bne.n	8007268 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d037      	beq.n	80072b4 <UART_SetConfig+0xcc>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800724c:	d032      	beq.n	80072b4 <UART_SetConfig+0xcc>
 800724e:	f640 415b 	movw	r1, #3163	; 0xc5b
 8007252:	4803      	ldr	r0, [pc, #12]	; (8007260 <UART_SetConfig+0x78>)
 8007254:	f7f9 fc3f 	bl	8000ad6 <assert_failed>
 8007258:	e02c      	b.n	80072b4 <UART_SetConfig+0xcc>
 800725a:	bf00      	nop
 800725c:	00e4e1c0 	.word	0x00e4e1c0
 8007260:	0800efe0 	.word	0x0800efe0
 8007264:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007270:	d012      	beq.n	8007298 <UART_SetConfig+0xb0>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00e      	beq.n	8007298 <UART_SetConfig+0xb0>
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007282:	d009      	beq.n	8007298 <UART_SetConfig+0xb0>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800728c:	d004      	beq.n	8007298 <UART_SetConfig+0xb0>
 800728e:	f640 415f 	movw	r1, #3167	; 0xc5f
 8007292:	489e      	ldr	r0, [pc, #632]	; (800750c <UART_SetConfig+0x324>)
 8007294:	f7f9 fc1f 	bl	8000ad6 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d009      	beq.n	80072b4 <UART_SetConfig+0xcc>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a8:	d004      	beq.n	80072b4 <UART_SetConfig+0xcc>
 80072aa:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 80072ae:	4897      	ldr	r0, [pc, #604]	; (800750c <UART_SetConfig+0x324>)
 80072b0:	f7f9 fc11 	bl	8000ad6 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00e      	beq.n	80072da <UART_SetConfig+0xf2>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c4:	d009      	beq.n	80072da <UART_SetConfig+0xf2>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072ce:	d004      	beq.n	80072da <UART_SetConfig+0xf2>
 80072d0:	f640 4163 	movw	r1, #3171	; 0xc63
 80072d4:	488d      	ldr	r0, [pc, #564]	; (800750c <UART_SetConfig+0x324>)
 80072d6:	f7f9 fbfe 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f023 030c 	bic.w	r3, r3, #12
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <UART_SetConfig+0x106>
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <UART_SetConfig+0x110>
 80072ee:	f640 4164 	movw	r1, #3172	; 0xc64
 80072f2:	4886      	ldr	r0, [pc, #536]	; (800750c <UART_SetConfig+0x324>)
 80072f4:	f7f9 fbef 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d013      	beq.n	8007328 <UART_SetConfig+0x140>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007308:	d00e      	beq.n	8007328 <UART_SetConfig+0x140>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007312:	d009      	beq.n	8007328 <UART_SetConfig+0x140>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800731c:	d004      	beq.n	8007328 <UART_SetConfig+0x140>
 800731e:	f640 4165 	movw	r1, #3173	; 0xc65
 8007322:	487a      	ldr	r0, [pc, #488]	; (800750c <UART_SetConfig+0x324>)
 8007324:	f7f9 fbd7 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d009      	beq.n	8007344 <UART_SetConfig+0x15c>
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007338:	d004      	beq.n	8007344 <UART_SetConfig+0x15c>
 800733a:	f640 4166 	movw	r1, #3174	; 0xc66
 800733e:	4873      	ldr	r0, [pc, #460]	; (800750c <UART_SetConfig+0x324>)
 8007340:	f7f9 fbc9 	bl	8000ad6 <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	d030      	beq.n	80073ae <UART_SetConfig+0x1c6>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b01      	cmp	r3, #1
 8007352:	d02c      	beq.n	80073ae <UART_SetConfig+0x1c6>
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b02      	cmp	r3, #2
 800735a:	d028      	beq.n	80073ae <UART_SetConfig+0x1c6>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b03      	cmp	r3, #3
 8007362:	d024      	beq.n	80073ae <UART_SetConfig+0x1c6>
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b04      	cmp	r3, #4
 800736a:	d020      	beq.n	80073ae <UART_SetConfig+0x1c6>
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b05      	cmp	r3, #5
 8007372:	d01c      	beq.n	80073ae <UART_SetConfig+0x1c6>
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b06      	cmp	r3, #6
 800737a:	d018      	beq.n	80073ae <UART_SetConfig+0x1c6>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b07      	cmp	r3, #7
 8007382:	d014      	beq.n	80073ae <UART_SetConfig+0x1c6>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b08      	cmp	r3, #8
 800738a:	d010      	beq.n	80073ae <UART_SetConfig+0x1c6>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b09      	cmp	r3, #9
 8007392:	d00c      	beq.n	80073ae <UART_SetConfig+0x1c6>
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b0a      	cmp	r3, #10
 800739a:	d008      	beq.n	80073ae <UART_SetConfig+0x1c6>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b0b      	cmp	r3, #11
 80073a2:	d004      	beq.n	80073ae <UART_SetConfig+0x1c6>
 80073a4:	f640 4168 	movw	r1, #3176	; 0xc68
 80073a8:	4858      	ldr	r0, [pc, #352]	; (800750c <UART_SetConfig+0x324>)
 80073aa:	f7f9 fb94 	bl	8000ad6 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	431a      	orrs	r2, r3
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4b50      	ldr	r3, [pc, #320]	; (8007510 <UART_SetConfig+0x328>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073d6:	430b      	orrs	r3, r1
 80073d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a46      	ldr	r2, [pc, #280]	; (8007514 <UART_SetConfig+0x32c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007406:	4313      	orrs	r3, r2
 8007408:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007414:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	6812      	ldr	r2, [r2, #0]
 800741c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800741e:	430b      	orrs	r3, r1
 8007420:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	f023 010f 	bic.w	r1, r3, #15
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a36      	ldr	r2, [pc, #216]	; (8007518 <UART_SetConfig+0x330>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d126      	bne.n	8007490 <UART_SetConfig+0x2a8>
 8007442:	4b36      	ldr	r3, [pc, #216]	; (800751c <UART_SetConfig+0x334>)
 8007444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	2b03      	cmp	r3, #3
 800744e:	d81b      	bhi.n	8007488 <UART_SetConfig+0x2a0>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0x270>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	08007469 	.word	0x08007469
 800745c:	08007479 	.word	0x08007479
 8007460:	08007471 	.word	0x08007471
 8007464:	08007481 	.word	0x08007481
 8007468:	2301      	movs	r3, #1
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746e:	e112      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007470:	2302      	movs	r3, #2
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007476:	e10e      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007478:	2304      	movs	r3, #4
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800747e:	e10a      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007480:	2308      	movs	r3, #8
 8007482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007486:	e106      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007488:	2310      	movs	r3, #16
 800748a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800748e:	e102      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a22      	ldr	r2, [pc, #136]	; (8007520 <UART_SetConfig+0x338>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d144      	bne.n	8007524 <UART_SetConfig+0x33c>
 800749a:	4b20      	ldr	r3, [pc, #128]	; (800751c <UART_SetConfig+0x334>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a0:	f003 030c 	and.w	r3, r3, #12
 80074a4:	2b0c      	cmp	r3, #12
 80074a6:	d82d      	bhi.n	8007504 <UART_SetConfig+0x31c>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <UART_SetConfig+0x2c8>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074e5 	.word	0x080074e5
 80074b4:	08007505 	.word	0x08007505
 80074b8:	08007505 	.word	0x08007505
 80074bc:	08007505 	.word	0x08007505
 80074c0:	080074f5 	.word	0x080074f5
 80074c4:	08007505 	.word	0x08007505
 80074c8:	08007505 	.word	0x08007505
 80074cc:	08007505 	.word	0x08007505
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	08007505 	.word	0x08007505
 80074d8:	08007505 	.word	0x08007505
 80074dc:	08007505 	.word	0x08007505
 80074e0:	080074fd 	.word	0x080074fd
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ea:	e0d4      	b.n	8007696 <UART_SetConfig+0x4ae>
 80074ec:	2302      	movs	r3, #2
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074f2:	e0d0      	b.n	8007696 <UART_SetConfig+0x4ae>
 80074f4:	2304      	movs	r3, #4
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074fa:	e0cc      	b.n	8007696 <UART_SetConfig+0x4ae>
 80074fc:	2308      	movs	r3, #8
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007502:	e0c8      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007504:	2310      	movs	r3, #16
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750a:	e0c4      	b.n	8007696 <UART_SetConfig+0x4ae>
 800750c:	0800efe0 	.word	0x0800efe0
 8007510:	cfff69f3 	.word	0xcfff69f3
 8007514:	40008000 	.word	0x40008000
 8007518:	40013800 	.word	0x40013800
 800751c:	40021000 	.word	0x40021000
 8007520:	40004400 	.word	0x40004400
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4aa9      	ldr	r2, [pc, #676]	; (80077d0 <UART_SetConfig+0x5e8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d125      	bne.n	800757a <UART_SetConfig+0x392>
 800752e:	4ba9      	ldr	r3, [pc, #676]	; (80077d4 <UART_SetConfig+0x5ec>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007534:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007538:	2b30      	cmp	r3, #48	; 0x30
 800753a:	d016      	beq.n	800756a <UART_SetConfig+0x382>
 800753c:	2b30      	cmp	r3, #48	; 0x30
 800753e:	d818      	bhi.n	8007572 <UART_SetConfig+0x38a>
 8007540:	2b20      	cmp	r3, #32
 8007542:	d00a      	beq.n	800755a <UART_SetConfig+0x372>
 8007544:	2b20      	cmp	r3, #32
 8007546:	d814      	bhi.n	8007572 <UART_SetConfig+0x38a>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <UART_SetConfig+0x36a>
 800754c:	2b10      	cmp	r3, #16
 800754e:	d008      	beq.n	8007562 <UART_SetConfig+0x37a>
 8007550:	e00f      	b.n	8007572 <UART_SetConfig+0x38a>
 8007552:	2300      	movs	r3, #0
 8007554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007558:	e09d      	b.n	8007696 <UART_SetConfig+0x4ae>
 800755a:	2302      	movs	r3, #2
 800755c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007560:	e099      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007562:	2304      	movs	r3, #4
 8007564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007568:	e095      	b.n	8007696 <UART_SetConfig+0x4ae>
 800756a:	2308      	movs	r3, #8
 800756c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007570:	e091      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007572:	2310      	movs	r3, #16
 8007574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007578:	e08d      	b.n	8007696 <UART_SetConfig+0x4ae>
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a96      	ldr	r2, [pc, #600]	; (80077d8 <UART_SetConfig+0x5f0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d125      	bne.n	80075d0 <UART_SetConfig+0x3e8>
 8007584:	4b93      	ldr	r3, [pc, #588]	; (80077d4 <UART_SetConfig+0x5ec>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800758e:	2bc0      	cmp	r3, #192	; 0xc0
 8007590:	d016      	beq.n	80075c0 <UART_SetConfig+0x3d8>
 8007592:	2bc0      	cmp	r3, #192	; 0xc0
 8007594:	d818      	bhi.n	80075c8 <UART_SetConfig+0x3e0>
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d00a      	beq.n	80075b0 <UART_SetConfig+0x3c8>
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d814      	bhi.n	80075c8 <UART_SetConfig+0x3e0>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <UART_SetConfig+0x3c0>
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d008      	beq.n	80075b8 <UART_SetConfig+0x3d0>
 80075a6:	e00f      	b.n	80075c8 <UART_SetConfig+0x3e0>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ae:	e072      	b.n	8007696 <UART_SetConfig+0x4ae>
 80075b0:	2302      	movs	r3, #2
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075b6:	e06e      	b.n	8007696 <UART_SetConfig+0x4ae>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075be:	e06a      	b.n	8007696 <UART_SetConfig+0x4ae>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075c6:	e066      	b.n	8007696 <UART_SetConfig+0x4ae>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ce:	e062      	b.n	8007696 <UART_SetConfig+0x4ae>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a81      	ldr	r2, [pc, #516]	; (80077dc <UART_SetConfig+0x5f4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d12a      	bne.n	8007630 <UART_SetConfig+0x448>
 80075da:	4b7e      	ldr	r3, [pc, #504]	; (80077d4 <UART_SetConfig+0x5ec>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075e8:	d01a      	beq.n	8007620 <UART_SetConfig+0x438>
 80075ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ee:	d81b      	bhi.n	8007628 <UART_SetConfig+0x440>
 80075f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f4:	d00c      	beq.n	8007610 <UART_SetConfig+0x428>
 80075f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fa:	d815      	bhi.n	8007628 <UART_SetConfig+0x440>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <UART_SetConfig+0x420>
 8007600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007604:	d008      	beq.n	8007618 <UART_SetConfig+0x430>
 8007606:	e00f      	b.n	8007628 <UART_SetConfig+0x440>
 8007608:	2300      	movs	r3, #0
 800760a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800760e:	e042      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007610:	2302      	movs	r3, #2
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007616:	e03e      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800761e:	e03a      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007626:	e036      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800762e:	e032      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a6a      	ldr	r2, [pc, #424]	; (80077e0 <UART_SetConfig+0x5f8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d12a      	bne.n	8007690 <UART_SetConfig+0x4a8>
 800763a:	4b66      	ldr	r3, [pc, #408]	; (80077d4 <UART_SetConfig+0x5ec>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007648:	d01a      	beq.n	8007680 <UART_SetConfig+0x498>
 800764a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764e:	d81b      	bhi.n	8007688 <UART_SetConfig+0x4a0>
 8007650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007654:	d00c      	beq.n	8007670 <UART_SetConfig+0x488>
 8007656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765a:	d815      	bhi.n	8007688 <UART_SetConfig+0x4a0>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <UART_SetConfig+0x480>
 8007660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007664:	d008      	beq.n	8007678 <UART_SetConfig+0x490>
 8007666:	e00f      	b.n	8007688 <UART_SetConfig+0x4a0>
 8007668:	2300      	movs	r3, #0
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800766e:	e012      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007670:	2302      	movs	r3, #2
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007676:	e00e      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800767e:	e00a      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007686:	e006      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800768e:	e002      	b.n	8007696 <UART_SetConfig+0x4ae>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a51      	ldr	r2, [pc, #324]	; (80077e0 <UART_SetConfig+0x5f8>)
 800769c:	4293      	cmp	r3, r2
 800769e:	f040 80a5 	bne.w	80077ec <UART_SetConfig+0x604>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d823      	bhi.n	80076f2 <UART_SetConfig+0x50a>
 80076aa:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <UART_SetConfig+0x4c8>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076f3 	.word	0x080076f3
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	080076f3 	.word	0x080076f3
 80076c0:	080076e3 	.word	0x080076e3
 80076c4:	080076f3 	.word	0x080076f3
 80076c8:	080076f3 	.word	0x080076f3
 80076cc:	080076f3 	.word	0x080076f3
 80076d0:	080076eb 	.word	0x080076eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d4:	f7fb fa04 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80076d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076da:	e010      	b.n	80076fe <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076dc:	4b41      	ldr	r3, [pc, #260]	; (80077e4 <UART_SetConfig+0x5fc>)
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076e0:	e00d      	b.n	80076fe <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076e2:	f7fb f965 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80076e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076e8:	e009      	b.n	80076fe <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076f0:	e005      	b.n	80076fe <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8137 	beq.w	8007974 <UART_SetConfig+0x78c>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	4a37      	ldr	r2, [pc, #220]	; (80077e8 <UART_SetConfig+0x600>)
 800770c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007710:	461a      	mov	r2, r3
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	fbb3 f3f2 	udiv	r3, r3, r2
 8007718:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	4613      	mov	r3, r2
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	4413      	add	r3, r2
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	429a      	cmp	r2, r3
 8007728:	d305      	bcc.n	8007736 <UART_SetConfig+0x54e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	429a      	cmp	r2, r3
 8007734:	d903      	bls.n	800773e <UART_SetConfig+0x556>
      {
        ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800773c:	e11a      	b.n	8007974 <UART_SetConfig+0x78c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	2200      	movs	r2, #0
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	60fa      	str	r2, [r7, #12]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	4a27      	ldr	r2, [pc, #156]	; (80077e8 <UART_SetConfig+0x600>)
 800774c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007750:	b29b      	uxth	r3, r3
 8007752:	2200      	movs	r2, #0
 8007754:	603b      	str	r3, [r7, #0]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007760:	f7f8 fd4e 	bl	8000200 <__aeabi_uldivmod>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4610      	mov	r0, r2
 800776a:	4619      	mov	r1, r3
 800776c:	f04f 0200 	mov.w	r2, #0
 8007770:	f04f 0300 	mov.w	r3, #0
 8007774:	020b      	lsls	r3, r1, #8
 8007776:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800777a:	0202      	lsls	r2, r0, #8
 800777c:	6979      	ldr	r1, [r7, #20]
 800777e:	6849      	ldr	r1, [r1, #4]
 8007780:	0849      	lsrs	r1, r1, #1
 8007782:	2000      	movs	r0, #0
 8007784:	460c      	mov	r4, r1
 8007786:	4605      	mov	r5, r0
 8007788:	eb12 0804 	adds.w	r8, r2, r4
 800778c:	eb43 0905 	adc.w	r9, r3, r5
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	469a      	mov	sl, r3
 8007798:	4693      	mov	fp, r2
 800779a:	4652      	mov	r2, sl
 800779c:	465b      	mov	r3, fp
 800779e:	4640      	mov	r0, r8
 80077a0:	4649      	mov	r1, r9
 80077a2:	f7f8 fd2d 	bl	8000200 <__aeabi_uldivmod>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4613      	mov	r3, r2
 80077ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077b4:	d308      	bcc.n	80077c8 <UART_SetConfig+0x5e0>
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077bc:	d204      	bcs.n	80077c8 <UART_SetConfig+0x5e0>
        {
          huart->Instance->BRR = usartdiv;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6a3a      	ldr	r2, [r7, #32]
 80077c4:	60da      	str	r2, [r3, #12]
 80077c6:	e0d5      	b.n	8007974 <UART_SetConfig+0x78c>
        }
        else
        {
          ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077ce:	e0d1      	b.n	8007974 <UART_SetConfig+0x78c>
 80077d0:	40004800 	.word	0x40004800
 80077d4:	40021000 	.word	0x40021000
 80077d8:	40004c00 	.word	0x40004c00
 80077dc:	40005000 	.word	0x40005000
 80077e0:	40008000 	.word	0x40008000
 80077e4:	00f42400 	.word	0x00f42400
 80077e8:	0800f138 	.word	0x0800f138
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f4:	d166      	bne.n	80078c4 <UART_SetConfig+0x6dc>
  {
    switch (clocksource)
 80077f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d827      	bhi.n	800784e <UART_SetConfig+0x666>
 80077fe:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <UART_SetConfig+0x61c>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007829 	.word	0x08007829
 8007808:	08007831 	.word	0x08007831
 800780c:	08007839 	.word	0x08007839
 8007810:	0800784f 	.word	0x0800784f
 8007814:	0800783f 	.word	0x0800783f
 8007818:	0800784f 	.word	0x0800784f
 800781c:	0800784f 	.word	0x0800784f
 8007820:	0800784f 	.word	0x0800784f
 8007824:	08007847 	.word	0x08007847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007828:	f7fb f95a 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 800782c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800782e:	e014      	b.n	800785a <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007830:	f7fb f96c 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8007834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007836:	e010      	b.n	800785a <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007838:	4b59      	ldr	r3, [pc, #356]	; (80079a0 <UART_SetConfig+0x7b8>)
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800783c:	e00d      	b.n	800785a <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800783e:	f7fb f8b7 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8007842:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007844:	e009      	b.n	800785a <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800784c:	e005      	b.n	800785a <UART_SetConfig+0x672>
      default:
        pclk = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8089 	beq.w	8007974 <UART_SetConfig+0x78c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	4a4f      	ldr	r2, [pc, #316]	; (80079a4 <UART_SetConfig+0x7bc>)
 8007868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800786c:	461a      	mov	r2, r3
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	fbb3 f3f2 	udiv	r3, r3, r2
 8007874:	005a      	lsls	r2, r3, #1
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	441a      	add	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	fbb2 f3f3 	udiv	r3, r2, r3
 8007886:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	2b0f      	cmp	r3, #15
 800788c:	d916      	bls.n	80078bc <UART_SetConfig+0x6d4>
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007894:	d212      	bcs.n	80078bc <UART_SetConfig+0x6d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f023 030f 	bic.w	r3, r3, #15
 800789e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	8bfb      	ldrh	r3, [r7, #30]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	8bfa      	ldrh	r2, [r7, #30]
 80078b8:	60da      	str	r2, [r3, #12]
 80078ba:	e05b      	b.n	8007974 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078c2:	e057      	b.n	8007974 <UART_SetConfig+0x78c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d828      	bhi.n	800791e <UART_SetConfig+0x736>
 80078cc:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <UART_SetConfig+0x6ec>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007901 	.word	0x08007901
 80078dc:	08007909 	.word	0x08007909
 80078e0:	0800791f 	.word	0x0800791f
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	0800791f 	.word	0x0800791f
 80078ec:	0800791f 	.word	0x0800791f
 80078f0:	0800791f 	.word	0x0800791f
 80078f4:	08007917 	.word	0x08007917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f8:	f7fb f8f2 	bl	8002ae0 <HAL_RCC_GetPCLK1Freq>
 80078fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078fe:	e014      	b.n	800792a <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007900:	f7fb f904 	bl	8002b0c <HAL_RCC_GetPCLK2Freq>
 8007904:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007906:	e010      	b.n	800792a <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007908:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <UART_SetConfig+0x7b8>)
 800790a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800790c:	e00d      	b.n	800792a <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790e:	f7fb f84f 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 8007912:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007914:	e009      	b.n	800792a <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800791c:	e005      	b.n	800792a <UART_SetConfig+0x742>
      default:
        pclk = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007928:	bf00      	nop
    }

    if (pclk != 0U)
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d021      	beq.n	8007974 <UART_SetConfig+0x78c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <UART_SetConfig+0x7bc>)
 8007936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793a:	461a      	mov	r2, r3
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	441a      	add	r2, r3
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d909      	bls.n	800796e <UART_SetConfig+0x786>
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007960:	d205      	bcs.n	800796e <UART_SetConfig+0x786>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	b29a      	uxth	r2, r3
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60da      	str	r2, [r3, #12]
 800796c:	e002      	b.n	8007974 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2201      	movs	r2, #1
 8007978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2201      	movs	r2, #1
 8007980:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2200      	movs	r2, #0
 8007988:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2200      	movs	r2, #0
 800798e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007990:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007994:	4618      	mov	r0, r3
 8007996:	3730      	adds	r7, #48	; 0x30
 8007998:	46bd      	mov	sp, r7
 800799a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800799e:	bf00      	nop
 80079a0:	00f42400 	.word	0x00f42400
 80079a4:	0800f138 	.word	0x0800f138

080079a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	2bff      	cmp	r3, #255	; 0xff
 80079b6:	d904      	bls.n	80079c2 <UART_AdvFeatureConfig+0x1a>
 80079b8:	f640 514c 	movw	r1, #3404	; 0xd4c
 80079bc:	4891      	ldr	r0, [pc, #580]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 80079be:	f7f9 f88a 	bl	8000ad6 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d018      	beq.n	8007a00 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <UART_AdvFeatureConfig+0x42>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079de:	d004      	beq.n	80079ea <UART_AdvFeatureConfig+0x42>
 80079e0:	f640 5151 	movw	r1, #3409	; 0xd51
 80079e4:	4887      	ldr	r0, [pc, #540]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 80079e6:	f7f9 f876 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a04:	f003 0302 	and.w	r3, r3, #2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d018      	beq.n	8007a3e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <UART_AdvFeatureConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1c:	d004      	beq.n	8007a28 <UART_AdvFeatureConfig+0x80>
 8007a1e:	f640 5158 	movw	r1, #3416	; 0xd58
 8007a22:	4878      	ldr	r0, [pc, #480]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007a24:	f7f9 f857 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d018      	beq.n	8007a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d009      	beq.n	8007a66 <UART_AdvFeatureConfig+0xbe>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a5a:	d004      	beq.n	8007a66 <UART_AdvFeatureConfig+0xbe>
 8007a5c:	f640 515f 	movw	r1, #3423	; 0xd5f
 8007a60:	4868      	ldr	r0, [pc, #416]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007a62:	f7f9 f838 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d018      	beq.n	8007aba <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d009      	beq.n	8007aa4 <UART_AdvFeatureConfig+0xfc>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a98:	d004      	beq.n	8007aa4 <UART_AdvFeatureConfig+0xfc>
 8007a9a:	f640 5166 	movw	r1, #3430	; 0xd66
 8007a9e:	4859      	ldr	r0, [pc, #356]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007aa0:	f7f9 f819 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	f003 0310 	and.w	r3, r3, #16
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d018      	beq.n	8007af8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <UART_AdvFeatureConfig+0x13a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad6:	d004      	beq.n	8007ae2 <UART_AdvFeatureConfig+0x13a>
 8007ad8:	f640 516d 	movw	r1, #3437	; 0xd6d
 8007adc:	4849      	ldr	r0, [pc, #292]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007ade:	f7f8 fffa 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d018      	beq.n	8007b36 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d009      	beq.n	8007b20 <UART_AdvFeatureConfig+0x178>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b14:	d004      	beq.n	8007b20 <UART_AdvFeatureConfig+0x178>
 8007b16:	f640 5174 	movw	r1, #3444	; 0xd74
 8007b1a:	483a      	ldr	r0, [pc, #232]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007b1c:	f7f8 ffdb 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d06c      	beq.n	8007c1c <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a30      	ldr	r2, [pc, #192]	; (8007c08 <UART_AdvFeatureConfig+0x260>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d018      	beq.n	8007b7e <UART_AdvFeatureConfig+0x1d6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a2e      	ldr	r2, [pc, #184]	; (8007c0c <UART_AdvFeatureConfig+0x264>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d013      	beq.n	8007b7e <UART_AdvFeatureConfig+0x1d6>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2d      	ldr	r2, [pc, #180]	; (8007c10 <UART_AdvFeatureConfig+0x268>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00e      	beq.n	8007b7e <UART_AdvFeatureConfig+0x1d6>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a2b      	ldr	r2, [pc, #172]	; (8007c14 <UART_AdvFeatureConfig+0x26c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d009      	beq.n	8007b7e <UART_AdvFeatureConfig+0x1d6>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <UART_AdvFeatureConfig+0x270>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d004      	beq.n	8007b7e <UART_AdvFeatureConfig+0x1d6>
 8007b74:	f640 517b 	movw	r1, #3451	; 0xd7b
 8007b78:	4822      	ldr	r0, [pc, #136]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007b7a:	f7f8 ffac 	bl	8000ad6 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <UART_AdvFeatureConfig+0x1f2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b8e:	d004      	beq.n	8007b9a <UART_AdvFeatureConfig+0x1f2>
 8007b90:	f640 517c 	movw	r1, #3452	; 0xd7c
 8007b94:	481b      	ldr	r0, [pc, #108]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007b96:	f7f8 ff9e 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bb8:	d130      	bne.n	8007c1c <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d013      	beq.n	8007bea <UART_AdvFeatureConfig+0x242>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007bca:	d00e      	beq.n	8007bea <UART_AdvFeatureConfig+0x242>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd4:	d009      	beq.n	8007bea <UART_AdvFeatureConfig+0x242>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bde:	d004      	beq.n	8007bea <UART_AdvFeatureConfig+0x242>
 8007be0:	f640 5181 	movw	r1, #3457	; 0xd81
 8007be4:	4807      	ldr	r0, [pc, #28]	; (8007c04 <UART_AdvFeatureConfig+0x25c>)
 8007be6:	f7f8 ff76 	bl	8000ad6 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]
 8007c00:	e00c      	b.n	8007c1c <UART_AdvFeatureConfig+0x274>
 8007c02:	bf00      	nop
 8007c04:	0800efe0 	.word	0x0800efe0
 8007c08:	40013800 	.word	0x40013800
 8007c0c:	40004400 	.word	0x40004400
 8007c10:	40004800 	.word	0x40004800
 8007c14:	40004c00 	.word	0x40004c00
 8007c18:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d018      	beq.n	8007c5a <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d009      	beq.n	8007c44 <UART_AdvFeatureConfig+0x29c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c38:	d004      	beq.n	8007c44 <UART_AdvFeatureConfig+0x29c>
 8007c3a:	f640 5189 	movw	r1, #3465	; 0xd89
 8007c3e:	4809      	ldr	r0, [pc, #36]	; (8007c64 <UART_AdvFeatureConfig+0x2bc>)
 8007c40:	f7f8 ff49 	bl	8000ad6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	0800efe0 	.word	0x0800efe0

08007c68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c78:	f7f9 fa4e 	bl	8001118 <HAL_GetTick>
 8007c7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d10e      	bne.n	8007caa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f82f 	bl	8007cfe <UART_WaitOnFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e025      	b.n	8007cf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d10e      	bne.n	8007cd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f819 	bl	8007cfe <UART_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e00f      	b.n	8007cf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b09c      	sub	sp, #112	; 0x70
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	603b      	str	r3, [r7, #0]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d0e:	e0a9      	b.n	8007e64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	f000 80a5 	beq.w	8007e64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1a:	f7f9 f9fd 	bl	8001118 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d302      	bcc.n	8007d30 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d140      	bne.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d44:	667b      	str	r3, [r7, #100]	; 0x64
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e6      	bne.n	8007d30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3308      	adds	r3, #8
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	663b      	str	r3, [r7, #96]	; 0x60
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3308      	adds	r3, #8
 8007d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d82:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e5      	bne.n	8007d62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e069      	b.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d051      	beq.n	8007e64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dce:	d149      	bne.n	8007e64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e00:	e841 2300 	strex	r3, r2, [r1]
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1e6      	bne.n	8007dda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3308      	adds	r3, #8
 8007e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f023 0301 	bic.w	r3, r3, #1
 8007e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e2c:	623a      	str	r2, [r7, #32]
 8007e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e010      	b.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69da      	ldr	r2, [r3, #28]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	f43f af46 	beq.w	8007d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3770      	adds	r7, #112	; 0x70
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <HAL_UARTEx_DisableFifoMode+0xb4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01d      	beq.n	8007ede <HAL_UARTEx_DisableFifoMode+0x4e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <HAL_UARTEx_DisableFifoMode+0xb8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <HAL_UARTEx_DisableFifoMode+0x4e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a26      	ldr	r2, [pc, #152]	; (8007f4c <HAL_UARTEx_DisableFifoMode+0xbc>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <HAL_UARTEx_DisableFifoMode+0x4e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a25      	ldr	r2, [pc, #148]	; (8007f50 <HAL_UARTEx_DisableFifoMode+0xc0>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <HAL_UARTEx_DisableFifoMode+0x4e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a23      	ldr	r2, [pc, #140]	; (8007f54 <HAL_UARTEx_DisableFifoMode+0xc4>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_UARTEx_DisableFifoMode+0x4e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a22      	ldr	r2, [pc, #136]	; (8007f58 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_UARTEx_DisableFifoMode+0x4e>
 8007ed4:	f240 2169 	movw	r1, #617	; 0x269
 8007ed8:	4820      	ldr	r0, [pc, #128]	; (8007f5c <HAL_UARTEx_DisableFifoMode+0xcc>)
 8007eda:	f7f8 fdfc 	bl	8000ad6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_UARTEx_DisableFifoMode+0x5c>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e027      	b.n	8007f3c <HAL_UARTEx_DisableFifoMode+0xac>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2224      	movs	r2, #36	; 0x24
 8007ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40013800 	.word	0x40013800
 8007f48:	40004400 	.word	0x40004400
 8007f4c:	40004800 	.word	0x40004800
 8007f50:	40004c00 	.word	0x40004c00
 8007f54:	40005000 	.word	0x40005000
 8007f58:	40008000 	.word	0x40008000
 8007f5c:	0800f01c 	.word	0x0800f01c

08007f60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a3b      	ldr	r2, [pc, #236]	; (800805c <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d01d      	beq.n	8007fb0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a39      	ldr	r2, [pc, #228]	; (8008060 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d018      	beq.n	8007fb0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a38      	ldr	r2, [pc, #224]	; (8008064 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a36      	ldr	r2, [pc, #216]	; (8008068 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00e      	beq.n	8007fb0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a35      	ldr	r2, [pc, #212]	; (800806c <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a33      	ldr	r2, [pc, #204]	; (8008070 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8007fa6:	f240 2197 	movw	r1, #663	; 0x297
 8007faa:	4832      	ldr	r0, [pc, #200]	; (8008074 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8007fac:	f7f8 fd93 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d018      	beq.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fbc:	d014      	beq.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc4:	d010      	beq.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007fcc:	d00c      	beq.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd4:	d008      	beq.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8007fdc:	d004      	beq.n	8007fe8 <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8007fde:	f44f 7126 	mov.w	r1, #664	; 0x298
 8007fe2:	4824      	ldr	r0, [pc, #144]	; (8008074 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8007fe4:	f7f8 fd77 	bl	8000ad6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e02d      	b.n	8008052 <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2224      	movs	r2, #36	; 0x24
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f8ac 	bl	8008190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40013800 	.word	0x40013800
 8008060:	40004400 	.word	0x40004400
 8008064:	40004800 	.word	0x40004800
 8008068:	40004c00 	.word	0x40004c00
 800806c:	40005000 	.word	0x40005000
 8008070:	40008000 	.word	0x40008000
 8008074:	0800f01c 	.word	0x0800f01c

08008078 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a3b      	ldr	r2, [pc, #236]	; (8008174 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d01d      	beq.n	80080c8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a39      	ldr	r2, [pc, #228]	; (8008178 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d018      	beq.n	80080c8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a38      	ldr	r2, [pc, #224]	; (800817c <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d013      	beq.n	80080c8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a36      	ldr	r2, [pc, #216]	; (8008180 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00e      	beq.n	80080c8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a35      	ldr	r2, [pc, #212]	; (8008184 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d009      	beq.n	80080c8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a33      	ldr	r2, [pc, #204]	; (8008188 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d004      	beq.n	80080c8 <HAL_UARTEx_SetRxFifoThreshold+0x50>
 80080be:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 80080c2:	4832      	ldr	r0, [pc, #200]	; (800818c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 80080c4:	f7f8 fd07 	bl	8000ad6 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d018      	beq.n	8008100 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080d4:	d014      	beq.n	8008100 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080dc:	d010      	beq.n	8008100 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80080e4:	d00c      	beq.n	8008100 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ec:	d008      	beq.n	8008100 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80080f4:	d004      	beq.n	8008100 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80080f6:	f240 21c9 	movw	r1, #713	; 0x2c9
 80080fa:	4824      	ldr	r0, [pc, #144]	; (800818c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 80080fc:	f7f8 fceb 	bl	8000ad6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <HAL_UARTEx_SetRxFifoThreshold+0x96>
 800810a:	2302      	movs	r3, #2
 800810c:	e02d      	b.n	800816a <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2224      	movs	r2, #36	; 0x24
 800811a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f820 	bl	8008190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40013800 	.word	0x40013800
 8008178:	40004400 	.word	0x40004400
 800817c:	40004800 	.word	0x40004800
 8008180:	40004c00 	.word	0x40004c00
 8008184:	40005000 	.word	0x40005000
 8008188:	40008000 	.word	0x40008000
 800818c:	0800f01c 	.word	0x0800f01c

08008190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819c:	2b00      	cmp	r3, #0
 800819e:	d108      	bne.n	80081b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081b0:	e031      	b.n	8008216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081b2:	2308      	movs	r3, #8
 80081b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081b6:	2308      	movs	r3, #8
 80081b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	0e5b      	lsrs	r3, r3, #25
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	0f5b      	lsrs	r3, r3, #29
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	7b3a      	ldrb	r2, [r7, #12]
 80081de:	4911      	ldr	r1, [pc, #68]	; (8008224 <UARTEx_SetNbDataToProcess+0x94>)
 80081e0:	5c8a      	ldrb	r2, [r1, r2]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081e6:	7b3a      	ldrb	r2, [r7, #12]
 80081e8:	490f      	ldr	r1, [pc, #60]	; (8008228 <UARTEx_SetNbDataToProcess+0x98>)
 80081ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	7b7a      	ldrb	r2, [r7, #13]
 80081fc:	4909      	ldr	r1, [pc, #36]	; (8008224 <UARTEx_SetNbDataToProcess+0x94>)
 80081fe:	5c8a      	ldrb	r2, [r1, r2]
 8008200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008204:	7b7a      	ldrb	r2, [r7, #13]
 8008206:	4908      	ldr	r1, [pc, #32]	; (8008228 <UARTEx_SetNbDataToProcess+0x98>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800820a:	fb93 f3f2 	sdiv	r3, r3, r2
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	0800f150 	.word	0x0800f150
 8008228:	0800f158 	.word	0x0800f158

0800822c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800822c:	b084      	sub	sp, #16
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	f107 001c 	add.w	r0, r7, #28
 800823a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800823e:	2300      	movs	r3, #0
 8008240:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(SDMMCx));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a2d      	ldr	r2, [pc, #180]	; (80082fc <SDMMC_Init+0xd0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d003      	beq.n	8008252 <SDMMC_Init+0x26>
 800824a:	21dc      	movs	r1, #220	; 0xdc
 800824c:	482c      	ldr	r0, [pc, #176]	; (8008300 <SDMMC_Init+0xd4>)
 800824e:	f7f8 fc42 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLOCK_EDGE(Init.ClockEdge));
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <SDMMC_Init+0x3c>
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825e:	d003      	beq.n	8008268 <SDMMC_Init+0x3c>
 8008260:	21dd      	movs	r1, #221	; 0xdd
 8008262:	4827      	ldr	r0, [pc, #156]	; (8008300 <SDMMC_Init+0xd4>)
 8008264:	f7f8 fc37 	bl	8000ad6 <assert_failed>
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  assert_param(IS_SDMMC_CLOCK_BYPASS(Init.ClockBypass));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(Init.ClockPowerSave));
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <SDMMC_Init+0x52>
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008274:	d003      	beq.n	800827e <SDMMC_Init+0x52>
 8008276:	21e1      	movs	r1, #225	; 0xe1
 8008278:	4821      	ldr	r0, [pc, #132]	; (8008300 <SDMMC_Init+0xd4>)
 800827a:	f7f8 fc2c 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <SDMMC_Init+0x70>
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800828a:	d007      	beq.n	800829c <SDMMC_Init+0x70>
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008292:	d003      	beq.n	800829c <SDMMC_Init+0x70>
 8008294:	21e2      	movs	r1, #226	; 0xe2
 8008296:	481a      	ldr	r0, [pc, #104]	; (8008300 <SDMMC_Init+0xd4>)
 8008298:	f7f8 fc1d 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <SDMMC_Init+0x86>
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082a8:	d003      	beq.n	80082b2 <SDMMC_Init+0x86>
 80082aa:	21e3      	movs	r1, #227	; 0xe3
 80082ac:	4814      	ldr	r0, [pc, #80]	; (8008300 <SDMMC_Init+0xd4>)
 80082ae:	f7f8 fc12 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
 80082b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b8:	d303      	bcc.n	80082c2 <SDMMC_Init+0x96>
 80082ba:	21e4      	movs	r1, #228	; 0xe4
 80082bc:	4810      	ldr	r0, [pc, #64]	; (8008300 <SDMMC_Init+0xd4>)
 80082be:	f7f8 fc0a 	bl	8000ad6 <assert_failed>

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80082c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80082c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80082c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80082ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80082ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80082d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	4b09      	ldr	r3, [pc, #36]	; (8008304 <SDMMC_Init+0xd8>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082f6:	b004      	add	sp, #16
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	50062400 	.word	0x50062400
 8008300:	0800f058 	.word	0x0800f058
 8008304:	ffc02c00 	.word	0xffc02c00

08008308 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f043 0203 	orr.w	r2, r3, #3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008358:	2002      	movs	r0, #2
 800835a:	f7f8 fee9 	bl	8001130 <HAL_Delay>

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0303 	and.w	r3, r3, #3
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_CMD_INDEX(Command->CmdIndex));
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b3f      	cmp	r3, #63	; 0x3f
 8008398:	d904      	bls.n	80083a4 <SDMMC_SendCommand+0x20>
 800839a:	f240 1187 	movw	r1, #391	; 0x187
 800839e:	482b      	ldr	r0, [pc, #172]	; (800844c <SDMMC_SendCommand+0xc8>)
 80083a0:	f7f8 fb99 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00e      	beq.n	80083ca <SDMMC_SendCommand+0x46>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b4:	d009      	beq.n	80083ca <SDMMC_SendCommand+0x46>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083be:	d004      	beq.n	80083ca <SDMMC_SendCommand+0x46>
 80083c0:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80083c4:	4821      	ldr	r0, [pc, #132]	; (800844c <SDMMC_SendCommand+0xc8>)
 80083c6:	f7f8 fb86 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00e      	beq.n	80083f0 <SDMMC_SendCommand+0x6c>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083da:	d009      	beq.n	80083f0 <SDMMC_SendCommand+0x6c>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083e4:	d004      	beq.n	80083f0 <SDMMC_SendCommand+0x6c>
 80083e6:	f240 1189 	movw	r1, #393	; 0x189
 80083ea:	4818      	ldr	r0, [pc, #96]	; (800844c <SDMMC_SendCommand+0xc8>)
 80083ec:	f7f8 fb73 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_CPSM(Command->CPSM));
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <SDMMC_SendCommand+0x88>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008400:	d004      	beq.n	800840c <SDMMC_SendCommand+0x88>
 8008402:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8008406:	4811      	ldr	r0, [pc, #68]	; (800844c <SDMMC_SendCommand+0xc8>)
 8008408:	f7f8 fb65 	bl	8000ad6 <assert_failed>

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800841c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008422:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008428:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	4313      	orrs	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	4b06      	ldr	r3, [pc, #24]	; (8008450 <SDMMC_SendCommand+0xcc>)
 8008436:	4013      	ands	r3, r2
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	0800f058 	.word	0x0800f058
 8008450:	fffee0c0 	.word	0xfffee0c0

08008454 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	b2db      	uxtb	r3, r3
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
	...

08008470 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00d      	beq.n	800849c <SDMMC_GetResponse+0x2c>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b04      	cmp	r3, #4
 8008484:	d00a      	beq.n	800849c <SDMMC_GetResponse+0x2c>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b08      	cmp	r3, #8
 800848a:	d007      	beq.n	800849c <SDMMC_GetResponse+0x2c>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b0c      	cmp	r3, #12
 8008490:	d004      	beq.n	800849c <SDMMC_GetResponse+0x2c>
 8008492:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8008496:	4807      	ldr	r0, [pc, #28]	; (80084b4 <SDMMC_GetResponse+0x44>)
 8008498:	f7f8 fb1d 	bl	8000ad6 <assert_failed>

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3314      	adds	r3, #20
 80084a0:	461a      	mov	r2, r3
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	4413      	add	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	0800f058 	.word	0x0800f058

080084b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_DATA_LENGTH(Data->DataLength));
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ce:	d304      	bcc.n	80084da <SDMMC_ConfigData+0x22>
 80084d0:	f240 11cb 	movw	r1, #459	; 0x1cb
 80084d4:	4846      	ldr	r0, [pc, #280]	; (80085f0 <SDMMC_ConfigData+0x138>)
 80084d6:	f7f8 fafe 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_BLOCK_SIZE(Data->DataBlockSize));
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d03c      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d038      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d034      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	2b30      	cmp	r3, #48	; 0x30
 80084f8:	d030      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	2b40      	cmp	r3, #64	; 0x40
 8008500:	d02c      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2b50      	cmp	r3, #80	; 0x50
 8008508:	d028      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	2b60      	cmp	r3, #96	; 0x60
 8008510:	d024      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2b70      	cmp	r3, #112	; 0x70
 8008518:	d020      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	2b80      	cmp	r3, #128	; 0x80
 8008520:	d01c      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	2b90      	cmp	r3, #144	; 0x90
 8008528:	d018      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2ba0      	cmp	r3, #160	; 0xa0
 8008530:	d014      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	2bb0      	cmp	r3, #176	; 0xb0
 8008538:	d010      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	2bc0      	cmp	r3, #192	; 0xc0
 8008540:	d00c      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	2bd0      	cmp	r3, #208	; 0xd0
 8008548:	d008      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2be0      	cmp	r3, #224	; 0xe0
 8008550:	d004      	beq.n	800855c <SDMMC_ConfigData+0xa4>
 8008552:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8008556:	4826      	ldr	r0, [pc, #152]	; (80085f0 <SDMMC_ConfigData+0x138>)
 8008558:	f7f8 fabd 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d008      	beq.n	8008576 <SDMMC_ConfigData+0xbe>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d004      	beq.n	8008576 <SDMMC_ConfigData+0xbe>
 800856c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8008570:	481f      	ldr	r0, [pc, #124]	; (80085f0 <SDMMC_ConfigData+0x138>)
 8008572:	f7f8 fab0 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d008      	beq.n	8008590 <SDMMC_ConfigData+0xd8>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	2b08      	cmp	r3, #8
 8008584:	d004      	beq.n	8008590 <SDMMC_ConfigData+0xd8>
 8008586:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800858a:	4819      	ldr	r0, [pc, #100]	; (80085f0 <SDMMC_ConfigData+0x138>)
 800858c:	f7f8 faa3 	bl	8000ad6 <assert_failed>
  assert_param(IS_SDMMC_DPSM(Data->DPSM));
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d008      	beq.n	80085aa <SDMMC_ConfigData+0xf2>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d004      	beq.n	80085aa <SDMMC_ConfigData+0xf2>
 80085a0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80085a4:	4812      	ldr	r0, [pc, #72]	; (80085f0 <SDMMC_ConfigData+0x138>)
 80085a6:	f7f8 fa96 	bl	8000ad6 <assert_failed>

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80085c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80085ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0

}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	0800f058 	.word	0x0800f058

080085f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008602:	2310      	movs	r3, #16
 8008604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800860a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff feb1 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008622:	f241 3288 	movw	r2, #5000	; 0x1388
 8008626:	2110      	movs	r1, #16
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fa7b 	bl	8008b24 <SDMMC_GetCmdResp1>
 800862e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008630:	69fb      	ldr	r3, [r7, #28]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3720      	adds	r7, #32
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b088      	sub	sp, #32
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008648:	2311      	movs	r3, #17
 800864a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800864c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008652:	2300      	movs	r3, #0
 8008654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800865c:	f107 0308 	add.w	r3, r7, #8
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff fe8e 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008668:	f241 3288 	movw	r2, #5000	; 0x1388
 800866c:	2111      	movs	r1, #17
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fa58 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008676:	69fb      	ldr	r3, [r7, #28]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3720      	adds	r7, #32
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800868e:	2312      	movs	r3, #18
 8008690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800869c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086a2:	f107 0308 	add.w	r3, r7, #8
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff fe6b 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80086ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b2:	2112      	movs	r1, #18
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa35 	bl	8008b24 <SDMMC_GetCmdResp1>
 80086ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086bc:	69fb      	ldr	r3, [r7, #28]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3720      	adds	r7, #32
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b088      	sub	sp, #32
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80086d4:	2318      	movs	r3, #24
 80086d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086e8:	f107 0308 	add.w	r3, r7, #8
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff fe48 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80086f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f8:	2118      	movs	r1, #24
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa12 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008702:	69fb      	ldr	r3, [r7, #28]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800871a:	2319      	movs	r3, #25
 800871c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800871e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800872c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800872e:	f107 0308 	add.w	r3, r7, #8
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7ff fe25 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800873a:	f241 3288 	movw	r2, #5000	; 0x1388
 800873e:	2119      	movs	r1, #25
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f9ef 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008748:	69fb      	ldr	r3, [r7, #28]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3720      	adds	r7, #32
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008760:	230c      	movs	r3, #12
 8008762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800876e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008772:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800878c:	f107 0308 	add.w	r3, r7, #8
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7ff fdf6 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008798:	4a08      	ldr	r2, [pc, #32]	; (80087bc <SDMMC_CmdStopTransfer+0x68>)
 800879a:	210c      	movs	r1, #12
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f9c1 	bl	8008b24 <SDMMC_GetCmdResp1>
 80087a2:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	05f5e100 	.word	0x05f5e100

080087c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	; 0x28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80087d0:	2307      	movs	r3, #7
 80087d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087d8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087da:	2300      	movs	r3, #0
 80087dc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087e2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087e4:	f107 0310 	add.w	r3, r7, #16
 80087e8:	4619      	mov	r1, r3
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fdca 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80087f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f4:	2107      	movs	r1, #7
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 f994 	bl	8008b24 <SDMMC_GetCmdResp1>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008800:	4618      	mov	r0, r3
 8008802:	3728      	adds	r7, #40	; 0x28
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008818:	2300      	movs	r3, #0
 800881a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008824:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008826:	f107 0308 	add.w	r3, r7, #8
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff fda9 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fbb8 	bl	8008fa8 <SDMMC_GetCmdError>
 8008838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800884c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008852:	2308      	movs	r3, #8
 8008854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800885a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800885c:	2300      	movs	r3, #0
 800885e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008864:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008866:	f107 0308 	add.w	r3, r7, #8
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff fd89 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fb4a 	bl	8008f0c <SDMMC_GetCmdResp7>
 8008878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800887a:	69fb      	ldr	r3, [r7, #28]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008892:	2337      	movs	r3, #55	; 0x37
 8008894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800889a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088a6:	f107 0308 	add.w	r3, r7, #8
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff fd69 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80088b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088b6:	2137      	movs	r1, #55	; 0x37
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f933 	bl	8008b24 <SDMMC_GetCmdResp1>
 80088be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088c0:	69fb      	ldr	r3, [r7, #28]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3720      	adds	r7, #32
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b088      	sub	sp, #32
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80088d8:	2329      	movs	r3, #41	; 0x29
 80088da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80088dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff fd46 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fa4f 	bl	8008d9c <SDMMC_GetCmdResp3>
 80088fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008900:	69fb      	ldr	r3, [r7, #28]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3720      	adds	r7, #32
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b088      	sub	sp, #32
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008918:	2306      	movs	r3, #6
 800891a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800891c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008920:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008922:	2300      	movs	r3, #0
 8008924:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800892a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800892c:	f107 0308 	add.w	r3, r7, #8
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff fd26 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008938:	f241 3288 	movw	r2, #5000	; 0x1388
 800893c:	2106      	movs	r1, #6
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8f0 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008946:	69fb      	ldr	r3, [r7, #28]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3720      	adds	r7, #32
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800895c:	2333      	movs	r3, #51	; 0x33
 800895e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008964:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800896a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800896e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008970:	f107 0308 	add.w	r3, r7, #8
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7ff fd04 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800897c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008980:	2133      	movs	r1, #51	; 0x33
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f8ce 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800898a:	69fb      	ldr	r3, [r7, #28]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3720      	adds	r7, #32
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80089a0:	2302      	movs	r3, #2
 80089a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80089a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80089a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089b4:	f107 0308 	add.w	r3, r7, #8
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff fce2 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f9a1 	bl	8008d08 <SDMMC_GetCmdResp2>
 80089c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089c8:	69fb      	ldr	r3, [r7, #28]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b088      	sub	sp, #32
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80089e0:	2309      	movs	r3, #9
 80089e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80089e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80089e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089f4:	f107 0308 	add.w	r3, r7, #8
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fcc2 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f981 	bl	8008d08 <SDMMC_GetCmdResp2>
 8008a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a08:	69fb      	ldr	r3, [r7, #28]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3720      	adds	r7, #32
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b088      	sub	sp, #32
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008a20:	2303      	movs	r3, #3
 8008a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a34:	f107 0308 	add.w	r3, r7, #8
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff fca2 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	2103      	movs	r1, #3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f9e9 	bl	8008e1c <SDMMC_GetCmdResp6>
 8008a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008a64:	230d      	movs	r3, #13
 8008a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff fc80 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a88:	210d      	movs	r1, #13
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f84a 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a92:	69fb      	ldr	r3, [r7, #28]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008aa8:	230d      	movs	r3, #13
 8008aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008abc:	f107 0308 	add.w	r3, r7, #8
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff fc5e 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008acc:	210d      	movs	r1, #13
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f828 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8008aec:	230b      	movs	r3, #11
 8008aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008af6:	2300      	movs	r3, #0
 8008af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008afe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b00:	f107 0308 	add.w	r3, r7, #8
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fc3c 	bl	8008384 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8008b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b10:	210b      	movs	r1, #11
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f806 	bl	8008b24 <SDMMC_GetCmdResp1>
 8008b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b1a:	69fb      	ldr	r3, [r7, #28]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3720      	adds	r7, #32
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b088      	sub	sp, #32
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008b32:	4b70      	ldr	r3, [pc, #448]	; (8008cf4 <SDMMC_GetCmdResp1+0x1d0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a70      	ldr	r2, [pc, #448]	; (8008cf8 <SDMMC_GetCmdResp1+0x1d4>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	0a5a      	lsrs	r2, r3, #9
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	fb02 f303 	mul.w	r3, r2, r3
 8008b44:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	1e5a      	subs	r2, r3, #1
 8008b4a:	61fa      	str	r2, [r7, #28]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d102      	bne.n	8008b56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b54:	e0c9      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	4b67      	ldr	r3, [pc, #412]	; (8008cfc <SDMMC_GetCmdResp1+0x1d8>)
 8008b60:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0ef      	beq.n	8008b46 <SDMMC_GetCmdResp1+0x22>
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1ea      	bne.n	8008b46 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	f003 0304 	and.w	r3, r3, #4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b82:	2304      	movs	r3, #4
 8008b84:	e0b1      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e0a6      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4a58      	ldr	r2, [pc, #352]	; (8008d00 <SDMMC_GetCmdResp1+0x1dc>)
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff fc56 	bl	8008454 <SDMMC_GetCommandResponse>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	461a      	mov	r2, r3
 8008bac:	7afb      	ldrb	r3, [r7, #11]
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d001      	beq.n	8008bb6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e099      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff fc59 	bl	8008470 <SDMMC_GetResponse>
 8008bbe:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4b50      	ldr	r3, [pc, #320]	; (8008d04 <SDMMC_GetCmdResp1+0x1e0>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e08d      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	da02      	bge.n	8008bda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bd8:	e087      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	e080      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008bf2:	2380      	movs	r3, #128	; 0x80
 8008bf4:	e079      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c04:	e071      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c14:	e069      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c24:	e061      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c34:	e059      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c44:	e051      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c54:	e049      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008c60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c64:	e041      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c74:	e039      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c84:	e031      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c94:	e029      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008ca0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ca4:	e021      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008cb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cb4:	e019      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008cc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008cc4:	e011      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008cd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008cd4:	e009      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008ce0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ce4:	e001      	b.n	8008cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3720      	adds	r7, #32
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000000 	.word	0x20000000
 8008cf8:	10624dd3 	.word	0x10624dd3
 8008cfc:	00200045 	.word	0x00200045
 8008d00:	002000c5 	.word	0x002000c5
 8008d04:	fdffe008 	.word	0xfdffe008

08008d08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d10:	4b1f      	ldr	r3, [pc, #124]	; (8008d90 <SDMMC_GetCmdResp2+0x88>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1f      	ldr	r2, [pc, #124]	; (8008d94 <SDMMC_GetCmdResp2+0x8c>)
 8008d16:	fba2 2303 	umull	r2, r3, r2, r3
 8008d1a:	0a5b      	lsrs	r3, r3, #9
 8008d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1e5a      	subs	r2, r3, #1
 8008d2a:	60fa      	str	r2, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d34:	e026      	b.n	8008d84 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0ef      	beq.n	8008d26 <SDMMC_GetCmdResp2+0x1e>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1ea      	bne.n	8008d26 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d54:	f003 0304 	and.w	r3, r3, #4
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d004      	beq.n	8008d66 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2204      	movs	r2, #4
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d62:	2304      	movs	r3, #4
 8008d64:	e00e      	b.n	8008d84 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d004      	beq.n	8008d7c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e003      	b.n	8008d84 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a06      	ldr	r2, [pc, #24]	; (8008d98 <SDMMC_GetCmdResp2+0x90>)
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3714      	adds	r7, #20
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	20000000 	.word	0x20000000
 8008d94:	10624dd3 	.word	0x10624dd3
 8008d98:	002000c5 	.word	0x002000c5

08008d9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008da4:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <SDMMC_GetCmdResp3+0x74>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a1a      	ldr	r2, [pc, #104]	; (8008e14 <SDMMC_GetCmdResp3+0x78>)
 8008daa:	fba2 2303 	umull	r2, r3, r2, r3
 8008dae:	0a5b      	lsrs	r3, r3, #9
 8008db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db4:	fb02 f303 	mul.w	r3, r2, r3
 8008db8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1e5a      	subs	r2, r3, #1
 8008dbe:	60fa      	str	r2, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008dc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dc8:	e01b      	b.n	8008e02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0ef      	beq.n	8008dba <SDMMC_GetCmdResp3+0x1e>
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1ea      	bne.n	8008dba <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2204      	movs	r2, #4
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008df6:	2304      	movs	r3, #4
 8008df8:	e003      	b.n	8008e02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a06      	ldr	r2, [pc, #24]	; (8008e18 <SDMMC_GetCmdResp3+0x7c>)
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000000 	.word	0x20000000
 8008e14:	10624dd3 	.word	0x10624dd3
 8008e18:	002000c5 	.word	0x002000c5

08008e1c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b088      	sub	sp, #32
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	460b      	mov	r3, r1
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e2a:	4b35      	ldr	r3, [pc, #212]	; (8008f00 <SDMMC_GetCmdResp6+0xe4>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a35      	ldr	r2, [pc, #212]	; (8008f04 <SDMMC_GetCmdResp6+0xe8>)
 8008e30:	fba2 2303 	umull	r2, r3, r2, r3
 8008e34:	0a5b      	lsrs	r3, r3, #9
 8008e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e3a:	fb02 f303 	mul.w	r3, r2, r3
 8008e3e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	1e5a      	subs	r2, r3, #1
 8008e44:	61fa      	str	r2, [r7, #28]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d102      	bne.n	8008e50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e4e:	e052      	b.n	8008ef6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e54:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0ef      	beq.n	8008e40 <SDMMC_GetCmdResp6+0x24>
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1ea      	bne.n	8008e40 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d004      	beq.n	8008e80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2204      	movs	r2, #4
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	e03a      	b.n	8008ef6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e02f      	b.n	8008ef6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f7ff fadc 	bl	8008454 <SDMMC_GetCommandResponse>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d001      	beq.n	8008eaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e025      	b.n	8008ef6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4a16      	ldr	r2, [pc, #88]	; (8008f08 <SDMMC_GetCmdResp6+0xec>)
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fadc 	bl	8008470 <SDMMC_GetResponse>
 8008eb8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	0c1b      	lsrs	r3, r3, #16
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e011      	b.n	8008ef6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ee0:	e009      	b.n	8008ef6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ef0:	e001      	b.n	8008ef6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000000 	.word	0x20000000
 8008f04:	10624dd3 	.word	0x10624dd3
 8008f08:	002000c5 	.word	0x002000c5

08008f0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f14:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <SDMMC_GetCmdResp7+0x94>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a22      	ldr	r2, [pc, #136]	; (8008fa4 <SDMMC_GetCmdResp7+0x98>)
 8008f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1e:	0a5b      	lsrs	r3, r3, #9
 8008f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f24:	fb02 f303 	mul.w	r3, r2, r3
 8008f28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	1e5a      	subs	r2, r3, #1
 8008f2e:	60fa      	str	r2, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f38:	e02c      	b.n	8008f94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0ef      	beq.n	8008f2a <SDMMC_GetCmdResp7+0x1e>
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1ea      	bne.n	8008f2a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2204      	movs	r2, #4
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f66:	2304      	movs	r3, #4
 8008f68:	e014      	b.n	8008f94 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d004      	beq.n	8008f80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e009      	b.n	8008f94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2240      	movs	r2, #64	; 0x40
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008f92:	2300      	movs	r3, #0

}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	20000000 	.word	0x20000000
 8008fa4:	10624dd3 	.word	0x10624dd3

08008fa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fb0:	4b11      	ldr	r3, [pc, #68]	; (8008ff8 <SDMMC_GetCmdError+0x50>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a11      	ldr	r2, [pc, #68]	; (8008ffc <SDMMC_GetCmdError+0x54>)
 8008fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fba:	0a5b      	lsrs	r3, r3, #9
 8008fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc0:	fb02 f303 	mul.w	r3, r2, r3
 8008fc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	1e5a      	subs	r2, r3, #1
 8008fca:	60fa      	str	r2, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fd4:	e009      	b.n	8008fea <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0f1      	beq.n	8008fc6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a06      	ldr	r2, [pc, #24]	; (8009000 <SDMMC_GetCmdError+0x58>)
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	20000000 	.word	0x20000000
 8008ffc:	10624dd3 	.word	0x10624dd3
 8009000:	002000c5 	.word	0x002000c5

08009004 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009008:	4904      	ldr	r1, [pc, #16]	; (800901c <MX_FATFS_Init+0x18>)
 800900a:	4805      	ldr	r0, [pc, #20]	; (8009020 <MX_FATFS_Init+0x1c>)
 800900c:	f002 fe18 	bl	800bc40 <FATFS_LinkDriver>
 8009010:	4603      	mov	r3, r0
 8009012:	461a      	mov	r2, r3
 8009014:	4b03      	ldr	r3, [pc, #12]	; (8009024 <MX_FATFS_Init+0x20>)
 8009016:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009018:	bf00      	nop
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000544 	.word	0x20000544
 8009020:	0800f160 	.word	0x0800f160
 8009024:	20000540 	.word	0x20000540

08009028 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800902c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800902e:	4618      	mov	r0, r3
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009042:	f000 f885 	bl	8009150 <BSP_SD_IsDetected>
 8009046:	4603      	mov	r3, r0
 8009048:	2b01      	cmp	r3, #1
 800904a:	d001      	beq.n	8009050 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800904c:	2302      	movs	r3, #2
 800904e:	e012      	b.n	8009076 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009050:	480b      	ldr	r0, [pc, #44]	; (8009080 <BSP_SD_Init+0x48>)
 8009052:	f7fb fef9 	bl	8004e48 <HAL_SD_Init>
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009060:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009064:	4806      	ldr	r0, [pc, #24]	; (8009080 <BSP_SD_Init+0x48>)
 8009066:	f7fc fe03 	bl	8005c70 <HAL_SD_ConfigWideBusOperation>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009074:	79fb      	ldrb	r3, [r7, #7]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000350 	.word	0x20000350

08009084 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	68f9      	ldr	r1, [r7, #12]
 800909a:	4806      	ldr	r0, [pc, #24]	; (80090b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800909c:	f7fc f852 	bl	8005144 <HAL_SD_ReadBlocks_DMA>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80090aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3718      	adds	r7, #24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000350 	.word	0x20000350

080090b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	68f9      	ldr	r1, [r7, #12]
 80090ce:	4806      	ldr	r0, [pc, #24]	; (80090e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80090d0:	f7fc f8e0 	bl	8005294 <HAL_SD_WriteBlocks_DMA>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000350 	.word	0x20000350

080090ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <BSP_SD_GetCardState+0x1c>)
 80090f2:	f7fc fee3 	bl	8005ebc <HAL_SD_GetCardState>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	bf14      	ite	ne
 80090fc:	2301      	movne	r3, #1
 80090fe:	2300      	moveq	r3, #0
 8009100:	b2db      	uxtb	r3, r3
}
 8009102:	4618      	mov	r0, r3
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20000350 	.word	0x20000350

0800910c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	4803      	ldr	r0, [pc, #12]	; (8009124 <BSP_SD_GetCardInfo+0x18>)
 8009118:	f7fc fd7e 	bl	8005c18 <HAL_SD_GetCardInfo>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	20000350 	.word	0x20000350

08009128 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009130:	f000 f9a0 	bl	8009474 <BSP_SD_WriteCpltCallback>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009144:	f000 f9a4 	bl	8009490 <BSP_SD_ReadCpltCallback>
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009156:	2301      	movs	r3, #1
 8009158:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	b2db      	uxtb	r3, r3
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8009172:	f002 fdfd 	bl	800bd70 <osKernelSysTick>
 8009176:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8009178:	e006      	b.n	8009188 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800917a:	f7ff ffb7 	bl	80090ec <BSP_SD_GetCardState>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009184:	2300      	movs	r3, #0
 8009186:	e009      	b.n	800919c <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8009188:	f002 fdf2 	bl	800bd70 <osKernelSysTick>
 800918c:	4602      	mov	r2, r0
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	429a      	cmp	r2, r3
 8009196:	d8f0      	bhi.n	800917a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009198:	f04f 33ff 	mov.w	r3, #4294967295
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80091ae:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <SD_CheckStatus+0x38>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80091b4:	f7ff ff9a 	bl	80090ec <BSP_SD_GetCardState>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d107      	bne.n	80091ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80091be:	4b07      	ldr	r3, [pc, #28]	; (80091dc <SD_CheckStatus+0x38>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f023 0301 	bic.w	r3, r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4b04      	ldr	r3, [pc, #16]	; (80091dc <SD_CheckStatus+0x38>)
 80091cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80091ce:	4b03      	ldr	r3, [pc, #12]	; (80091dc <SD_CheckStatus+0x38>)
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b2db      	uxtb	r3, r3
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	20000009 	.word	0x20000009

080091e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b087      	sub	sp, #28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80091ea:	4b20      	ldr	r3, [pc, #128]	; (800926c <SD_initialize+0x8c>)
 80091ec:	2201      	movs	r2, #1
 80091ee:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80091f0:	f002 fdb2 	bl	800bd58 <osKernelRunning>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d030      	beq.n	800925c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80091fa:	f7ff ff1d 	bl	8009038 <BSP_SD_Init>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d107      	bne.n	8009214 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff ffcc 	bl	80091a4 <SD_CheckStatus>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	4b16      	ldr	r3, [pc, #88]	; (800926c <SD_initialize+0x8c>)
 8009212:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009214:	4b15      	ldr	r3, [pc, #84]	; (800926c <SD_initialize+0x8c>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b01      	cmp	r3, #1
 800921c:	d01e      	beq.n	800925c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800921e:	4b14      	ldr	r3, [pc, #80]	; (8009270 <SD_initialize+0x90>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10e      	bne.n	8009244 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8009226:	4b13      	ldr	r3, [pc, #76]	; (8009274 <SD_initialize+0x94>)
 8009228:	f107 0408 	add.w	r4, r7, #8
 800922c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800922e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f002 fed2 	bl	800bfe2 <osMessageCreate>
 800923e:	4603      	mov	r3, r0
 8009240:	4a0b      	ldr	r2, [pc, #44]	; (8009270 <SD_initialize+0x90>)
 8009242:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <SD_initialize+0x90>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d107      	bne.n	800925c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800924c:	4b07      	ldr	r3, [pc, #28]	; (800926c <SD_initialize+0x8c>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f043 0301 	orr.w	r3, r3, #1
 8009256:	b2da      	uxtb	r2, r3
 8009258:	4b04      	ldr	r3, [pc, #16]	; (800926c <SD_initialize+0x8c>)
 800925a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800925c:	4b03      	ldr	r3, [pc, #12]	; (800926c <SD_initialize+0x8c>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	b2db      	uxtb	r3, r3
}
 8009262:	4618      	mov	r0, r3
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	bd90      	pop	{r4, r7, pc}
 800926a:	bf00      	nop
 800926c:	20000009 	.word	0x20000009
 8009270:	200009ac 	.word	0x200009ac
 8009274:	0800f094 	.word	0x0800f094

08009278 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	4618      	mov	r0, r3
 8009286:	f7ff ff8d 	bl	80091a4 <SD_CheckStatus>
 800928a:	4603      	mov	r3, r0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	; 0x28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80092aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80092ae:	f7ff ff5c 	bl	800916a <SD_CheckStatusWithTimeout>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da02      	bge.n	80092be <SD_read+0x2a>
  {
    return res;
 80092b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092bc:	e032      	b.n	8009324 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	68b8      	ldr	r0, [r7, #8]
 80092c4:	f7ff fede 	bl	8009084 <BSP_SD_ReadBlocks_DMA>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80092ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d124      	bne.n	8009320 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80092d6:	4b15      	ldr	r3, [pc, #84]	; (800932c <SD_read+0x98>)
 80092d8:	6819      	ldr	r1, [r3, #0]
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	f247 5230 	movw	r2, #30000	; 0x7530
 80092e2:	4618      	mov	r0, r3
 80092e4:	f002 fee6 	bl	800c0b4 <osMessageGet>

    if (event.status == osEventMessage)
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d118      	bne.n	8009320 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d115      	bne.n	8009320 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80092f4:	f002 fd3c 	bl	800bd70 <osKernelSysTick>
 80092f8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80092fa:	e008      	b.n	800930e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80092fc:	f7ff fef6 	bl	80090ec <BSP_SD_GetCardState>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <SD_read+0x7a>
              {
                res = RES_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800930c:	e008      	b.n	8009320 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800930e:	f002 fd2f 	bl	800bd70 <osKernelSysTick>
 8009312:	4602      	mov	r2, r0
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	f247 522f 	movw	r2, #29999	; 0x752f
 800931c:	4293      	cmp	r3, r2
 800931e:	d9ed      	bls.n	80092fc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009324:	4618      	mov	r0, r3
 8009326:	3728      	adds	r7, #40	; 0x28
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	200009ac 	.word	0x200009ac

08009330 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	; 0x28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	607a      	str	r2, [r7, #4]
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009346:	f247 5030 	movw	r0, #30000	; 0x7530
 800934a:	f7ff ff0e 	bl	800916a <SD_CheckStatusWithTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	da02      	bge.n	800935a <SD_write+0x2a>
  {
    return res;
 8009354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009358:	e02e      	b.n	80093b8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	68b8      	ldr	r0, [r7, #8]
 8009360:	f7ff feaa 	bl	80090b8 <BSP_SD_WriteBlocks_DMA>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d124      	bne.n	80093b4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800936a:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <SD_write+0x90>)
 800936c:	6819      	ldr	r1, [r3, #0]
 800936e:	f107 0314 	add.w	r3, r7, #20
 8009372:	f247 5230 	movw	r2, #30000	; 0x7530
 8009376:	4618      	mov	r0, r3
 8009378:	f002 fe9c 	bl	800c0b4 <osMessageGet>

    if (event.status == osEventMessage)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2b10      	cmp	r3, #16
 8009380:	d118      	bne.n	80093b4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d115      	bne.n	80093b4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8009388:	f002 fcf2 	bl	800bd70 <osKernelSysTick>
 800938c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800938e:	e008      	b.n	80093a2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009390:	f7ff feac 	bl	80090ec <BSP_SD_GetCardState>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d103      	bne.n	80093a2 <SD_write+0x72>
          {
            res = RES_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80093a0:	e008      	b.n	80093b4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80093a2:	f002 fce5 	bl	800bd70 <osKernelSysTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	f247 522f 	movw	r2, #29999	; 0x752f
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d9ed      	bls.n	8009390 <SD_write+0x60>
    }

  }
#endif

  return res;
 80093b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3728      	adds	r7, #40	; 0x28
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	200009ac 	.word	0x200009ac

080093c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08c      	sub	sp, #48	; 0x30
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	603a      	str	r2, [r7, #0]
 80093ce:	71fb      	strb	r3, [r7, #7]
 80093d0:	460b      	mov	r3, r1
 80093d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80093da:	4b25      	ldr	r3, [pc, #148]	; (8009470 <SD_ioctl+0xac>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_ioctl+0x28>
 80093e8:	2303      	movs	r3, #3
 80093ea:	e03c      	b.n	8009466 <SD_ioctl+0xa2>

  switch (cmd)
 80093ec:	79bb      	ldrb	r3, [r7, #6]
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d834      	bhi.n	800945c <SD_ioctl+0x98>
 80093f2:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <SD_ioctl+0x34>)
 80093f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f8:	08009409 	.word	0x08009409
 80093fc:	08009411 	.word	0x08009411
 8009400:	08009429 	.word	0x08009429
 8009404:	08009443 	.word	0x08009443
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800940e:	e028      	b.n	8009462 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff fe79 	bl	800910c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009426:	e01c      	b.n	8009462 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009428:	f107 0308 	add.w	r3, r7, #8
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fe6d 	bl	800910c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	b29a      	uxth	r2, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009440:	e00f      	b.n	8009462 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009442:	f107 0308 	add.w	r3, r7, #8
 8009446:	4618      	mov	r0, r3
 8009448:	f7ff fe60 	bl	800910c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	0a5a      	lsrs	r2, r3, #9
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800945a:	e002      	b.n	8009462 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800945c:	2304      	movs	r3, #4
 800945e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009466:	4618      	mov	r0, r3
 8009468:	3730      	adds	r7, #48	; 0x30
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000009 	.word	0x20000009

08009474 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8009478:	4b04      	ldr	r3, [pc, #16]	; (800948c <BSP_SD_WriteCpltCallback+0x18>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2200      	movs	r2, #0
 800947e:	2102      	movs	r1, #2
 8009480:	4618      	mov	r0, r3
 8009482:	f002 fdd7 	bl	800c034 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8009486:	bf00      	nop
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	200009ac 	.word	0x200009ac

08009490 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8009494:	4b04      	ldr	r3, [pc, #16]	; (80094a8 <BSP_SD_ReadCpltCallback+0x18>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2200      	movs	r2, #0
 800949a:	2101      	movs	r1, #1
 800949c:	4618      	mov	r0, r3
 800949e:	f002 fdc9 	bl	800c034 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80094a2:	bf00      	nop
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200009ac 	.word	0x200009ac

080094ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	4a08      	ldr	r2, [pc, #32]	; (80094dc <disk_status+0x30>)
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	79fa      	ldrb	r2, [r7, #7]
 80094c4:	4905      	ldr	r1, [pc, #20]	; (80094dc <disk_status+0x30>)
 80094c6:	440a      	add	r2, r1
 80094c8:	7a12      	ldrb	r2, [r2, #8]
 80094ca:	4610      	mov	r0, r2
 80094cc:	4798      	blx	r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	200009d8 	.word	0x200009d8

080094e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	4a0d      	ldr	r2, [pc, #52]	; (8009528 <disk_initialize+0x48>)
 80094f2:	5cd3      	ldrb	r3, [r2, r3]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d111      	bne.n	800951c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	4a0b      	ldr	r2, [pc, #44]	; (8009528 <disk_initialize+0x48>)
 80094fc:	2101      	movs	r1, #1
 80094fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	4a09      	ldr	r2, [pc, #36]	; (8009528 <disk_initialize+0x48>)
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	79fa      	ldrb	r2, [r7, #7]
 800950e:	4906      	ldr	r1, [pc, #24]	; (8009528 <disk_initialize+0x48>)
 8009510:	440a      	add	r2, r1
 8009512:	7a12      	ldrb	r2, [r2, #8]
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	200009d8 	.word	0x200009d8

0800952c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800952c:	b590      	push	{r4, r7, lr}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4a0a      	ldr	r2, [pc, #40]	; (8009568 <disk_read+0x3c>)
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	689c      	ldr	r4, [r3, #8]
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	4a07      	ldr	r2, [pc, #28]	; (8009568 <disk_read+0x3c>)
 800954c:	4413      	add	r3, r2
 800954e:	7a18      	ldrb	r0, [r3, #8]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	68b9      	ldr	r1, [r7, #8]
 8009556:	47a0      	blx	r4
 8009558:	4603      	mov	r3, r0
 800955a:	75fb      	strb	r3, [r7, #23]
  return res;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
}
 800955e:	4618      	mov	r0, r3
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	bd90      	pop	{r4, r7, pc}
 8009566:	bf00      	nop
 8009568:	200009d8 	.word	0x200009d8

0800956c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800956c:	b590      	push	{r4, r7, lr}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <disk_write+0x3c>)
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	68dc      	ldr	r4, [r3, #12]
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	4a07      	ldr	r2, [pc, #28]	; (80095a8 <disk_write+0x3c>)
 800958c:	4413      	add	r3, r2
 800958e:	7a18      	ldrb	r0, [r3, #8]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	47a0      	blx	r4
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]
  return res;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd90      	pop	{r4, r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200009d8 	.word	0x200009d8

080095ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	603a      	str	r2, [r7, #0]
 80095b6:	71fb      	strb	r3, [r7, #7]
 80095b8:	460b      	mov	r3, r1
 80095ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	4a09      	ldr	r2, [pc, #36]	; (80095e4 <disk_ioctl+0x38>)
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	79fa      	ldrb	r2, [r7, #7]
 80095ca:	4906      	ldr	r1, [pc, #24]	; (80095e4 <disk_ioctl+0x38>)
 80095cc:	440a      	add	r2, r1
 80095ce:	7a10      	ldrb	r0, [r2, #8]
 80095d0:	79b9      	ldrb	r1, [r7, #6]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4798      	blx	r3
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	200009d8 	.word	0x200009d8

080095e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3301      	adds	r3, #1
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80095f8:	89fb      	ldrh	r3, [r7, #14]
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	b21a      	sxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b21b      	sxth	r3, r3
 8009604:	4313      	orrs	r3, r2
 8009606:	b21b      	sxth	r3, r3
 8009608:	81fb      	strh	r3, [r7, #14]
	return rv;
 800960a:	89fb      	ldrh	r3, [r7, #14]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3303      	adds	r3, #3
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	021b      	lsls	r3, r3, #8
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	3202      	adds	r2, #2
 8009630:	7812      	ldrb	r2, [r2, #0]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	3201      	adds	r2, #1
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009650:	68fb      	ldr	r3, [r7, #12]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	887a      	ldrh	r2, [r7, #2]
 8009672:	b2d2      	uxtb	r2, r2
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	887b      	ldrh	r3, [r7, #2]
 8009678:	0a1b      	lsrs	r3, r3, #8
 800967a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	607a      	str	r2, [r7, #4]
 8009682:	887a      	ldrh	r2, [r7, #2]
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	701a      	strb	r2, [r3, #0]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	0a1b      	lsrs	r3, r3, #8
 80096ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	607a      	str	r2, [r7, #4]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	1c5a      	adds	r2, r3, #1
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	0a1b      	lsrs	r3, r3, #8
 80096d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	b2d2      	uxtb	r2, r2
 80096de:	701a      	strb	r2, [r3, #0]
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00d      	beq.n	8009722 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	1c53      	adds	r3, r2, #1
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	1c59      	adds	r1, r3, #1
 8009710:	6179      	str	r1, [r7, #20]
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3b01      	subs	r3, #1
 800971a:	607b      	str	r3, [r7, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1f1      	bne.n	8009706 <mem_cpy+0x1a>
	}
}
 8009722:	bf00      	nop
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800972e:	b480      	push	{r7}
 8009730:	b087      	sub	sp, #28
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	617a      	str	r2, [r7, #20]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	b2d2      	uxtb	r2, r2
 8009748:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	3b01      	subs	r3, #1
 800974e:	607b      	str	r3, [r7, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1f3      	bne.n	800973e <mem_set+0x10>
}
 8009756:	bf00      	nop
 8009758:	bf00      	nop
 800975a:	371c      	adds	r7, #28
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009764:	b480      	push	{r7}
 8009766:	b089      	sub	sp, #36	; 0x24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009778:	2300      	movs	r3, #0
 800977a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	1c5a      	adds	r2, r3, #1
 8009780:	61fa      	str	r2, [r7, #28]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	4619      	mov	r1, r3
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	61ba      	str	r2, [r7, #24]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	1acb      	subs	r3, r1, r3
 8009790:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3b01      	subs	r3, #1
 8009796:	607b      	str	r3, [r7, #4]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <mem_cmp+0x40>
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0eb      	beq.n	800977c <mem_cmp+0x18>

	return r;
 80097a4:	697b      	ldr	r3, [r7, #20]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3724      	adds	r7, #36	; 0x24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80097bc:	e002      	b.n	80097c4 <chk_chr+0x12>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	3301      	adds	r3, #1
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <chk_chr+0x26>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d1f2      	bne.n	80097be <chk_chr+0xc>
	return *str;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	781b      	ldrb	r3, [r3, #0]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <lock_fs+0x22>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f002 fa5b 	bl	800bcb6 <ff_req_grant>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d001      	beq.n	800980a <lock_fs+0x22>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <lock_fs+0x24>
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00d      	beq.n	8009842 <unlock_fs+0x2e>
 8009826:	78fb      	ldrb	r3, [r7, #3]
 8009828:	2b0c      	cmp	r3, #12
 800982a:	d00a      	beq.n	8009842 <unlock_fs+0x2e>
 800982c:	78fb      	ldrb	r3, [r7, #3]
 800982e:	2b0b      	cmp	r3, #11
 8009830:	d007      	beq.n	8009842 <unlock_fs+0x2e>
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	2b0f      	cmp	r3, #15
 8009836:	d004      	beq.n	8009842 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	4618      	mov	r0, r3
 800983e:	f002 fa4f 	bl	800bce0 <ff_rel_grant>
	}
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009856:	2300      	movs	r3, #0
 8009858:	60bb      	str	r3, [r7, #8]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	e029      	b.n	80098b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009860:	4a27      	ldr	r2, [pc, #156]	; (8009900 <chk_lock+0xb4>)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	011b      	lsls	r3, r3, #4
 8009866:	4413      	add	r3, r2
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d01d      	beq.n	80098aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800986e:	4a24      	ldr	r2, [pc, #144]	; (8009900 <chk_lock+0xb4>)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	011b      	lsls	r3, r3, #4
 8009874:	4413      	add	r3, r2
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d116      	bne.n	80098ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009880:	4a1f      	ldr	r2, [pc, #124]	; (8009900 <chk_lock+0xb4>)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	011b      	lsls	r3, r3, #4
 8009886:	4413      	add	r3, r2
 8009888:	3304      	adds	r3, #4
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009890:	429a      	cmp	r2, r3
 8009892:	d10c      	bne.n	80098ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009894:	4a1a      	ldr	r2, [pc, #104]	; (8009900 <chk_lock+0xb4>)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	4413      	add	r3, r2
 800989c:	3308      	adds	r3, #8
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d102      	bne.n	80098ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80098a8:	e007      	b.n	80098ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80098aa:	2301      	movs	r3, #1
 80098ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	3301      	adds	r3, #1
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d9d2      	bls.n	8009860 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d109      	bne.n	80098d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <chk_lock+0x80>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d101      	bne.n	80098d0 <chk_lock+0x84>
 80098cc:	2300      	movs	r3, #0
 80098ce:	e010      	b.n	80098f2 <chk_lock+0xa6>
 80098d0:	2312      	movs	r3, #18
 80098d2:	e00e      	b.n	80098f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d108      	bne.n	80098ec <chk_lock+0xa0>
 80098da:	4a09      	ldr	r2, [pc, #36]	; (8009900 <chk_lock+0xb4>)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	4413      	add	r3, r2
 80098e2:	330c      	adds	r3, #12
 80098e4:	881b      	ldrh	r3, [r3, #0]
 80098e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ea:	d101      	bne.n	80098f0 <chk_lock+0xa4>
 80098ec:	2310      	movs	r3, #16
 80098ee:	e000      	b.n	80098f2 <chk_lock+0xa6>
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	200009b8 	.word	0x200009b8

08009904 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800990a:	2300      	movs	r3, #0
 800990c:	607b      	str	r3, [r7, #4]
 800990e:	e002      	b.n	8009916 <enq_lock+0x12>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3301      	adds	r3, #1
 8009914:	607b      	str	r3, [r7, #4]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d806      	bhi.n	800992a <enq_lock+0x26>
 800991c:	4a09      	ldr	r2, [pc, #36]	; (8009944 <enq_lock+0x40>)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	4413      	add	r3, r2
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1f2      	bne.n	8009910 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b02      	cmp	r3, #2
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2db      	uxtb	r3, r3
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	200009b8 	.word	0x200009b8

08009948 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	e01f      	b.n	8009998 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009958:	4a41      	ldr	r2, [pc, #260]	; (8009a60 <inc_lock+0x118>)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	4413      	add	r3, r2
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d113      	bne.n	8009992 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800996a:	4a3d      	ldr	r2, [pc, #244]	; (8009a60 <inc_lock+0x118>)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4413      	add	r3, r2
 8009972:	3304      	adds	r3, #4
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800997a:	429a      	cmp	r2, r3
 800997c:	d109      	bne.n	8009992 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800997e:	4a38      	ldr	r2, [pc, #224]	; (8009a60 <inc_lock+0x118>)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	011b      	lsls	r3, r3, #4
 8009984:	4413      	add	r3, r2
 8009986:	3308      	adds	r3, #8
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800998e:	429a      	cmp	r2, r3
 8009990:	d006      	beq.n	80099a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3301      	adds	r3, #1
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d9dc      	bls.n	8009958 <inc_lock+0x10>
 800999e:	e000      	b.n	80099a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80099a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d132      	bne.n	8009a0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	e002      	b.n	80099b4 <inc_lock+0x6c>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3301      	adds	r3, #1
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d806      	bhi.n	80099c8 <inc_lock+0x80>
 80099ba:	4a29      	ldr	r2, [pc, #164]	; (8009a60 <inc_lock+0x118>)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	4413      	add	r3, r2
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1f2      	bne.n	80099ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d101      	bne.n	80099d2 <inc_lock+0x8a>
 80099ce:	2300      	movs	r3, #0
 80099d0:	e040      	b.n	8009a54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	4922      	ldr	r1, [pc, #136]	; (8009a60 <inc_lock+0x118>)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	440b      	add	r3, r1
 80099de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	491e      	ldr	r1, [pc, #120]	; (8009a60 <inc_lock+0x118>)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	440b      	add	r3, r1
 80099ec:	3304      	adds	r3, #4
 80099ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	695a      	ldr	r2, [r3, #20]
 80099f4:	491a      	ldr	r1, [pc, #104]	; (8009a60 <inc_lock+0x118>)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	011b      	lsls	r3, r3, #4
 80099fa:	440b      	add	r3, r1
 80099fc:	3308      	adds	r3, #8
 80099fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009a00:	4a17      	ldr	r2, [pc, #92]	; (8009a60 <inc_lock+0x118>)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	011b      	lsls	r3, r3, #4
 8009a06:	4413      	add	r3, r2
 8009a08:	330c      	adds	r3, #12
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d009      	beq.n	8009a28 <inc_lock+0xe0>
 8009a14:	4a12      	ldr	r2, [pc, #72]	; (8009a60 <inc_lock+0x118>)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	4413      	add	r3, r2
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <inc_lock+0xe0>
 8009a24:	2300      	movs	r3, #0
 8009a26:	e015      	b.n	8009a54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d108      	bne.n	8009a40 <inc_lock+0xf8>
 8009a2e:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <inc_lock+0x118>)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	4413      	add	r3, r2
 8009a36:	330c      	adds	r3, #12
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	e001      	b.n	8009a44 <inc_lock+0xfc>
 8009a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a44:	4906      	ldr	r1, [pc, #24]	; (8009a60 <inc_lock+0x118>)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	440b      	add	r3, r1
 8009a4c:	330c      	adds	r3, #12
 8009a4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	200009b8 	.word	0x200009b8

08009a64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	607b      	str	r3, [r7, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d825      	bhi.n	8009ac4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009a78:	4a17      	ldr	r2, [pc, #92]	; (8009ad8 <dec_lock+0x74>)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	011b      	lsls	r3, r3, #4
 8009a7e:	4413      	add	r3, r2
 8009a80:	330c      	adds	r3, #12
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009a86:	89fb      	ldrh	r3, [r7, #14]
 8009a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8c:	d101      	bne.n	8009a92 <dec_lock+0x2e>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009a92:	89fb      	ldrh	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <dec_lock+0x3a>
 8009a98:	89fb      	ldrh	r3, [r7, #14]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009a9e:	4a0e      	ldr	r2, [pc, #56]	; (8009ad8 <dec_lock+0x74>)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	4413      	add	r3, r2
 8009aa6:	330c      	adds	r3, #12
 8009aa8:	89fa      	ldrh	r2, [r7, #14]
 8009aaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009aac:	89fb      	ldrh	r3, [r7, #14]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <dec_lock+0x5a>
 8009ab2:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <dec_lock+0x74>)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	011b      	lsls	r3, r3, #4
 8009ab8:	4413      	add	r3, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	737b      	strb	r3, [r7, #13]
 8009ac2:	e001      	b.n	8009ac8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009ac8:	7b7b      	ldrb	r3, [r7, #13]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	200009b8 	.word	0x200009b8

08009adc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	e010      	b.n	8009b0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009aea:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <clear_lock+0x44>)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	011b      	lsls	r3, r3, #4
 8009af0:	4413      	add	r3, r2
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d105      	bne.n	8009b06 <clear_lock+0x2a>
 8009afa:	4a09      	ldr	r2, [pc, #36]	; (8009b20 <clear_lock+0x44>)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	4413      	add	r3, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d9eb      	bls.n	8009aea <clear_lock+0xe>
	}
}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	200009b8 	.word	0x200009b8

08009b24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	78db      	ldrb	r3, [r3, #3]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d034      	beq.n	8009ba2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	7858      	ldrb	r0, [r3, #1]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b48:	2301      	movs	r3, #1
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	f7ff fd0e 	bl	800956c <disk_write>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	73fb      	strb	r3, [r7, #15]
 8009b5a:	e022      	b.n	8009ba2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	1ad2      	subs	r2, r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d217      	bcs.n	8009ba2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	789b      	ldrb	r3, [r3, #2]
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	e010      	b.n	8009b9c <sync_window+0x78>
					wsect += fs->fsize;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4413      	add	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7858      	ldrb	r0, [r3, #1]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b8e:	2301      	movs	r3, #1
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	f7ff fceb 	bl	800956c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	613b      	str	r3, [r7, #16]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d8eb      	bhi.n	8009b7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d01b      	beq.n	8009bfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff ffad 	bl	8009b24 <sync_window>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d113      	bne.n	8009bfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	7858      	ldrb	r0, [r3, #1]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009bde:	2301      	movs	r3, #1
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	f7ff fca3 	bl	800952c <disk_read>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d004      	beq.n	8009bf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009bec:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff ff87 	bl	8009b24 <sync_window>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d158      	bne.n	8009cd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d148      	bne.n	8009cba <sync_fs+0xb2>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	791b      	ldrb	r3, [r3, #4]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d144      	bne.n	8009cba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3334      	adds	r3, #52	; 0x34
 8009c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff fd77 	bl	800972e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3334      	adds	r3, #52	; 0x34
 8009c44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff fd06 	bl	800965e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3334      	adds	r3, #52	; 0x34
 8009c56:	4921      	ldr	r1, [pc, #132]	; (8009cdc <sync_fs+0xd4>)
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fd1b 	bl	8009694 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3334      	adds	r3, #52	; 0x34
 8009c62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009c66:	491e      	ldr	r1, [pc, #120]	; (8009ce0 <sync_fs+0xd8>)
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff fd13 	bl	8009694 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3334      	adds	r3, #52	; 0x34
 8009c72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	f7ff fd09 	bl	8009694 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3334      	adds	r3, #52	; 0x34
 8009c86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4610      	mov	r0, r2
 8009c92:	f7ff fcff 	bl	8009694 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a1b      	ldr	r3, [r3, #32]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7858      	ldrb	r0, [r3, #1]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f7ff fc5c 	bl	800956c <disk_write>
			fs->fsi_flag = 0;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7ff fc72 	bl	80095ac <disk_ioctl>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <sync_fs+0xca>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	41615252 	.word	0x41615252
 8009ce0:	61417272 	.word	0x61417272

08009ce4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	3b02      	subs	r3, #2
 8009cf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	3b02      	subs	r3, #2
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d301      	bcc.n	8009d04 <clust2sect+0x20>
 8009d00:	2300      	movs	r3, #0
 8009d02:	e008      	b.n	8009d16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	895b      	ldrh	r3, [r3, #10]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	fb03 f202 	mul.w	r2, r3, r2
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d14:	4413      	add	r3, r2
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d904      	bls.n	8009d42 <get_fat+0x20>
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d302      	bcc.n	8009d48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009d42:	2301      	movs	r3, #1
 8009d44:	617b      	str	r3, [r7, #20]
 8009d46:	e08f      	b.n	8009e68 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009d48:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d062      	beq.n	8009e1c <get_fat+0xfa>
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	dc7c      	bgt.n	8009e54 <get_fat+0x132>
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d002      	beq.n	8009d64 <get_fat+0x42>
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d042      	beq.n	8009de8 <get_fat+0xc6>
 8009d62:	e077      	b.n	8009e54 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	0a5b      	lsrs	r3, r3, #9
 8009d7a:	4413      	add	r3, r2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6938      	ldr	r0, [r7, #16]
 8009d80:	f7ff ff14 	bl	8009bac <move_window>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d167      	bne.n	8009e5a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	60fa      	str	r2, [r7, #12]
 8009d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	4413      	add	r3, r2
 8009d98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	0a5b      	lsrs	r3, r3, #9
 8009da6:	4413      	add	r3, r2
 8009da8:	4619      	mov	r1, r3
 8009daa:	6938      	ldr	r0, [r7, #16]
 8009dac:	f7ff fefe 	bl	8009bac <move_window>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d153      	bne.n	8009e5e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <get_fat+0xbc>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	091b      	lsrs	r3, r3, #4
 8009ddc:	e002      	b.n	8009de4 <get_fat+0xc2>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009de4:	617b      	str	r3, [r7, #20]
			break;
 8009de6:	e03f      	b.n	8009e68 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	0a1b      	lsrs	r3, r3, #8
 8009df0:	4413      	add	r3, r2
 8009df2:	4619      	mov	r1, r3
 8009df4:	6938      	ldr	r0, [r7, #16]
 8009df6:	f7ff fed9 	bl	8009bac <move_window>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d130      	bne.n	8009e62 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009e0e:	4413      	add	r3, r2
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff fbe9 	bl	80095e8 <ld_word>
 8009e16:	4603      	mov	r3, r0
 8009e18:	617b      	str	r3, [r7, #20]
			break;
 8009e1a:	e025      	b.n	8009e68 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	09db      	lsrs	r3, r3, #7
 8009e24:	4413      	add	r3, r2
 8009e26:	4619      	mov	r1, r3
 8009e28:	6938      	ldr	r0, [r7, #16]
 8009e2a:	f7ff febf 	bl	8009bac <move_window>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d118      	bne.n	8009e66 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009e42:	4413      	add	r3, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff fbe7 	bl	8009618 <ld_dword>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009e50:	617b      	str	r3, [r7, #20]
			break;
 8009e52:	e009      	b.n	8009e68 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009e54:	2301      	movs	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	e006      	b.n	8009e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e5a:	bf00      	nop
 8009e5c:	e004      	b.n	8009e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e5e:	bf00      	nop
 8009e60:	e002      	b.n	8009e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009e62:	bf00      	nop
 8009e64:	e000      	b.n	8009e68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009e66:	bf00      	nop
		}
	}

	return val;
 8009e68:	697b      	ldr	r3, [r7, #20]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009e72:	b590      	push	{r4, r7, lr}
 8009e74:	b089      	sub	sp, #36	; 0x24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009e7e:	2302      	movs	r3, #2
 8009e80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	f240 80d2 	bls.w	800a02e <put_fat+0x1bc>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	f080 80cc 	bcs.w	800a02e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	f000 8096 	beq.w	8009fcc <put_fat+0x15a>
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	f300 80cd 	bgt.w	800a040 <put_fat+0x1ce>
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d002      	beq.n	8009eb0 <put_fat+0x3e>
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d06e      	beq.n	8009f8c <put_fat+0x11a>
 8009eae:	e0c7      	b.n	800a040 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	085b      	lsrs	r3, r3, #1
 8009eb8:	69ba      	ldr	r2, [r7, #24]
 8009eba:	4413      	add	r3, r2
 8009ebc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	0a5b      	lsrs	r3, r3, #9
 8009ec6:	4413      	add	r3, r2
 8009ec8:	4619      	mov	r1, r3
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff fe6e 	bl	8009bac <move_window>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ed4:	7ffb      	ldrb	r3, [r7, #31]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 80ab 	bne.w	800a032 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	1c59      	adds	r1, r3, #1
 8009ee6:	61b9      	str	r1, [r7, #24]
 8009ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eec:	4413      	add	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00d      	beq.n	8009f16 <put_fat+0xa4>
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	b25b      	sxtb	r3, r3
 8009f00:	f003 030f 	and.w	r3, r3, #15
 8009f04:	b25a      	sxtb	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	b25b      	sxtb	r3, r3
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	b25b      	sxtb	r3, r3
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	e001      	b.n	8009f1a <put_fat+0xa8>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	0a5b      	lsrs	r3, r3, #9
 8009f2c:	4413      	add	r3, r2
 8009f2e:	4619      	mov	r1, r3
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f7ff fe3b 	bl	8009bac <move_window>
 8009f36:	4603      	mov	r3, r0
 8009f38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f3a:	7ffb      	ldrb	r3, [r7, #31]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d17a      	bne.n	800a036 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4c:	4413      	add	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <put_fat+0xf0>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	091b      	lsrs	r3, r3, #4
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	e00e      	b.n	8009f80 <put_fat+0x10e>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	b25b      	sxtb	r3, r3
 8009f68:	f023 030f 	bic.w	r3, r3, #15
 8009f6c:	b25a      	sxtb	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	0a1b      	lsrs	r3, r3, #8
 8009f72:	b25b      	sxtb	r3, r3
 8009f74:	f003 030f 	and.w	r3, r3, #15
 8009f78:	b25b      	sxtb	r3, r3
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	b25b      	sxtb	r3, r3
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	70da      	strb	r2, [r3, #3]
			break;
 8009f8a:	e059      	b.n	800a040 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	0a1b      	lsrs	r3, r3, #8
 8009f94:	4413      	add	r3, r2
 8009f96:	4619      	mov	r1, r3
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff fe07 	bl	8009bac <move_window>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fa2:	7ffb      	ldrb	r3, [r7, #31]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d148      	bne.n	800a03a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009fb6:	4413      	add	r3, r2
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	b292      	uxth	r2, r2
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff fb4d 	bl	800965e <st_word>
			fs->wflag = 1;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	70da      	strb	r2, [r3, #3]
			break;
 8009fca:	e039      	b.n	800a040 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	09db      	lsrs	r3, r3, #7
 8009fd4:	4413      	add	r3, r2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff fde7 	bl	8009bac <move_window>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009fe2:	7ffb      	ldrb	r3, [r7, #31]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d12a      	bne.n	800a03e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009ffc:	4413      	add	r3, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff fb0a 	bl	8009618 <ld_dword>
 800a004:	4603      	mov	r3, r0
 800a006:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a00a:	4323      	orrs	r3, r4
 800a00c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a01c:	4413      	add	r3, r2
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff fb37 	bl	8009694 <st_dword>
			fs->wflag = 1;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2201      	movs	r2, #1
 800a02a:	70da      	strb	r2, [r3, #3]
			break;
 800a02c:	e008      	b.n	800a040 <put_fat+0x1ce>
		}
	}
 800a02e:	bf00      	nop
 800a030:	e006      	b.n	800a040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a032:	bf00      	nop
 800a034:	e004      	b.n	800a040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a036:	bf00      	nop
 800a038:	e002      	b.n	800a040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a03a:	bf00      	nop
 800a03c:	e000      	b.n	800a040 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a03e:	bf00      	nop
	return res;
 800a040:	7ffb      	ldrb	r3, [r7, #31]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3724      	adds	r7, #36	; 0x24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd90      	pop	{r4, r7, pc}

0800a04a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b088      	sub	sp, #32
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d904      	bls.n	800a070 <remove_chain+0x26>
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d301      	bcc.n	800a074 <remove_chain+0x2a>
 800a070:	2302      	movs	r3, #2
 800a072:	e04b      	b.n	800a10c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00c      	beq.n	800a094 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a07a:	f04f 32ff 	mov.w	r2, #4294967295
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	69b8      	ldr	r0, [r7, #24]
 800a082:	f7ff fef6 	bl	8009e72 <put_fat>
 800a086:	4603      	mov	r3, r0
 800a088:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a08a:	7ffb      	ldrb	r3, [r7, #31]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <remove_chain+0x4a>
 800a090:	7ffb      	ldrb	r3, [r7, #31]
 800a092:	e03b      	b.n	800a10c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff fe43 	bl	8009d22 <get_fat>
 800a09c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d031      	beq.n	800a108 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <remove_chain+0x64>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e02e      	b.n	800a10c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b4:	d101      	bne.n	800a0ba <remove_chain+0x70>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e028      	b.n	800a10c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	68b9      	ldr	r1, [r7, #8]
 800a0be:	69b8      	ldr	r0, [r7, #24]
 800a0c0:	f7ff fed7 	bl	8009e72 <put_fat>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a0c8:	7ffb      	ldrb	r3, [r7, #31]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <remove_chain+0x88>
 800a0ce:	7ffb      	ldrb	r3, [r7, #31]
 800a0d0:	e01c      	b.n	800a10c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	695a      	ldr	r2, [r3, #20]
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	3b02      	subs	r3, #2
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d20b      	bcs.n	800a0f8 <remove_chain+0xae>
			fs->free_clst++;
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	791b      	ldrb	r3, [r3, #4]
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	429a      	cmp	r2, r3
 800a104:	d3c6      	bcc.n	800a094 <remove_chain+0x4a>
 800a106:	e000      	b.n	800a10a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a108:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10d      	bne.n	800a146 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d004      	beq.n	800a140 <create_chain+0x2c>
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d31b      	bcc.n	800a178 <create_chain+0x64>
 800a140:	2301      	movs	r3, #1
 800a142:	61bb      	str	r3, [r7, #24]
 800a144:	e018      	b.n	800a178 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fdea 	bl	8009d22 <get_fat>
 800a14e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d801      	bhi.n	800a15a <create_chain+0x46>
 800a156:	2301      	movs	r3, #1
 800a158:	e070      	b.n	800a23c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a160:	d101      	bne.n	800a166 <create_chain+0x52>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	e06a      	b.n	800a23c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d201      	bcs.n	800a174 <create_chain+0x60>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	e063      	b.n	800a23c <create_chain+0x128>
		scl = clst;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	3301      	adds	r3, #1
 800a180:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	69fa      	ldr	r2, [r7, #28]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d307      	bcc.n	800a19c <create_chain+0x88>
				ncl = 2;
 800a18c:	2302      	movs	r3, #2
 800a18e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a190:	69fa      	ldr	r2, [r7, #28]
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	429a      	cmp	r2, r3
 800a196:	d901      	bls.n	800a19c <create_chain+0x88>
 800a198:	2300      	movs	r3, #0
 800a19a:	e04f      	b.n	800a23c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a19c:	69f9      	ldr	r1, [r7, #28]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff fdbf 	bl	8009d22 <get_fat>
 800a1a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00e      	beq.n	800a1ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d003      	beq.n	800a1ba <create_chain+0xa6>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b8:	d101      	bne.n	800a1be <create_chain+0xaa>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	e03e      	b.n	800a23c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d1da      	bne.n	800a17c <create_chain+0x68>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e038      	b.n	800a23c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a1ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d0:	69f9      	ldr	r1, [r7, #28]
 800a1d2:	6938      	ldr	r0, [r7, #16]
 800a1d4:	f7ff fe4d 	bl	8009e72 <put_fat>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d109      	bne.n	800a1f6 <create_chain+0xe2>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d006      	beq.n	800a1f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6938      	ldr	r0, [r7, #16]
 800a1ee:	f7ff fe40 	bl	8009e72 <put_fat>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d116      	bne.n	800a22a <create_chain+0x116>
		fs->last_clst = ncl;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	695a      	ldr	r2, [r3, #20]
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	3b02      	subs	r3, #2
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d804      	bhi.n	800a21a <create_chain+0x106>
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	1e5a      	subs	r2, r3, #1
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	791b      	ldrb	r3, [r3, #4]
 800a21e:	f043 0301 	orr.w	r3, r3, #1
 800a222:	b2da      	uxtb	r2, r3
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	711a      	strb	r2, [r3, #4]
 800a228:	e007      	b.n	800a23a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d102      	bne.n	800a236 <create_chain+0x122>
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	e000      	b.n	800a238 <create_chain+0x124>
 800a236:	2301      	movs	r3, #1
 800a238:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a23a:	69fb      	ldr	r3, [r7, #28]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3720      	adds	r7, #32
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	3304      	adds	r3, #4
 800a25a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	0a5b      	lsrs	r3, r3, #9
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	8952      	ldrh	r2, [r2, #10]
 800a264:	fbb3 f3f2 	udiv	r3, r3, r2
 800a268:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1d1a      	adds	r2, r3, #4
 800a26e:	613a      	str	r2, [r7, #16]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <clmt_clust+0x3a>
 800a27a:	2300      	movs	r3, #0
 800a27c:	e010      	b.n	800a2a0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	429a      	cmp	r2, r3
 800a284:	d307      	bcc.n	800a296 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3304      	adds	r3, #4
 800a292:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a294:	e7e9      	b.n	800a26a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a296:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	4413      	add	r3, r2
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2c2:	d204      	bcs.n	800a2ce <dir_sdi+0x22>
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	f003 031f 	and.w	r3, r3, #31
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e063      	b.n	800a39a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <dir_sdi+0x46>
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d902      	bls.n	800a2f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10c      	bne.n	800a312 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	095b      	lsrs	r3, r3, #5
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	8912      	ldrh	r2, [r2, #8]
 800a300:	4293      	cmp	r3, r2
 800a302:	d301      	bcc.n	800a308 <dir_sdi+0x5c>
 800a304:	2302      	movs	r3, #2
 800a306:	e048      	b.n	800a39a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	61da      	str	r2, [r3, #28]
 800a310:	e029      	b.n	800a366 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	895b      	ldrh	r3, [r3, #10]
 800a316:	025b      	lsls	r3, r3, #9
 800a318:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a31a:	e019      	b.n	800a350 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff fcfe 	bl	8009d22 <get_fat>
 800a326:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a32e:	d101      	bne.n	800a334 <dir_sdi+0x88>
 800a330:	2301      	movs	r3, #1
 800a332:	e032      	b.n	800a39a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d904      	bls.n	800a344 <dir_sdi+0x98>
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	429a      	cmp	r2, r3
 800a342:	d301      	bcc.n	800a348 <dir_sdi+0x9c>
 800a344:	2302      	movs	r3, #2
 800a346:	e028      	b.n	800a39a <dir_sdi+0xee>
			ofs -= csz;
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	429a      	cmp	r2, r3
 800a356:	d2e1      	bcs.n	800a31c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a358:	6979      	ldr	r1, [r7, #20]
 800a35a:	6938      	ldr	r0, [r7, #16]
 800a35c:	f7ff fcc2 	bl	8009ce4 <clust2sect>
 800a360:	4602      	mov	r2, r0
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <dir_sdi+0xcc>
 800a374:	2302      	movs	r3, #2
 800a376:	e010      	b.n	800a39a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	69da      	ldr	r2, [r3, #28]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	0a5b      	lsrs	r3, r3, #9
 800a380:	441a      	add	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a392:	441a      	add	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	3320      	adds	r3, #32
 800a3b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <dir_next+0x28>
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3c8:	d301      	bcc.n	800a3ce <dir_next+0x2c>
 800a3ca:	2304      	movs	r3, #4
 800a3cc:	e0aa      	b.n	800a524 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 8098 	bne.w	800a50a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	1c5a      	adds	r2, r3, #1
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	095b      	lsrs	r3, r3, #5
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	8912      	ldrh	r2, [r2, #8]
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	f0c0 8088 	bcc.w	800a50a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	61da      	str	r2, [r3, #28]
 800a400:	2304      	movs	r3, #4
 800a402:	e08f      	b.n	800a524 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	0a5b      	lsrs	r3, r3, #9
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	8952      	ldrh	r2, [r2, #10]
 800a40c:	3a01      	subs	r2, #1
 800a40e:	4013      	ands	r3, r2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d17a      	bne.n	800a50a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f7ff fc80 	bl	8009d22 <get_fat>
 800a422:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d801      	bhi.n	800a42e <dir_next+0x8c>
 800a42a:	2302      	movs	r3, #2
 800a42c:	e07a      	b.n	800a524 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a434:	d101      	bne.n	800a43a <dir_next+0x98>
 800a436:	2301      	movs	r3, #1
 800a438:	e074      	b.n	800a524 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	429a      	cmp	r2, r3
 800a442:	d358      	bcc.n	800a4f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d104      	bne.n	800a454 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	61da      	str	r2, [r3, #28]
 800a450:	2304      	movs	r3, #4
 800a452:	e067      	b.n	800a524 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	4619      	mov	r1, r3
 800a45c:	4610      	mov	r0, r2
 800a45e:	f7ff fe59 	bl	800a114 <create_chain>
 800a462:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <dir_next+0xcc>
 800a46a:	2307      	movs	r3, #7
 800a46c:	e05a      	b.n	800a524 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d101      	bne.n	800a478 <dir_next+0xd6>
 800a474:	2302      	movs	r3, #2
 800a476:	e055      	b.n	800a524 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d101      	bne.n	800a484 <dir_next+0xe2>
 800a480:	2301      	movs	r3, #1
 800a482:	e04f      	b.n	800a524 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fb4d 	bl	8009b24 <sync_window>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <dir_next+0xf2>
 800a490:	2301      	movs	r3, #1
 800a492:	e047      	b.n	800a524 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3334      	adds	r3, #52	; 0x34
 800a498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a49c:	2100      	movs	r1, #0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff f945 	bl	800972e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	613b      	str	r3, [r7, #16]
 800a4a8:	6979      	ldr	r1, [r7, #20]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fc1a 	bl	8009ce4 <clust2sect>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	631a      	str	r2, [r3, #48]	; 0x30
 800a4b6:	e012      	b.n	800a4de <dir_next+0x13c>
						fs->wflag = 1;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff fb30 	bl	8009b24 <sync_window>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <dir_next+0x12c>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e02a      	b.n	800a524 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	631a      	str	r2, [r3, #48]	; 0x30
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	895b      	ldrh	r3, [r3, #10]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d3e6      	bcc.n	800a4b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	1ad2      	subs	r2, r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a4fc:	6979      	ldr	r1, [r7, #20]
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fbf0 	bl	8009ce4 <clust2sect>
 800a504:	4602      	mov	r2, r0
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51c:	441a      	add	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a53c:	2100      	movs	r1, #0
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff feb4 	bl	800a2ac <dir_sdi>
 800a544:	4603      	mov	r3, r0
 800a546:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d12b      	bne.n	800a5a6 <dir_alloc+0x7a>
		n = 0;
 800a54e:	2300      	movs	r3, #0
 800a550:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	4619      	mov	r1, r3
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7ff fb27 	bl	8009bac <move_window>
 800a55e:	4603      	mov	r3, r0
 800a560:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d11d      	bne.n	800a5a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	2be5      	cmp	r3, #229	; 0xe5
 800a570:	d004      	beq.n	800a57c <dir_alloc+0x50>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d107      	bne.n	800a58c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	3301      	adds	r3, #1
 800a580:	613b      	str	r3, [r7, #16]
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d102      	bne.n	800a590 <dir_alloc+0x64>
 800a58a:	e00c      	b.n	800a5a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a58c:	2300      	movs	r3, #0
 800a58e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a590:	2101      	movs	r1, #1
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff ff05 	bl	800a3a2 <dir_next>
 800a598:	4603      	mov	r3, r0
 800a59a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0d7      	beq.n	800a552 <dir_alloc+0x26>
 800a5a2:	e000      	b.n	800a5a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a5a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d101      	bne.n	800a5b0 <dir_alloc+0x84>
 800a5ac:	2307      	movs	r3, #7
 800a5ae:	75fb      	strb	r3, [r7, #23]
	return res;
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3718      	adds	r7, #24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	331a      	adds	r3, #26
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7ff f80d 	bl	80095e8 <ld_word>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d109      	bne.n	800a5ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	3314      	adds	r3, #20
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff f802 	bl	80095e8 <ld_word>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	041b      	lsls	r3, r3, #16
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	331a      	adds	r3, #26
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	b292      	uxth	r2, r2
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7ff f825 	bl	800965e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d109      	bne.n	800a630 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f103 0214 	add.w	r2, r3, #20
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	0c1b      	lsrs	r3, r3, #16
 800a626:	b29b      	uxth	r3, r3
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f7ff f817 	bl	800965e <st_word>
	}
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a646:	2100      	movs	r1, #0
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fe2f 	bl	800a2ac <dir_sdi>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <dir_find+0x24>
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	e03e      	b.n	800a6da <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	4619      	mov	r1, r3
 800a662:	6938      	ldr	r0, [r7, #16]
 800a664:	f7ff faa2 	bl	8009bac <move_window>
 800a668:	4603      	mov	r3, r0
 800a66a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d12f      	bne.n	800a6d2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d102      	bne.n	800a686 <dir_find+0x4e>
 800a680:	2304      	movs	r3, #4
 800a682:	75fb      	strb	r3, [r7, #23]
 800a684:	e028      	b.n	800a6d8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	330b      	adds	r3, #11
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a692:	b2da      	uxtb	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a1b      	ldr	r3, [r3, #32]
 800a69c:	330b      	adds	r3, #11
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f003 0308 	and.w	r3, r3, #8
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <dir_find+0x86>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a18      	ldr	r0, [r3, #32]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3324      	adds	r3, #36	; 0x24
 800a6b0:	220b      	movs	r2, #11
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f7ff f856 	bl	8009764 <mem_cmp>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a6be:	2100      	movs	r1, #0
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff fe6e 	bl	800a3a2 <dir_next>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0c5      	beq.n	800a65c <dir_find+0x24>
 800a6d0:	e002      	b.n	800a6d8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a6d2:	bf00      	nop
 800a6d4:	e000      	b.n	800a6d8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a6d6:	bf00      	nop

	return res;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff ff1a 	bl	800a52c <dir_alloc>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d11c      	bne.n	800a73c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	4619      	mov	r1, r3
 800a708:	68b8      	ldr	r0, [r7, #8]
 800a70a:	f7ff fa4f 	bl	8009bac <move_window>
 800a70e:	4603      	mov	r3, r0
 800a710:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d111      	bne.n	800a73c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	2220      	movs	r2, #32
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff f804 	bl	800972e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a18      	ldr	r0, [r3, #32]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3324      	adds	r3, #36	; 0x24
 800a72e:	220b      	movs	r2, #11
 800a730:	4619      	mov	r1, r3
 800a732:	f7fe ffdb 	bl	80096ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2201      	movs	r2, #1
 800a73a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b088      	sub	sp, #32
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3324      	adds	r3, #36	; 0x24
 800a75c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a75e:	220b      	movs	r2, #11
 800a760:	2120      	movs	r1, #32
 800a762:	68b8      	ldr	r0, [r7, #8]
 800a764:	f7fe ffe3 	bl	800972e <mem_set>
	si = i = 0; ni = 8;
 800a768:	2300      	movs	r3, #0
 800a76a:	613b      	str	r3, [r7, #16]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	61fb      	str	r3, [r7, #28]
 800a770:	2308      	movs	r3, #8
 800a772:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	61fa      	str	r2, [r7, #28]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a782:	7efb      	ldrb	r3, [r7, #27]
 800a784:	2b20      	cmp	r3, #32
 800a786:	d94e      	bls.n	800a826 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a788:	7efb      	ldrb	r3, [r7, #27]
 800a78a:	2b2f      	cmp	r3, #47	; 0x2f
 800a78c:	d006      	beq.n	800a79c <create_name+0x54>
 800a78e:	7efb      	ldrb	r3, [r7, #27]
 800a790:	2b5c      	cmp	r3, #92	; 0x5c
 800a792:	d110      	bne.n	800a7b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a794:	e002      	b.n	800a79c <create_name+0x54>
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	3301      	adds	r3, #1
 800a79a:	61fb      	str	r3, [r7, #28]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b2f      	cmp	r3, #47	; 0x2f
 800a7a6:	d0f6      	beq.n	800a796 <create_name+0x4e>
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	2b5c      	cmp	r3, #92	; 0x5c
 800a7b2:	d0f0      	beq.n	800a796 <create_name+0x4e>
			break;
 800a7b4:	e038      	b.n	800a828 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a7b6:	7efb      	ldrb	r3, [r7, #27]
 800a7b8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ba:	d003      	beq.n	800a7c4 <create_name+0x7c>
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d30c      	bcc.n	800a7de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b0b      	cmp	r3, #11
 800a7c8:	d002      	beq.n	800a7d0 <create_name+0x88>
 800a7ca:	7efb      	ldrb	r3, [r7, #27]
 800a7cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ce:	d001      	beq.n	800a7d4 <create_name+0x8c>
 800a7d0:	2306      	movs	r3, #6
 800a7d2:	e044      	b.n	800a85e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a7d4:	2308      	movs	r3, #8
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	230b      	movs	r3, #11
 800a7da:	617b      	str	r3, [r7, #20]
			continue;
 800a7dc:	e022      	b.n	800a824 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a7de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	da04      	bge.n	800a7f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a7e6:	7efb      	ldrb	r3, [r7, #27]
 800a7e8:	3b80      	subs	r3, #128	; 0x80
 800a7ea:	4a1f      	ldr	r2, [pc, #124]	; (800a868 <create_name+0x120>)
 800a7ec:	5cd3      	ldrb	r3, [r2, r3]
 800a7ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a7f0:	7efb      	ldrb	r3, [r7, #27]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	481d      	ldr	r0, [pc, #116]	; (800a86c <create_name+0x124>)
 800a7f6:	f7fe ffdc 	bl	80097b2 <chk_chr>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <create_name+0xbc>
 800a800:	2306      	movs	r3, #6
 800a802:	e02c      	b.n	800a85e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a804:	7efb      	ldrb	r3, [r7, #27]
 800a806:	2b60      	cmp	r3, #96	; 0x60
 800a808:	d905      	bls.n	800a816 <create_name+0xce>
 800a80a:	7efb      	ldrb	r3, [r7, #27]
 800a80c:	2b7a      	cmp	r3, #122	; 0x7a
 800a80e:	d802      	bhi.n	800a816 <create_name+0xce>
 800a810:	7efb      	ldrb	r3, [r7, #27]
 800a812:	3b20      	subs	r3, #32
 800a814:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	613a      	str	r2, [r7, #16]
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	4413      	add	r3, r2
 800a820:	7efa      	ldrb	r2, [r7, #27]
 800a822:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a824:	e7a6      	b.n	800a774 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a826:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	441a      	add	r2, r3
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <create_name+0xf4>
 800a838:	2306      	movs	r3, #6
 800a83a:	e010      	b.n	800a85e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2be5      	cmp	r3, #229	; 0xe5
 800a842:	d102      	bne.n	800a84a <create_name+0x102>
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2205      	movs	r2, #5
 800a848:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a84a:	7efb      	ldrb	r3, [r7, #27]
 800a84c:	2b20      	cmp	r3, #32
 800a84e:	d801      	bhi.n	800a854 <create_name+0x10c>
 800a850:	2204      	movs	r2, #4
 800a852:	e000      	b.n	800a856 <create_name+0x10e>
 800a854:	2200      	movs	r2, #0
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	330b      	adds	r3, #11
 800a85a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a85c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	0800f174 	.word	0x0800f174
 800a86c:	0800f0a4 	.word	0x0800f0a4

0800a870 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a884:	e002      	b.n	800a88c <follow_path+0x1c>
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	3301      	adds	r3, #1
 800a88a:	603b      	str	r3, [r7, #0]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b2f      	cmp	r3, #47	; 0x2f
 800a892:	d0f8      	beq.n	800a886 <follow_path+0x16>
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b5c      	cmp	r3, #92	; 0x5c
 800a89a:	d0f4      	beq.n	800a886 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	2b1f      	cmp	r3, #31
 800a8a8:	d80a      	bhi.n	800a8c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2280      	movs	r2, #128	; 0x80
 800a8ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff fcf9 	bl	800a2ac <dir_sdi>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	75fb      	strb	r3, [r7, #23]
 800a8be:	e043      	b.n	800a948 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a8c0:	463b      	mov	r3, r7
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7ff ff3f 	bl	800a748 <create_name>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a8ce:	7dfb      	ldrb	r3, [r7, #23]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d134      	bne.n	800a93e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff feaf 	bl	800a638 <dir_find>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a8e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d127      	bne.n	800a942 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d122      	bne.n	800a942 <follow_path+0xd2>
 800a8fc:	2305      	movs	r3, #5
 800a8fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a900:	e01f      	b.n	800a942 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	f003 0304 	and.w	r3, r3, #4
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d11c      	bne.n	800a946 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	799b      	ldrb	r3, [r3, #6]
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a918:	2305      	movs	r3, #5
 800a91a:	75fb      	strb	r3, [r7, #23]
 800a91c:	e014      	b.n	800a948 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	695b      	ldr	r3, [r3, #20]
 800a928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a92c:	4413      	add	r3, r2
 800a92e:	4619      	mov	r1, r3
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f7ff fe42 	bl	800a5ba <ld_clust>
 800a936:	4602      	mov	r2, r0
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a93c:	e7c0      	b.n	800a8c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a93e:	bf00      	nop
 800a940:	e002      	b.n	800a948 <follow_path+0xd8>
				break;
 800a942:	bf00      	nop
 800a944:	e000      	b.n	800a948 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a946:	bf00      	nop
			}
		}
	}

	return res;
 800a948:	7dfb      	ldrb	r3, [r7, #23]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a952:	b480      	push	{r7}
 800a954:	b087      	sub	sp, #28
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a95a:	f04f 33ff 	mov.w	r3, #4294967295
 800a95e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d031      	beq.n	800a9cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	617b      	str	r3, [r7, #20]
 800a96e:	e002      	b.n	800a976 <get_ldnumber+0x24>
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3301      	adds	r3, #1
 800a974:	617b      	str	r3, [r7, #20]
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d903      	bls.n	800a986 <get_ldnumber+0x34>
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	2b3a      	cmp	r3, #58	; 0x3a
 800a984:	d1f4      	bne.n	800a970 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	2b3a      	cmp	r3, #58	; 0x3a
 800a98c:	d11c      	bne.n	800a9c8 <get_ldnumber+0x76>
			tp = *path;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	60fa      	str	r2, [r7, #12]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	3b30      	subs	r3, #48	; 0x30
 800a99e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2b09      	cmp	r3, #9
 800a9a4:	d80e      	bhi.n	800a9c4 <get_ldnumber+0x72>
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d10a      	bne.n	800a9c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d107      	bne.n	800a9c4 <get_ldnumber+0x72>
					vol = (int)i;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	617b      	str	r3, [r7, #20]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	e002      	b.n	800a9ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a9cc:	693b      	ldr	r3, [r7, #16]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	371c      	adds	r7, #28
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
	...

0800a9dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	70da      	strb	r2, [r3, #3]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff f8d8 	bl	8009bac <move_window>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <check_fs+0x2a>
 800aa02:	2304      	movs	r3, #4
 800aa04:	e038      	b.n	800aa78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3334      	adds	r3, #52	; 0x34
 800aa0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fdea 	bl	80095e8 <ld_word>
 800aa14:	4603      	mov	r3, r0
 800aa16:	461a      	mov	r2, r3
 800aa18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d001      	beq.n	800aa24 <check_fs+0x48>
 800aa20:	2303      	movs	r3, #3
 800aa22:	e029      	b.n	800aa78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa2a:	2be9      	cmp	r3, #233	; 0xe9
 800aa2c:	d009      	beq.n	800aa42 <check_fs+0x66>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa34:	2beb      	cmp	r3, #235	; 0xeb
 800aa36:	d11e      	bne.n	800aa76 <check_fs+0x9a>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa3e:	2b90      	cmp	r3, #144	; 0x90
 800aa40:	d119      	bne.n	800aa76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	3334      	adds	r3, #52	; 0x34
 800aa46:	3336      	adds	r3, #54	; 0x36
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fde5 	bl	8009618 <ld_dword>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa54:	4a0a      	ldr	r2, [pc, #40]	; (800aa80 <check_fs+0xa4>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d101      	bne.n	800aa5e <check_fs+0x82>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e00c      	b.n	800aa78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	3334      	adds	r3, #52	; 0x34
 800aa62:	3352      	adds	r3, #82	; 0x52
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe fdd7 	bl	8009618 <ld_dword>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	4a05      	ldr	r2, [pc, #20]	; (800aa84 <check_fs+0xa8>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d101      	bne.n	800aa76 <check_fs+0x9a>
 800aa72:	2300      	movs	r3, #0
 800aa74:	e000      	b.n	800aa78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aa76:	2302      	movs	r3, #2
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	00544146 	.word	0x00544146
 800aa84:	33544146 	.word	0x33544146

0800aa88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b096      	sub	sp, #88	; 0x58
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff ff58 	bl	800a952 <get_ldnumber>
 800aaa2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aaa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	da01      	bge.n	800aaae <find_volume+0x26>
 800aaaa:	230b      	movs	r3, #11
 800aaac:	e235      	b.n	800af1a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aaae:	4aa5      	ldr	r2, [pc, #660]	; (800ad44 <find_volume+0x2bc>)
 800aab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <find_volume+0x3a>
 800aabe:	230c      	movs	r3, #12
 800aac0:	e22b      	b.n	800af1a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800aac2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aac4:	f7fe fe90 	bl	80097e8 <lock_fs>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <find_volume+0x4a>
 800aace:	230f      	movs	r3, #15
 800aad0:	e223      	b.n	800af1a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aad6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d01a      	beq.n	800ab1e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800aae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaea:	785b      	ldrb	r3, [r3, #1]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fe fcdd 	bl	80094ac <disk_status>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aaf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10c      	bne.n	800ab1e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ab04:	79fb      	ldrb	r3, [r7, #7]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d007      	beq.n	800ab1a <find_volume+0x92>
 800ab0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab0e:	f003 0304 	and.w	r3, r3, #4
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ab16:	230a      	movs	r3, #10
 800ab18:	e1ff      	b.n	800af1a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	e1fd      	b.n	800af1a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ab1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab20:	2200      	movs	r2, #0
 800ab22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ab24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2e:	785b      	ldrb	r3, [r3, #1]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe fcd5 	bl	80094e0 <disk_initialize>
 800ab36:	4603      	mov	r3, r0
 800ab38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ab3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ab48:	2303      	movs	r3, #3
 800ab4a:	e1e6      	b.n	800af1a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d007      	beq.n	800ab62 <find_volume+0xda>
 800ab52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab56:	f003 0304 	and.w	r3, r3, #4
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ab5e:	230a      	movs	r3, #10
 800ab60:	e1db      	b.n	800af1a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ab66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab6a:	f7ff ff37 	bl	800a9dc <check_fs>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ab74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d149      	bne.n	800ac10 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab80:	e01e      	b.n	800abc0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ab82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab8a:	011b      	lsls	r3, r3, #4
 800ab8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ab90:	4413      	add	r3, r2
 800ab92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	3304      	adds	r3, #4
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d006      	beq.n	800abac <find_volume+0x124>
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	3308      	adds	r3, #8
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe fd38 	bl	8009618 <ld_dword>
 800aba8:	4602      	mov	r2, r0
 800abaa:	e000      	b.n	800abae <find_volume+0x126>
 800abac:	2200      	movs	r2, #0
 800abae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	3358      	adds	r3, #88	; 0x58
 800abb4:	443b      	add	r3, r7
 800abb6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800abba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abbc:	3301      	adds	r3, #1
 800abbe:	643b      	str	r3, [r7, #64]	; 0x40
 800abc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	d9dd      	bls.n	800ab82 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800abc6:	2300      	movs	r3, #0
 800abc8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800abca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <find_volume+0x14e>
 800abd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd2:	3b01      	subs	r3, #1
 800abd4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800abd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	3358      	adds	r3, #88	; 0x58
 800abdc:	443b      	add	r3, r7
 800abde:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800abe2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800abe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d005      	beq.n	800abf6 <find_volume+0x16e>
 800abea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abee:	f7ff fef5 	bl	800a9dc <check_fs>
 800abf2:	4603      	mov	r3, r0
 800abf4:	e000      	b.n	800abf8 <find_volume+0x170>
 800abf6:	2303      	movs	r3, #3
 800abf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800abfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d905      	bls.n	800ac10 <find_volume+0x188>
 800ac04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac06:	3301      	adds	r3, #1
 800ac08:	643b      	str	r3, [r7, #64]	; 0x40
 800ac0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d9e2      	bls.n	800abd6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ac10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	d101      	bne.n	800ac1c <find_volume+0x194>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e17e      	b.n	800af1a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ac1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d901      	bls.n	800ac28 <find_volume+0x1a0>
 800ac24:	230d      	movs	r3, #13
 800ac26:	e178      	b.n	800af1a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	3334      	adds	r3, #52	; 0x34
 800ac2c:	330b      	adds	r3, #11
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fcda 	bl	80095e8 <ld_word>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac3a:	d001      	beq.n	800ac40 <find_volume+0x1b8>
 800ac3c:	230d      	movs	r3, #13
 800ac3e:	e16c      	b.n	800af1a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	3334      	adds	r3, #52	; 0x34
 800ac44:	3316      	adds	r3, #22
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fcce 	bl	80095e8 <ld_word>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ac50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d106      	bne.n	800ac64 <find_volume+0x1dc>
 800ac56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac58:	3334      	adds	r3, #52	; 0x34
 800ac5a:	3324      	adds	r3, #36	; 0x24
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe fcdb 	bl	8009618 <ld_dword>
 800ac62:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ac64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac68:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	789b      	ldrb	r3, [r3, #2]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d005      	beq.n	800ac88 <find_volume+0x200>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	789b      	ldrb	r3, [r3, #2]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d001      	beq.n	800ac88 <find_volume+0x200>
 800ac84:	230d      	movs	r3, #13
 800ac86:	e148      	b.n	800af1a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	789b      	ldrb	r3, [r3, #2]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac90:	fb02 f303 	mul.w	r3, r2, r3
 800ac94:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	895b      	ldrh	r3, [r3, #10]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d008      	beq.n	800acbc <find_volume+0x234>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acac:	895b      	ldrh	r3, [r3, #10]
 800acae:	461a      	mov	r2, r3
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	895b      	ldrh	r3, [r3, #10]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	4013      	ands	r3, r2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <find_volume+0x238>
 800acbc:	230d      	movs	r3, #13
 800acbe:	e12c      	b.n	800af1a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800acc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc2:	3334      	adds	r3, #52	; 0x34
 800acc4:	3311      	adds	r3, #17
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fc8e 	bl	80095e8 <ld_word>
 800accc:	4603      	mov	r3, r0
 800acce:	461a      	mov	r2, r3
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	891b      	ldrh	r3, [r3, #8]
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	b29b      	uxth	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <find_volume+0x25e>
 800ace2:	230d      	movs	r3, #13
 800ace4:	e119      	b.n	800af1a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	3334      	adds	r3, #52	; 0x34
 800acea:	3313      	adds	r3, #19
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe fc7b 	bl	80095e8 <ld_word>
 800acf2:	4603      	mov	r3, r0
 800acf4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800acf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d106      	bne.n	800ad0a <find_volume+0x282>
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	3334      	adds	r3, #52	; 0x34
 800ad00:	3320      	adds	r3, #32
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fc88 	bl	8009618 <ld_dword>
 800ad08:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	3334      	adds	r3, #52	; 0x34
 800ad0e:	330e      	adds	r3, #14
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fc69 	bl	80095e8 <ld_word>
 800ad16:	4603      	mov	r3, r0
 800ad18:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ad1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <find_volume+0x29c>
 800ad20:	230d      	movs	r3, #13
 800ad22:	e0fa      	b.n	800af1a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ad24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad28:	4413      	add	r3, r2
 800ad2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad2c:	8912      	ldrh	r2, [r2, #8]
 800ad2e:	0912      	lsrs	r2, r2, #4
 800ad30:	b292      	uxth	r2, r2
 800ad32:	4413      	add	r3, r2
 800ad34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ad36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d204      	bcs.n	800ad48 <find_volume+0x2c0>
 800ad3e:	230d      	movs	r3, #13
 800ad40:	e0eb      	b.n	800af1a <find_volume+0x492>
 800ad42:	bf00      	nop
 800ad44:	200009b0 	.word	0x200009b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ad48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad50:	8952      	ldrh	r2, [r2, #10]
 800ad52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <find_volume+0x2da>
 800ad5e:	230d      	movs	r3, #13
 800ad60:	e0db      	b.n	800af1a <find_volume+0x492>
		fmt = FS_FAT32;
 800ad62:	2303      	movs	r3, #3
 800ad64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d802      	bhi.n	800ad78 <find_volume+0x2f0>
 800ad72:	2302      	movs	r3, #2
 800ad74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d802      	bhi.n	800ad88 <find_volume+0x300>
 800ad82:	2301      	movs	r3, #1
 800ad84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8a:	1c9a      	adds	r2, r3, #2
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad94:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ad96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad9a:	441a      	add	r2, r3
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ada0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	441a      	add	r2, r3
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800adaa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d11e      	bne.n	800adf0 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800adb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb4:	3334      	adds	r3, #52	; 0x34
 800adb6:	332a      	adds	r3, #42	; 0x2a
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe fc15 	bl	80095e8 <ld_word>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <find_volume+0x340>
 800adc4:	230d      	movs	r3, #13
 800adc6:	e0a8      	b.n	800af1a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800adc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adca:	891b      	ldrh	r3, [r3, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <find_volume+0x34c>
 800add0:	230d      	movs	r3, #13
 800add2:	e0a2      	b.n	800af1a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	3334      	adds	r3, #52	; 0x34
 800add8:	332c      	adds	r3, #44	; 0x2c
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe fc1c 	bl	8009618 <ld_dword>
 800ade0:	4602      	mov	r2, r0
 800ade2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	647b      	str	r3, [r7, #68]	; 0x44
 800adee:	e01f      	b.n	800ae30 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	891b      	ldrh	r3, [r3, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <find_volume+0x374>
 800adf8:	230d      	movs	r3, #13
 800adfa:	e08e      	b.n	800af1a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae02:	441a      	add	r2, r3
 800ae04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae06:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ae08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d103      	bne.n	800ae18 <find_volume+0x390>
 800ae10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	e00a      	b.n	800ae2e <find_volume+0x3a6>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	699a      	ldr	r2, [r3, #24]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	4413      	add	r3, r2
 800ae22:	085a      	lsrs	r2, r3, #1
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ae2e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	69da      	ldr	r2, [r3, #28]
 800ae34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ae3a:	0a5b      	lsrs	r3, r3, #9
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d201      	bcs.n	800ae44 <find_volume+0x3bc>
 800ae40:	230d      	movs	r3, #13
 800ae42:	e06a      	b.n	800af1a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ae44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae46:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4a:	615a      	str	r2, [r3, #20]
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4e:	695a      	ldr	r2, [r3, #20]
 800ae50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae52:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ae54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae56:	2280      	movs	r2, #128	; 0x80
 800ae58:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ae5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d149      	bne.n	800aef6 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae64:	3334      	adds	r3, #52	; 0x34
 800ae66:	3330      	adds	r3, #48	; 0x30
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7fe fbbd 	bl	80095e8 <ld_word>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d140      	bne.n	800aef6 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ae74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae76:	3301      	adds	r3, #1
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae7c:	f7fe fe96 	bl	8009bac <move_window>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d137      	bne.n	800aef6 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae88:	2200      	movs	r2, #0
 800ae8a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	3334      	adds	r3, #52	; 0x34
 800ae90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fe fba7 	bl	80095e8 <ld_word>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d127      	bne.n	800aef6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea8:	3334      	adds	r3, #52	; 0x34
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fbb4 	bl	8009618 <ld_dword>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	4a1c      	ldr	r2, [pc, #112]	; (800af24 <find_volume+0x49c>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d11e      	bne.n	800aef6 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	3334      	adds	r3, #52	; 0x34
 800aebc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe fba9 	bl	8009618 <ld_dword>
 800aec6:	4603      	mov	r3, r0
 800aec8:	4a17      	ldr	r2, [pc, #92]	; (800af28 <find_volume+0x4a0>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d113      	bne.n	800aef6 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	3334      	adds	r3, #52	; 0x34
 800aed2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fb9e 	bl	8009618 <ld_dword>
 800aedc:	4602      	mov	r2, r0
 800aede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee4:	3334      	adds	r3, #52	; 0x34
 800aee6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe fb94 	bl	8009618 <ld_dword>
 800aef0:	4602      	mov	r2, r0
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aefc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aefe:	4b0b      	ldr	r3, [pc, #44]	; (800af2c <find_volume+0x4a4>)
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	3301      	adds	r3, #1
 800af04:	b29a      	uxth	r2, r3
 800af06:	4b09      	ldr	r3, [pc, #36]	; (800af2c <find_volume+0x4a4>)
 800af08:	801a      	strh	r2, [r3, #0]
 800af0a:	4b08      	ldr	r3, [pc, #32]	; (800af2c <find_volume+0x4a4>)
 800af0c:	881a      	ldrh	r2, [r3, #0]
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800af12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af14:	f7fe fde2 	bl	8009adc <clear_lock>
#endif
	return FR_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3758      	adds	r7, #88	; 0x58
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	41615252 	.word	0x41615252
 800af28:	61417272 	.word	0x61417272
 800af2c:	200009b4 	.word	0x200009b4

0800af30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800af3a:	2309      	movs	r3, #9
 800af3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d02e      	beq.n	800afa2 <validate+0x72>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d02a      	beq.n	800afa2 <validate+0x72>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d025      	beq.n	800afa2 <validate+0x72>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	889a      	ldrh	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	88db      	ldrh	r3, [r3, #6]
 800af60:	429a      	cmp	r2, r3
 800af62:	d11e      	bne.n	800afa2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fe fc3d 	bl	80097e8 <lock_fs>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d014      	beq.n	800af9e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	785b      	ldrb	r3, [r3, #1]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fa96 	bl	80094ac <disk_status>
 800af80:	4603      	mov	r3, r0
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	2b00      	cmp	r3, #0
 800af88:	d102      	bne.n	800af90 <validate+0x60>
				res = FR_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
 800af8e:	e008      	b.n	800afa2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2100      	movs	r1, #0
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fc3c 	bl	8009814 <unlock_fs>
 800af9c:	e001      	b.n	800afa2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800af9e:	230f      	movs	r3, #15
 800afa0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d102      	bne.n	800afae <validate+0x7e>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	e000      	b.n	800afb0 <validate+0x80>
 800afae:	2300      	movs	r3, #0
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	6013      	str	r3, [r2, #0]
	return res;
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	4613      	mov	r3, r2
 800afcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800afd2:	f107 0310 	add.w	r3, r7, #16
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff fcbb 	bl	800a952 <get_ldnumber>
 800afdc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da01      	bge.n	800afe8 <f_mount+0x28>
 800afe4:	230b      	movs	r3, #11
 800afe6:	e048      	b.n	800b07a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800afe8:	4a26      	ldr	r2, [pc, #152]	; (800b084 <f_mount+0xc4>)
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aff0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00f      	beq.n	800b018 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aff8:	69b8      	ldr	r0, [r7, #24]
 800affa:	f7fe fd6f 	bl	8009adc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 fe4b 	bl	800bc9e <ff_del_syncobj>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <f_mount+0x52>
 800b00e:	2302      	movs	r3, #2
 800b010:	e033      	b.n	800b07a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2200      	movs	r2, #0
 800b016:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00f      	beq.n	800b03e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	b2da      	uxtb	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	330c      	adds	r3, #12
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f000 fe15 	bl	800bc5e <ff_cre_syncobj>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <f_mount+0x7e>
 800b03a:	2302      	movs	r3, #2
 800b03c:	e01d      	b.n	800b07a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4910      	ldr	r1, [pc, #64]	; (800b084 <f_mount+0xc4>)
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <f_mount+0x94>
 800b04e:	79fb      	ldrb	r3, [r7, #7]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d001      	beq.n	800b058 <f_mount+0x98>
 800b054:	2300      	movs	r3, #0
 800b056:	e010      	b.n	800b07a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b058:	f107 010c 	add.w	r1, r7, #12
 800b05c:	f107 0308 	add.w	r3, r7, #8
 800b060:	2200      	movs	r2, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff fd10 	bl	800aa88 <find_volume>
 800b068:	4603      	mov	r3, r0
 800b06a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	7dfa      	ldrb	r2, [r7, #23]
 800b070:	4611      	mov	r1, r2
 800b072:	4618      	mov	r0, r3
 800b074:	f7fe fbce 	bl	8009814 <unlock_fs>
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3720      	adds	r7, #32
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	200009b0 	.word	0x200009b0

0800b088 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b098      	sub	sp, #96	; 0x60
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	4613      	mov	r3, r2
 800b094:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <f_open+0x18>
 800b09c:	2309      	movs	r3, #9
 800b09e:	e1b4      	b.n	800b40a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b0a8:	79fa      	ldrb	r2, [r7, #7]
 800b0aa:	f107 0110 	add.w	r1, r7, #16
 800b0ae:	f107 0308 	add.w	r3, r7, #8
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fce8 	bl	800aa88 <find_volume>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b0be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f040 8191 	bne.w	800b3ea <f_open+0x362>
		dj.obj.fs = fs;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	f107 0314 	add.w	r3, r7, #20
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fbcb 	bl	800a870 <follow_path>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b0e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d11a      	bne.n	800b11e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b0e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b0ec:	b25b      	sxtb	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	da03      	bge.n	800b0fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800b0f2:	2306      	movs	r3, #6
 800b0f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b0f8:	e011      	b.n	800b11e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	f023 0301 	bic.w	r3, r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	bf14      	ite	ne
 800b104:	2301      	movne	r3, #1
 800b106:	2300      	moveq	r3, #0
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	f107 0314 	add.w	r3, r7, #20
 800b110:	4611      	mov	r1, r2
 800b112:	4618      	mov	r0, r3
 800b114:	f7fe fb9a 	bl	800984c <chk_lock>
 800b118:	4603      	mov	r3, r0
 800b11a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	f003 031c 	and.w	r3, r3, #28
 800b124:	2b00      	cmp	r3, #0
 800b126:	d07f      	beq.n	800b228 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d017      	beq.n	800b160 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b134:	2b04      	cmp	r3, #4
 800b136:	d10e      	bne.n	800b156 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b138:	f7fe fbe4 	bl	8009904 <enq_lock>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d006      	beq.n	800b150 <f_open+0xc8>
 800b142:	f107 0314 	add.w	r3, r7, #20
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff facb 	bl	800a6e2 <dir_register>
 800b14c:	4603      	mov	r3, r0
 800b14e:	e000      	b.n	800b152 <f_open+0xca>
 800b150:	2312      	movs	r3, #18
 800b152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	f043 0308 	orr.w	r3, r3, #8
 800b15c:	71fb      	strb	r3, [r7, #7]
 800b15e:	e010      	b.n	800b182 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b160:	7ebb      	ldrb	r3, [r7, #26]
 800b162:	f003 0311 	and.w	r3, r3, #17
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <f_open+0xea>
					res = FR_DENIED;
 800b16a:	2307      	movs	r3, #7
 800b16c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b170:	e007      	b.n	800b182 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b172:	79fb      	ldrb	r3, [r7, #7]
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <f_open+0xfa>
 800b17c:	2308      	movs	r3, #8
 800b17e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b186:	2b00      	cmp	r3, #0
 800b188:	d168      	bne.n	800b25c <f_open+0x1d4>
 800b18a:	79fb      	ldrb	r3, [r7, #7]
 800b18c:	f003 0308 	and.w	r3, r3, #8
 800b190:	2b00      	cmp	r3, #0
 800b192:	d063      	beq.n	800b25c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b194:	f7fd ff48 	bl	8009028 <get_fattime>
 800b198:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19c:	330e      	adds	r3, #14
 800b19e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fe fa77 	bl	8009694 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a8:	3316      	adds	r3, #22
 800b1aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fe fa71 	bl	8009694 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b4:	330b      	adds	r3, #11
 800b1b6:	2220      	movs	r2, #32
 800b1b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1be:	4611      	mov	r1, r2
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff f9fa 	bl	800a5ba <ld_clust>
 800b1c6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fa12 	bl	800a5f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d6:	331c      	adds	r3, #28
 800b1d8:	2100      	movs	r1, #0
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe fa5a 	bl	8009694 <st_dword>
					fs->wflag = 1;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d037      	beq.n	800b25c <f_open+0x1d4>
						dw = fs->winsect;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b1f2:	f107 0314 	add.w	r3, r7, #20
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe ff25 	bl	800a04a <remove_chain>
 800b200:	4603      	mov	r3, r0
 800b202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d126      	bne.n	800b25c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe fcca 	bl	8009bac <move_window>
 800b218:	4603      	mov	r3, r0
 800b21a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b222:	3a01      	subs	r2, #1
 800b224:	611a      	str	r2, [r3, #16]
 800b226:	e019      	b.n	800b25c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d115      	bne.n	800b25c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b230:	7ebb      	ldrb	r3, [r7, #26]
 800b232:	f003 0310 	and.w	r3, r3, #16
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b23a:	2304      	movs	r3, #4
 800b23c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b240:	e00c      	b.n	800b25c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d007      	beq.n	800b25c <f_open+0x1d4>
 800b24c:	7ebb      	ldrb	r3, [r7, #26]
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <f_open+0x1d4>
						res = FR_DENIED;
 800b256:	2307      	movs	r3, #7
 800b258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b25c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b260:	2b00      	cmp	r3, #0
 800b262:	d128      	bne.n	800b2b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	f003 0308 	and.w	r3, r3, #8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d003      	beq.n	800b276 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b274:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b27e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	f023 0301 	bic.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bf14      	ite	ne
 800b28e:	2301      	movne	r3, #1
 800b290:	2300      	moveq	r3, #0
 800b292:	b2db      	uxtb	r3, r3
 800b294:	461a      	mov	r2, r3
 800b296:	f107 0314 	add.w	r3, r7, #20
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe fb53 	bl	8009948 <inc_lock>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <f_open+0x22e>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b2b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f040 8095 	bne.w	800b3ea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff f977 	bl	800a5ba <ld_clust>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	331c      	adds	r3, #28
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe f99e 	bl	8009618 <ld_dword>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	88da      	ldrh	r2, [r3, #6]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	79fa      	ldrb	r2, [r7, #7]
 800b2fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3330      	adds	r3, #48	; 0x30
 800b312:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b316:	2100      	movs	r1, #0
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe fa08 	bl	800972e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b31e:	79fb      	ldrb	r3, [r7, #7]
 800b320:	f003 0320 	and.w	r3, r3, #32
 800b324:	2b00      	cmp	r3, #0
 800b326:	d060      	beq.n	800b3ea <f_open+0x362>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d05c      	beq.n	800b3ea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	68da      	ldr	r2, [r3, #12]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	895b      	ldrh	r3, [r3, #10]
 800b33c:	025b      	lsls	r3, r3, #9
 800b33e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	657b      	str	r3, [r7, #84]	; 0x54
 800b34c:	e016      	b.n	800b37c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fce5 	bl	8009d22 <get_fat>
 800b358:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b35a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d802      	bhi.n	800b366 <f_open+0x2de>
 800b360:	2302      	movs	r3, #2
 800b362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d102      	bne.n	800b374 <f_open+0x2ec>
 800b36e:	2301      	movs	r3, #1
 800b370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	657b      	str	r3, [r7, #84]	; 0x54
 800b37c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <f_open+0x304>
 800b384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b388:	429a      	cmp	r2, r3
 800b38a:	d8e0      	bhi.n	800b34e <f_open+0x2c6>
				}
				fp->clust = clst;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b390:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b392:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b396:	2b00      	cmp	r3, #0
 800b398:	d127      	bne.n	800b3ea <f_open+0x362>
 800b39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d022      	beq.n	800b3ea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe fc9b 	bl	8009ce4 <clust2sect>
 800b3ae:	6478      	str	r0, [r7, #68]	; 0x44
 800b3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d103      	bne.n	800b3be <f_open+0x336>
						res = FR_INT_ERR;
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b3bc:	e015      	b.n	800b3ea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b3be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3c0:	0a5a      	lsrs	r2, r3, #9
 800b3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c4:	441a      	add	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	7858      	ldrb	r0, [r3, #1]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
 800b3d8:	2301      	movs	r3, #1
 800b3da:	f7fe f8a7 	bl	800952c <disk_read>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <f_open+0x362>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b3ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d002      	beq.n	800b3f8 <f_open+0x370>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b3fe:	4611      	mov	r1, r2
 800b400:	4618      	mov	r0, r3
 800b402:	f7fe fa07 	bl	8009814 <unlock_fs>
 800b406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3760      	adds	r7, #96	; 0x60
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b08e      	sub	sp, #56	; 0x38
 800b416:	af00      	add	r7, sp, #0
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	607a      	str	r2, [r7, #4]
 800b41e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2200      	movs	r2, #0
 800b428:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f107 0214 	add.w	r2, r7, #20
 800b430:	4611      	mov	r1, r2
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff fd7c 	bl	800af30 <validate>
 800b438:	4603      	mov	r3, r0
 800b43a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b43e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b442:	2b00      	cmp	r3, #0
 800b444:	d107      	bne.n	800b456 <f_read+0x44>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	7d5b      	ldrb	r3, [r3, #21]
 800b44a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b44e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b452:	2b00      	cmp	r3, #0
 800b454:	d009      	beq.n	800b46a <f_read+0x58>
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b45c:	4611      	mov	r1, r2
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe f9d8 	bl	8009814 <unlock_fs>
 800b464:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b468:	e13d      	b.n	800b6e6 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	7d1b      	ldrb	r3, [r3, #20]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <f_read+0x72>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2107      	movs	r1, #7
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe f9ca 	bl	8009814 <unlock_fs>
 800b480:	2307      	movs	r3, #7
 800b482:	e130      	b.n	800b6e6 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	68da      	ldr	r2, [r3, #12]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	1ad3      	subs	r3, r2, r3
 800b48e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	429a      	cmp	r2, r3
 800b496:	f240 811c 	bls.w	800b6d2 <f_read+0x2c0>
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b49e:	e118      	b.n	800b6d2 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f040 80e4 	bne.w	800b676 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	699b      	ldr	r3, [r3, #24]
 800b4b2:	0a5b      	lsrs	r3, r3, #9
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	8952      	ldrh	r2, [r2, #10]
 800b4b8:	3a01      	subs	r2, #1
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d139      	bne.n	800b538 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	633b      	str	r3, [r7, #48]	; 0x30
 800b4d2:	e013      	b.n	800b4fc <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7fe feae 	bl	800a244 <clmt_clust>
 800b4e8:	6338      	str	r0, [r7, #48]	; 0x30
 800b4ea:	e007      	b.n	800b4fc <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	69db      	ldr	r3, [r3, #28]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	f7fe fc14 	bl	8009d22 <get_fat>
 800b4fa:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d809      	bhi.n	800b516 <f_read+0x104>
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2202      	movs	r2, #2
 800b506:	755a      	strb	r2, [r3, #21]
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2102      	movs	r1, #2
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe f981 	bl	8009814 <unlock_fs>
 800b512:	2302      	movs	r3, #2
 800b514:	e0e7      	b.n	800b6e6 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51c:	d109      	bne.n	800b532 <f_read+0x120>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2201      	movs	r2, #1
 800b522:	755a      	strb	r2, [r3, #21]
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	2101      	movs	r1, #1
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe f973 	bl	8009814 <unlock_fs>
 800b52e:	2301      	movs	r3, #1
 800b530:	e0d9      	b.n	800b6e6 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b536:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f7fe fbcf 	bl	8009ce4 <clust2sect>
 800b546:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <f_read+0x150>
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2202      	movs	r2, #2
 800b552:	755a      	strb	r2, [r3, #21]
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2102      	movs	r1, #2
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe f95b 	bl	8009814 <unlock_fs>
 800b55e:	2302      	movs	r3, #2
 800b560:	e0c1      	b.n	800b6e6 <f_read+0x2d4>
			sect += csect;
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	4413      	add	r3, r2
 800b568:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	0a5b      	lsrs	r3, r3, #9
 800b56e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	d03e      	beq.n	800b5f4 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b576:	69fa      	ldr	r2, [r7, #28]
 800b578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57a:	4413      	add	r3, r2
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	8952      	ldrh	r2, [r2, #10]
 800b580:	4293      	cmp	r3, r2
 800b582:	d905      	bls.n	800b590 <f_read+0x17e>
					cc = fs->csize - csect;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	895b      	ldrh	r3, [r3, #10]
 800b588:	461a      	mov	r2, r3
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	7858      	ldrb	r0, [r3, #1]
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	69ba      	ldr	r2, [r7, #24]
 800b598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b59a:	f7fd ffc7 	bl	800952c <disk_read>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d009      	beq.n	800b5b8 <f_read+0x1a6>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	755a      	strb	r2, [r3, #21]
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe f930 	bl	8009814 <unlock_fs>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e096      	b.n	800b6e6 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	7d1b      	ldrb	r3, [r3, #20]
 800b5bc:	b25b      	sxtb	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da14      	bge.n	800b5ec <f_read+0x1da>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a1a      	ldr	r2, [r3, #32]
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d90d      	bls.n	800b5ec <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6a1a      	ldr	r2, [r3, #32]
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	025b      	lsls	r3, r3, #9
 800b5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5dc:	18d0      	adds	r0, r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3330      	adds	r3, #48	; 0x30
 800b5e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	f7fe f880 	bl	80096ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	025b      	lsls	r3, r3, #9
 800b5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b5f2:	e05a      	b.n	800b6aa <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a1b      	ldr	r3, [r3, #32]
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d038      	beq.n	800b670 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	7d1b      	ldrb	r3, [r3, #20]
 800b602:	b25b      	sxtb	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	da1d      	bge.n	800b644 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	7858      	ldrb	r0, [r3, #1]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a1a      	ldr	r2, [r3, #32]
 800b616:	2301      	movs	r3, #1
 800b618:	f7fd ffa8 	bl	800956c <disk_write>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d009      	beq.n	800b636 <f_read+0x224>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2201      	movs	r2, #1
 800b626:	755a      	strb	r2, [r3, #21]
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	2101      	movs	r1, #1
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fe f8f1 	bl	8009814 <unlock_fs>
 800b632:	2301      	movs	r3, #1
 800b634:	e057      	b.n	800b6e6 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	7d1b      	ldrb	r3, [r3, #20]
 800b63a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	7858      	ldrb	r0, [r3, #1]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b64e:	2301      	movs	r3, #1
 800b650:	69ba      	ldr	r2, [r7, #24]
 800b652:	f7fd ff6b 	bl	800952c <disk_read>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d009      	beq.n	800b670 <f_read+0x25e>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2201      	movs	r2, #1
 800b660:	755a      	strb	r2, [r3, #21]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2101      	movs	r1, #1
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe f8d4 	bl	8009814 <unlock_fs>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e03a      	b.n	800b6e6 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b682:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d901      	bls.n	800b690 <f_read+0x27e>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b69e:	4413      	add	r3, r2
 800b6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6a6:	f7fe f821 	bl	80096ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	4413      	add	r3, r2
 800b6b0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	699a      	ldr	r2, [r3, #24]
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	441a      	add	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	619a      	str	r2, [r3, #24]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	441a      	add	r2, r3
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f47f aee3 	bne.w	800b4a0 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2100      	movs	r1, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fe f898 	bl	8009814 <unlock_fs>
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3738      	adds	r7, #56	; 0x38
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b08c      	sub	sp, #48	; 0x30
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	60f8      	str	r0, [r7, #12]
 800b6f6:	60b9      	str	r1, [r7, #8]
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f107 0210 	add.w	r2, r7, #16
 800b70c:	4611      	mov	r1, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff fc0e 	bl	800af30 <validate>
 800b714:	4603      	mov	r3, r0
 800b716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b71a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d107      	bne.n	800b732 <f_write+0x44>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	7d5b      	ldrb	r3, [r3, #21]
 800b726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b72a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d009      	beq.n	800b746 <f_write+0x58>
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fe f86a 	bl	8009814 <unlock_fs>
 800b740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b744:	e173      	b.n	800ba2e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	7d1b      	ldrb	r3, [r3, #20]
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d106      	bne.n	800b760 <f_write+0x72>
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	2107      	movs	r1, #7
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe f85c 	bl	8009814 <unlock_fs>
 800b75c:	2307      	movs	r3, #7
 800b75e:	e166      	b.n	800ba2e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	699a      	ldr	r2, [r3, #24]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	441a      	add	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	f080 814b 	bcs.w	800ba08 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	43db      	mvns	r3, r3
 800b778:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b77a:	e145      	b.n	800ba08 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	699b      	ldr	r3, [r3, #24]
 800b780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b784:	2b00      	cmp	r3, #0
 800b786:	f040 8101 	bne.w	800b98c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	699b      	ldr	r3, [r3, #24]
 800b78e:	0a5b      	lsrs	r3, r3, #9
 800b790:	693a      	ldr	r2, [r7, #16]
 800b792:	8952      	ldrh	r2, [r2, #10]
 800b794:	3a01      	subs	r2, #1
 800b796:	4013      	ands	r3, r2
 800b798:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d14d      	bne.n	800b83c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10c      	bne.n	800b7c2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d11a      	bne.n	800b7ea <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fcab 	bl	800a114 <create_chain>
 800b7be:	62b8      	str	r0, [r7, #40]	; 0x28
 800b7c0:	e013      	b.n	800b7ea <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d007      	beq.n	800b7da <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f7fe fd37 	bl	800a244 <clmt_clust>
 800b7d6:	62b8      	str	r0, [r7, #40]	; 0x28
 800b7d8:	e007      	b.n	800b7ea <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	69db      	ldr	r3, [r3, #28]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f7fe fc96 	bl	800a114 <create_chain>
 800b7e8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 8110 	beq.w	800ba12 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d109      	bne.n	800b80c <f_write+0x11e>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	755a      	strb	r2, [r3, #21]
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2102      	movs	r1, #2
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe f806 	bl	8009814 <unlock_fs>
 800b808:	2302      	movs	r3, #2
 800b80a:	e110      	b.n	800ba2e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b812:	d109      	bne.n	800b828 <f_write+0x13a>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2201      	movs	r2, #1
 800b818:	755a      	strb	r2, [r3, #21]
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2101      	movs	r1, #1
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fff8 	bl	8009814 <unlock_fs>
 800b824:	2301      	movs	r3, #1
 800b826:	e102      	b.n	800ba2e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b82c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <f_write+0x14e>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b83a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	7d1b      	ldrb	r3, [r3, #20]
 800b840:	b25b      	sxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	da1d      	bge.n	800b882 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	7858      	ldrb	r0, [r3, #1]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6a1a      	ldr	r2, [r3, #32]
 800b854:	2301      	movs	r3, #1
 800b856:	f7fd fe89 	bl	800956c <disk_write>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d009      	beq.n	800b874 <f_write+0x186>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2201      	movs	r2, #1
 800b864:	755a      	strb	r2, [r3, #21]
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2101      	movs	r1, #1
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fd ffd2 	bl	8009814 <unlock_fs>
 800b870:	2301      	movs	r3, #1
 800b872:	e0dc      	b.n	800ba2e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	7d1b      	ldrb	r3, [r3, #20]
 800b878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	4619      	mov	r1, r3
 800b88a:	4610      	mov	r0, r2
 800b88c:	f7fe fa2a 	bl	8009ce4 <clust2sect>
 800b890:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d109      	bne.n	800b8ac <f_write+0x1be>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2202      	movs	r2, #2
 800b89c:	755a      	strb	r2, [r3, #21]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fd ffb6 	bl	8009814 <unlock_fs>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	e0c0      	b.n	800ba2e <f_write+0x340>
			sect += csect;
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	0a5b      	lsrs	r3, r3, #9
 800b8b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d041      	beq.n	800b944 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	8952      	ldrh	r2, [r2, #10]
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d905      	bls.n	800b8da <f_write+0x1ec>
					cc = fs->csize - csect;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	895b      	ldrh	r3, [r3, #10]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	7858      	ldrb	r0, [r3, #1]
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	69f9      	ldr	r1, [r7, #28]
 800b8e4:	f7fd fe42 	bl	800956c <disk_write>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d009      	beq.n	800b902 <f_write+0x214>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	755a      	strb	r2, [r3, #21]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fd ff8b 	bl	8009814 <unlock_fs>
 800b8fe:	2301      	movs	r3, #1
 800b900:	e095      	b.n	800ba2e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a1a      	ldr	r2, [r3, #32]
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	6a3a      	ldr	r2, [r7, #32]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d915      	bls.n	800b93c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6a1a      	ldr	r2, [r3, #32]
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	025b      	lsls	r3, r3, #9
 800b920:	69fa      	ldr	r2, [r7, #28]
 800b922:	4413      	add	r3, r2
 800b924:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b928:	4619      	mov	r1, r3
 800b92a:	f7fd fedf 	bl	80096ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	7d1b      	ldrb	r3, [r3, #20]
 800b932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b936:	b2da      	uxtb	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	025b      	lsls	r3, r3, #9
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b942:	e044      	b.n	800b9ce <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d01b      	beq.n	800b986 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	699a      	ldr	r2, [r3, #24]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b956:	429a      	cmp	r2, r3
 800b958:	d215      	bcs.n	800b986 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	7858      	ldrb	r0, [r3, #1]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b964:	2301      	movs	r3, #1
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	f7fd fde0 	bl	800952c <disk_read>
 800b96c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d009      	beq.n	800b986 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2201      	movs	r2, #1
 800b976:	755a      	strb	r2, [r3, #21]
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	2101      	movs	r1, #1
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fd ff49 	bl	8009814 <unlock_fs>
 800b982:	2301      	movs	r3, #1
 800b984:	e053      	b.n	800ba2e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b994:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d901      	bls.n	800b9a6 <f_write+0x2b8>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b4:	4413      	add	r3, r2
 800b9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b8:	69f9      	ldr	r1, [r7, #28]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fd fe96 	bl	80096ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	7d1b      	ldrb	r3, [r3, #20]
 800b9c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b9ce:	69fa      	ldr	r2, [r7, #28]
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	4413      	add	r3, r2
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	699a      	ldr	r2, [r3, #24]
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	619a      	str	r2, [r3, #24]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	68da      	ldr	r2, [r3, #12]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	bf38      	it	cc
 800b9ee:	461a      	movcc	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	60da      	str	r2, [r3, #12]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	441a      	add	r2, r3
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f47f aeb6 	bne.w	800b77c <f_write+0x8e>
 800ba10:	e000      	b.n	800ba14 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ba12:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	7d1b      	ldrb	r3, [r3, #20]
 800ba18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	2100      	movs	r1, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fd fef4 	bl	8009814 <unlock_fs>
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3730      	adds	r7, #48	; 0x30
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b086      	sub	sp, #24
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f107 0208 	add.w	r2, r7, #8
 800ba44:	4611      	mov	r1, r2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff fa72 	bl	800af30 <validate>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d16d      	bne.n	800bb32 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	7d1b      	ldrb	r3, [r3, #20]
 800ba5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d067      	beq.n	800bb32 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	7d1b      	ldrb	r3, [r3, #20]
 800ba66:	b25b      	sxtb	r3, r3
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	da1a      	bge.n	800baa2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	7858      	ldrb	r0, [r3, #1]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a1a      	ldr	r2, [r3, #32]
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f7fd fd76 	bl	800956c <disk_write>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d006      	beq.n	800ba94 <f_sync+0x5e>
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2101      	movs	r1, #1
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fd fec2 	bl	8009814 <unlock_fs>
 800ba90:	2301      	movs	r3, #1
 800ba92:	e055      	b.n	800bb40 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7d1b      	ldrb	r3, [r3, #20]
 800ba98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800baa2:	f7fd fac1 	bl	8009028 <get_fattime>
 800baa6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	4619      	mov	r1, r3
 800bab0:	4610      	mov	r0, r2
 800bab2:	f7fe f87b 	bl	8009bac <move_window>
 800bab6:	4603      	mov	r3, r0
 800bab8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d138      	bne.n	800bb32 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	330b      	adds	r3, #11
 800baca:	781a      	ldrb	r2, [r3, #0]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	330b      	adds	r3, #11
 800bad0:	f042 0220 	orr.w	r2, r2, #32
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	461a      	mov	r2, r3
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	f7fe fd88 	bl	800a5f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f103 021c 	add.w	r2, r3, #28
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7fd fdcd 	bl	8009694 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3316      	adds	r3, #22
 800bafe:	6939      	ldr	r1, [r7, #16]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fd fdc7 	bl	8009694 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3312      	adds	r3, #18
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fd fda6 	bl	800965e <st_word>
					fs->wflag = 1;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2201      	movs	r2, #1
 800bb16:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe f874 	bl	8009c08 <sync_fs>
 800bb20:	4603      	mov	r3, r0
 800bb22:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	7d1b      	ldrb	r3, [r3, #20]
 800bb28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	7dfa      	ldrb	r2, [r7, #23]
 800bb36:	4611      	mov	r1, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fd fe6b 	bl	8009814 <unlock_fs>
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff ff70 	bl	800ba36 <f_sync>
 800bb56:	4603      	mov	r3, r0
 800bb58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb5a:	7bfb      	ldrb	r3, [r7, #15]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d11d      	bne.n	800bb9c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f107 0208 	add.w	r2, r7, #8
 800bb66:	4611      	mov	r1, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7ff f9e1 	bl	800af30 <validate>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d111      	bne.n	800bb9c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fd ff71 	bl	8009a64 <dec_lock>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d102      	bne.n	800bb92 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fd fe3c 	bl	8009814 <unlock_fs>
#endif
		}
	}
	return res;
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbbe:	4b1f      	ldr	r3, [pc, #124]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbc0:	7a5b      	ldrb	r3, [r3, #9]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d131      	bne.n	800bc2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bbc8:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbca:	7a5b      	ldrb	r3, [r3, #9]
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	461a      	mov	r2, r3
 800bbd0:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bbd6:	4b19      	ldr	r3, [pc, #100]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbd8:	7a5b      	ldrb	r3, [r3, #9]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	4a17      	ldr	r2, [pc, #92]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bbe6:	4b15      	ldr	r3, [pc, #84]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbe8:	7a5b      	ldrb	r3, [r3, #9]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	461a      	mov	r2, r3
 800bbee:	4b13      	ldr	r3, [pc, #76]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbf0:	4413      	add	r3, r2
 800bbf2:	79fa      	ldrb	r2, [r7, #7]
 800bbf4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bbf6:	4b11      	ldr	r3, [pc, #68]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bbf8:	7a5b      	ldrb	r3, [r3, #9]
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	b2d1      	uxtb	r1, r2
 800bc00:	4a0e      	ldr	r2, [pc, #56]	; (800bc3c <FATFS_LinkDriverEx+0x94>)
 800bc02:	7251      	strb	r1, [r2, #9]
 800bc04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc06:	7dbb      	ldrb	r3, [r7, #22]
 800bc08:	3330      	adds	r3, #48	; 0x30
 800bc0a:	b2da      	uxtb	r2, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	3301      	adds	r3, #1
 800bc14:	223a      	movs	r2, #58	; 0x3a
 800bc16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	3302      	adds	r3, #2
 800bc1c:	222f      	movs	r2, #47	; 0x2f
 800bc1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	3303      	adds	r3, #3
 800bc24:	2200      	movs	r2, #0
 800bc26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	200009d8 	.word	0x200009d8

0800bc40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff ffaa 	bl	800bba8 <FATFS_LinkDriverEx>
 800bc54:	4603      	mov	r3, r0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b086      	sub	sp, #24
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	4603      	mov	r3, r0
 800bc66:	6039      	str	r1, [r7, #0]
 800bc68:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60fb      	str	r3, [r7, #12]
 800bc6e:	2300      	movs	r3, #0
 800bc70:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800bc72:	f107 030c 	add.w	r3, r7, #12
 800bc76:	2101      	movs	r1, #1
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 f8e9 	bl	800be50 <osSemaphoreCreate>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bf14      	ite	ne
 800bc8c:	2301      	movne	r3, #1
 800bc8e:	2300      	moveq	r3, #0
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	617b      	str	r3, [r7, #20]

    return ret;
 800bc94:	697b      	ldr	r3, [r7, #20]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b082      	sub	sp, #8
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f988 	bl	800bfbc <osSemaphoreDelete>
#endif
    return 1;
 800bcac:	2301      	movs	r3, #1
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bcb6:	b580      	push	{r7, lr}
 800bcb8:	b084      	sub	sp, #16
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800bcc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f8f4 	bl	800beb4 <osSemaphoreWait>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f931 	bl	800bf50 <osSemaphoreRelease>
#endif
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bd04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd08:	2b84      	cmp	r3, #132	; 0x84
 800bd0a:	d005      	beq.n	800bd18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bd0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	3303      	adds	r3, #3
 800bd16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bd18:	68fb      	ldr	r3, [r7, #12]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd2c:	f3ef 8305 	mrs	r3, IPSR
 800bd30:	607b      	str	r3, [r7, #4]
  return(result);
 800bd32:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	bf14      	ite	ne
 800bd38:	2301      	movne	r3, #1
 800bd3a:	2300      	moveq	r3, #0
 800bd3c:	b2db      	uxtb	r3, r3
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bd4e:	f001 fc89 	bl	800d664 <vTaskStartScheduler>
  
  return osOK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bd5c:	f002 f8b6 	bl	800decc <xTaskGetSchedulerState>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d101      	bne.n	800bd6a <osKernelRunning+0x12>
    return 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	e000      	b.n	800bd6c <osKernelRunning+0x14>
  else
    return 1;
 800bd6a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bd74:	f7ff ffd7 	bl	800bd26 <inHandlerMode>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bd7e:	f001 fd95 	bl	800d8ac <xTaskGetTickCountFromISR>
 800bd82:	4603      	mov	r3, r0
 800bd84:	e002      	b.n	800bd8c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bd86:	f001 fd81 	bl	800d88c <xTaskGetTickCount>
 800bd8a:	4603      	mov	r3, r0
  }
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd92:	b089      	sub	sp, #36	; 0x24
 800bd94:	af04      	add	r7, sp, #16
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d020      	beq.n	800bde4 <osThreadCreate+0x54>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01c      	beq.n	800bde4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685c      	ldr	r4, [r3, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681d      	ldr	r5, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	691e      	ldr	r6, [r3, #16]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7ff ff9a 	bl	800bcf6 <makeFreeRtosPriority>
 800bdc2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdcc:	9202      	str	r2, [sp, #8]
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	9100      	str	r1, [sp, #0]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f001 f9d5 	bl	800d188 <xTaskCreateStatic>
 800bdde:	4603      	mov	r3, r0
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	e01c      	b.n	800be1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	685c      	ldr	r4, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdf0:	b29e      	uxth	r6, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff ff7c 	bl	800bcf6 <makeFreeRtosPriority>
 800bdfe:	4602      	mov	r2, r0
 800be00:	f107 030c 	add.w	r3, r7, #12
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	9200      	str	r2, [sp, #0]
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	4632      	mov	r2, r6
 800be0c:	4629      	mov	r1, r5
 800be0e:	4620      	mov	r0, r4
 800be10:	f001 fa17 	bl	800d242 <xTaskCreate>
 800be14:	4603      	mov	r3, r0
 800be16:	2b01      	cmp	r3, #1
 800be18:	d001      	beq.n	800be1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be1a:	2300      	movs	r3, #0
 800be1c:	e000      	b.n	800be20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be1e:	68fb      	ldr	r3, [r7, #12]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <osDelay+0x16>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	e000      	b.n	800be40 <osDelay+0x18>
 800be3e:	2301      	movs	r3, #1
 800be40:	4618      	mov	r0, r3
 800be42:	f001 fbdb 	bl	800d5fc <vTaskDelay>
  
  return osOK;
 800be46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af02      	add	r7, sp, #8
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00f      	beq.n	800be82 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d10a      	bne.n	800be7e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	2203      	movs	r2, #3
 800be6e:	9200      	str	r2, [sp, #0]
 800be70:	2200      	movs	r2, #0
 800be72:	2100      	movs	r1, #0
 800be74:	2001      	movs	r0, #1
 800be76:	f000 faad 	bl	800c3d4 <xQueueGenericCreateStatic>
 800be7a:	4603      	mov	r3, r0
 800be7c:	e016      	b.n	800beac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800be7e:	2300      	movs	r3, #0
 800be80:	e014      	b.n	800beac <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d110      	bne.n	800beaa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800be88:	2203      	movs	r2, #3
 800be8a:	2100      	movs	r1, #0
 800be8c:	2001      	movs	r0, #1
 800be8e:	f000 fb19 	bl	800c4c4 <xQueueGenericCreate>
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d005      	beq.n	800bea6 <osSemaphoreCreate+0x56>
 800be9a:	2300      	movs	r3, #0
 800be9c:	2200      	movs	r2, #0
 800be9e:	2100      	movs	r1, #0
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 fb69 	bl	800c578 <xQueueGenericSend>
      return sema;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	e000      	b.n	800beac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800beaa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800beac:	4618      	mov	r0, r3
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}

0800beb4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bebe:	2300      	movs	r3, #0
 800bec0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bec8:	2380      	movs	r3, #128	; 0x80
 800beca:	e03a      	b.n	800bf42 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed6:	d103      	bne.n	800bee0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bed8:	f04f 33ff 	mov.w	r3, #4294967295
 800bedc:	60fb      	str	r3, [r7, #12]
 800bede:	e009      	b.n	800bef4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d006      	beq.n	800bef4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <osSemaphoreWait+0x40>
      ticks = 1;
 800bef0:	2301      	movs	r3, #1
 800bef2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bef4:	f7ff ff17 	bl	800bd26 <inHandlerMode>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d017      	beq.n	800bf2e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800befe:	f107 0308 	add.w	r3, r7, #8
 800bf02:	461a      	mov	r2, r3
 800bf04:	2100      	movs	r1, #0
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 ff48 	bl	800cd9c <xQueueReceiveFromISR>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d001      	beq.n	800bf16 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bf12:	23ff      	movs	r3, #255	; 0xff
 800bf14:	e015      	b.n	800bf42 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d011      	beq.n	800bf40 <osSemaphoreWait+0x8c>
 800bf1c:	4b0b      	ldr	r3, [pc, #44]	; (800bf4c <osSemaphoreWait+0x98>)
 800bf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	f3bf 8f4f 	dsb	sy
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	e008      	b.n	800bf40 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf2e:	68f9      	ldr	r1, [r7, #12]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fe27 	bl	800cb84 <xQueueSemaphoreTake>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d001      	beq.n	800bf40 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bf3c:	23ff      	movs	r3, #255	; 0xff
 800bf3e:	e000      	b.n	800bf42 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bf60:	f7ff fee1 	bl	800bd26 <inHandlerMode>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d016      	beq.n	800bf98 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf6a:	f107 0308 	add.w	r3, r7, #8
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fc9a 	bl	800c8aa <xQueueGiveFromISR>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d001      	beq.n	800bf80 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bf7c:	23ff      	movs	r3, #255	; 0xff
 800bf7e:	e017      	b.n	800bfb0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d013      	beq.n	800bfae <osSemaphoreRelease+0x5e>
 800bf86:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <osSemaphoreRelease+0x68>)
 800bf88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	e00a      	b.n	800bfae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bf98:	2300      	movs	r3, #0
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 faea 	bl	800c578 <xQueueGenericSend>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d001      	beq.n	800bfae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bfaa:	23ff      	movs	r3, #255	; 0xff
 800bfac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bfae:	68fb      	ldr	r3, [r7, #12]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	e000ed04 	.word	0xe000ed04

0800bfbc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bfc4:	f7ff feaf 	bl	800bd26 <inHandlerMode>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bfce:	2382      	movs	r3, #130	; 0x82
 800bfd0:	e003      	b.n	800bfda <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 ff62 	bl	800ce9c <vQueueDelete>

  return osOK; 
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bfe2:	b590      	push	{r4, r7, lr}
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	af02      	add	r7, sp, #8
 800bfe8:	6078      	str	r0, [r7, #4]
 800bfea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d011      	beq.n	800c018 <osMessageCreate+0x36>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00d      	beq.n	800c018 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6818      	ldr	r0, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6859      	ldr	r1, [r3, #4]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689a      	ldr	r2, [r3, #8]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	2400      	movs	r4, #0
 800c00e:	9400      	str	r4, [sp, #0]
 800c010:	f000 f9e0 	bl	800c3d4 <xQueueGenericCreateStatic>
 800c014:	4603      	mov	r3, r0
 800c016:	e008      	b.n	800c02a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	4619      	mov	r1, r3
 800c024:	f000 fa4e 	bl	800c4c4 <xQueueGenericCreate>
 800c028:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	370c      	adds	r7, #12
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd90      	pop	{r4, r7, pc}
	...

0800c034 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c040:	2300      	movs	r3, #0
 800c042:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d101      	bne.n	800c052 <osMessagePut+0x1e>
    ticks = 1;
 800c04e:	2301      	movs	r3, #1
 800c050:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c052:	f7ff fe68 	bl	800bd26 <inHandlerMode>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d018      	beq.n	800c08e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c05c:	f107 0210 	add.w	r2, r7, #16
 800c060:	f107 0108 	add.w	r1, r7, #8
 800c064:	2300      	movs	r3, #0
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f000 fb84 	bl	800c774 <xQueueGenericSendFromISR>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d001      	beq.n	800c076 <osMessagePut+0x42>
      return osErrorOS;
 800c072:	23ff      	movs	r3, #255	; 0xff
 800c074:	e018      	b.n	800c0a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d014      	beq.n	800c0a6 <osMessagePut+0x72>
 800c07c:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <osMessagePut+0x7c>)
 800c07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	e00b      	b.n	800c0a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c08e:	f107 0108 	add.w	r1, r7, #8
 800c092:	2300      	movs	r3, #0
 800c094:	697a      	ldr	r2, [r7, #20]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 fa6e 	bl	800c578 <xQueueGenericSend>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d001      	beq.n	800c0a6 <osMessagePut+0x72>
      return osErrorOS;
 800c0a2:	23ff      	movs	r3, #255	; 0xff
 800c0a4:	e000      	b.n	800c0a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3718      	adds	r7, #24
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	e000ed04 	.word	0xe000ed04

0800c0b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c0b4:	b590      	push	{r4, r7, lr}
 800c0b6:	b08b      	sub	sp, #44	; 0x2c
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c0ce:	2380      	movs	r3, #128	; 0x80
 800c0d0:	617b      	str	r3, [r7, #20]
    return event;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	461c      	mov	r4, r3
 800c0d6:	f107 0314 	add.w	r3, r7, #20
 800c0da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0e2:	e054      	b.n	800c18e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f2:	d103      	bne.n	800c0fc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c0fa:	e009      	b.n	800c110 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d006      	beq.n	800c110 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <osMessageGet+0x5c>
      ticks = 1;
 800c10c:	2301      	movs	r3, #1
 800c10e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c110:	f7ff fe09 	bl	800bd26 <inHandlerMode>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d01c      	beq.n	800c154 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c11a:	f107 0220 	add.w	r2, r7, #32
 800c11e:	f107 0314 	add.w	r3, r7, #20
 800c122:	3304      	adds	r3, #4
 800c124:	4619      	mov	r1, r3
 800c126:	68b8      	ldr	r0, [r7, #8]
 800c128:	f000 fe38 	bl	800cd9c <xQueueReceiveFromISR>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d102      	bne.n	800c138 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c132:	2310      	movs	r3, #16
 800c134:	617b      	str	r3, [r7, #20]
 800c136:	e001      	b.n	800c13c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c138:	2300      	movs	r3, #0
 800c13a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d01d      	beq.n	800c17e <osMessageGet+0xca>
 800c142:	4b15      	ldr	r3, [pc, #84]	; (800c198 <osMessageGet+0xe4>)
 800c144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	e014      	b.n	800c17e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c154:	f107 0314 	add.w	r3, r7, #20
 800c158:	3304      	adds	r3, #4
 800c15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c15c:	4619      	mov	r1, r3
 800c15e:	68b8      	ldr	r0, [r7, #8]
 800c160:	f000 fc30 	bl	800c9c4 <xQueueReceive>
 800c164:	4603      	mov	r3, r0
 800c166:	2b01      	cmp	r3, #1
 800c168:	d102      	bne.n	800c170 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c16a:	2310      	movs	r3, #16
 800c16c:	617b      	str	r3, [r7, #20]
 800c16e:	e006      	b.n	800c17e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <osMessageGet+0xc6>
 800c176:	2300      	movs	r3, #0
 800c178:	e000      	b.n	800c17c <osMessageGet+0xc8>
 800c17a:	2340      	movs	r3, #64	; 0x40
 800c17c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	461c      	mov	r4, r3
 800c182:	f107 0314 	add.w	r3, r7, #20
 800c186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c18a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	372c      	adds	r7, #44	; 0x2c
 800c192:	46bd      	mov	sp, r7
 800c194:	bd90      	pop	{r4, r7, pc}
 800c196:	bf00      	nop
 800c198:	e000ed04 	.word	0xe000ed04

0800c19c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f103 0208 	add.w	r2, r3, #8
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f103 0208 	add.w	r2, r3, #8
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f103 0208 	add.w	r2, r3, #8
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b085      	sub	sp, #20
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	689a      	ldr	r2, [r3, #8]
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	1c5a      	adds	r2, r3, #1
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	601a      	str	r2, [r3, #0]
}
 800c232:	bf00      	nop
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c23e:	b480      	push	{r7}
 800c240:	b085      	sub	sp, #20
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c254:	d103      	bne.n	800c25e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	60fb      	str	r3, [r7, #12]
 800c25c:	e00c      	b.n	800c278 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3308      	adds	r3, #8
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	e002      	b.n	800c26c <vListInsert+0x2e>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	429a      	cmp	r2, r3
 800c276:	d2f6      	bcs.n	800c266 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	1c5a      	adds	r2, r3, #1
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	601a      	str	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6892      	ldr	r2, [r2, #8]
 800c2c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	6852      	ldr	r2, [r2, #4]
 800c2d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d103      	bne.n	800c2e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	689a      	ldr	r2, [r3, #8]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	1e5a      	subs	r2, r3, #1
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3714      	adds	r7, #20
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10a      	bne.n	800c32e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31c:	f383 8811 	msr	BASEPRI, r3
 800c320:	f3bf 8f6f 	isb	sy
 800c324:	f3bf 8f4f 	dsb	sy
 800c328:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c32a:	bf00      	nop
 800c32c:	e7fe      	b.n	800c32c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c32e:	f002 f919 	bl	800e564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33a:	68f9      	ldr	r1, [r7, #12]
 800c33c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c33e:	fb01 f303 	mul.w	r3, r1, r3
 800c342:	441a      	add	r2, r3
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c35e:	3b01      	subs	r3, #1
 800c360:	68f9      	ldr	r1, [r7, #12]
 800c362:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c364:	fb01 f303 	mul.w	r3, r1, r3
 800c368:	441a      	add	r2, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	22ff      	movs	r2, #255	; 0xff
 800c372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	22ff      	movs	r2, #255	; 0xff
 800c37a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d114      	bne.n	800c3ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01a      	beq.n	800c3c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	3310      	adds	r3, #16
 800c390:	4618      	mov	r0, r3
 800c392:	f001 fbdb 	bl	800db4c <xTaskRemoveFromEventList>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d012      	beq.n	800c3c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c39c:	4b0c      	ldr	r3, [pc, #48]	; (800c3d0 <xQueueGenericReset+0xcc>)
 800c39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	e009      	b.n	800c3c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3310      	adds	r3, #16
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7ff fef2 	bl	800c19c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3324      	adds	r3, #36	; 0x24
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7ff feed 	bl	800c19c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c3c2:	f002 f8ff 	bl	800e5c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3c6:	2301      	movs	r3, #1
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	e000ed04 	.word	0xe000ed04

0800c3d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b08e      	sub	sp, #56	; 0x38
 800c3d8:	af02      	add	r7, sp, #8
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10a      	bne.n	800c3fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3fa:	bf00      	nop
 800c3fc:	e7fe      	b.n	800c3fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d002      	beq.n	800c426 <xQueueGenericCreateStatic+0x52>
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <xQueueGenericCreateStatic+0x56>
 800c426:	2301      	movs	r3, #1
 800c428:	e000      	b.n	800c42c <xQueueGenericCreateStatic+0x58>
 800c42a:	2300      	movs	r3, #0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10a      	bne.n	800c446 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	623b      	str	r3, [r7, #32]
}
 800c442:	bf00      	nop
 800c444:	e7fe      	b.n	800c444 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <xQueueGenericCreateStatic+0x7e>
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <xQueueGenericCreateStatic+0x82>
 800c452:	2301      	movs	r3, #1
 800c454:	e000      	b.n	800c458 <xQueueGenericCreateStatic+0x84>
 800c456:	2300      	movs	r3, #0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10a      	bne.n	800c472 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	61fb      	str	r3, [r7, #28]
}
 800c46e:	bf00      	nop
 800c470:	e7fe      	b.n	800c470 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c472:	2348      	movs	r3, #72	; 0x48
 800c474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	2b48      	cmp	r3, #72	; 0x48
 800c47a:	d00a      	beq.n	800c492 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	61bb      	str	r3, [r7, #24]
}
 800c48e:	bf00      	nop
 800c490:	e7fe      	b.n	800c490 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c492:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00d      	beq.n	800c4ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	68b9      	ldr	r1, [r7, #8]
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 f83f 	bl	800c538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3730      	adds	r7, #48	; 0x30
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08a      	sub	sp, #40	; 0x28
 800c4c8:	af02      	add	r7, sp, #8
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <xQueueGenericCreate+0x2a>
	__asm volatile
 800c4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	613b      	str	r3, [r7, #16]
}
 800c4ea:	bf00      	nop
 800c4ec:	e7fe      	b.n	800c4ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	fb02 f303 	mul.w	r3, r2, r3
 800c4f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	3348      	adds	r3, #72	; 0x48
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f002 f953 	bl	800e7a8 <pvPortMalloc>
 800c502:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d011      	beq.n	800c52e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	3348      	adds	r3, #72	; 0x48
 800c512:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c51c:	79fa      	ldrb	r2, [r7, #7]
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	4613      	mov	r3, r2
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f805 	bl	800c538 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c52e:	69bb      	ldr	r3, [r7, #24]
	}
 800c530:	4618      	mov	r0, r3
 800c532:	3720      	adds	r7, #32
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
 800c544:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d103      	bne.n	800c554 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	69ba      	ldr	r2, [r7, #24]
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	e002      	b.n	800c55a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	68fa      	ldr	r2, [r7, #12]
 800c55e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c566:	2101      	movs	r1, #1
 800c568:	69b8      	ldr	r0, [r7, #24]
 800c56a:	f7ff fecb 	bl	800c304 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c56e:	bf00      	nop
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08e      	sub	sp, #56	; 0x38
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c586:	2300      	movs	r3, #0
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10a      	bne.n	800c5aa <xQueueGenericSend+0x32>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d103      	bne.n	800c5b8 <xQueueGenericSend+0x40>
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <xQueueGenericSend+0x44>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e000      	b.n	800c5be <xQueueGenericSend+0x46>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10a      	bne.n	800c5d8 <xQueueGenericSend+0x60>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d103      	bne.n	800c5e6 <xQueueGenericSend+0x6e>
 800c5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d101      	bne.n	800c5ea <xQueueGenericSend+0x72>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <xQueueGenericSend+0x74>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10a      	bne.n	800c606 <xQueueGenericSend+0x8e>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	623b      	str	r3, [r7, #32]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c606:	f001 fc61 	bl	800decc <xTaskGetSchedulerState>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <xQueueGenericSend+0x9e>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <xQueueGenericSend+0xa2>
 800c616:	2301      	movs	r3, #1
 800c618:	e000      	b.n	800c61c <xQueueGenericSend+0xa4>
 800c61a:	2300      	movs	r3, #0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10a      	bne.n	800c636 <xQueueGenericSend+0xbe>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	61fb      	str	r3, [r7, #28]
}
 800c632:	bf00      	nop
 800c634:	e7fe      	b.n	800c634 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c636:	f001 ff95 	bl	800e564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c642:	429a      	cmp	r2, r3
 800c644:	d302      	bcc.n	800c64c <xQueueGenericSend+0xd4>
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d129      	bne.n	800c6a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c652:	f000 fc5e 	bl	800cf12 <prvCopyDataToQueue>
 800c656:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d010      	beq.n	800c682 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	3324      	adds	r3, #36	; 0x24
 800c664:	4618      	mov	r0, r3
 800c666:	f001 fa71 	bl	800db4c <xTaskRemoveFromEventList>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d013      	beq.n	800c698 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c670:	4b3f      	ldr	r3, [pc, #252]	; (800c770 <xQueueGenericSend+0x1f8>)
 800c672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	e00a      	b.n	800c698 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	2b00      	cmp	r3, #0
 800c686:	d007      	beq.n	800c698 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c688:	4b39      	ldr	r3, [pc, #228]	; (800c770 <xQueueGenericSend+0x1f8>)
 800c68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c698:	f001 ff94 	bl	800e5c4 <vPortExitCritical>
				return pdPASS;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e063      	b.n	800c768 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d103      	bne.n	800c6ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6a6:	f001 ff8d 	bl	800e5c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e05c      	b.n	800c768 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d106      	bne.n	800c6c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6b4:	f107 0314 	add.w	r3, r7, #20
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f001 faa9 	bl	800dc10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6c2:	f001 ff7f 	bl	800e5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6c6:	f001 f837 	bl	800d738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6ca:	f001 ff4b 	bl	800e564 <vPortEnterCritical>
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6d4:	b25b      	sxtb	r3, r3
 800c6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6da:	d103      	bne.n	800c6e4 <xQueueGenericSend+0x16c>
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6ea:	b25b      	sxtb	r3, r3
 800c6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f0:	d103      	bne.n	800c6fa <xQueueGenericSend+0x182>
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6fa:	f001 ff63 	bl	800e5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6fe:	1d3a      	adds	r2, r7, #4
 800c700:	f107 0314 	add.w	r3, r7, #20
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f001 fa98 	bl	800dc3c <xTaskCheckForTimeOut>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d124      	bne.n	800c75c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c714:	f000 fcf5 	bl	800d102 <prvIsQueueFull>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d018      	beq.n	800c750 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	3310      	adds	r3, #16
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	4611      	mov	r1, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f001 f9ec 	bl	800db04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c72c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c72e:	f000 fc80 	bl	800d032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c732:	f001 f80f 	bl	800d754 <xTaskResumeAll>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f47f af7c 	bne.w	800c636 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c73e:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <xQueueGenericSend+0x1f8>)
 800c740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c744:	601a      	str	r2, [r3, #0]
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	e772      	b.n	800c636 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c752:	f000 fc6e 	bl	800d032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c756:	f000 fffd 	bl	800d754 <xTaskResumeAll>
 800c75a:	e76c      	b.n	800c636 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c75e:	f000 fc68 	bl	800d032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c762:	f000 fff7 	bl	800d754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c766:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3738      	adds	r7, #56	; 0x38
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	e000ed04 	.word	0xe000ed04

0800c774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b090      	sub	sp, #64	; 0x40
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10a      	bne.n	800c7a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c79e:	bf00      	nop
 800c7a0:	e7fe      	b.n	800c7a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d103      	bne.n	800c7b0 <xQueueGenericSendFromISR+0x3c>
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <xQueueGenericSendFromISR+0x40>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e000      	b.n	800c7b6 <xQueueGenericSendFromISR+0x42>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10a      	bne.n	800c7d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7cc:	bf00      	nop
 800c7ce:	e7fe      	b.n	800c7ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d103      	bne.n	800c7de <xQueueGenericSendFromISR+0x6a>
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d101      	bne.n	800c7e2 <xQueueGenericSendFromISR+0x6e>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e000      	b.n	800c7e4 <xQueueGenericSendFromISR+0x70>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10a      	bne.n	800c7fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	623b      	str	r3, [r7, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	e7fe      	b.n	800c7fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7fe:	f001 ff93 	bl	800e728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c802:	f3ef 8211 	mrs	r2, BASEPRI
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	61fa      	str	r2, [r7, #28]
 800c818:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c81a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c81c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c826:	429a      	cmp	r2, r3
 800c828:	d302      	bcc.n	800c830 <xQueueGenericSendFromISR+0xbc>
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d12f      	bne.n	800c890 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c840:	683a      	ldr	r2, [r7, #0]
 800c842:	68b9      	ldr	r1, [r7, #8]
 800c844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c846:	f000 fb64 	bl	800cf12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c84a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c852:	d112      	bne.n	800c87a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d016      	beq.n	800c88a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	3324      	adds	r3, #36	; 0x24
 800c860:	4618      	mov	r0, r3
 800c862:	f001 f973 	bl	800db4c <xTaskRemoveFromEventList>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00e      	beq.n	800c88a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00b      	beq.n	800c88a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	601a      	str	r2, [r3, #0]
 800c878:	e007      	b.n	800c88a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c87a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c87e:	3301      	adds	r3, #1
 800c880:	b2db      	uxtb	r3, r3
 800c882:	b25a      	sxtb	r2, r3
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c88a:	2301      	movs	r3, #1
 800c88c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c88e:	e001      	b.n	800c894 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c890:	2300      	movs	r3, #0
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c896:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c89e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3740      	adds	r7, #64	; 0x40
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b08e      	sub	sp, #56	; 0x38
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10a      	bne.n	800c8d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	623b      	str	r3, [r7, #32]
}
 800c8d0:	bf00      	nop
 800c8d2:	e7fe      	b.n	800c8d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00a      	beq.n	800c8f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	61fb      	str	r3, [r7, #28]
}
 800c8ee:	bf00      	nop
 800c8f0:	e7fe      	b.n	800c8f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d103      	bne.n	800c902 <xQueueGiveFromISR+0x58>
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <xQueueGiveFromISR+0x5c>
 800c902:	2301      	movs	r3, #1
 800c904:	e000      	b.n	800c908 <xQueueGiveFromISR+0x5e>
 800c906:	2300      	movs	r3, #0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10a      	bne.n	800c922 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	61bb      	str	r3, [r7, #24]
}
 800c91e:	bf00      	nop
 800c920:	e7fe      	b.n	800c920 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c922:	f001 ff01 	bl	800e728 <vPortValidateInterruptPriority>
	__asm volatile
 800c926:	f3ef 8211 	mrs	r2, BASEPRI
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	617a      	str	r2, [r7, #20]
 800c93c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c93e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c940:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c94e:	429a      	cmp	r2, r3
 800c950:	d22b      	bcs.n	800c9aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c964:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96c:	d112      	bne.n	800c994 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c972:	2b00      	cmp	r3, #0
 800c974:	d016      	beq.n	800c9a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	3324      	adds	r3, #36	; 0x24
 800c97a:	4618      	mov	r0, r3
 800c97c:	f001 f8e6 	bl	800db4c <xTaskRemoveFromEventList>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00e      	beq.n	800c9a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00b      	beq.n	800c9a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	2201      	movs	r2, #1
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	e007      	b.n	800c9a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c998:	3301      	adds	r3, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	b25a      	sxtb	r2, r3
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9a8:	e001      	b.n	800c9ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f383 8811 	msr	BASEPRI, r3
}
 800c9b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3738      	adds	r7, #56	; 0x38
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08c      	sub	sp, #48	; 0x30
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10a      	bne.n	800c9f4 <xQueueReceive+0x30>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	623b      	str	r3, [r7, #32]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d103      	bne.n	800ca02 <xQueueReceive+0x3e>
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <xQueueReceive+0x42>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e000      	b.n	800ca08 <xQueueReceive+0x44>
 800ca06:	2300      	movs	r3, #0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <xQueueReceive+0x5e>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	61fb      	str	r3, [r7, #28]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca22:	f001 fa53 	bl	800decc <xTaskGetSchedulerState>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d102      	bne.n	800ca32 <xQueueReceive+0x6e>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d101      	bne.n	800ca36 <xQueueReceive+0x72>
 800ca32:	2301      	movs	r3, #1
 800ca34:	e000      	b.n	800ca38 <xQueueReceive+0x74>
 800ca36:	2300      	movs	r3, #0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10a      	bne.n	800ca52 <xQueueReceive+0x8e>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	61bb      	str	r3, [r7, #24]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca52:	f001 fd87 	bl	800e564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d01f      	beq.n	800caa2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca66:	f000 fabe 	bl	800cfe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00f      	beq.n	800ca9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7c:	3310      	adds	r3, #16
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f001 f864 	bl	800db4c <xTaskRemoveFromEventList>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d007      	beq.n	800ca9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca8a:	4b3d      	ldr	r3, [pc, #244]	; (800cb80 <xQueueReceive+0x1bc>)
 800ca8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca9a:	f001 fd93 	bl	800e5c4 <vPortExitCritical>
				return pdPASS;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e069      	b.n	800cb76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d103      	bne.n	800cab0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800caa8:	f001 fd8c 	bl	800e5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800caac:	2300      	movs	r3, #0
 800caae:	e062      	b.n	800cb76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d106      	bne.n	800cac4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cab6:	f107 0310 	add.w	r3, r7, #16
 800caba:	4618      	mov	r0, r3
 800cabc:	f001 f8a8 	bl	800dc10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cac0:	2301      	movs	r3, #1
 800cac2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cac4:	f001 fd7e 	bl	800e5c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cac8:	f000 fe36 	bl	800d738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cacc:	f001 fd4a 	bl	800e564 <vPortEnterCritical>
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cad6:	b25b      	sxtb	r3, r3
 800cad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cadc:	d103      	bne.n	800cae6 <xQueueReceive+0x122>
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800caec:	b25b      	sxtb	r3, r3
 800caee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf2:	d103      	bne.n	800cafc <xQueueReceive+0x138>
 800caf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cafc:	f001 fd62 	bl	800e5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb00:	1d3a      	adds	r2, r7, #4
 800cb02:	f107 0310 	add.w	r3, r7, #16
 800cb06:	4611      	mov	r1, r2
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f001 f897 	bl	800dc3c <xTaskCheckForTimeOut>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d123      	bne.n	800cb5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb16:	f000 fade 	bl	800d0d6 <prvIsQueueEmpty>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d017      	beq.n	800cb50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	3324      	adds	r3, #36	; 0x24
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	4611      	mov	r1, r2
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 ffeb 	bl	800db04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb30:	f000 fa7f 	bl	800d032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb34:	f000 fe0e 	bl	800d754 <xTaskResumeAll>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d189      	bne.n	800ca52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cb3e:	4b10      	ldr	r3, [pc, #64]	; (800cb80 <xQueueReceive+0x1bc>)
 800cb40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	e780      	b.n	800ca52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cb50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb52:	f000 fa6e 	bl	800d032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb56:	f000 fdfd 	bl	800d754 <xTaskResumeAll>
 800cb5a:	e77a      	b.n	800ca52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cb5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb5e:	f000 fa68 	bl	800d032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb62:	f000 fdf7 	bl	800d754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb68:	f000 fab5 	bl	800d0d6 <prvIsQueueEmpty>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f43f af6f 	beq.w	800ca52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3730      	adds	r7, #48	; 0x30
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	e000ed04 	.word	0xe000ed04

0800cb84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08e      	sub	sp, #56	; 0x38
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cb96:	2300      	movs	r3, #0
 800cb98:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	623b      	str	r3, [r7, #32]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00a      	beq.n	800cbd4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	61fb      	str	r3, [r7, #28]
}
 800cbd0:	bf00      	nop
 800cbd2:	e7fe      	b.n	800cbd2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbd4:	f001 f97a 	bl	800decc <xTaskGetSchedulerState>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d102      	bne.n	800cbe4 <xQueueSemaphoreTake+0x60>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <xQueueSemaphoreTake+0x64>
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e000      	b.n	800cbea <xQueueSemaphoreTake+0x66>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	61bb      	str	r3, [r7, #24]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc04:	f001 fcae 	bl	800e564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d024      	beq.n	800cc5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	1e5a      	subs	r2, r3, #1
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d104      	bne.n	800cc2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cc24:	f001 fafa 	bl	800e21c <pvTaskIncrementMutexHeldCount>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00f      	beq.n	800cc56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	3310      	adds	r3, #16
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 ff86 	bl	800db4c <xTaskRemoveFromEventList>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d007      	beq.n	800cc56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cc46:	4b54      	ldr	r3, [pc, #336]	; (800cd98 <xQueueSemaphoreTake+0x214>)
 800cc48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cc56:	f001 fcb5 	bl	800e5c4 <vPortExitCritical>
				return pdPASS;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e097      	b.n	800cd8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d111      	bne.n	800cc88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00a      	beq.n	800cc80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	617b      	str	r3, [r7, #20]
}
 800cc7c:	bf00      	nop
 800cc7e:	e7fe      	b.n	800cc7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cc80:	f001 fca0 	bl	800e5c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cc84:	2300      	movs	r3, #0
 800cc86:	e082      	b.n	800cd8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc8e:	f107 030c 	add.w	r3, r7, #12
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 ffbc 	bl	800dc10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc9c:	f001 fc92 	bl	800e5c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cca0:	f000 fd4a 	bl	800d738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cca4:	f001 fc5e 	bl	800e564 <vPortEnterCritical>
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccae:	b25b      	sxtb	r3, r3
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d103      	bne.n	800ccbe <xQueueSemaphoreTake+0x13a>
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccc4:	b25b      	sxtb	r3, r3
 800ccc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccca:	d103      	bne.n	800ccd4 <xQueueSemaphoreTake+0x150>
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccd4:	f001 fc76 	bl	800e5c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccd8:	463a      	mov	r2, r7
 800ccda:	f107 030c 	add.w	r3, r7, #12
 800ccde:	4611      	mov	r1, r2
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 ffab 	bl	800dc3c <xTaskCheckForTimeOut>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d132      	bne.n	800cd52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ccec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccee:	f000 f9f2 	bl	800d0d6 <prvIsQueueEmpty>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d026      	beq.n	800cd46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d109      	bne.n	800cd14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cd00:	f001 fc30 	bl	800e564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f001 f8fd 	bl	800df08 <xTaskPriorityInherit>
 800cd0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cd10:	f001 fc58 	bl	800e5c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	3324      	adds	r3, #36	; 0x24
 800cd18:	683a      	ldr	r2, [r7, #0]
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fef1 	bl	800db04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd24:	f000 f985 	bl	800d032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cd28:	f000 fd14 	bl	800d754 <xTaskResumeAll>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f47f af68 	bne.w	800cc04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cd34:	4b18      	ldr	r3, [pc, #96]	; (800cd98 <xQueueSemaphoreTake+0x214>)
 800cd36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd3a:	601a      	str	r2, [r3, #0]
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	e75e      	b.n	800cc04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cd46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd48:	f000 f973 	bl	800d032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd4c:	f000 fd02 	bl	800d754 <xTaskResumeAll>
 800cd50:	e758      	b.n	800cc04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cd52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd54:	f000 f96d 	bl	800d032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd58:	f000 fcfc 	bl	800d754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd5e:	f000 f9ba 	bl	800d0d6 <prvIsQueueEmpty>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f43f af4d 	beq.w	800cc04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00d      	beq.n	800cd8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cd70:	f001 fbf8 	bl	800e564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cd74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd76:	f000 f8b4 	bl	800cee2 <prvGetDisinheritPriorityAfterTimeout>
 800cd7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd82:	4618      	mov	r0, r3
 800cd84:	f001 f9bc 	bl	800e100 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cd88:	f001 fc1c 	bl	800e5c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cd8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3738      	adds	r7, #56	; 0x38
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	e000ed04 	.word	0xe000ed04

0800cd9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b08e      	sub	sp, #56	; 0x38
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb6:	f383 8811 	msr	BASEPRI, r3
 800cdba:	f3bf 8f6f 	isb	sy
 800cdbe:	f3bf 8f4f 	dsb	sy
 800cdc2:	623b      	str	r3, [r7, #32]
}
 800cdc4:	bf00      	nop
 800cdc6:	e7fe      	b.n	800cdc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d103      	bne.n	800cdd6 <xQueueReceiveFromISR+0x3a>
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <xQueueReceiveFromISR+0x3e>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e000      	b.n	800cddc <xQueueReceiveFromISR+0x40>
 800cdda:	2300      	movs	r3, #0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10a      	bne.n	800cdf6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	61fb      	str	r3, [r7, #28]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdf6:	f001 fc97 	bl	800e728 <vPortValidateInterruptPriority>
	__asm volatile
 800cdfa:	f3ef 8211 	mrs	r2, BASEPRI
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	61ba      	str	r2, [r7, #24]
 800ce10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ce12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d02f      	beq.n	800ce82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce2c:	68b9      	ldr	r1, [r7, #8]
 800ce2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce30:	f000 f8d9 	bl	800cfe6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	1e5a      	subs	r2, r3, #1
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ce3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ce40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce44:	d112      	bne.n	800ce6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d016      	beq.n	800ce7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	3310      	adds	r3, #16
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 fe7a 	bl	800db4c <xTaskRemoveFromEventList>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00e      	beq.n	800ce7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00b      	beq.n	800ce7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	e007      	b.n	800ce7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ce6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce70:	3301      	adds	r3, #1
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	b25a      	sxtb	r2, r3
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce80:	e001      	b.n	800ce86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	637b      	str	r3, [r7, #52]	; 0x34
 800ce86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f383 8811 	msr	BASEPRI, r3
}
 800ce90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3738      	adds	r7, #56	; 0x38
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10a      	bne.n	800cec4 <vQueueDelete+0x28>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	60bb      	str	r3, [r7, #8]
}
 800cec0:	bf00      	nop
 800cec2:	e7fe      	b.n	800cec2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 f935 	bl	800d134 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f001 fd33 	bl	800e940 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ceda:	bf00      	nop
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cee2:	b480      	push	{r7}
 800cee4:	b085      	sub	sp, #20
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d006      	beq.n	800cf00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f1c3 0307 	rsb	r3, r3, #7
 800cefc:	60fb      	str	r3, [r7, #12]
 800cefe:	e001      	b.n	800cf04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cf00:	2300      	movs	r3, #0
 800cf02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cf04:	68fb      	ldr	r3, [r7, #12]
	}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr

0800cf12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b086      	sub	sp, #24
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	60b9      	str	r1, [r7, #8]
 800cf1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10d      	bne.n	800cf4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d14d      	bne.n	800cfd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f001 f859 	bl	800dff4 <xTaskPriorityDisinherit>
 800cf42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	609a      	str	r2, [r3, #8]
 800cf4a:	e043      	b.n	800cfd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d119      	bne.n	800cf86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6858      	ldr	r0, [r3, #4]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	68b9      	ldr	r1, [r7, #8]
 800cf5e:	f001 fe33 	bl	800ebc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	441a      	add	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d32b      	bcc.n	800cfd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	605a      	str	r2, [r3, #4]
 800cf84:	e026      	b.n	800cfd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	68d8      	ldr	r0, [r3, #12]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8e:	461a      	mov	r2, r3
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	f001 fe19 	bl	800ebc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	68da      	ldr	r2, [r3, #12]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf9e:	425b      	negs	r3, r3
 800cfa0:	441a      	add	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d207      	bcs.n	800cfc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	689a      	ldr	r2, [r3, #8]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfba:	425b      	negs	r3, r3
 800cfbc:	441a      	add	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d105      	bne.n	800cfd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cfdc:	697b      	ldr	r3, [r7, #20]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d018      	beq.n	800d02a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d000:	441a      	add	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68da      	ldr	r2, [r3, #12]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d303      	bcc.n	800d01a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68d9      	ldr	r1, [r3, #12]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	461a      	mov	r2, r3
 800d024:	6838      	ldr	r0, [r7, #0]
 800d026:	f001 fdcf 	bl	800ebc8 <memcpy>
	}
}
 800d02a:	bf00      	nop
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d03a:	f001 fa93 	bl	800e564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d046:	e011      	b.n	800d06c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d012      	beq.n	800d076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	3324      	adds	r3, #36	; 0x24
 800d054:	4618      	mov	r0, r3
 800d056:	f000 fd79 	bl	800db4c <xTaskRemoveFromEventList>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d060:	f000 fe4e 	bl	800dd00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d064:	7bfb      	ldrb	r3, [r7, #15]
 800d066:	3b01      	subs	r3, #1
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dce9      	bgt.n	800d048 <prvUnlockQueue+0x16>
 800d074:	e000      	b.n	800d078 <prvUnlockQueue+0x46>
					break;
 800d076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	22ff      	movs	r2, #255	; 0xff
 800d07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d080:	f001 faa0 	bl	800e5c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d084:	f001 fa6e 	bl	800e564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d08e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d090:	e011      	b.n	800d0b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d012      	beq.n	800d0c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	3310      	adds	r3, #16
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 fd54 	bl	800db4c <xTaskRemoveFromEventList>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d001      	beq.n	800d0ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d0aa:	f000 fe29 	bl	800dd00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d0ae:	7bbb      	ldrb	r3, [r7, #14]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dce9      	bgt.n	800d092 <prvUnlockQueue+0x60>
 800d0be:	e000      	b.n	800d0c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d0c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	22ff      	movs	r2, #255	; 0xff
 800d0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d0ca:	f001 fa7b 	bl	800e5c4 <vPortExitCritical>
}
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0de:	f001 fa41 	bl	800e564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d102      	bne.n	800d0f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e001      	b.n	800d0f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0f4:	f001 fa66 	bl	800e5c4 <vPortExitCritical>

	return xReturn;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d10a:	f001 fa2b 	bl	800e564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d116:	429a      	cmp	r2, r3
 800d118:	d102      	bne.n	800d120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d11a:	2301      	movs	r3, #1
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	e001      	b.n	800d124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d120:	2300      	movs	r3, #0
 800d122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d124:	f001 fa4e 	bl	800e5c4 <vPortExitCritical>

	return xReturn;
 800d128:	68fb      	ldr	r3, [r7, #12]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d13c:	2300      	movs	r3, #0
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	e016      	b.n	800d170 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d142:	4a10      	ldr	r2, [pc, #64]	; (800d184 <vQueueUnregisterQueue+0x50>)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	4413      	add	r3, r2
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d10b      	bne.n	800d16a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d152:	4a0c      	ldr	r2, [pc, #48]	; (800d184 <vQueueUnregisterQueue+0x50>)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2100      	movs	r1, #0
 800d158:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d15c:	4a09      	ldr	r2, [pc, #36]	; (800d184 <vQueueUnregisterQueue+0x50>)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	4413      	add	r3, r2
 800d164:	2200      	movs	r2, #0
 800d166:	605a      	str	r2, [r3, #4]
				break;
 800d168:	e006      	b.n	800d178 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	3301      	adds	r3, #1
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b07      	cmp	r3, #7
 800d174:	d9e5      	bls.n	800d142 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d176:	bf00      	nop
 800d178:	bf00      	nop
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	200009e4 	.word	0x200009e4

0800d188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b08e      	sub	sp, #56	; 0x38
 800d18c:	af04      	add	r7, sp, #16
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10a      	bne.n	800d1b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	623b      	str	r3, [r7, #32]
}
 800d1ae:	bf00      	nop
 800d1b0:	e7fe      	b.n	800d1b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10a      	bne.n	800d1ce <xTaskCreateStatic+0x46>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	61fb      	str	r3, [r7, #28]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1ce:	23b4      	movs	r3, #180	; 0xb4
 800d1d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	2bb4      	cmp	r3, #180	; 0xb4
 800d1d6:	d00a      	beq.n	800d1ee <xTaskCreateStatic+0x66>
	__asm volatile
 800d1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1dc:	f383 8811 	msr	BASEPRI, r3
 800d1e0:	f3bf 8f6f 	isb	sy
 800d1e4:	f3bf 8f4f 	dsb	sy
 800d1e8:	61bb      	str	r3, [r7, #24]
}
 800d1ea:	bf00      	nop
 800d1ec:	e7fe      	b.n	800d1ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d01e      	beq.n	800d234 <xTaskCreateStatic+0xac>
 800d1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01b      	beq.n	800d234 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d204:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d208:	2202      	movs	r2, #2
 800d20a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d20e:	2300      	movs	r3, #0
 800d210:	9303      	str	r3, [sp, #12]
 800d212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d214:	9302      	str	r3, [sp, #8]
 800d216:	f107 0314 	add.w	r3, r7, #20
 800d21a:	9301      	str	r3, [sp, #4]
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	68b9      	ldr	r1, [r7, #8]
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f000 f850 	bl	800d2cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d22c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d22e:	f000 f8eb 	bl	800d408 <prvAddNewTaskToReadyList>
 800d232:	e001      	b.n	800d238 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d234:	2300      	movs	r3, #0
 800d236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d238:	697b      	ldr	r3, [r7, #20]
	}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3728      	adds	r7, #40	; 0x28
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d242:	b580      	push	{r7, lr}
 800d244:	b08c      	sub	sp, #48	; 0x30
 800d246:	af04      	add	r7, sp, #16
 800d248:	60f8      	str	r0, [r7, #12]
 800d24a:	60b9      	str	r1, [r7, #8]
 800d24c:	603b      	str	r3, [r7, #0]
 800d24e:	4613      	mov	r3, r2
 800d250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d252:	88fb      	ldrh	r3, [r7, #6]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	4618      	mov	r0, r3
 800d258:	f001 faa6 	bl	800e7a8 <pvPortMalloc>
 800d25c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00e      	beq.n	800d282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d264:	20b4      	movs	r0, #180	; 0xb4
 800d266:	f001 fa9f 	bl	800e7a8 <pvPortMalloc>
 800d26a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	697a      	ldr	r2, [r7, #20]
 800d276:	631a      	str	r2, [r3, #48]	; 0x30
 800d278:	e005      	b.n	800d286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d27a:	6978      	ldr	r0, [r7, #20]
 800d27c:	f001 fb60 	bl	800e940 <vPortFree>
 800d280:	e001      	b.n	800d286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d017      	beq.n	800d2bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d294:	88fa      	ldrh	r2, [r7, #6]
 800d296:	2300      	movs	r3, #0
 800d298:	9303      	str	r3, [sp, #12]
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	9302      	str	r3, [sp, #8]
 800d29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	68b9      	ldr	r1, [r7, #8]
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f000 f80e 	bl	800d2cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2b0:	69f8      	ldr	r0, [r7, #28]
 800d2b2:	f000 f8a9 	bl	800d408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	61bb      	str	r3, [r7, #24]
 800d2ba:	e002      	b.n	800d2c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2c2:	69bb      	ldr	r3, [r7, #24]
	}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3720      	adds	r7, #32
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b088      	sub	sp, #32
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
 800d2d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	f023 0307 	bic.w	r3, r3, #7
 800d2f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00a      	beq.n	800d314 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	617b      	str	r3, [r7, #20]
}
 800d310:	bf00      	nop
 800d312:	e7fe      	b.n	800d312 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d01f      	beq.n	800d35a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d31a:	2300      	movs	r3, #0
 800d31c:	61fb      	str	r3, [r7, #28]
 800d31e:	e012      	b.n	800d346 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	4413      	add	r3, r2
 800d326:	7819      	ldrb	r1, [r3, #0]
 800d328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	4413      	add	r3, r2
 800d32e:	3334      	adds	r3, #52	; 0x34
 800d330:	460a      	mov	r2, r1
 800d332:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	4413      	add	r3, r2
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d006      	beq.n	800d34e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	3301      	adds	r3, #1
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	2b0f      	cmp	r3, #15
 800d34a:	d9e9      	bls.n	800d320 <prvInitialiseNewTask+0x54>
 800d34c:	e000      	b.n	800d350 <prvInitialiseNewTask+0x84>
			{
				break;
 800d34e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d358:	e003      	b.n	800d362 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35c:	2200      	movs	r2, #0
 800d35e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	2b06      	cmp	r3, #6
 800d366:	d901      	bls.n	800d36c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d368:	2306      	movs	r3, #6
 800d36a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d370:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d376:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	2200      	movs	r2, #0
 800d37c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	3304      	adds	r3, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe ff2a 	bl	800c1dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38a:	3318      	adds	r3, #24
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fe ff25 	bl	800c1dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d396:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	f1c3 0207 	rsb	r2, r3, #7
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ba:	334c      	adds	r3, #76	; 0x4c
 800d3bc:	2260      	movs	r2, #96	; 0x60
 800d3be:	2100      	movs	r1, #0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f001 fc0f 	bl	800ebe4 <memset>
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c8:	4a0c      	ldr	r2, [pc, #48]	; (800d3fc <prvInitialiseNewTask+0x130>)
 800d3ca:	651a      	str	r2, [r3, #80]	; 0x50
 800d3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ce:	4a0c      	ldr	r2, [pc, #48]	; (800d400 <prvInitialiseNewTask+0x134>)
 800d3d0:	655a      	str	r2, [r3, #84]	; 0x54
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	4a0b      	ldr	r2, [pc, #44]	; (800d404 <prvInitialiseNewTask+0x138>)
 800d3d6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3d8:	683a      	ldr	r2, [r7, #0]
 800d3da:	68f9      	ldr	r1, [r7, #12]
 800d3dc:	69b8      	ldr	r0, [r7, #24]
 800d3de:	f000 ff97 	bl	800e310 <pxPortInitialiseStack>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3f4:	bf00      	nop
 800d3f6:	3720      	adds	r7, #32
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	0800f214 	.word	0x0800f214
 800d400:	0800f234 	.word	0x0800f234
 800d404:	0800f1f4 	.word	0x0800f1f4

0800d408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d410:	f001 f8a8 	bl	800e564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d414:	4b2a      	ldr	r3, [pc, #168]	; (800d4c0 <prvAddNewTaskToReadyList+0xb8>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	3301      	adds	r3, #1
 800d41a:	4a29      	ldr	r2, [pc, #164]	; (800d4c0 <prvAddNewTaskToReadyList+0xb8>)
 800d41c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d41e:	4b29      	ldr	r3, [pc, #164]	; (800d4c4 <prvAddNewTaskToReadyList+0xbc>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d109      	bne.n	800d43a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d426:	4a27      	ldr	r2, [pc, #156]	; (800d4c4 <prvAddNewTaskToReadyList+0xbc>)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d42c:	4b24      	ldr	r3, [pc, #144]	; (800d4c0 <prvAddNewTaskToReadyList+0xb8>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d110      	bne.n	800d456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d434:	f000 fc88 	bl	800dd48 <prvInitialiseTaskLists>
 800d438:	e00d      	b.n	800d456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d43a:	4b23      	ldr	r3, [pc, #140]	; (800d4c8 <prvAddNewTaskToReadyList+0xc0>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d109      	bne.n	800d456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d442:	4b20      	ldr	r3, [pc, #128]	; (800d4c4 <prvAddNewTaskToReadyList+0xbc>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d802      	bhi.n	800d456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d450:	4a1c      	ldr	r2, [pc, #112]	; (800d4c4 <prvAddNewTaskToReadyList+0xbc>)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d456:	4b1d      	ldr	r3, [pc, #116]	; (800d4cc <prvAddNewTaskToReadyList+0xc4>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3301      	adds	r3, #1
 800d45c:	4a1b      	ldr	r2, [pc, #108]	; (800d4cc <prvAddNewTaskToReadyList+0xc4>)
 800d45e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	2201      	movs	r2, #1
 800d466:	409a      	lsls	r2, r3
 800d468:	4b19      	ldr	r3, [pc, #100]	; (800d4d0 <prvAddNewTaskToReadyList+0xc8>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	4a18      	ldr	r2, [pc, #96]	; (800d4d0 <prvAddNewTaskToReadyList+0xc8>)
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d476:	4613      	mov	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4a15      	ldr	r2, [pc, #84]	; (800d4d4 <prvAddNewTaskToReadyList+0xcc>)
 800d480:	441a      	add	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3304      	adds	r3, #4
 800d486:	4619      	mov	r1, r3
 800d488:	4610      	mov	r0, r2
 800d48a:	f7fe feb4 	bl	800c1f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d48e:	f001 f899 	bl	800e5c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d492:	4b0d      	ldr	r3, [pc, #52]	; (800d4c8 <prvAddNewTaskToReadyList+0xc0>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d00e      	beq.n	800d4b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d49a:	4b0a      	ldr	r3, [pc, #40]	; (800d4c4 <prvAddNewTaskToReadyList+0xbc>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d207      	bcs.n	800d4b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4a8:	4b0b      	ldr	r3, [pc, #44]	; (800d4d8 <prvAddNewTaskToReadyList+0xd0>)
 800d4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4b8:	bf00      	nop
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	20000b24 	.word	0x20000b24
 800d4c4:	20000a24 	.word	0x20000a24
 800d4c8:	20000b30 	.word	0x20000b30
 800d4cc:	20000b40 	.word	0x20000b40
 800d4d0:	20000b2c 	.word	0x20000b2c
 800d4d4:	20000a28 	.word	0x20000a28
 800d4d8:	e000ed04 	.word	0xe000ed04

0800d4dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d4e4:	f001 f83e 	bl	800e564 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d102      	bne.n	800d4f4 <vTaskDelete+0x18>
 800d4ee:	4b39      	ldr	r3, [pc, #228]	; (800d5d4 <vTaskDelete+0xf8>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	e000      	b.n	800d4f6 <vTaskDelete+0x1a>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe fed7 	bl	800c2b0 <uxListRemove>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d115      	bne.n	800d534 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50c:	4932      	ldr	r1, [pc, #200]	; (800d5d8 <vTaskDelete+0xfc>)
 800d50e:	4613      	mov	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	440b      	add	r3, r1
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10a      	bne.n	800d534 <vTaskDelete+0x58>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d522:	2201      	movs	r2, #1
 800d524:	fa02 f303 	lsl.w	r3, r2, r3
 800d528:	43da      	mvns	r2, r3
 800d52a:	4b2c      	ldr	r3, [pc, #176]	; (800d5dc <vTaskDelete+0x100>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4013      	ands	r3, r2
 800d530:	4a2a      	ldr	r2, [pc, #168]	; (800d5dc <vTaskDelete+0x100>)
 800d532:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d004      	beq.n	800d546 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	3318      	adds	r3, #24
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe feb5 	bl	800c2b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d546:	4b26      	ldr	r3, [pc, #152]	; (800d5e0 <vTaskDelete+0x104>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	3301      	adds	r3, #1
 800d54c:	4a24      	ldr	r2, [pc, #144]	; (800d5e0 <vTaskDelete+0x104>)
 800d54e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d550:	4b20      	ldr	r3, [pc, #128]	; (800d5d4 <vTaskDelete+0xf8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	429a      	cmp	r2, r3
 800d558:	d10b      	bne.n	800d572 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3304      	adds	r3, #4
 800d55e:	4619      	mov	r1, r3
 800d560:	4820      	ldr	r0, [pc, #128]	; (800d5e4 <vTaskDelete+0x108>)
 800d562:	f7fe fe48 	bl	800c1f6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d566:	4b20      	ldr	r3, [pc, #128]	; (800d5e8 <vTaskDelete+0x10c>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	3301      	adds	r3, #1
 800d56c:	4a1e      	ldr	r2, [pc, #120]	; (800d5e8 <vTaskDelete+0x10c>)
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	e009      	b.n	800d586 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d572:	4b1e      	ldr	r3, [pc, #120]	; (800d5ec <vTaskDelete+0x110>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3b01      	subs	r3, #1
 800d578:	4a1c      	ldr	r2, [pc, #112]	; (800d5ec <vTaskDelete+0x110>)
 800d57a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 fc51 	bl	800de24 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d582:	f000 fc83 	bl	800de8c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d586:	f001 f81d 	bl	800e5c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d58a:	4b19      	ldr	r3, [pc, #100]	; (800d5f0 <vTaskDelete+0x114>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d01b      	beq.n	800d5ca <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800d592:	4b10      	ldr	r3, [pc, #64]	; (800d5d4 <vTaskDelete+0xf8>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d116      	bne.n	800d5ca <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d59c:	4b15      	ldr	r3, [pc, #84]	; (800d5f4 <vTaskDelete+0x118>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00a      	beq.n	800d5ba <vTaskDelete+0xde>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	60bb      	str	r3, [r7, #8]
}
 800d5b6:	bf00      	nop
 800d5b8:	e7fe      	b.n	800d5b8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800d5ba:	4b0f      	ldr	r3, [pc, #60]	; (800d5f8 <vTaskDelete+0x11c>)
 800d5bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	f3bf 8f4f 	dsb	sy
 800d5c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5ca:	bf00      	nop
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000a24 	.word	0x20000a24
 800d5d8:	20000a28 	.word	0x20000a28
 800d5dc:	20000b2c 	.word	0x20000b2c
 800d5e0:	20000b40 	.word	0x20000b40
 800d5e4:	20000af8 	.word	0x20000af8
 800d5e8:	20000b0c 	.word	0x20000b0c
 800d5ec:	20000b24 	.word	0x20000b24
 800d5f0:	20000b30 	.word	0x20000b30
 800d5f4:	20000b4c 	.word	0x20000b4c
 800d5f8:	e000ed04 	.word	0xe000ed04

0800d5fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d017      	beq.n	800d63e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d60e:	4b13      	ldr	r3, [pc, #76]	; (800d65c <vTaskDelay+0x60>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00a      	beq.n	800d62c <vTaskDelay+0x30>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	60bb      	str	r3, [r7, #8]
}
 800d628:	bf00      	nop
 800d62a:	e7fe      	b.n	800d62a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d62c:	f000 f884 	bl	800d738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d630:	2100      	movs	r1, #0
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 fe06 	bl	800e244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d638:	f000 f88c 	bl	800d754 <xTaskResumeAll>
 800d63c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d107      	bne.n	800d654 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d644:	4b06      	ldr	r3, [pc, #24]	; (800d660 <vTaskDelay+0x64>)
 800d646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d64a:	601a      	str	r2, [r3, #0]
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d654:	bf00      	nop
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20000b4c 	.word	0x20000b4c
 800d660:	e000ed04 	.word	0xe000ed04

0800d664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08a      	sub	sp, #40	; 0x28
 800d668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d66e:	2300      	movs	r3, #0
 800d670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d672:	463a      	mov	r2, r7
 800d674:	1d39      	adds	r1, r7, #4
 800d676:	f107 0308 	add.w	r3, r7, #8
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7f2 ff42 	bl	8000504 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	9202      	str	r2, [sp, #8]
 800d688:	9301      	str	r3, [sp, #4]
 800d68a:	2300      	movs	r3, #0
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	2300      	movs	r3, #0
 800d690:	460a      	mov	r2, r1
 800d692:	4921      	ldr	r1, [pc, #132]	; (800d718 <vTaskStartScheduler+0xb4>)
 800d694:	4821      	ldr	r0, [pc, #132]	; (800d71c <vTaskStartScheduler+0xb8>)
 800d696:	f7ff fd77 	bl	800d188 <xTaskCreateStatic>
 800d69a:	4603      	mov	r3, r0
 800d69c:	4a20      	ldr	r2, [pc, #128]	; (800d720 <vTaskStartScheduler+0xbc>)
 800d69e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d6a0:	4b1f      	ldr	r3, [pc, #124]	; (800d720 <vTaskStartScheduler+0xbc>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	617b      	str	r3, [r7, #20]
 800d6ac:	e001      	b.n	800d6b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d11b      	bne.n	800d6f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	613b      	str	r3, [r7, #16]
}
 800d6ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d6cc:	4b15      	ldr	r3, [pc, #84]	; (800d724 <vTaskStartScheduler+0xc0>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	334c      	adds	r3, #76	; 0x4c
 800d6d2:	4a15      	ldr	r2, [pc, #84]	; (800d728 <vTaskStartScheduler+0xc4>)
 800d6d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d6d6:	4b15      	ldr	r3, [pc, #84]	; (800d72c <vTaskStartScheduler+0xc8>)
 800d6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d6dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d6de:	4b14      	ldr	r3, [pc, #80]	; (800d730 <vTaskStartScheduler+0xcc>)
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d6e4:	4b13      	ldr	r3, [pc, #76]	; (800d734 <vTaskStartScheduler+0xd0>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d6ea:	f000 fe99 	bl	800e420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d6ee:	e00e      	b.n	800d70e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f6:	d10a      	bne.n	800d70e <vTaskStartScheduler+0xaa>
	__asm volatile
 800d6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fc:	f383 8811 	msr	BASEPRI, r3
 800d700:	f3bf 8f6f 	isb	sy
 800d704:	f3bf 8f4f 	dsb	sy
 800d708:	60fb      	str	r3, [r7, #12]
}
 800d70a:	bf00      	nop
 800d70c:	e7fe      	b.n	800d70c <vTaskStartScheduler+0xa8>
}
 800d70e:	bf00      	nop
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	0800f0e8 	.word	0x0800f0e8
 800d71c:	0800dd19 	.word	0x0800dd19
 800d720:	20000b48 	.word	0x20000b48
 800d724:	20000a24 	.word	0x20000a24
 800d728:	20000010 	.word	0x20000010
 800d72c:	20000b44 	.word	0x20000b44
 800d730:	20000b30 	.word	0x20000b30
 800d734:	20000b28 	.word	0x20000b28

0800d738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d738:	b480      	push	{r7}
 800d73a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d73c:	4b04      	ldr	r3, [pc, #16]	; (800d750 <vTaskSuspendAll+0x18>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3301      	adds	r3, #1
 800d742:	4a03      	ldr	r2, [pc, #12]	; (800d750 <vTaskSuspendAll+0x18>)
 800d744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d746:	bf00      	nop
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr
 800d750:	20000b4c 	.word	0x20000b4c

0800d754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d75e:	2300      	movs	r3, #0
 800d760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d762:	4b41      	ldr	r3, [pc, #260]	; (800d868 <xTaskResumeAll+0x114>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10a      	bne.n	800d780 <xTaskResumeAll+0x2c>
	__asm volatile
 800d76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76e:	f383 8811 	msr	BASEPRI, r3
 800d772:	f3bf 8f6f 	isb	sy
 800d776:	f3bf 8f4f 	dsb	sy
 800d77a:	603b      	str	r3, [r7, #0]
}
 800d77c:	bf00      	nop
 800d77e:	e7fe      	b.n	800d77e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d780:	f000 fef0 	bl	800e564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d784:	4b38      	ldr	r3, [pc, #224]	; (800d868 <xTaskResumeAll+0x114>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	3b01      	subs	r3, #1
 800d78a:	4a37      	ldr	r2, [pc, #220]	; (800d868 <xTaskResumeAll+0x114>)
 800d78c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d78e:	4b36      	ldr	r3, [pc, #216]	; (800d868 <xTaskResumeAll+0x114>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d161      	bne.n	800d85a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d796:	4b35      	ldr	r3, [pc, #212]	; (800d86c <xTaskResumeAll+0x118>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d05d      	beq.n	800d85a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d79e:	e02e      	b.n	800d7fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7a0:	4b33      	ldr	r3, [pc, #204]	; (800d870 <xTaskResumeAll+0x11c>)
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	3318      	adds	r3, #24
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fd7f 	bl	800c2b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7fe fd7a 	bl	800c2b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	409a      	lsls	r2, r3
 800d7c4:	4b2b      	ldr	r3, [pc, #172]	; (800d874 <xTaskResumeAll+0x120>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	4a2a      	ldr	r2, [pc, #168]	; (800d874 <xTaskResumeAll+0x120>)
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4413      	add	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	4a27      	ldr	r2, [pc, #156]	; (800d878 <xTaskResumeAll+0x124>)
 800d7dc:	441a      	add	r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3304      	adds	r3, #4
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	f7fe fd06 	bl	800c1f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ee:	4b23      	ldr	r3, [pc, #140]	; (800d87c <xTaskResumeAll+0x128>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d302      	bcc.n	800d7fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d7f8:	4b21      	ldr	r3, [pc, #132]	; (800d880 <xTaskResumeAll+0x12c>)
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7fe:	4b1c      	ldr	r3, [pc, #112]	; (800d870 <xTaskResumeAll+0x11c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1cc      	bne.n	800d7a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d001      	beq.n	800d810 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d80c:	f000 fb3e 	bl	800de8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d810:	4b1c      	ldr	r3, [pc, #112]	; (800d884 <xTaskResumeAll+0x130>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d010      	beq.n	800d83e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d81c:	f000 f858 	bl	800d8d0 <xTaskIncrementTick>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d826:	4b16      	ldr	r3, [pc, #88]	; (800d880 <xTaskResumeAll+0x12c>)
 800d828:	2201      	movs	r2, #1
 800d82a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	3b01      	subs	r3, #1
 800d830:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1f1      	bne.n	800d81c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d838:	4b12      	ldr	r3, [pc, #72]	; (800d884 <xTaskResumeAll+0x130>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d83e:	4b10      	ldr	r3, [pc, #64]	; (800d880 <xTaskResumeAll+0x12c>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d009      	beq.n	800d85a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d846:	2301      	movs	r3, #1
 800d848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d84a:	4b0f      	ldr	r3, [pc, #60]	; (800d888 <xTaskResumeAll+0x134>)
 800d84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d850:	601a      	str	r2, [r3, #0]
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d85a:	f000 feb3 	bl	800e5c4 <vPortExitCritical>

	return xAlreadyYielded;
 800d85e:	68bb      	ldr	r3, [r7, #8]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	20000b4c 	.word	0x20000b4c
 800d86c:	20000b24 	.word	0x20000b24
 800d870:	20000ae4 	.word	0x20000ae4
 800d874:	20000b2c 	.word	0x20000b2c
 800d878:	20000a28 	.word	0x20000a28
 800d87c:	20000a24 	.word	0x20000a24
 800d880:	20000b38 	.word	0x20000b38
 800d884:	20000b34 	.word	0x20000b34
 800d888:	e000ed04 	.word	0xe000ed04

0800d88c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d892:	4b05      	ldr	r3, [pc, #20]	; (800d8a8 <xTaskGetTickCount+0x1c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d898:	687b      	ldr	r3, [r7, #4]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	370c      	adds	r7, #12
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop
 800d8a8:	20000b28 	.word	0x20000b28

0800d8ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8b2:	f000 ff39 	bl	800e728 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d8ba:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <xTaskGetTickCountFromISR+0x20>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8c0:	683b      	ldr	r3, [r7, #0]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	20000b28 	.word	0x20000b28

0800d8d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8da:	4b4e      	ldr	r3, [pc, #312]	; (800da14 <xTaskIncrementTick+0x144>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f040 808e 	bne.w	800da00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d8e4:	4b4c      	ldr	r3, [pc, #304]	; (800da18 <xTaskIncrementTick+0x148>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d8ec:	4a4a      	ldr	r2, [pc, #296]	; (800da18 <xTaskIncrementTick+0x148>)
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d120      	bne.n	800d93a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d8f8:	4b48      	ldr	r3, [pc, #288]	; (800da1c <xTaskIncrementTick+0x14c>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00a      	beq.n	800d918 <xTaskIncrementTick+0x48>
	__asm volatile
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	603b      	str	r3, [r7, #0]
}
 800d914:	bf00      	nop
 800d916:	e7fe      	b.n	800d916 <xTaskIncrementTick+0x46>
 800d918:	4b40      	ldr	r3, [pc, #256]	; (800da1c <xTaskIncrementTick+0x14c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	60fb      	str	r3, [r7, #12]
 800d91e:	4b40      	ldr	r3, [pc, #256]	; (800da20 <xTaskIncrementTick+0x150>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a3e      	ldr	r2, [pc, #248]	; (800da1c <xTaskIncrementTick+0x14c>)
 800d924:	6013      	str	r3, [r2, #0]
 800d926:	4a3e      	ldr	r2, [pc, #248]	; (800da20 <xTaskIncrementTick+0x150>)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6013      	str	r3, [r2, #0]
 800d92c:	4b3d      	ldr	r3, [pc, #244]	; (800da24 <xTaskIncrementTick+0x154>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3301      	adds	r3, #1
 800d932:	4a3c      	ldr	r2, [pc, #240]	; (800da24 <xTaskIncrementTick+0x154>)
 800d934:	6013      	str	r3, [r2, #0]
 800d936:	f000 faa9 	bl	800de8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d93a:	4b3b      	ldr	r3, [pc, #236]	; (800da28 <xTaskIncrementTick+0x158>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	429a      	cmp	r2, r3
 800d942:	d348      	bcc.n	800d9d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d944:	4b35      	ldr	r3, [pc, #212]	; (800da1c <xTaskIncrementTick+0x14c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d104      	bne.n	800d958 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d94e:	4b36      	ldr	r3, [pc, #216]	; (800da28 <xTaskIncrementTick+0x158>)
 800d950:	f04f 32ff 	mov.w	r2, #4294967295
 800d954:	601a      	str	r2, [r3, #0]
					break;
 800d956:	e03e      	b.n	800d9d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d958:	4b30      	ldr	r3, [pc, #192]	; (800da1c <xTaskIncrementTick+0x14c>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d968:	693a      	ldr	r2, [r7, #16]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d203      	bcs.n	800d978 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d970:	4a2d      	ldr	r2, [pc, #180]	; (800da28 <xTaskIncrementTick+0x158>)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d976:	e02e      	b.n	800d9d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	3304      	adds	r3, #4
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fe fc97 	bl	800c2b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d986:	2b00      	cmp	r3, #0
 800d988:	d004      	beq.n	800d994 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	3318      	adds	r3, #24
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fe fc8e 	bl	800c2b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d998:	2201      	movs	r2, #1
 800d99a:	409a      	lsls	r2, r3
 800d99c:	4b23      	ldr	r3, [pc, #140]	; (800da2c <xTaskIncrementTick+0x15c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	4a22      	ldr	r2, [pc, #136]	; (800da2c <xTaskIncrementTick+0x15c>)
 800d9a4:	6013      	str	r3, [r2, #0]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	4a1f      	ldr	r2, [pc, #124]	; (800da30 <xTaskIncrementTick+0x160>)
 800d9b4:	441a      	add	r2, r3
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	4610      	mov	r0, r2
 800d9be:	f7fe fc1a 	bl	800c1f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c6:	4b1b      	ldr	r3, [pc, #108]	; (800da34 <xTaskIncrementTick+0x164>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d3b9      	bcc.n	800d944 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9d4:	e7b6      	b.n	800d944 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9d6:	4b17      	ldr	r3, [pc, #92]	; (800da34 <xTaskIncrementTick+0x164>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9dc:	4914      	ldr	r1, [pc, #80]	; (800da30 <xTaskIncrementTick+0x160>)
 800d9de:	4613      	mov	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	440b      	add	r3, r1
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d901      	bls.n	800d9f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d9f2:	4b11      	ldr	r3, [pc, #68]	; (800da38 <xTaskIncrementTick+0x168>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	617b      	str	r3, [r7, #20]
 800d9fe:	e004      	b.n	800da0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da00:	4b0e      	ldr	r3, [pc, #56]	; (800da3c <xTaskIncrementTick+0x16c>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	3301      	adds	r3, #1
 800da06:	4a0d      	ldr	r2, [pc, #52]	; (800da3c <xTaskIncrementTick+0x16c>)
 800da08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da0a:	697b      	ldr	r3, [r7, #20]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20000b4c 	.word	0x20000b4c
 800da18:	20000b28 	.word	0x20000b28
 800da1c:	20000adc 	.word	0x20000adc
 800da20:	20000ae0 	.word	0x20000ae0
 800da24:	20000b3c 	.word	0x20000b3c
 800da28:	20000b44 	.word	0x20000b44
 800da2c:	20000b2c 	.word	0x20000b2c
 800da30:	20000a28 	.word	0x20000a28
 800da34:	20000a24 	.word	0x20000a24
 800da38:	20000b38 	.word	0x20000b38
 800da3c:	20000b34 	.word	0x20000b34

0800da40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da40:	b480      	push	{r7}
 800da42:	b087      	sub	sp, #28
 800da44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da46:	4b29      	ldr	r3, [pc, #164]	; (800daec <vTaskSwitchContext+0xac>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da4e:	4b28      	ldr	r3, [pc, #160]	; (800daf0 <vTaskSwitchContext+0xb0>)
 800da50:	2201      	movs	r2, #1
 800da52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da54:	e044      	b.n	800dae0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800da56:	4b26      	ldr	r3, [pc, #152]	; (800daf0 <vTaskSwitchContext+0xb0>)
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da5c:	4b25      	ldr	r3, [pc, #148]	; (800daf4 <vTaskSwitchContext+0xb4>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	fab3 f383 	clz	r3, r3
 800da68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800da6a:	7afb      	ldrb	r3, [r7, #11]
 800da6c:	f1c3 031f 	rsb	r3, r3, #31
 800da70:	617b      	str	r3, [r7, #20]
 800da72:	4921      	ldr	r1, [pc, #132]	; (800daf8 <vTaskSwitchContext+0xb8>)
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	4613      	mov	r3, r2
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	4413      	add	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	440b      	add	r3, r1
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10a      	bne.n	800da9c <vTaskSwitchContext+0x5c>
	__asm volatile
 800da86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	607b      	str	r3, [r7, #4]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <vTaskSwitchContext+0x5a>
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	4613      	mov	r3, r2
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	4413      	add	r3, r2
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	4a14      	ldr	r2, [pc, #80]	; (800daf8 <vTaskSwitchContext+0xb8>)
 800daa8:	4413      	add	r3, r2
 800daaa:	613b      	str	r3, [r7, #16]
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	685a      	ldr	r2, [r3, #4]
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	605a      	str	r2, [r3, #4]
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	3308      	adds	r3, #8
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d104      	bne.n	800dacc <vTaskSwitchContext+0x8c>
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	685a      	ldr	r2, [r3, #4]
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	605a      	str	r2, [r3, #4]
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	4a0a      	ldr	r2, [pc, #40]	; (800dafc <vTaskSwitchContext+0xbc>)
 800dad4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dad6:	4b09      	ldr	r3, [pc, #36]	; (800dafc <vTaskSwitchContext+0xbc>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	334c      	adds	r3, #76	; 0x4c
 800dadc:	4a08      	ldr	r2, [pc, #32]	; (800db00 <vTaskSwitchContext+0xc0>)
 800dade:	6013      	str	r3, [r2, #0]
}
 800dae0:	bf00      	nop
 800dae2:	371c      	adds	r7, #28
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr
 800daec:	20000b4c 	.word	0x20000b4c
 800daf0:	20000b38 	.word	0x20000b38
 800daf4:	20000b2c 	.word	0x20000b2c
 800daf8:	20000a28 	.word	0x20000a28
 800dafc:	20000a24 	.word	0x20000a24
 800db00:	20000010 	.word	0x20000010

0800db04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10a      	bne.n	800db2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	60fb      	str	r3, [r7, #12]
}
 800db26:	bf00      	nop
 800db28:	e7fe      	b.n	800db28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db2a:	4b07      	ldr	r3, [pc, #28]	; (800db48 <vTaskPlaceOnEventList+0x44>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	3318      	adds	r3, #24
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fe fb83 	bl	800c23e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db38:	2101      	movs	r1, #1
 800db3a:	6838      	ldr	r0, [r7, #0]
 800db3c:	f000 fb82 	bl	800e244 <prvAddCurrentTaskToDelayedList>
}
 800db40:	bf00      	nop
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20000a24 	.word	0x20000a24

0800db4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b086      	sub	sp, #24
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10a      	bne.n	800db78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	60fb      	str	r3, [r7, #12]
}
 800db74:	bf00      	nop
 800db76:	e7fe      	b.n	800db76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	3318      	adds	r3, #24
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fe fb97 	bl	800c2b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db82:	4b1d      	ldr	r3, [pc, #116]	; (800dbf8 <xTaskRemoveFromEventList+0xac>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d11c      	bne.n	800dbc4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	3304      	adds	r3, #4
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fe fb8e 	bl	800c2b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	2201      	movs	r2, #1
 800db9a:	409a      	lsls	r2, r3
 800db9c:	4b17      	ldr	r3, [pc, #92]	; (800dbfc <xTaskRemoveFromEventList+0xb0>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	4a16      	ldr	r2, [pc, #88]	; (800dbfc <xTaskRemoveFromEventList+0xb0>)
 800dba4:	6013      	str	r3, [r2, #0]
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbaa:	4613      	mov	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	4a13      	ldr	r2, [pc, #76]	; (800dc00 <xTaskRemoveFromEventList+0xb4>)
 800dbb4:	441a      	add	r2, r3
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	4619      	mov	r1, r3
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	f7fe fb1a 	bl	800c1f6 <vListInsertEnd>
 800dbc2:	e005      	b.n	800dbd0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	3318      	adds	r3, #24
 800dbc8:	4619      	mov	r1, r3
 800dbca:	480e      	ldr	r0, [pc, #56]	; (800dc04 <xTaskRemoveFromEventList+0xb8>)
 800dbcc:	f7fe fb13 	bl	800c1f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd4:	4b0c      	ldr	r3, [pc, #48]	; (800dc08 <xTaskRemoveFromEventList+0xbc>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d905      	bls.n	800dbea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dbe2:	4b0a      	ldr	r3, [pc, #40]	; (800dc0c <xTaskRemoveFromEventList+0xc0>)
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	e001      	b.n	800dbee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dbea:	2300      	movs	r3, #0
 800dbec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dbee:	697b      	ldr	r3, [r7, #20]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20000b4c 	.word	0x20000b4c
 800dbfc:	20000b2c 	.word	0x20000b2c
 800dc00:	20000a28 	.word	0x20000a28
 800dc04:	20000ae4 	.word	0x20000ae4
 800dc08:	20000a24 	.word	0x20000a24
 800dc0c:	20000b38 	.word	0x20000b38

0800dc10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc18:	4b06      	ldr	r3, [pc, #24]	; (800dc34 <vTaskInternalSetTimeOutState+0x24>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc20:	4b05      	ldr	r3, [pc, #20]	; (800dc38 <vTaskInternalSetTimeOutState+0x28>)
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	605a      	str	r2, [r3, #4]
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr
 800dc34:	20000b3c 	.word	0x20000b3c
 800dc38:	20000b28 	.word	0x20000b28

0800dc3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10a      	bne.n	800dc62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc50:	f383 8811 	msr	BASEPRI, r3
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	613b      	str	r3, [r7, #16]
}
 800dc5e:	bf00      	nop
 800dc60:	e7fe      	b.n	800dc60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10a      	bne.n	800dc7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	60fb      	str	r3, [r7, #12]
}
 800dc7a:	bf00      	nop
 800dc7c:	e7fe      	b.n	800dc7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dc7e:	f000 fc71 	bl	800e564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc82:	4b1d      	ldr	r3, [pc, #116]	; (800dcf8 <xTaskCheckForTimeOut+0xbc>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc9a:	d102      	bne.n	800dca2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	61fb      	str	r3, [r7, #28]
 800dca0:	e023      	b.n	800dcea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	4b15      	ldr	r3, [pc, #84]	; (800dcfc <xTaskCheckForTimeOut+0xc0>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d007      	beq.n	800dcbe <xTaskCheckForTimeOut+0x82>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d302      	bcc.n	800dcbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	61fb      	str	r3, [r7, #28]
 800dcbc:	e015      	b.n	800dcea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	697a      	ldr	r2, [r7, #20]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d20b      	bcs.n	800dce0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	1ad2      	subs	r2, r2, r3
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f7ff ff9b 	bl	800dc10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	61fb      	str	r3, [r7, #28]
 800dcde:	e004      	b.n	800dcea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dce6:	2301      	movs	r3, #1
 800dce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dcea:	f000 fc6b 	bl	800e5c4 <vPortExitCritical>

	return xReturn;
 800dcee:	69fb      	ldr	r3, [r7, #28]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3720      	adds	r7, #32
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	20000b28 	.word	0x20000b28
 800dcfc:	20000b3c 	.word	0x20000b3c

0800dd00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd04:	4b03      	ldr	r3, [pc, #12]	; (800dd14 <vTaskMissedYield+0x14>)
 800dd06:	2201      	movs	r2, #1
 800dd08:	601a      	str	r2, [r3, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	20000b38 	.word	0x20000b38

0800dd18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd20:	f000 f852 	bl	800ddc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd24:	4b06      	ldr	r3, [pc, #24]	; (800dd40 <prvIdleTask+0x28>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d9f9      	bls.n	800dd20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd2c:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <prvIdleTask+0x2c>)
 800dd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd3c:	e7f0      	b.n	800dd20 <prvIdleTask+0x8>
 800dd3e:	bf00      	nop
 800dd40:	20000a28 	.word	0x20000a28
 800dd44:	e000ed04 	.word	0xe000ed04

0800dd48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd4e:	2300      	movs	r3, #0
 800dd50:	607b      	str	r3, [r7, #4]
 800dd52:	e00c      	b.n	800dd6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	4613      	mov	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4413      	add	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4a12      	ldr	r2, [pc, #72]	; (800dda8 <prvInitialiseTaskLists+0x60>)
 800dd60:	4413      	add	r3, r2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fe fa1a 	bl	800c19c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	607b      	str	r3, [r7, #4]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2b06      	cmp	r3, #6
 800dd72:	d9ef      	bls.n	800dd54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd74:	480d      	ldr	r0, [pc, #52]	; (800ddac <prvInitialiseTaskLists+0x64>)
 800dd76:	f7fe fa11 	bl	800c19c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd7a:	480d      	ldr	r0, [pc, #52]	; (800ddb0 <prvInitialiseTaskLists+0x68>)
 800dd7c:	f7fe fa0e 	bl	800c19c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd80:	480c      	ldr	r0, [pc, #48]	; (800ddb4 <prvInitialiseTaskLists+0x6c>)
 800dd82:	f7fe fa0b 	bl	800c19c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd86:	480c      	ldr	r0, [pc, #48]	; (800ddb8 <prvInitialiseTaskLists+0x70>)
 800dd88:	f7fe fa08 	bl	800c19c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd8c:	480b      	ldr	r0, [pc, #44]	; (800ddbc <prvInitialiseTaskLists+0x74>)
 800dd8e:	f7fe fa05 	bl	800c19c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd92:	4b0b      	ldr	r3, [pc, #44]	; (800ddc0 <prvInitialiseTaskLists+0x78>)
 800dd94:	4a05      	ldr	r2, [pc, #20]	; (800ddac <prvInitialiseTaskLists+0x64>)
 800dd96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd98:	4b0a      	ldr	r3, [pc, #40]	; (800ddc4 <prvInitialiseTaskLists+0x7c>)
 800dd9a:	4a05      	ldr	r2, [pc, #20]	; (800ddb0 <prvInitialiseTaskLists+0x68>)
 800dd9c:	601a      	str	r2, [r3, #0]
}
 800dd9e:	bf00      	nop
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20000a28 	.word	0x20000a28
 800ddac:	20000ab4 	.word	0x20000ab4
 800ddb0:	20000ac8 	.word	0x20000ac8
 800ddb4:	20000ae4 	.word	0x20000ae4
 800ddb8:	20000af8 	.word	0x20000af8
 800ddbc:	20000b10 	.word	0x20000b10
 800ddc0:	20000adc 	.word	0x20000adc
 800ddc4:	20000ae0 	.word	0x20000ae0

0800ddc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddce:	e019      	b.n	800de04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ddd0:	f000 fbc8 	bl	800e564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddd4:	4b10      	ldr	r3, [pc, #64]	; (800de18 <prvCheckTasksWaitingTermination+0x50>)
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fe fa65 	bl	800c2b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dde6:	4b0d      	ldr	r3, [pc, #52]	; (800de1c <prvCheckTasksWaitingTermination+0x54>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3b01      	subs	r3, #1
 800ddec:	4a0b      	ldr	r2, [pc, #44]	; (800de1c <prvCheckTasksWaitingTermination+0x54>)
 800ddee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ddf0:	4b0b      	ldr	r3, [pc, #44]	; (800de20 <prvCheckTasksWaitingTermination+0x58>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	4a0a      	ldr	r2, [pc, #40]	; (800de20 <prvCheckTasksWaitingTermination+0x58>)
 800ddf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ddfa:	f000 fbe3 	bl	800e5c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f810 	bl	800de24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de04:	4b06      	ldr	r3, [pc, #24]	; (800de20 <prvCheckTasksWaitingTermination+0x58>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1e1      	bne.n	800ddd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20000af8 	.word	0x20000af8
 800de1c:	20000b24 	.word	0x20000b24
 800de20:	20000b0c 	.word	0x20000b0c

0800de24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	334c      	adds	r3, #76	; 0x4c
 800de30:	4618      	mov	r0, r3
 800de32:	f000 feed 	bl	800ec10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d108      	bne.n	800de52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de44:	4618      	mov	r0, r3
 800de46:	f000 fd7b 	bl	800e940 <vPortFree>
				vPortFree( pxTCB );
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fd78 	bl	800e940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de50:	e018      	b.n	800de84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d103      	bne.n	800de64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fd6f 	bl	800e940 <vPortFree>
	}
 800de62:	e00f      	b.n	800de84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	d00a      	beq.n	800de84 <prvDeleteTCB+0x60>
	__asm volatile
 800de6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de72:	f383 8811 	msr	BASEPRI, r3
 800de76:	f3bf 8f6f 	isb	sy
 800de7a:	f3bf 8f4f 	dsb	sy
 800de7e:	60fb      	str	r3, [r7, #12]
}
 800de80:	bf00      	nop
 800de82:	e7fe      	b.n	800de82 <prvDeleteTCB+0x5e>
	}
 800de84:	bf00      	nop
 800de86:	3710      	adds	r7, #16
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de92:	4b0c      	ldr	r3, [pc, #48]	; (800dec4 <prvResetNextTaskUnblockTime+0x38>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d104      	bne.n	800dea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de9c:	4b0a      	ldr	r3, [pc, #40]	; (800dec8 <prvResetNextTaskUnblockTime+0x3c>)
 800de9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dea4:	e008      	b.n	800deb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dea6:	4b07      	ldr	r3, [pc, #28]	; (800dec4 <prvResetNextTaskUnblockTime+0x38>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	4a04      	ldr	r2, [pc, #16]	; (800dec8 <prvResetNextTaskUnblockTime+0x3c>)
 800deb6:	6013      	str	r3, [r2, #0]
}
 800deb8:	bf00      	nop
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	20000adc 	.word	0x20000adc
 800dec8:	20000b44 	.word	0x20000b44

0800decc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ded2:	4b0b      	ldr	r3, [pc, #44]	; (800df00 <xTaskGetSchedulerState+0x34>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d102      	bne.n	800dee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800deda:	2301      	movs	r3, #1
 800dedc:	607b      	str	r3, [r7, #4]
 800dede:	e008      	b.n	800def2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dee0:	4b08      	ldr	r3, [pc, #32]	; (800df04 <xTaskGetSchedulerState+0x38>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d102      	bne.n	800deee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dee8:	2302      	movs	r3, #2
 800deea:	607b      	str	r3, [r7, #4]
 800deec:	e001      	b.n	800def2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800deee:	2300      	movs	r3, #0
 800def0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800def2:	687b      	ldr	r3, [r7, #4]
	}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	20000b30 	.word	0x20000b30
 800df04:	20000b4c 	.word	0x20000b4c

0800df08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800df14:	2300      	movs	r3, #0
 800df16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d05e      	beq.n	800dfdc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df22:	4b31      	ldr	r3, [pc, #196]	; (800dfe8 <xTaskPriorityInherit+0xe0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df28:	429a      	cmp	r2, r3
 800df2a:	d24e      	bcs.n	800dfca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	699b      	ldr	r3, [r3, #24]
 800df30:	2b00      	cmp	r3, #0
 800df32:	db06      	blt.n	800df42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df34:	4b2c      	ldr	r3, [pc, #176]	; (800dfe8 <xTaskPriorityInherit+0xe0>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3a:	f1c3 0207 	rsb	r2, r3, #7
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	6959      	ldr	r1, [r3, #20]
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	4a26      	ldr	r2, [pc, #152]	; (800dfec <xTaskPriorityInherit+0xe4>)
 800df54:	4413      	add	r3, r2
 800df56:	4299      	cmp	r1, r3
 800df58:	d12f      	bne.n	800dfba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	3304      	adds	r3, #4
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fe f9a6 	bl	800c2b0 <uxListRemove>
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10a      	bne.n	800df80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6e:	2201      	movs	r2, #1
 800df70:	fa02 f303 	lsl.w	r3, r2, r3
 800df74:	43da      	mvns	r2, r3
 800df76:	4b1e      	ldr	r3, [pc, #120]	; (800dff0 <xTaskPriorityInherit+0xe8>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4013      	ands	r3, r2
 800df7c:	4a1c      	ldr	r2, [pc, #112]	; (800dff0 <xTaskPriorityInherit+0xe8>)
 800df7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df80:	4b19      	ldr	r3, [pc, #100]	; (800dfe8 <xTaskPriorityInherit+0xe0>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8e:	2201      	movs	r2, #1
 800df90:	409a      	lsls	r2, r3
 800df92:	4b17      	ldr	r3, [pc, #92]	; (800dff0 <xTaskPriorityInherit+0xe8>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4313      	orrs	r3, r2
 800df98:	4a15      	ldr	r2, [pc, #84]	; (800dff0 <xTaskPriorityInherit+0xe8>)
 800df9a:	6013      	str	r3, [r2, #0]
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4a10      	ldr	r2, [pc, #64]	; (800dfec <xTaskPriorityInherit+0xe4>)
 800dfaa:	441a      	add	r2, r3
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	3304      	adds	r3, #4
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	f7fe f91f 	bl	800c1f6 <vListInsertEnd>
 800dfb8:	e004      	b.n	800dfc4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dfba:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <xTaskPriorityInherit+0xe0>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	60fb      	str	r3, [r7, #12]
 800dfc8:	e008      	b.n	800dfdc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfce:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <xTaskPriorityInherit+0xe0>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d201      	bcs.n	800dfdc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
	}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20000a24 	.word	0x20000a24
 800dfec:	20000a28 	.word	0x20000a28
 800dff0:	20000b2c 	.word	0x20000b2c

0800dff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e000:	2300      	movs	r3, #0
 800e002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d06e      	beq.n	800e0e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e00a:	4b3a      	ldr	r3, [pc, #232]	; (800e0f4 <xTaskPriorityDisinherit+0x100>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	693a      	ldr	r2, [r7, #16]
 800e010:	429a      	cmp	r2, r3
 800e012:	d00a      	beq.n	800e02a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	60fb      	str	r3, [r7, #12]
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10a      	bne.n	800e048 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	60bb      	str	r3, [r7, #8]
}
 800e044:	bf00      	nop
 800e046:	e7fe      	b.n	800e046 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e04c:	1e5a      	subs	r2, r3, #1
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d044      	beq.n	800e0e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e062:	2b00      	cmp	r3, #0
 800e064:	d140      	bne.n	800e0e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	3304      	adds	r3, #4
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe f920 	bl	800c2b0 <uxListRemove>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d115      	bne.n	800e0a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07a:	491f      	ldr	r1, [pc, #124]	; (800e0f8 <xTaskPriorityDisinherit+0x104>)
 800e07c:	4613      	mov	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	440b      	add	r3, r1
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10a      	bne.n	800e0a2 <xTaskPriorityDisinherit+0xae>
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e090:	2201      	movs	r2, #1
 800e092:	fa02 f303 	lsl.w	r3, r2, r3
 800e096:	43da      	mvns	r2, r3
 800e098:	4b18      	ldr	r3, [pc, #96]	; (800e0fc <xTaskPriorityDisinherit+0x108>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4013      	ands	r3, r2
 800e09e:	4a17      	ldr	r2, [pc, #92]	; (800e0fc <xTaskPriorityDisinherit+0x108>)
 800e0a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ae:	f1c3 0207 	rsb	r2, r3, #7
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	409a      	lsls	r2, r3
 800e0be:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <xTaskPriorityDisinherit+0x108>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	4a0d      	ldr	r2, [pc, #52]	; (800e0fc <xTaskPriorityDisinherit+0x108>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4a08      	ldr	r2, [pc, #32]	; (800e0f8 <xTaskPriorityDisinherit+0x104>)
 800e0d6:	441a      	add	r2, r3
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	3304      	adds	r3, #4
 800e0dc:	4619      	mov	r1, r3
 800e0de:	4610      	mov	r0, r2
 800e0e0:	f7fe f889 	bl	800c1f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0e8:	697b      	ldr	r3, [r7, #20]
	}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	20000a24 	.word	0x20000a24
 800e0f8:	20000a28 	.word	0x20000a28
 800e0fc:	20000b2c 	.word	0x20000b2c

0800e100 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e100:	b580      	push	{r7, lr}
 800e102:	b088      	sub	sp, #32
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e10e:	2301      	movs	r3, #1
 800e110:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d077      	beq.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10a      	bne.n	800e136 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	60fb      	str	r3, [r7, #12]
}
 800e132:	bf00      	nop
 800e134:	e7fe      	b.n	800e134 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e13a:	683a      	ldr	r2, [r7, #0]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d902      	bls.n	800e146 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	61fb      	str	r3, [r7, #28]
 800e144:	e002      	b.n	800e14c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e14a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e150:	69fa      	ldr	r2, [r7, #28]
 800e152:	429a      	cmp	r2, r3
 800e154:	d058      	beq.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e15a:	697a      	ldr	r2, [r7, #20]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d153      	bne.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e160:	4b2b      	ldr	r3, [pc, #172]	; (800e210 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	69ba      	ldr	r2, [r7, #24]
 800e166:	429a      	cmp	r2, r3
 800e168:	d10a      	bne.n	800e180 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	60bb      	str	r3, [r7, #8]
}
 800e17c:	bf00      	nop
 800e17e:	e7fe      	b.n	800e17e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	69fa      	ldr	r2, [r7, #28]
 800e18a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	2b00      	cmp	r3, #0
 800e192:	db04      	blt.n	800e19e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	f1c3 0207 	rsb	r2, r3, #7
 800e19a:	69bb      	ldr	r3, [r7, #24]
 800e19c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	6959      	ldr	r1, [r3, #20]
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4a19      	ldr	r2, [pc, #100]	; (800e214 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e1ae:	4413      	add	r3, r2
 800e1b0:	4299      	cmp	r1, r3
 800e1b2:	d129      	bne.n	800e208 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1b4:	69bb      	ldr	r3, [r7, #24]
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe f879 	bl	800c2b0 <uxListRemove>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10a      	bne.n	800e1da <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ce:	43da      	mvns	r2, r3
 800e1d0:	4b11      	ldr	r3, [pc, #68]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	4a10      	ldr	r2, [pc, #64]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e1d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1de:	2201      	movs	r2, #1
 800e1e0:	409a      	lsls	r2, r3
 800e1e2:	4b0d      	ldr	r3, [pc, #52]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	4a0b      	ldr	r2, [pc, #44]	; (800e218 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4a06      	ldr	r2, [pc, #24]	; (800e214 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e1fa:	441a      	add	r2, r3
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7fd fff7 	bl	800c1f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e208:	bf00      	nop
 800e20a:	3720      	adds	r7, #32
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	20000a24 	.word	0x20000a24
 800e214:	20000a28 	.word	0x20000a28
 800e218:	20000b2c 	.word	0x20000b2c

0800e21c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e21c:	b480      	push	{r7}
 800e21e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e220:	4b07      	ldr	r3, [pc, #28]	; (800e240 <pvTaskIncrementMutexHeldCount+0x24>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d004      	beq.n	800e232 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e228:	4b05      	ldr	r3, [pc, #20]	; (800e240 <pvTaskIncrementMutexHeldCount+0x24>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e22e:	3201      	adds	r2, #1
 800e230:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e232:	4b03      	ldr	r3, [pc, #12]	; (800e240 <pvTaskIncrementMutexHeldCount+0x24>)
 800e234:	681b      	ldr	r3, [r3, #0]
	}
 800e236:	4618      	mov	r0, r3
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr
 800e240:	20000a24 	.word	0x20000a24

0800e244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e24e:	4b29      	ldr	r3, [pc, #164]	; (800e2f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e254:	4b28      	ldr	r3, [pc, #160]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fe f828 	bl	800c2b0 <uxListRemove>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10b      	bne.n	800e27e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e266:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26c:	2201      	movs	r2, #1
 800e26e:	fa02 f303 	lsl.w	r3, r2, r3
 800e272:	43da      	mvns	r2, r3
 800e274:	4b21      	ldr	r3, [pc, #132]	; (800e2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4013      	ands	r3, r2
 800e27a:	4a20      	ldr	r2, [pc, #128]	; (800e2fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800e27c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e284:	d10a      	bne.n	800e29c <prvAddCurrentTaskToDelayedList+0x58>
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d007      	beq.n	800e29c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e28c:	4b1a      	ldr	r3, [pc, #104]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	3304      	adds	r3, #4
 800e292:	4619      	mov	r1, r3
 800e294:	481a      	ldr	r0, [pc, #104]	; (800e300 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e296:	f7fd ffae 	bl	800c1f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e29a:	e026      	b.n	800e2ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2a4:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d209      	bcs.n	800e2c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2b4:	4b13      	ldr	r3, [pc, #76]	; (800e304 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	4b0f      	ldr	r3, [pc, #60]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3304      	adds	r3, #4
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	f7fd ffbc 	bl	800c23e <vListInsert>
}
 800e2c6:	e010      	b.n	800e2ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	; (800e308 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	4b0a      	ldr	r3, [pc, #40]	; (800e2f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	f7fd ffb2 	bl	800c23e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2da:	4b0c      	ldr	r3, [pc, #48]	; (800e30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d202      	bcs.n	800e2ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e2e4:	4a09      	ldr	r2, [pc, #36]	; (800e30c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	6013      	str	r3, [r2, #0]
}
 800e2ea:	bf00      	nop
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	20000b28 	.word	0x20000b28
 800e2f8:	20000a24 	.word	0x20000a24
 800e2fc:	20000b2c 	.word	0x20000b2c
 800e300:	20000b10 	.word	0x20000b10
 800e304:	20000ae0 	.word	0x20000ae0
 800e308:	20000adc 	.word	0x20000adc
 800e30c:	20000b44 	.word	0x20000b44

0800e310 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	3b04      	subs	r3, #4
 800e320:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3b04      	subs	r3, #4
 800e32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	f023 0201 	bic.w	r2, r3, #1
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	3b04      	subs	r3, #4
 800e33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e340:	4a0c      	ldr	r2, [pc, #48]	; (800e374 <pxPortInitialiseStack+0x64>)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3b14      	subs	r3, #20
 800e34a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	3b04      	subs	r3, #4
 800e356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f06f 0202 	mvn.w	r2, #2
 800e35e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3b20      	subs	r3, #32
 800e364:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e366:	68fb      	ldr	r3, [r7, #12]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3714      	adds	r7, #20
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr
 800e374:	0800e379 	.word	0x0800e379

0800e378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e378:	b480      	push	{r7}
 800e37a:	b085      	sub	sp, #20
 800e37c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e382:	4b12      	ldr	r3, [pc, #72]	; (800e3cc <prvTaskExitError+0x54>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e38a:	d00a      	beq.n	800e3a2 <prvTaskExitError+0x2a>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	60fb      	str	r3, [r7, #12]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <prvTaskExitError+0x28>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	60bb      	str	r3, [r7, #8]
}
 800e3b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3b6:	bf00      	nop
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d0fc      	beq.n	800e3b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3be:	bf00      	nop
 800e3c0:	bf00      	nop
 800e3c2:	3714      	adds	r7, #20
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr
 800e3cc:	2000000c 	.word	0x2000000c

0800e3d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3d0:	4b07      	ldr	r3, [pc, #28]	; (800e3f0 <pxCurrentTCBConst2>)
 800e3d2:	6819      	ldr	r1, [r3, #0]
 800e3d4:	6808      	ldr	r0, [r1, #0]
 800e3d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3da:	f380 8809 	msr	PSP, r0
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f04f 0000 	mov.w	r0, #0
 800e3e6:	f380 8811 	msr	BASEPRI, r0
 800e3ea:	4770      	bx	lr
 800e3ec:	f3af 8000 	nop.w

0800e3f0 <pxCurrentTCBConst2>:
 800e3f0:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e3f4:	bf00      	nop
 800e3f6:	bf00      	nop

0800e3f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e3f8:	4808      	ldr	r0, [pc, #32]	; (800e41c <prvPortStartFirstTask+0x24>)
 800e3fa:	6800      	ldr	r0, [r0, #0]
 800e3fc:	6800      	ldr	r0, [r0, #0]
 800e3fe:	f380 8808 	msr	MSP, r0
 800e402:	f04f 0000 	mov.w	r0, #0
 800e406:	f380 8814 	msr	CONTROL, r0
 800e40a:	b662      	cpsie	i
 800e40c:	b661      	cpsie	f
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	df00      	svc	0
 800e418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e41a:	bf00      	nop
 800e41c:	e000ed08 	.word	0xe000ed08

0800e420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e426:	4b46      	ldr	r3, [pc, #280]	; (800e540 <xPortStartScheduler+0x120>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a46      	ldr	r2, [pc, #280]	; (800e544 <xPortStartScheduler+0x124>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d10a      	bne.n	800e446 <xPortStartScheduler+0x26>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	613b      	str	r3, [r7, #16]
}
 800e442:	bf00      	nop
 800e444:	e7fe      	b.n	800e444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e446:	4b3e      	ldr	r3, [pc, #248]	; (800e540 <xPortStartScheduler+0x120>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a3f      	ldr	r2, [pc, #252]	; (800e548 <xPortStartScheduler+0x128>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d10a      	bne.n	800e466 <xPortStartScheduler+0x46>
	__asm volatile
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	60fb      	str	r3, [r7, #12]
}
 800e462:	bf00      	nop
 800e464:	e7fe      	b.n	800e464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e466:	4b39      	ldr	r3, [pc, #228]	; (800e54c <xPortStartScheduler+0x12c>)
 800e468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	22ff      	movs	r2, #255	; 0xff
 800e476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e480:	78fb      	ldrb	r3, [r7, #3]
 800e482:	b2db      	uxtb	r3, r3
 800e484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	4b31      	ldr	r3, [pc, #196]	; (800e550 <xPortStartScheduler+0x130>)
 800e48c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e48e:	4b31      	ldr	r3, [pc, #196]	; (800e554 <xPortStartScheduler+0x134>)
 800e490:	2207      	movs	r2, #7
 800e492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e494:	e009      	b.n	800e4aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e496:	4b2f      	ldr	r3, [pc, #188]	; (800e554 <xPortStartScheduler+0x134>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	4a2d      	ldr	r2, [pc, #180]	; (800e554 <xPortStartScheduler+0x134>)
 800e49e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4a0:	78fb      	ldrb	r3, [r7, #3]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4aa:	78fb      	ldrb	r3, [r7, #3]
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b2:	2b80      	cmp	r3, #128	; 0x80
 800e4b4:	d0ef      	beq.n	800e496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4b6:	4b27      	ldr	r3, [pc, #156]	; (800e554 <xPortStartScheduler+0x134>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f1c3 0307 	rsb	r3, r3, #7
 800e4be:	2b04      	cmp	r3, #4
 800e4c0:	d00a      	beq.n	800e4d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	60bb      	str	r3, [r7, #8]
}
 800e4d4:	bf00      	nop
 800e4d6:	e7fe      	b.n	800e4d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4d8:	4b1e      	ldr	r3, [pc, #120]	; (800e554 <xPortStartScheduler+0x134>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	021b      	lsls	r3, r3, #8
 800e4de:	4a1d      	ldr	r2, [pc, #116]	; (800e554 <xPortStartScheduler+0x134>)
 800e4e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4e2:	4b1c      	ldr	r3, [pc, #112]	; (800e554 <xPortStartScheduler+0x134>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4ea:	4a1a      	ldr	r2, [pc, #104]	; (800e554 <xPortStartScheduler+0x134>)
 800e4ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e4f6:	4b18      	ldr	r3, [pc, #96]	; (800e558 <xPortStartScheduler+0x138>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	4a17      	ldr	r2, [pc, #92]	; (800e558 <xPortStartScheduler+0x138>)
 800e4fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e502:	4b15      	ldr	r3, [pc, #84]	; (800e558 <xPortStartScheduler+0x138>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a14      	ldr	r2, [pc, #80]	; (800e558 <xPortStartScheduler+0x138>)
 800e508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e50c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e50e:	f000 f8dd 	bl	800e6cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e512:	4b12      	ldr	r3, [pc, #72]	; (800e55c <xPortStartScheduler+0x13c>)
 800e514:	2200      	movs	r2, #0
 800e516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e518:	f000 f8fc 	bl	800e714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e51c:	4b10      	ldr	r3, [pc, #64]	; (800e560 <xPortStartScheduler+0x140>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a0f      	ldr	r2, [pc, #60]	; (800e560 <xPortStartScheduler+0x140>)
 800e522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e528:	f7ff ff66 	bl	800e3f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e52c:	f7ff fa88 	bl	800da40 <vTaskSwitchContext>
	prvTaskExitError();
 800e530:	f7ff ff22 	bl	800e378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3718      	adds	r7, #24
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	e000ed00 	.word	0xe000ed00
 800e544:	410fc271 	.word	0x410fc271
 800e548:	410fc270 	.word	0x410fc270
 800e54c:	e000e400 	.word	0xe000e400
 800e550:	20000b50 	.word	0x20000b50
 800e554:	20000b54 	.word	0x20000b54
 800e558:	e000ed20 	.word	0xe000ed20
 800e55c:	2000000c 	.word	0x2000000c
 800e560:	e000ef34 	.word	0xe000ef34

0800e564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	607b      	str	r3, [r7, #4]
}
 800e57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e57e:	4b0f      	ldr	r3, [pc, #60]	; (800e5bc <vPortEnterCritical+0x58>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	3301      	adds	r3, #1
 800e584:	4a0d      	ldr	r2, [pc, #52]	; (800e5bc <vPortEnterCritical+0x58>)
 800e586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e588:	4b0c      	ldr	r3, [pc, #48]	; (800e5bc <vPortEnterCritical+0x58>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d10f      	bne.n	800e5b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e590:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <vPortEnterCritical+0x5c>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00a      	beq.n	800e5b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	603b      	str	r3, [r7, #0]
}
 800e5ac:	bf00      	nop
 800e5ae:	e7fe      	b.n	800e5ae <vPortEnterCritical+0x4a>
	}
}
 800e5b0:	bf00      	nop
 800e5b2:	370c      	adds	r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr
 800e5bc:	2000000c 	.word	0x2000000c
 800e5c0:	e000ed04 	.word	0xe000ed04

0800e5c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5ca:	4b12      	ldr	r3, [pc, #72]	; (800e614 <vPortExitCritical+0x50>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d10a      	bne.n	800e5e8 <vPortExitCritical+0x24>
	__asm volatile
 800e5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	607b      	str	r3, [r7, #4]
}
 800e5e4:	bf00      	nop
 800e5e6:	e7fe      	b.n	800e5e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e5e8:	4b0a      	ldr	r3, [pc, #40]	; (800e614 <vPortExitCritical+0x50>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	4a09      	ldr	r2, [pc, #36]	; (800e614 <vPortExitCritical+0x50>)
 800e5f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e5f2:	4b08      	ldr	r3, [pc, #32]	; (800e614 <vPortExitCritical+0x50>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d105      	bne.n	800e606 <vPortExitCritical+0x42>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	f383 8811 	msr	BASEPRI, r3
}
 800e604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e606:	bf00      	nop
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	2000000c 	.word	0x2000000c
	...

0800e620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e620:	f3ef 8009 	mrs	r0, PSP
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	4b15      	ldr	r3, [pc, #84]	; (800e680 <pxCurrentTCBConst>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	f01e 0f10 	tst.w	lr, #16
 800e630:	bf08      	it	eq
 800e632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63a:	6010      	str	r0, [r2, #0]
 800e63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e644:	f380 8811 	msr	BASEPRI, r0
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f7ff f9f6 	bl	800da40 <vTaskSwitchContext>
 800e654:	f04f 0000 	mov.w	r0, #0
 800e658:	f380 8811 	msr	BASEPRI, r0
 800e65c:	bc09      	pop	{r0, r3}
 800e65e:	6819      	ldr	r1, [r3, #0]
 800e660:	6808      	ldr	r0, [r1, #0]
 800e662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e666:	f01e 0f10 	tst.w	lr, #16
 800e66a:	bf08      	it	eq
 800e66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e670:	f380 8809 	msr	PSP, r0
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	4770      	bx	lr
 800e67a:	bf00      	nop
 800e67c:	f3af 8000 	nop.w

0800e680 <pxCurrentTCBConst>:
 800e680:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop

0800e688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	607b      	str	r3, [r7, #4]
}
 800e6a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6a2:	f7ff f915 	bl	800d8d0 <xTaskIncrementTick>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d003      	beq.n	800e6b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6ac:	4b06      	ldr	r3, [pc, #24]	; (800e6c8 <SysTick_Handler+0x40>)
 800e6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6b2:	601a      	str	r2, [r3, #0]
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	f383 8811 	msr	BASEPRI, r3
}
 800e6be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6c0:	bf00      	nop
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	e000ed04 	.word	0xe000ed04

0800e6cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6d0:	4b0b      	ldr	r3, [pc, #44]	; (800e700 <vPortSetupTimerInterrupt+0x34>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6d6:	4b0b      	ldr	r3, [pc, #44]	; (800e704 <vPortSetupTimerInterrupt+0x38>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6dc:	4b0a      	ldr	r3, [pc, #40]	; (800e708 <vPortSetupTimerInterrupt+0x3c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a0a      	ldr	r2, [pc, #40]	; (800e70c <vPortSetupTimerInterrupt+0x40>)
 800e6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e6:	099b      	lsrs	r3, r3, #6
 800e6e8:	4a09      	ldr	r2, [pc, #36]	; (800e710 <vPortSetupTimerInterrupt+0x44>)
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6ee:	4b04      	ldr	r3, [pc, #16]	; (800e700 <vPortSetupTimerInterrupt+0x34>)
 800e6f0:	2207      	movs	r2, #7
 800e6f2:	601a      	str	r2, [r3, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	e000e010 	.word	0xe000e010
 800e704:	e000e018 	.word	0xe000e018
 800e708:	20000000 	.word	0x20000000
 800e70c:	10624dd3 	.word	0x10624dd3
 800e710:	e000e014 	.word	0xe000e014

0800e714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e724 <vPortEnableVFP+0x10>
 800e718:	6801      	ldr	r1, [r0, #0]
 800e71a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e71e:	6001      	str	r1, [r0, #0]
 800e720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e722:	bf00      	nop
 800e724:	e000ed88 	.word	0xe000ed88

0800e728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e72e:	f3ef 8305 	mrs	r3, IPSR
 800e732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2b0f      	cmp	r3, #15
 800e738:	d914      	bls.n	800e764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e73a:	4a17      	ldr	r2, [pc, #92]	; (800e798 <vPortValidateInterruptPriority+0x70>)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	4413      	add	r3, r2
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e744:	4b15      	ldr	r3, [pc, #84]	; (800e79c <vPortValidateInterruptPriority+0x74>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	7afa      	ldrb	r2, [r7, #11]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d20a      	bcs.n	800e764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	607b      	str	r3, [r7, #4]
}
 800e760:	bf00      	nop
 800e762:	e7fe      	b.n	800e762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e764:	4b0e      	ldr	r3, [pc, #56]	; (800e7a0 <vPortValidateInterruptPriority+0x78>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e76c:	4b0d      	ldr	r3, [pc, #52]	; (800e7a4 <vPortValidateInterruptPriority+0x7c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	429a      	cmp	r2, r3
 800e772:	d90a      	bls.n	800e78a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	603b      	str	r3, [r7, #0]
}
 800e786:	bf00      	nop
 800e788:	e7fe      	b.n	800e788 <vPortValidateInterruptPriority+0x60>
	}
 800e78a:	bf00      	nop
 800e78c:	3714      	adds	r7, #20
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop
 800e798:	e000e3f0 	.word	0xe000e3f0
 800e79c:	20000b50 	.word	0x20000b50
 800e7a0:	e000ed0c 	.word	0xe000ed0c
 800e7a4:	20000b54 	.word	0x20000b54

0800e7a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b08a      	sub	sp, #40	; 0x28
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7b4:	f7fe ffc0 	bl	800d738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7b8:	4b5b      	ldr	r3, [pc, #364]	; (800e928 <pvPortMalloc+0x180>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7c0:	f000 f920 	bl	800ea04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7c4:	4b59      	ldr	r3, [pc, #356]	; (800e92c <pvPortMalloc+0x184>)
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4013      	ands	r3, r2
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f040 8093 	bne.w	800e8f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d01d      	beq.n	800e814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e7d8:	2208      	movs	r2, #8
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	4413      	add	r3, r2
 800e7de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f003 0307 	and.w	r3, r3, #7
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d014      	beq.n	800e814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f023 0307 	bic.w	r3, r3, #7
 800e7f0:	3308      	adds	r3, #8
 800e7f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f003 0307 	and.w	r3, r3, #7
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00a      	beq.n	800e814 <pvPortMalloc+0x6c>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	617b      	str	r3, [r7, #20]
}
 800e810:	bf00      	nop
 800e812:	e7fe      	b.n	800e812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d06e      	beq.n	800e8f8 <pvPortMalloc+0x150>
 800e81a:	4b45      	ldr	r3, [pc, #276]	; (800e930 <pvPortMalloc+0x188>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	429a      	cmp	r2, r3
 800e822:	d869      	bhi.n	800e8f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e824:	4b43      	ldr	r3, [pc, #268]	; (800e934 <pvPortMalloc+0x18c>)
 800e826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e828:	4b42      	ldr	r3, [pc, #264]	; (800e934 <pvPortMalloc+0x18c>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e82e:	e004      	b.n	800e83a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d903      	bls.n	800e84c <pvPortMalloc+0xa4>
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d1f1      	bne.n	800e830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e84c:	4b36      	ldr	r3, [pc, #216]	; (800e928 <pvPortMalloc+0x180>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e852:	429a      	cmp	r2, r3
 800e854:	d050      	beq.n	800e8f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2208      	movs	r2, #8
 800e85c:	4413      	add	r3, r2
 800e85e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	1ad2      	subs	r2, r2, r3
 800e870:	2308      	movs	r3, #8
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	429a      	cmp	r2, r3
 800e876:	d91f      	bls.n	800e8b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4413      	add	r3, r2
 800e87e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	f003 0307 	and.w	r3, r3, #7
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00a      	beq.n	800e8a0 <pvPortMalloc+0xf8>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	613b      	str	r3, [r7, #16]
}
 800e89c:	bf00      	nop
 800e89e:	e7fe      	b.n	800e89e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	685a      	ldr	r2, [r3, #4]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	1ad2      	subs	r2, r2, r3
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8b2:	69b8      	ldr	r0, [r7, #24]
 800e8b4:	f000 f908 	bl	800eac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8b8:	4b1d      	ldr	r3, [pc, #116]	; (800e930 <pvPortMalloc+0x188>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	1ad3      	subs	r3, r2, r3
 800e8c2:	4a1b      	ldr	r2, [pc, #108]	; (800e930 <pvPortMalloc+0x188>)
 800e8c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8c6:	4b1a      	ldr	r3, [pc, #104]	; (800e930 <pvPortMalloc+0x188>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4b1b      	ldr	r3, [pc, #108]	; (800e938 <pvPortMalloc+0x190>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d203      	bcs.n	800e8da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8d2:	4b17      	ldr	r3, [pc, #92]	; (800e930 <pvPortMalloc+0x188>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	4a18      	ldr	r2, [pc, #96]	; (800e938 <pvPortMalloc+0x190>)
 800e8d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	685a      	ldr	r2, [r3, #4]
 800e8de:	4b13      	ldr	r3, [pc, #76]	; (800e92c <pvPortMalloc+0x184>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	431a      	orrs	r2, r3
 800e8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e8ee:	4b13      	ldr	r3, [pc, #76]	; (800e93c <pvPortMalloc+0x194>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	4a11      	ldr	r2, [pc, #68]	; (800e93c <pvPortMalloc+0x194>)
 800e8f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8f8:	f7fe ff2c 	bl	800d754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8fc:	69fb      	ldr	r3, [r7, #28]
 800e8fe:	f003 0307 	and.w	r3, r3, #7
 800e902:	2b00      	cmp	r3, #0
 800e904:	d00a      	beq.n	800e91c <pvPortMalloc+0x174>
	__asm volatile
 800e906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90a:	f383 8811 	msr	BASEPRI, r3
 800e90e:	f3bf 8f6f 	isb	sy
 800e912:	f3bf 8f4f 	dsb	sy
 800e916:	60fb      	str	r3, [r7, #12]
}
 800e918:	bf00      	nop
 800e91a:	e7fe      	b.n	800e91a <pvPortMalloc+0x172>
	return pvReturn;
 800e91c:	69fb      	ldr	r3, [r7, #28]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3728      	adds	r7, #40	; 0x28
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	20003270 	.word	0x20003270
 800e92c:	20003284 	.word	0x20003284
 800e930:	20003274 	.word	0x20003274
 800e934:	20003268 	.word	0x20003268
 800e938:	20003278 	.word	0x20003278
 800e93c:	2000327c 	.word	0x2000327c

0800e940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d04d      	beq.n	800e9ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e952:	2308      	movs	r3, #8
 800e954:	425b      	negs	r3, r3
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	4413      	add	r3, r2
 800e95a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	685a      	ldr	r2, [r3, #4]
 800e964:	4b24      	ldr	r3, [pc, #144]	; (800e9f8 <vPortFree+0xb8>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4013      	ands	r3, r2
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d10a      	bne.n	800e984 <vPortFree+0x44>
	__asm volatile
 800e96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e972:	f383 8811 	msr	BASEPRI, r3
 800e976:	f3bf 8f6f 	isb	sy
 800e97a:	f3bf 8f4f 	dsb	sy
 800e97e:	60fb      	str	r3, [r7, #12]
}
 800e980:	bf00      	nop
 800e982:	e7fe      	b.n	800e982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00a      	beq.n	800e9a2 <vPortFree+0x62>
	__asm volatile
 800e98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	60bb      	str	r3, [r7, #8]
}
 800e99e:	bf00      	nop
 800e9a0:	e7fe      	b.n	800e9a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	4b14      	ldr	r3, [pc, #80]	; (800e9f8 <vPortFree+0xb8>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4013      	ands	r3, r2
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01e      	beq.n	800e9ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d11a      	bne.n	800e9ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	685a      	ldr	r2, [r3, #4]
 800e9bc:	4b0e      	ldr	r3, [pc, #56]	; (800e9f8 <vPortFree+0xb8>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	43db      	mvns	r3, r3
 800e9c2:	401a      	ands	r2, r3
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9c8:	f7fe feb6 	bl	800d738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	4b0a      	ldr	r3, [pc, #40]	; (800e9fc <vPortFree+0xbc>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	4a09      	ldr	r2, [pc, #36]	; (800e9fc <vPortFree+0xbc>)
 800e9d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9da:	6938      	ldr	r0, [r7, #16]
 800e9dc:	f000 f874 	bl	800eac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e9e0:	4b07      	ldr	r3, [pc, #28]	; (800ea00 <vPortFree+0xc0>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	4a06      	ldr	r2, [pc, #24]	; (800ea00 <vPortFree+0xc0>)
 800e9e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e9ea:	f7fe feb3 	bl	800d754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9ee:	bf00      	nop
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20003284 	.word	0x20003284
 800e9fc:	20003274 	.word	0x20003274
 800ea00:	20003280 	.word	0x20003280

0800ea04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea0a:	f242 7310 	movw	r3, #10000	; 0x2710
 800ea0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea10:	4b27      	ldr	r3, [pc, #156]	; (800eab0 <prvHeapInit+0xac>)
 800ea12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00c      	beq.n	800ea38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	3307      	adds	r3, #7
 800ea22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f023 0307 	bic.w	r3, r3, #7
 800ea2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	4a1f      	ldr	r2, [pc, #124]	; (800eab0 <prvHeapInit+0xac>)
 800ea34:	4413      	add	r3, r2
 800ea36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea3c:	4a1d      	ldr	r2, [pc, #116]	; (800eab4 <prvHeapInit+0xb0>)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea42:	4b1c      	ldr	r3, [pc, #112]	; (800eab4 <prvHeapInit+0xb0>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea50:	2208      	movs	r2, #8
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	1a9b      	subs	r3, r3, r2
 800ea56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f023 0307 	bic.w	r3, r3, #7
 800ea5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	4a15      	ldr	r2, [pc, #84]	; (800eab8 <prvHeapInit+0xb4>)
 800ea64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea66:	4b14      	ldr	r3, [pc, #80]	; (800eab8 <prvHeapInit+0xb4>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea6e:	4b12      	ldr	r3, [pc, #72]	; (800eab8 <prvHeapInit+0xb4>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2200      	movs	r2, #0
 800ea74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	1ad2      	subs	r2, r2, r3
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea84:	4b0c      	ldr	r3, [pc, #48]	; (800eab8 <prvHeapInit+0xb4>)
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	4a0a      	ldr	r2, [pc, #40]	; (800eabc <prvHeapInit+0xb8>)
 800ea92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	4a09      	ldr	r2, [pc, #36]	; (800eac0 <prvHeapInit+0xbc>)
 800ea9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea9c:	4b09      	ldr	r3, [pc, #36]	; (800eac4 <prvHeapInit+0xc0>)
 800ea9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eaa2:	601a      	str	r2, [r3, #0]
}
 800eaa4:	bf00      	nop
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	20000b58 	.word	0x20000b58
 800eab4:	20003268 	.word	0x20003268
 800eab8:	20003270 	.word	0x20003270
 800eabc:	20003278 	.word	0x20003278
 800eac0:	20003274 	.word	0x20003274
 800eac4:	20003284 	.word	0x20003284

0800eac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ead0:	4b28      	ldr	r3, [pc, #160]	; (800eb74 <prvInsertBlockIntoFreeList+0xac>)
 800ead2:	60fb      	str	r3, [r7, #12]
 800ead4:	e002      	b.n	800eadc <prvInsertBlockIntoFreeList+0x14>
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	60fb      	str	r3, [r7, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d8f7      	bhi.n	800ead6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d108      	bne.n	800eb0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	441a      	add	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	68ba      	ldr	r2, [r7, #8]
 800eb14:	441a      	add	r2, r3
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d118      	bne.n	800eb50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	4b15      	ldr	r3, [pc, #84]	; (800eb78 <prvInsertBlockIntoFreeList+0xb0>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d00d      	beq.n	800eb46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	685a      	ldr	r2, [r3, #4]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	441a      	add	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	e008      	b.n	800eb58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb46:	4b0c      	ldr	r3, [pc, #48]	; (800eb78 <prvInsertBlockIntoFreeList+0xb0>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	601a      	str	r2, [r3, #0]
 800eb4e:	e003      	b.n	800eb58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d002      	beq.n	800eb66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb66:	bf00      	nop
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	20003268 	.word	0x20003268
 800eb78:	20003270 	.word	0x20003270

0800eb7c <__libc_init_array>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	4d0d      	ldr	r5, [pc, #52]	; (800ebb4 <__libc_init_array+0x38>)
 800eb80:	4c0d      	ldr	r4, [pc, #52]	; (800ebb8 <__libc_init_array+0x3c>)
 800eb82:	1b64      	subs	r4, r4, r5
 800eb84:	10a4      	asrs	r4, r4, #2
 800eb86:	2600      	movs	r6, #0
 800eb88:	42a6      	cmp	r6, r4
 800eb8a:	d109      	bne.n	800eba0 <__libc_init_array+0x24>
 800eb8c:	4d0b      	ldr	r5, [pc, #44]	; (800ebbc <__libc_init_array+0x40>)
 800eb8e:	4c0c      	ldr	r4, [pc, #48]	; (800ebc0 <__libc_init_array+0x44>)
 800eb90:	f000 f8f2 	bl	800ed78 <_init>
 800eb94:	1b64      	subs	r4, r4, r5
 800eb96:	10a4      	asrs	r4, r4, #2
 800eb98:	2600      	movs	r6, #0
 800eb9a:	42a6      	cmp	r6, r4
 800eb9c:	d105      	bne.n	800ebaa <__libc_init_array+0x2e>
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eba4:	4798      	blx	r3
 800eba6:	3601      	adds	r6, #1
 800eba8:	e7ee      	b.n	800eb88 <__libc_init_array+0xc>
 800ebaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebae:	4798      	blx	r3
 800ebb0:	3601      	adds	r6, #1
 800ebb2:	e7f2      	b.n	800eb9a <__libc_init_array+0x1e>
 800ebb4:	0800f25c 	.word	0x0800f25c
 800ebb8:	0800f25c 	.word	0x0800f25c
 800ebbc:	0800f25c 	.word	0x0800f25c
 800ebc0:	0800f260 	.word	0x0800f260

0800ebc4 <__retarget_lock_acquire_recursive>:
 800ebc4:	4770      	bx	lr

0800ebc6 <__retarget_lock_release_recursive>:
 800ebc6:	4770      	bx	lr

0800ebc8 <memcpy>:
 800ebc8:	440a      	add	r2, r1
 800ebca:	4291      	cmp	r1, r2
 800ebcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebd0:	d100      	bne.n	800ebd4 <memcpy+0xc>
 800ebd2:	4770      	bx	lr
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebde:	4291      	cmp	r1, r2
 800ebe0:	d1f9      	bne.n	800ebd6 <memcpy+0xe>
 800ebe2:	bd10      	pop	{r4, pc}

0800ebe4 <memset>:
 800ebe4:	4402      	add	r2, r0
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d100      	bne.n	800ebee <memset+0xa>
 800ebec:	4770      	bx	lr
 800ebee:	f803 1b01 	strb.w	r1, [r3], #1
 800ebf2:	e7f9      	b.n	800ebe8 <memset+0x4>

0800ebf4 <cleanup_glue>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	6809      	ldr	r1, [r1, #0]
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	b109      	cbz	r1, 800ec02 <cleanup_glue+0xe>
 800ebfe:	f7ff fff9 	bl	800ebf4 <cleanup_glue>
 800ec02:	4621      	mov	r1, r4
 800ec04:	4628      	mov	r0, r5
 800ec06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec0a:	f000 b869 	b.w	800ece0 <_free_r>
	...

0800ec10 <_reclaim_reent>:
 800ec10:	4b2c      	ldr	r3, [pc, #176]	; (800ecc4 <_reclaim_reent+0xb4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4283      	cmp	r3, r0
 800ec16:	b570      	push	{r4, r5, r6, lr}
 800ec18:	4604      	mov	r4, r0
 800ec1a:	d051      	beq.n	800ecc0 <_reclaim_reent+0xb0>
 800ec1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ec1e:	b143      	cbz	r3, 800ec32 <_reclaim_reent+0x22>
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d14a      	bne.n	800ecbc <_reclaim_reent+0xac>
 800ec26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec28:	6819      	ldr	r1, [r3, #0]
 800ec2a:	b111      	cbz	r1, 800ec32 <_reclaim_reent+0x22>
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	f000 f857 	bl	800ece0 <_free_r>
 800ec32:	6961      	ldr	r1, [r4, #20]
 800ec34:	b111      	cbz	r1, 800ec3c <_reclaim_reent+0x2c>
 800ec36:	4620      	mov	r0, r4
 800ec38:	f000 f852 	bl	800ece0 <_free_r>
 800ec3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ec3e:	b111      	cbz	r1, 800ec46 <_reclaim_reent+0x36>
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 f84d 	bl	800ece0 <_free_r>
 800ec46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec48:	b111      	cbz	r1, 800ec50 <_reclaim_reent+0x40>
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 f848 	bl	800ece0 <_free_r>
 800ec50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec52:	b111      	cbz	r1, 800ec5a <_reclaim_reent+0x4a>
 800ec54:	4620      	mov	r0, r4
 800ec56:	f000 f843 	bl	800ece0 <_free_r>
 800ec5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ec5c:	b111      	cbz	r1, 800ec64 <_reclaim_reent+0x54>
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 f83e 	bl	800ece0 <_free_r>
 800ec64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec66:	b111      	cbz	r1, 800ec6e <_reclaim_reent+0x5e>
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f000 f839 	bl	800ece0 <_free_r>
 800ec6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ec70:	b111      	cbz	r1, 800ec78 <_reclaim_reent+0x68>
 800ec72:	4620      	mov	r0, r4
 800ec74:	f000 f834 	bl	800ece0 <_free_r>
 800ec78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec7a:	b111      	cbz	r1, 800ec82 <_reclaim_reent+0x72>
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f000 f82f 	bl	800ece0 <_free_r>
 800ec82:	69a3      	ldr	r3, [r4, #24]
 800ec84:	b1e3      	cbz	r3, 800ecc0 <_reclaim_reent+0xb0>
 800ec86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ec88:	4620      	mov	r0, r4
 800ec8a:	4798      	blx	r3
 800ec8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ec8e:	b1b9      	cbz	r1, 800ecc0 <_reclaim_reent+0xb0>
 800ec90:	4620      	mov	r0, r4
 800ec92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec96:	f7ff bfad 	b.w	800ebf4 <cleanup_glue>
 800ec9a:	5949      	ldr	r1, [r1, r5]
 800ec9c:	b941      	cbnz	r1, 800ecb0 <_reclaim_reent+0xa0>
 800ec9e:	3504      	adds	r5, #4
 800eca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eca2:	2d80      	cmp	r5, #128	; 0x80
 800eca4:	68d9      	ldr	r1, [r3, #12]
 800eca6:	d1f8      	bne.n	800ec9a <_reclaim_reent+0x8a>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f000 f819 	bl	800ece0 <_free_r>
 800ecae:	e7ba      	b.n	800ec26 <_reclaim_reent+0x16>
 800ecb0:	680e      	ldr	r6, [r1, #0]
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f000 f814 	bl	800ece0 <_free_r>
 800ecb8:	4631      	mov	r1, r6
 800ecba:	e7ef      	b.n	800ec9c <_reclaim_reent+0x8c>
 800ecbc:	2500      	movs	r5, #0
 800ecbe:	e7ef      	b.n	800eca0 <_reclaim_reent+0x90>
 800ecc0:	bd70      	pop	{r4, r5, r6, pc}
 800ecc2:	bf00      	nop
 800ecc4:	20000010 	.word	0x20000010

0800ecc8 <__malloc_lock>:
 800ecc8:	4801      	ldr	r0, [pc, #4]	; (800ecd0 <__malloc_lock+0x8>)
 800ecca:	f7ff bf7b 	b.w	800ebc4 <__retarget_lock_acquire_recursive>
 800ecce:	bf00      	nop
 800ecd0:	20003288 	.word	0x20003288

0800ecd4 <__malloc_unlock>:
 800ecd4:	4801      	ldr	r0, [pc, #4]	; (800ecdc <__malloc_unlock+0x8>)
 800ecd6:	f7ff bf76 	b.w	800ebc6 <__retarget_lock_release_recursive>
 800ecda:	bf00      	nop
 800ecdc:	20003288 	.word	0x20003288

0800ece0 <_free_r>:
 800ece0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ece2:	2900      	cmp	r1, #0
 800ece4:	d044      	beq.n	800ed70 <_free_r+0x90>
 800ece6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecea:	9001      	str	r0, [sp, #4]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f1a1 0404 	sub.w	r4, r1, #4
 800ecf2:	bfb8      	it	lt
 800ecf4:	18e4      	addlt	r4, r4, r3
 800ecf6:	f7ff ffe7 	bl	800ecc8 <__malloc_lock>
 800ecfa:	4a1e      	ldr	r2, [pc, #120]	; (800ed74 <_free_r+0x94>)
 800ecfc:	9801      	ldr	r0, [sp, #4]
 800ecfe:	6813      	ldr	r3, [r2, #0]
 800ed00:	b933      	cbnz	r3, 800ed10 <_free_r+0x30>
 800ed02:	6063      	str	r3, [r4, #4]
 800ed04:	6014      	str	r4, [r2, #0]
 800ed06:	b003      	add	sp, #12
 800ed08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed0c:	f7ff bfe2 	b.w	800ecd4 <__malloc_unlock>
 800ed10:	42a3      	cmp	r3, r4
 800ed12:	d908      	bls.n	800ed26 <_free_r+0x46>
 800ed14:	6825      	ldr	r5, [r4, #0]
 800ed16:	1961      	adds	r1, r4, r5
 800ed18:	428b      	cmp	r3, r1
 800ed1a:	bf01      	itttt	eq
 800ed1c:	6819      	ldreq	r1, [r3, #0]
 800ed1e:	685b      	ldreq	r3, [r3, #4]
 800ed20:	1949      	addeq	r1, r1, r5
 800ed22:	6021      	streq	r1, [r4, #0]
 800ed24:	e7ed      	b.n	800ed02 <_free_r+0x22>
 800ed26:	461a      	mov	r2, r3
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	b10b      	cbz	r3, 800ed30 <_free_r+0x50>
 800ed2c:	42a3      	cmp	r3, r4
 800ed2e:	d9fa      	bls.n	800ed26 <_free_r+0x46>
 800ed30:	6811      	ldr	r1, [r2, #0]
 800ed32:	1855      	adds	r5, r2, r1
 800ed34:	42a5      	cmp	r5, r4
 800ed36:	d10b      	bne.n	800ed50 <_free_r+0x70>
 800ed38:	6824      	ldr	r4, [r4, #0]
 800ed3a:	4421      	add	r1, r4
 800ed3c:	1854      	adds	r4, r2, r1
 800ed3e:	42a3      	cmp	r3, r4
 800ed40:	6011      	str	r1, [r2, #0]
 800ed42:	d1e0      	bne.n	800ed06 <_free_r+0x26>
 800ed44:	681c      	ldr	r4, [r3, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	6053      	str	r3, [r2, #4]
 800ed4a:	4421      	add	r1, r4
 800ed4c:	6011      	str	r1, [r2, #0]
 800ed4e:	e7da      	b.n	800ed06 <_free_r+0x26>
 800ed50:	d902      	bls.n	800ed58 <_free_r+0x78>
 800ed52:	230c      	movs	r3, #12
 800ed54:	6003      	str	r3, [r0, #0]
 800ed56:	e7d6      	b.n	800ed06 <_free_r+0x26>
 800ed58:	6825      	ldr	r5, [r4, #0]
 800ed5a:	1961      	adds	r1, r4, r5
 800ed5c:	428b      	cmp	r3, r1
 800ed5e:	bf04      	itt	eq
 800ed60:	6819      	ldreq	r1, [r3, #0]
 800ed62:	685b      	ldreq	r3, [r3, #4]
 800ed64:	6063      	str	r3, [r4, #4]
 800ed66:	bf04      	itt	eq
 800ed68:	1949      	addeq	r1, r1, r5
 800ed6a:	6021      	streq	r1, [r4, #0]
 800ed6c:	6054      	str	r4, [r2, #4]
 800ed6e:	e7ca      	b.n	800ed06 <_free_r+0x26>
 800ed70:	b003      	add	sp, #12
 800ed72:	bd30      	pop	{r4, r5, pc}
 800ed74:	2000328c 	.word	0x2000328c

0800ed78 <_init>:
 800ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed7a:	bf00      	nop
 800ed7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed7e:	bc08      	pop	{r3}
 800ed80:	469e      	mov	lr, r3
 800ed82:	4770      	bx	lr

0800ed84 <_fini>:
 800ed84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed86:	bf00      	nop
 800ed88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed8a:	bc08      	pop	{r3}
 800ed8c:	469e      	mov	lr, r3
 800ed8e:	4770      	bx	lr
