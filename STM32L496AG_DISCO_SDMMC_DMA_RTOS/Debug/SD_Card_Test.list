
SD_Card_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800c780  0800c780  0001c780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c0  0800c9c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9c0  0800c9c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9c0  0800c9c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c0  0800c9c0  0001c9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9c4  0800c9c4  0001c9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003344  20000074  0800ca3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200033b8  0800ca3c  000233b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e6e5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048c9  00000000  00000000  0003e789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  00043058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f8  00000000  00000000  00044a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e43c  00000000  00000000  00046270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020bae  00000000  00000000  000746ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fa57  00000000  00000000  0009525a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a4cb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006db8  00000000  00000000  001a4d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c768 	.word	0x0800c768

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800c768 	.word	0x0800c768

080001f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <MX_DMA_Init+0x38>)
 80001f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <MX_DMA_Init+0x38>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	6493      	str	r3, [r2, #72]	; 0x48
 8000202:	4b09      	ldr	r3, [pc, #36]	; (8000228 <MX_DMA_Init+0x38>)
 8000204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000206:	f003 0302 	and.w	r3, r3, #2
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800020e:	2200      	movs	r2, #0
 8000210:	2105      	movs	r1, #5
 8000212:	203b      	movs	r0, #59	; 0x3b
 8000214:	f000 fffe 	bl	8001214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000218:	203b      	movs	r0, #59	; 0x3b
 800021a:	f001 f817 	bl	800124c <HAL_NVIC_EnableIRQ>

}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000

0800022c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	60f8      	str	r0, [r7, #12]
 8000234:	60b9      	str	r1, [r7, #8]
 8000236:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	4a07      	ldr	r2, [pc, #28]	; (8000258 <vApplicationGetIdleTaskMemory+0x2c>)
 800023c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <vApplicationGetIdleTaskMemory+0x30>)
 8000242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000098 	.word	0x20000098
 800025c:	2000014c 	.word	0x2000014c

08000260 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000260:	b5b0      	push	{r4, r5, r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1000);
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <MX_FREERTOS_Init+0x30>)
 8000268:	1d3c      	adds	r4, r7, #4
 800026a:	461d      	mov	r5, r3
 800026c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000270:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f009 fa7d 	bl	800977c <osThreadCreate>
 8000282:	4603      	mov	r3, r0
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <MX_FREERTOS_Init+0x34>)
 8000286:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000288:	bf00      	nop
 800028a:	3720      	adds	r7, #32
 800028c:	46bd      	mov	sp, r7
 800028e:	bdb0      	pop	{r4, r5, r7, pc}
 8000290:	0800c78c 	.word	0x0800c78c
 8000294:	20000090 	.word	0x20000090

08000298 <StartDefaultTask>:

uint8_t SD_FileOperationsTest();

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af02      	add	r7, sp, #8
 800029e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	//static int cnt = 0;
  volatile uint8_t result = 10;
 80002a0:	230a      	movs	r3, #10
 80002a2:	72fb      	strb	r3, [r7, #11]

  result = SD_FileOperationsTest();
 80002a4:	f000 f82a 	bl	80002fc <SD_FileOperationsTest>
 80002a8:	4603      	mov	r3, r0
 80002aa:	72fb      	strb	r3, [r7, #11]


  if(result == FR_OK){
 80002ac:	7afb      	ldrb	r3, [r7, #11]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d112      	bne.n	80002da <StartDefaultTask+0x42>


	  BaseType_t ret;
	  ret = xTaskCreate( LedBlueTask, "Led Blue task", MAINAPP_STACK_SIZE, NULL, 1, &LedBlueTaskHandle );
 80002b4:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <StartDefaultTask+0x54>)
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2301      	movs	r3, #1
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c2:	490b      	ldr	r1, [pc, #44]	; (80002f0 <StartDefaultTask+0x58>)
 80002c4:	480b      	ldr	r0, [pc, #44]	; (80002f4 <StartDefaultTask+0x5c>)
 80002c6:	f00a fcb2 	bl	800ac2e <xTaskCreate>
 80002ca:	60f8      	str	r0, [r7, #12]
	  if ( ret != pdPASS ) for ( ;; ) {
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d000      	beq.n	80002d4 <StartDefaultTask+0x3c>
 80002d2:	e7fe      	b.n	80002d2 <StartDefaultTask+0x3a>
	  }


	  vTaskDelete( NULL );
 80002d4:	2000      	movs	r0, #0
 80002d6:	f00a fdf7 	bl	800aec8 <vTaskDelete>
  }

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80002da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002de:	4806      	ldr	r0, [pc, #24]	; (80002f8 <StartDefaultTask+0x60>)
 80002e0:	f001 fc74 	bl	8001bcc <HAL_GPIO_TogglePin>
    osDelay(150);
 80002e4:	2096      	movs	r0, #150	; 0x96
 80002e6:	f009 fa95 	bl	8009814 <osDelay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80002ea:	e7f6      	b.n	80002da <StartDefaultTask+0x42>
 80002ec:	20000094 	.word	0x20000094
 80002f0:	0800c7a8 	.word	0x0800c7a8
 80002f4:	08000409 	.word	0x08000409
 80002f8:	48000400 	.word	0x48000400

080002fc <SD_FileOperationsTest>:
  * @retval 0 == all fine
  * 		1+ == errors
  */

uint8_t SD_FileOperationsTest()
{
 80002fc:	b5b0      	push	{r4, r5, r7, lr}
 80002fe:	b0b8      	sub	sp, #224	; 0xe0
 8000300:	af00      	add	r7, sp, #0
  FRESULT res;
  uint32_t byteswritten, bytesread;                     // File write/read counts
  uint8_t wtext[] = "STM32L496 AW: This is AW working with FatFs uSD + DMA + FreeRTOS + USB"; // File write buffer
 8000302:	4a3c      	ldr	r2, [pc, #240]	; (80003f4 <SD_FileOperationsTest+0xf8>)
 8000304:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000308:	4611      	mov	r1, r2
 800030a:	2247      	movs	r2, #71	; 0x47
 800030c:	4618      	mov	r0, r3
 800030e:	f00c f953 	bl	800c5b8 <memcpy>
  uint8_t rtext[100];                                   // File read buffer
  char fileNameIntern[40] = "STM32_AW_extendendFilename.TXT";
 8000312:	4b39      	ldr	r3, [pc, #228]	; (80003f8 <SD_FileOperationsTest+0xfc>)
 8000314:	463c      	mov	r4, r7
 8000316:	461d      	mov	r5, r3
 8000318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000320:	c407      	stmia	r4!, {r0, r1, r2}
 8000322:	8023      	strh	r3, [r4, #0]
 8000324:	3402      	adds	r4, #2
 8000326:	0c1b      	lsrs	r3, r3, #16
 8000328:	7023      	strb	r3, [r4, #0]
 800032a:	f107 031f 	add.w	r3, r7, #31
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	721a      	strb	r2, [r3, #8]


  // Register the file system object to the FatFs module /
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) == FR_OK)
 8000336:	2200      	movs	r2, #0
 8000338:	4930      	ldr	r1, [pc, #192]	; (80003fc <SD_FileOperationsTest+0x100>)
 800033a:	4831      	ldr	r0, [pc, #196]	; (8000400 <SD_FileOperationsTest+0x104>)
 800033c:	f008 fb36 	bl	80089ac <f_mount>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d150      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
  {
    // Create and Open a new text file object with write access
    //if(f_open(&SDFile, "STM32_AW.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
    if(f_open(&SDFile, fileNameIntern, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8000346:	463b      	mov	r3, r7
 8000348:	220a      	movs	r2, #10
 800034a:	4619      	mov	r1, r3
 800034c:	482d      	ldr	r0, [pc, #180]	; (8000404 <SD_FileOperationsTest+0x108>)
 800034e:	f008 fb91 	bl	8008a74 <f_open>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d147      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
    {
      // Write data to the text file
      res = f_write(&SDFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8000358:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800035c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000360:	2247      	movs	r2, #71	; 0x47
 8000362:	4828      	ldr	r0, [pc, #160]	; (8000404 <SD_FileOperationsTest+0x108>)
 8000364:	f008 feb9 	bl	80090da <f_write>
 8000368:	4603      	mov	r3, r0
 800036a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

      if((byteswritten > 0) && (res == FR_OK))
 800036e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000372:	2b00      	cmp	r3, #0
 8000374:	d038      	beq.n	80003e8 <SD_FileOperationsTest+0xec>
 8000376:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800037a:	2b00      	cmp	r3, #0
 800037c:	d134      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
      {
        // Close the open text file
        f_close(&SDFile);
 800037e:	4821      	ldr	r0, [pc, #132]	; (8000404 <SD_FileOperationsTest+0x108>)
 8000380:	f009 f8d8 	bl	8009534 <f_close>

        // Open the text file object with read access
        if(f_open(&SDFile, fileNameIntern, FA_READ) == FR_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	2201      	movs	r2, #1
 8000388:	4619      	mov	r1, r3
 800038a:	481e      	ldr	r0, [pc, #120]	; (8000404 <SD_FileOperationsTest+0x108>)
 800038c:	f008 fb72 	bl	8008a74 <f_open>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d128      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
        {
          // Read data from the text file
          res = f_read(&SDFile, rtext, sizeof(rtext), (void *)&bytesread);
 8000396:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800039a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800039e:	2264      	movs	r2, #100	; 0x64
 80003a0:	4818      	ldr	r0, [pc, #96]	; (8000404 <SD_FileOperationsTest+0x108>)
 80003a2:	f008 fd2c 	bl	8008dfe <f_read>
 80003a6:	4603      	mov	r3, r0
 80003a8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

          if((bytesread > 0) && (res == FR_OK))
 80003ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d019      	beq.n	80003e8 <SD_FileOperationsTest+0xec>
 80003b4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d115      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
          {
            // Close the open text file
           res = f_close(&SDFile);
 80003bc:	4811      	ldr	r0, [pc, #68]	; (8000404 <SD_FileOperationsTest+0x108>)
 80003be:	f009 f8b9 	bl	8009534 <f_close>
 80003c2:	4603      	mov	r3, r0
 80003c4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
           if(res == FR_OK)
 80003c8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d10b      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
        	 // res = f_unlink( fileNameIntern);	// deleting File

            // Compare read data with the expected data
            if((bytesread == byteswritten)  && (res == FR_OK) )
 80003d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80003d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80003d8:	429a      	cmp	r2, r3
 80003da:	d105      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
 80003dc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d101      	bne.n	80003e8 <SD_FileOperationsTest+0xec>
            {
              // Success of the demo: no error occurrence
              return FR_OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	e001      	b.n	80003ec <SD_FileOperationsTest+0xf0>
      }
    }
  }
  // Error
  // FATFS_UnLinkDriver(USERPath);
  return res;
 80003e8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	37e0      	adds	r7, #224	; 0xe0
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bdb0      	pop	{r4, r5, r7, pc}
 80003f4:	0800c7b8 	.word	0x0800c7b8
 80003f8:	0800c800 	.word	0x0800c800
 80003fc:	2000046c 	.word	0x2000046c
 8000400:	20000470 	.word	0x20000470
 8000404:	200006a4 	.word	0x200006a4

08000408 <LedBlueTask>:
 * @brief  Main application task
 * @param  *pvParameters: Task parameters (unused)
 * @retval None
 * ==================================================================== */
void LedBlueTask( void * pvParameters )
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

  // Main event loop
  for ( ;; ) {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000414:	4803      	ldr	r0, [pc, #12]	; (8000424 <LedBlueTask+0x1c>)
 8000416:	f001 fbd9 	bl	8001bcc <HAL_GPIO_TogglePin>
	  osDelay(800);
 800041a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800041e:	f009 f9f9 	bl	8009814 <osDelay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000422:	e7f5      	b.n	8000410 <LedBlueTask+0x8>
 8000424:	48000400 	.word	0x48000400

08000428 <MX_GPIO_Init>:
     PB10   ------> SAI1_SCK_A
     PH8   ------> DCMI_HSYNC
     PB12   ------> S_DATAIN1DFSDM1
*/
void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08e      	sub	sp, #56	; 0x38
 800042c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800043e:	4bb0      	ldr	r3, [pc, #704]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4aaf      	ldr	r2, [pc, #700]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4bad      	ldr	r3, [pc, #692]	; (8000700 <MX_GPIO_Init+0x2d8>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000452:	623b      	str	r3, [r7, #32]
 8000454:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000456:	4baa      	ldr	r3, [pc, #680]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	4aa9      	ldr	r2, [pc, #676]	; (8000700 <MX_GPIO_Init+0x2d8>)
 800045c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000462:	4ba7      	ldr	r3, [pc, #668]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800046a:	61fb      	str	r3, [r7, #28]
 800046c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800046e:	4ba4      	ldr	r3, [pc, #656]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4aa3      	ldr	r2, [pc, #652]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000474:	f043 0310 	orr.w	r3, r3, #16
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4ba1      	ldr	r3, [pc, #644]	; (8000700 <MX_GPIO_Init+0x2d8>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0310 	and.w	r3, r3, #16
 8000482:	61bb      	str	r3, [r7, #24]
 8000484:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	4b9e      	ldr	r3, [pc, #632]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a9d      	ldr	r2, [pc, #628]	; (8000700 <MX_GPIO_Init+0x2d8>)
 800048c:	f043 0302 	orr.w	r3, r3, #2
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b9b      	ldr	r3, [pc, #620]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b98      	ldr	r3, [pc, #608]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	4a97      	ldr	r2, [pc, #604]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004aa:	4b95      	ldr	r3, [pc, #596]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004b6:	4b92      	ldr	r3, [pc, #584]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	4a91      	ldr	r2, [pc, #580]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c2:	4b8f      	ldr	r3, [pc, #572]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80004ce:	f001 fbfb 	bl	8001cc8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d2:	4b8b      	ldr	r3, [pc, #556]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	4a8a      	ldr	r2, [pc, #552]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004d8:	f043 0308 	orr.w	r3, r3, #8
 80004dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004de:	4b88      	ldr	r3, [pc, #544]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	f003 0308 	and.w	r3, r3, #8
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b85      	ldr	r3, [pc, #532]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	4a84      	ldr	r2, [pc, #528]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f6:	4b82      	ldr	r3, [pc, #520]	; (8000700 <MX_GPIO_Init+0x2d8>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000502:	4b7f      	ldr	r3, [pc, #508]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a7e      	ldr	r2, [pc, #504]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b7c      	ldr	r3, [pc, #496]	; (8000700 <MX_GPIO_Init+0x2d8>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0320 	and.w	r3, r3, #32
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	4879      	ldr	r0, [pc, #484]	; (8000704 <MX_GPIO_Init+0x2dc>)
 8000520:	f001 fb3c 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2143      	movs	r1, #67	; 0x43
 8000528:	4877      	ldr	r0, [pc, #476]	; (8000708 <MX_GPIO_Init+0x2e0>)
 800052a:	f001 fb37 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	4876      	ldr	r0, [pc, #472]	; (800070c <MX_GPIO_Init+0x2e4>)
 8000534:	f001 fb32 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053e:	4874      	ldr	r0, [pc, #464]	; (8000710 <MX_GPIO_Init+0x2e8>)
 8000540:	f001 fb2c 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 8000544:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	2300      	movs	r3, #0
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800054e:	2302      	movs	r3, #2
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000556:	4619      	mov	r1, r3
 8000558:	486a      	ldr	r0, [pc, #424]	; (8000704 <MX_GPIO_Init+0x2dc>)
 800055a:	f001 f98d 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800055e:	2304      	movs	r3, #4
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000562:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000570:	4619      	mov	r1, r3
 8000572:	4865      	ldr	r0, [pc, #404]	; (8000708 <MX_GPIO_Init+0x2e0>)
 8000574:	f001 f980 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000578:	f64f 7383 	movw	r3, #65411	; 0xff83
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057e:	2302      	movs	r3, #2
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800058a:	230c      	movs	r3, #12
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800058e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000592:	4619      	mov	r1, r3
 8000594:	485f      	ldr	r0, [pc, #380]	; (8000714 <MX_GPIO_Init+0x2ec>)
 8000596:	f001 f96f 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800059a:	2330      	movs	r3, #48	; 0x30
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059e:	2302      	movs	r3, #2
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005aa:	2305      	movs	r3, #5
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	4619      	mov	r1, r3
 80005b4:	4856      	ldr	r0, [pc, #344]	; (8000710 <MX_GPIO_Init+0x2e8>)
 80005b6:	f001 f95f 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 80005ba:	f248 0320 	movw	r3, #32800	; 0x8020
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c0:	2302      	movs	r3, #2
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005cc:	2305      	movs	r3, #5
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d4:	4619      	mov	r1, r3
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f001 f94d 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80005de:	2301      	movs	r3, #1
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4619      	mov	r1, r3
 80005f4:	4843      	ldr	r0, [pc, #268]	; (8000704 <MX_GPIO_Init+0x2dc>)
 80005f6:	f001 f93f 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80005fa:	f645 7320 	movw	r3, #24352	; 0x5f20
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800060c:	230a      	movs	r3, #10
 800060e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000614:	4619      	mov	r1, r3
 8000616:	483c      	ldr	r0, [pc, #240]	; (8000708 <MX_GPIO_Init+0x2e0>)
 8000618:	f001 f92e 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 800061c:	23b0      	movs	r3, #176	; 0xb0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800062c:	230a      	movs	r3, #10
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000634:	4619      	mov	r1, r3
 8000636:	4833      	ldr	r0, [pc, #204]	; (8000704 <MX_GPIO_Init+0x2dc>)
 8000638:	f001 f91e 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 800063c:	f240 233f 	movw	r3, #575	; 0x23f
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064a:	2303      	movs	r3, #3
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800064e:	230c      	movs	r3, #12
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	4619      	mov	r1, r3
 8000658:	482f      	ldr	r0, [pc, #188]	; (8000718 <MX_GPIO_Init+0x2f0>)
 800065a:	f001 f90d 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 800065e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000670:	230c      	movs	r3, #12
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000678:	4619      	mov	r1, r3
 800067a:	4828      	ldr	r0, [pc, #160]	; (800071c <MX_GPIO_Init+0x2f4>)
 800067c:	f001 f8fc 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000690:	2303      	movs	r3, #3
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4619      	mov	r1, r3
 800069a:	481a      	ldr	r0, [pc, #104]	; (8000704 <MX_GPIO_Init+0x2dc>)
 800069c:	f001 f8ec 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80006a0:	2306      	movs	r3, #6
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006b0:	2305      	movs	r3, #5
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	4619      	mov	r1, r3
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <MX_GPIO_Init+0x2dc>)
 80006bc:	f001 f8dc 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 80006c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80006d2:	2303      	movs	r3, #3
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	4619      	mov	r1, r3
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <MX_GPIO_Init+0x2e0>)
 80006de:	f001 f8cb 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80006e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e8:	2312      	movs	r3, #18
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006f4:	2304      	movs	r3, #4
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fc:	4619      	mov	r1, r3
 80006fe:	e00f      	b.n	8000720 <MX_GPIO_Init+0x2f8>
 8000700:	40021000 	.word	0x40021000
 8000704:	48002000 	.word	0x48002000
 8000708:	48001c00 	.word	0x48001c00
 800070c:	48000800 	.word	0x48000800
 8000710:	48000400 	.word	0x48000400
 8000714:	48001000 	.word	0x48001000
 8000718:	48001800 	.word	0x48001800
 800071c:	48000c00 	.word	0x48000c00
 8000720:	48be      	ldr	r0, [pc, #760]	; (8000a1c <MX_GPIO_Init+0x5f4>)
 8000722:	f001 f8a9 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8000726:	2340      	movs	r3, #64	; 0x40
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000736:	2307      	movs	r3, #7
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	4619      	mov	r1, r3
 8000740:	48b6      	ldr	r0, [pc, #728]	; (8000a1c <MX_GPIO_Init+0x5f4>)
 8000742:	f001 f899 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8000746:	235c      	movs	r3, #92	; 0x5c
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000756:	230d      	movs	r3, #13
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	48af      	ldr	r0, [pc, #700]	; (8000a20 <MX_GPIO_Init+0x5f8>)
 8000762:	f001 f889 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000778:	2302      	movs	r3, #2
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	48a6      	ldr	r0, [pc, #664]	; (8000a1c <MX_GPIO_Init+0x5f4>)
 8000784:	f001 f878 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8000788:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	2302      	movs	r3, #2
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000796:	2303      	movs	r3, #3
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800079a:	2307      	movs	r3, #7
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	4619      	mov	r1, r3
 80007a4:	489f      	ldr	r0, [pc, #636]	; (8000a24 <MX_GPIO_Init+0x5fc>)
 80007a6:	f001 f867 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	489a      	ldr	r0, [pc, #616]	; (8000a28 <MX_GPIO_Init+0x600>)
 80007be:	f001 f85b 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 80007c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007d4:	230a      	movs	r3, #10
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f001 f849 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin;
 80007e6:	2320      	movs	r3, #32
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80007f6:	230a      	movs	r3, #10
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	4887      	ldr	r0, [pc, #540]	; (8000a20 <MX_GPIO_Init+0x5f8>)
 8000802:	f001 f839 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2_RX_Pin;
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000816:	2307      	movs	r3, #7
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4882      	ldr	r0, [pc, #520]	; (8000a2c <MX_GPIO_Init+0x604>)
 8000822:	f001 f829 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8000826:	2343      	movs	r3, #67	; 0x43
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	487a      	ldr	r0, [pc, #488]	; (8000a28 <MX_GPIO_Init+0x600>)
 800083e:	f001 f81b 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000842:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000854:	230c      	movs	r3, #12
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	4874      	ldr	r0, [pc, #464]	; (8000a30 <MX_GPIO_Init+0x608>)
 8000860:	f001 f80a 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	486e      	ldr	r0, [pc, #440]	; (8000a34 <MX_GPIO_Init+0x60c>)
 800087c:	f000 fffc 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	4619      	mov	r1, r3
 8000896:	4863      	ldr	r0, [pc, #396]	; (8000a24 <MX_GPIO_Init+0x5fc>)
 8000898:	f000 ffee 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800089c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80008ae:	230e      	movs	r3, #14
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 ffdc 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 80008c0:	2384      	movs	r3, #132	; 0x84
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008d0:	2306      	movs	r3, #6
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4856      	ldr	r0, [pc, #344]	; (8000a34 <MX_GPIO_Init+0x60c>)
 80008dc:	f000 ffcc 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 80008e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	484e      	ldr	r0, [pc, #312]	; (8000a30 <MX_GPIO_Init+0x608>)
 80008f6:	f000 ffbf 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PC1 PCPin */
  GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin|GPIO_PIN_1|ARD_A2_Pin;
 80008fa:	231b      	movs	r3, #27
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4849      	ldr	r0, [pc, #292]	; (8000a34 <MX_GPIO_Init+0x60c>)
 800090e:	f000 ffb3 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8000912:	f640 0303 	movw	r3, #2051	; 0x803
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000924:	230a      	movs	r3, #10
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	483b      	ldr	r0, [pc, #236]	; (8000a1c <MX_GPIO_Init+0x5f4>)
 8000930:	f000 ffa2 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000934:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000946:	2308      	movs	r3, #8
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	4834      	ldr	r0, [pc, #208]	; (8000a24 <MX_GPIO_Init+0x5fc>)
 8000952:	f000 ff91 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	4619      	mov	r1, r3
 800096a:	4832      	ldr	r0, [pc, #200]	; (8000a34 <MX_GPIO_Init+0x60c>)
 800096c:	f000 ff84 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000970:	2310      	movs	r3, #16
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	2312      	movs	r3, #18
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000980:	2304      	movs	r3, #4
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	4827      	ldr	r0, [pc, #156]	; (8000a28 <MX_GPIO_Init+0x600>)
 800098c:	f000 ff74 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8000990:	2312      	movs	r3, #18
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 ff67 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80009aa:	23c8      	movs	r3, #200	; 0xc8
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80009ba:	230a      	movs	r3, #10
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 ff56 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 80009cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d6:	2302      	movs	r3, #2
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	4813      	ldr	r0, [pc, #76]	; (8000a30 <MX_GPIO_Init+0x608>)
 80009e2:	f000 ff49 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80009e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f8:	2305      	movs	r3, #5
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_GPIO_Init+0x5f4>)
 8000a04:	f000 ff38 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0e:	2312      	movs	r3, #18
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e00e      	b.n	8000a38 <MX_GPIO_Init+0x610>
 8000a1a:	bf00      	nop
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48001000 	.word	0x48001000
 8000a24:	48001800 	.word	0x48001800
 8000a28:	48001c00 	.word	0x48001c00
 8000a2c:	48000c00 	.word	0x48000c00
 8000a30:	48001400 	.word	0x48001400
 8000a34:	48000800 	.word	0x48000800
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	482a      	ldr	r0, [pc, #168]	; (8000af0 <MX_GPIO_Init+0x6c8>)
 8000a46:	f000 ff17 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART2_TX_Pin;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 ff06 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <MX_GPIO_Init+0x6c8>)
 8000a80:	f000 fefa 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_CKA_Pin;
 8000a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a96:	230d      	movs	r3, #13
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_CKA_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_GPIO_Init+0x6c8>)
 8000aa2:	f000 fee9 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <MX_GPIO_Init+0x6c8>)
 8000ac4:	f000 fed8 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ace:	2311      	movs	r3, #17
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_GPIO_Init+0x6c8>)
 8000ae2:	f000 fec9 	bl	8001878 <HAL_GPIO_Init>

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	; 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	48000400 	.word	0x48000400

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af8:	f000 fa77 	bl	8000fea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afc:	f000 f822 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b00:	f7ff fc92 	bl	8000428 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b04:	f7ff fb74 	bl	80001f0 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000b08:	f000 f888 	bl	8000c1c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b0c:	f005 fe50 	bl	80067b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_SDMMC1_SD_Init();  // init later
 8000b10:	f000 f884 	bl	8000c1c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();		// init later
 8000b14:	f005 fe4c 	bl	80067b0 <MX_FATFS_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b18:	f7ff fba2 	bl	8000260 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b1c:	f008 fe0b 	bl	8009736 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <main+0x4c>)
 8000b28:	f001 f838 	bl	8001b9c <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <main+0x4c>)
 8000b32:	f001 f84b 	bl	8001bcc <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3a:	f000 fa8f 	bl	800105c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000b3e:	e7f5      	b.n	8000b2c <main+0x38>
 8000b40:	48000400 	.word	0x48000400

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b096      	sub	sp, #88	; 0x58
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2244      	movs	r2, #68	; 0x44
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00b fd3e 	bl	800c5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b6a:	f001 f857 	bl	8001c1c <HAL_PWREx_ControlVoltageScaling>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b74:	f000 f84c 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000b78:	2322      	movs	r3, #34	; 0x22
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b82:	2301      	movs	r3, #1
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b96:	230a      	movs	r3, #10
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 f89c 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000bb6:	f000 f82b 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fca2 	bl	800251c <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bde:	f000 f817 	bl	8000c10 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3758      	adds	r7, #88	; 0x58
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfe:	f000 fa0d 	bl	800101c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40012c00 	.word	0x40012c00

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_SDMMC1_SD_Init+0x38>)
 8000c22:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c24:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_SDMMC1_SD_Init+0x38>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_SDMMC1_SD_Init+0x38>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_SDMMC1_SD_Init+0x38>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_SDMMC1_SD_Init+0x38>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <MX_SDMMC1_SD_Init+0x38>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 2;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <MX_SDMMC1_SD_Init+0x38>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	2000034c 	.word	0x2000034c
 8000c58:	40012800 	.word	0x40012800

08000c5c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b0ae      	sub	sp, #184	; 0xb8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	f107 0318 	add.w	r3, r7, #24
 8000c78:	228c      	movs	r2, #140	; 0x8c
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f00b fca9 	bl	800c5d4 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a50      	ldr	r2, [pc, #320]	; (8000dc8 <HAL_SD_MspInit+0x16c>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	f040 8098 	bne.w	8000dbe <HAL_SD_MspInit+0x162>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000c8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	f107 0318 	add.w	r3, r7, #24
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fe92 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000caa:	f7ff ffb1 	bl	8000c10 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a40      	ldr	r2, [pc, #256]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a3a      	ldr	r2, [pc, #232]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <HAL_SD_MspInit+0x170>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <HAL_SD_MspInit+0x174>)
 8000d1c:	f000 fdac 	bl	8001878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8000d20:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <HAL_SD_MspInit+0x178>)
 8000d48:	f000 fd96 	bl	8001878 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <HAL_SD_MspInit+0x180>)
 8000d50:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d70:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d78:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000d86:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d88:	f000 fa6e 	bl	8001268 <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8000d92:	f7ff ff3d 	bl	8000c10 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_SD_MspInit+0x17c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2105      	movs	r1, #5
 8000db2:	2031      	movs	r0, #49	; 0x31
 8000db4:	f000 fa2e 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000db8:	2031      	movs	r0, #49	; 0x31
 8000dba:	f000 fa47 	bl	800124c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	37b8      	adds	r7, #184	; 0xb8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40012800 	.word	0x40012800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000c00 	.word	0x48000c00
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	200003d0 	.word	0x200003d0
 8000ddc:	40020444 	.word	0x40020444

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_MspInit+0x4c>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	; 0x60
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	210f      	movs	r1, #15
 8000e1a:	f06f 0001 	mvn.w	r0, #1
 8000e1e:	f000 f9f9 	bl	8001214 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <HAL_InitTick+0xc8>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	4a2d      	ldr	r2, [pc, #180]	; (8000ef8 <HAL_InitTick+0xc8>)
 8000e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e48:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_InitTick+0xc8>)
 8000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e56:	f107 020c 	add.w	r2, r7, #12
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fd1f 	bl	80028a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e66:	f001 fd07 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8000e6a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <HAL_InitTick+0xcc>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	0c9b      	lsrs	r3, r3, #18
 8000e76:	3b01      	subs	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <HAL_InitTick+0xd0>)
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <HAL_InitTick+0xd4>)
 8000e7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_InitTick+0xd0>)
 8000e82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e88:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_InitTick+0xd0>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_InitTick+0xd0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_InitTick+0xd0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_InitTick+0xd0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ea0:	4817      	ldr	r0, [pc, #92]	; (8000f00 <HAL_InitTick+0xd0>)
 8000ea2:	f004 fc3d 	bl	8005720 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d11b      	bne.n	8000eec <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <HAL_InitTick+0xd0>)
 8000eb6:	f004 fc95 	bl	80057e4 <HAL_TIM_Base_Start_IT>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d111      	bne.n	8000eec <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ec8:	2019      	movs	r0, #25
 8000eca:	f000 f9bf 	bl	800124c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d808      	bhi.n	8000ee6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	2019      	movs	r0, #25
 8000eda:	f000 f99b 	bl	8001214 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_InitTick+0xd8>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e002      	b.n	8000eec <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	431bde83 	.word	0x431bde83
 8000f00:	20000418 	.word	0x20000418
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	20000004 	.word	0x20000004

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f3e:	f004 fcc1 	bl	80058c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000418 	.word	0x20000418

08000f4c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <SDMMC1_IRQHandler+0x10>)
 8000f52:	f003 fb27 	bl	80045a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000034c 	.word	0x2000034c

08000f60 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA2_Channel4_IRQHandler+0x10>)
 8000f66:	f000 fba8 	bl	80016ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200003d0 	.word	0x200003d0

08000f74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f7ff ffea 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f00b fad1 	bl	800c56c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f7ff fd93 	bl	8000af4 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fdc:	0800c9c8 	.word	0x0800c9c8
  ldr r2, =_sbss
 8000fe0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fe4:	200033b8 	.word	0x200033b8

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>

08000fea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f902 	bl	80011fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f7ff ff18 	bl	8000e30 <HAL_InitTick>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	e001      	b.n	8001010 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800100c:	f7ff fee8 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001010:	79fb      	ldrb	r3, [r7, #7]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	20000464 	.word	0x20000464

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000464 	.word	0x20000464

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff4c 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001226:	f7ff ff61 	bl	80010ec <__NVIC_GetPriorityGrouping>
 800122a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	6978      	ldr	r0, [r7, #20]
 8001232:	f7ff ffb1 	bl	8001198 <NVIC_EncodePriority>
 8001236:	4602      	mov	r2, r0
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff80 	bl	8001144 <__NVIC_SetPriority>
}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff54 	bl	8001108 <__NVIC_EnableIRQ>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e098      	b.n	80013ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	4b4d      	ldr	r3, [pc, #308]	; (80013b8 <HAL_DMA_Init+0x150>)
 8001282:	429a      	cmp	r2, r3
 8001284:	d80f      	bhi.n	80012a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_DMA_Init+0x154>)
 800128e:	4413      	add	r3, r2
 8001290:	4a4b      	ldr	r2, [pc, #300]	; (80013c0 <HAL_DMA_Init+0x158>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	009a      	lsls	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <HAL_DMA_Init+0x15c>)
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
 80012a4:	e00e      	b.n	80012c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <HAL_DMA_Init+0x160>)
 80012ae:	4413      	add	r3, r2
 80012b0:	4a43      	ldr	r2, [pc, #268]	; (80013c0 <HAL_DMA_Init+0x158>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	009a      	lsls	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a42      	ldr	r2, [pc, #264]	; (80013cc <HAL_DMA_Init+0x164>)
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800131e:	d039      	beq.n	8001394 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_DMA_Init+0x15c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11a      	bne.n	8001360 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_DMA_Init+0x168>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 031c 	and.w	r3, r3, #28
 8001336:	210f      	movs	r1, #15
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	4924      	ldr	r1, [pc, #144]	; (80013d0 <HAL_DMA_Init+0x168>)
 8001340:	4013      	ands	r3, r2
 8001342:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_DMA_Init+0x168>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f003 031c 	and.w	r3, r3, #28
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	491d      	ldr	r1, [pc, #116]	; (80013d0 <HAL_DMA_Init+0x168>)
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
 800135e:	e019      	b.n	8001394 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_DMA_Init+0x16c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	f003 031c 	and.w	r3, r3, #28
 800136c:	210f      	movs	r1, #15
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	4917      	ldr	r1, [pc, #92]	; (80013d4 <HAL_DMA_Init+0x16c>)
 8001376:	4013      	ands	r3, r2
 8001378:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_DMA_Init+0x16c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6859      	ldr	r1, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 031c 	and.w	r3, r3, #28
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	4911      	ldr	r1, [pc, #68]	; (80013d4 <HAL_DMA_Init+0x16c>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40020407 	.word	0x40020407
 80013bc:	bffdfff8 	.word	0xbffdfff8
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	40020000 	.word	0x40020000
 80013c8:	bffdfbf8 	.word	0xbffdfbf8
 80013cc:	40020400 	.word	0x40020400
 80013d0:	400200a8 	.word	0x400200a8
 80013d4:	400204a8 	.word	0x400204a8

080013d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e072      	b.n	80014d0 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_DMA_DeInit+0x104>)
 8001402:	429a      	cmp	r2, r3
 8001404:	d80f      	bhi.n	8001426 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_DMA_DeInit+0x108>)
 800140e:	4413      	add	r3, r2
 8001410:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_DMA_DeInit+0x10c>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	009a      	lsls	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a31      	ldr	r2, [pc, #196]	; (80014e8 <HAL_DMA_DeInit+0x110>)
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
 8001424:	e00e      	b.n	8001444 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_DMA_DeInit+0x114>)
 800142e:	4413      	add	r3, r2
 8001430:	4a2c      	ldr	r2, [pc, #176]	; (80014e4 <HAL_DMA_DeInit+0x10c>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	009a      	lsls	r2, r3, #2
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <HAL_DMA_DeInit+0x118>)
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f003 021c 	and.w	r2, r3, #28
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	2101      	movs	r1, #1
 800145a:	fa01 f202 	lsl.w	r2, r1, r2
 800145e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <HAL_DMA_DeInit+0x110>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10d      	bne.n	8001486 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_DMA_DeInit+0x11c>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f003 031c 	and.w	r3, r3, #28
 8001476:	210f      	movs	r1, #15
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	491d      	ldr	r1, [pc, #116]	; (80014f4 <HAL_DMA_DeInit+0x11c>)
 8001480:	4013      	ands	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e00c      	b.n	80014a0 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_DMA_DeInit+0x120>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 031c 	and.w	r3, r3, #28
 8001492:	210f      	movs	r1, #15
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	4917      	ldr	r1, [pc, #92]	; (80014f8 <HAL_DMA_DeInit+0x120>)
 800149c:	4013      	ands	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40020407 	.word	0x40020407
 80014e0:	bffdfff8 	.word	0xbffdfff8
 80014e4:	cccccccd 	.word	0xcccccccd
 80014e8:	40020000 	.word	0x40020000
 80014ec:	bffdfbf8 	.word	0xbffdfbf8
 80014f0:	40020400 	.word	0x40020400
 80014f4:	400200a8 	.word	0x400200a8
 80014f8:	400204a8 	.word	0x400204a8

080014fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_DMA_Start_IT+0x20>
 8001518:	2302      	movs	r3, #2
 800151a:	e04b      	b.n	80015b4 <HAL_DMA_Start_IT+0xb8>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d13a      	bne.n	80015a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f95f 	bl	8001818 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 020e 	orr.w	r2, r2, #14
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00f      	b.n	8001594 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 020a 	orr.w	r2, r2, #10
 8001592:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e005      	b.n	80015b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d008      	beq.n	80015e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2204      	movs	r2, #4
 80015d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e022      	b.n	800162c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 020e 	bic.w	r2, r2, #14
 80015f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f003 021c 	and.w	r2, r3, #28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d005      	beq.n	800165c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e029      	b.n	80016b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020e 	bic.w	r2, r2, #14
 800166a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f003 021c 	and.w	r2, r3, #28
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
    }
  }
  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f003 031c 	and.w	r3, r3, #28
 80016da:	2204      	movs	r2, #4
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d026      	beq.n	8001734 <HAL_DMA_IRQHandler+0x7a>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d021      	beq.n	8001734 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0204 	bic.w	r2, r2, #4
 800170c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f003 021c 	and.w	r2, r3, #28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2104      	movs	r1, #4
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	2b00      	cmp	r3, #0
 8001728:	d071      	beq.n	800180e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001732:	e06c      	b.n	800180e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	f003 031c 	and.w	r3, r3, #28
 800173c:	2202      	movs	r2, #2
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d02e      	beq.n	80017a6 <HAL_DMA_IRQHandler+0xec>
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d029      	beq.n	80017a6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10b      	bne.n	8001778 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020a 	bic.w	r2, r2, #10
 800176e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	f003 021c 	and.w	r2, r3, #28
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	2102      	movs	r1, #2
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d038      	beq.n	800180e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017a4:	e033      	b.n	800180e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f003 031c 	and.w	r3, r3, #28
 80017ae:	2208      	movs	r2, #8
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d02a      	beq.n	8001810 <HAL_DMA_IRQHandler+0x156>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d025      	beq.n	8001810 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 020e 	bic.w	r2, r2, #14
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	f003 021c 	and.w	r2, r3, #28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800180e:	bf00      	nop
 8001810:	bf00      	nop
}
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f003 021c 	and.w	r2, r3, #28
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d108      	bne.n	800185c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800185a:	e007      	b.n	800186c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	60da      	str	r2, [r3, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e166      	b.n	8001b56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8158 	beq.w	8001b50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d005      	beq.n	80018b8 <HAL_GPIO_Init+0x40>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d130      	bne.n	800191a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ee:	2201      	movs	r2, #1
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	f003 0201 	and.w	r2, r3, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b03      	cmp	r3, #3
 8001924:	d017      	beq.n	8001956 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d123      	bne.n	80019aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	6939      	ldr	r1, [r7, #16]
 80019a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0203 	and.w	r2, r3, #3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80b2 	beq.w	8001b50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ec:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	4a60      	ldr	r2, [pc, #384]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6613      	str	r3, [r2, #96]	; 0x60
 80019f8:	4b5e      	ldr	r3, [pc, #376]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 80019fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a04:	4a5c      	ldr	r2, [pc, #368]	; (8001b78 <HAL_GPIO_Init+0x300>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a2e:	d02b      	beq.n	8001a88 <HAL_GPIO_Init+0x210>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x304>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d025      	beq.n	8001a84 <HAL_GPIO_Init+0x20c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x308>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d01f      	beq.n	8001a80 <HAL_GPIO_Init+0x208>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x30c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d019      	beq.n	8001a7c <HAL_GPIO_Init+0x204>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x310>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d013      	beq.n	8001a78 <HAL_GPIO_Init+0x200>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x314>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00d      	beq.n	8001a74 <HAL_GPIO_Init+0x1fc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x318>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d007      	beq.n	8001a70 <HAL_GPIO_Init+0x1f8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x31c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_GPIO_Init+0x1f4>
 8001a68:	2307      	movs	r3, #7
 8001a6a:	e00e      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	e00c      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a70:	2306      	movs	r3, #6
 8001a72:	e00a      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e008      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e006      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e004      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_GPIO_Init+0x212>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	0092      	lsls	r2, r2, #2
 8001a92:	4093      	lsls	r3, r2
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9a:	4937      	ldr	r1, [pc, #220]	; (8001b78 <HAL_GPIO_Init+0x300>)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001acc:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001af6:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b4a:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_GPIO_Init+0x320>)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f47f ae91 	bne.w	8001888 <HAL_GPIO_Init+0x10>
  }
}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	48000400 	.word	0x48000400
 8001b80:	48000800 	.word	0x48000800
 8001b84:	48000c00 	.word	0x48000c00
 8001b88:	48001000 	.word	0x48001000
 8001b8c:	48001400 	.word	0x48001400
 8001b90:	48001800 	.word	0x48001800
 8001b94:	48001c00 	.word	0x48001c00
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43d9      	mvns	r1, r3
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	400b      	ands	r3, r1
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40007000 	.word	0x40007000

08001c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2a:	d130      	bne.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c38:	d038      	beq.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c42:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2232      	movs	r2, #50	; 0x32
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9b      	lsrs	r3, r3, #18
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c60:	e002      	b.n	8001c68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c74:	d102      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f2      	bne.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c88:	d110      	bne.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e00f      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d007      	beq.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001caa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	431bde83 	.word	0x431bde83

08001cc8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd6:	6053      	str	r3, [r2, #4]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f000 bc08 	b.w	800250c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfc:	4b96      	ldr	r3, [pc, #600]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d06:	4b94      	ldr	r3, [pc, #592]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80e4 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4c>
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	f040 808b 	bne.w	8001e42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	f040 8087 	bne.w	8001e42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d34:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x64>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e3df      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	4b81      	ldr	r3, [pc, #516]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_RCC_OscConfig+0x7e>
 8001d5c:	4b7e      	ldr	r3, [pc, #504]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d64:	e005      	b.n	8001d72 <HAL_RCC_OscConfig+0x8a>
 8001d66:	4b7c      	ldr	r3, [pc, #496]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d223      	bcs.n	8001dbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fdc4 	bl	8002908 <RCC_SetFlashLatencyFromMSIRange>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e3c0      	b.n	800250c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b70      	ldr	r3, [pc, #448]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	496d      	ldr	r1, [pc, #436]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da8:	4b6b      	ldr	r3, [pc, #428]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	4968      	ldr	r1, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	e025      	b.n	8001e0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbe:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a65      	ldr	r2, [pc, #404]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4960      	ldr	r1, [pc, #384]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ddc:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	495b      	ldr	r1, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fd84 	bl	8002908 <RCC_SetFlashLatencyFromMSIRange>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e380      	b.n	800250c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0a:	f000 fc87 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4950      	ldr	r1, [pc, #320]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <HAL_RCC_OscConfig+0x278>)
 8001e28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fffe 	bl	8000e30 <HAL_InitTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d052      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	e364      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d032      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a42      	ldr	r2, [pc, #264]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e56:	f7ff f8f5 	bl	8001044 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e5e:	f7ff f8f1 	bl	8001044 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e34d      	b.n	800250c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e70:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a35      	ldr	r2, [pc, #212]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e82:	f043 0308 	orr.w	r3, r3, #8
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4930      	ldr	r1, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	492b      	ldr	r1, [pc, #172]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
 8001eae:	e01a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8c2 	bl	8001044 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f8be 	bl	8001044 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e31a      	b.n	800250c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1dc>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d073      	beq.n	8001fda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x21c>
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d10e      	bne.n	8001f1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d10b      	bne.n	8001f1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d063      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d15f      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e2f7      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x24c>
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e025      	b.n	8001f80 <HAL_RCC_OscConfig+0x298>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d114      	bne.n	8001f68 <HAL_RCC_OscConfig+0x280>
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a02      	ldr	r2, [pc, #8]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e013      	b.n	8001f80 <HAL_RCC_OscConfig+0x298>
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	0800c884 	.word	0x0800c884
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004
 8001f68:	4ba0      	ldr	r3, [pc, #640]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a9f      	ldr	r2, [pc, #636]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b9d      	ldr	r3, [pc, #628]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a9c      	ldr	r2, [pc, #624]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f85c 	bl	8001044 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f858 	bl	8001044 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e2b4      	b.n	800250c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa2:	4b92      	ldr	r3, [pc, #584]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2a8>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f848 	bl	8001044 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f844 	bl	8001044 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e2a0      	b.n	800250c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fca:	4b88      	ldr	r3, [pc, #544]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2d0>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d060      	beq.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x310>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d119      	bne.n	8002026 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d116      	bne.n	8002026 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff8:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x328>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e27d      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b76      	ldr	r3, [pc, #472]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	4973      	ldr	r1, [pc, #460]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002024:	e040      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d023      	beq.n	8002076 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202e:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6e      	ldr	r2, [pc, #440]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff f803 	bl	8001044 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7fe ffff 	bl	8001044 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e25b      	b.n	800250c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4b65      	ldr	r3, [pc, #404]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b62      	ldr	r3, [pc, #392]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	495f      	ldr	r1, [pc, #380]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	e018      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5c      	ldr	r2, [pc, #368]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 800207c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe ffdf 	bl	8001044 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208a:	f7fe ffdb 	bl	8001044 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e237      	b.n	800250c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d03c      	beq.n	800212e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020bc:	4b4b      	ldr	r3, [pc, #300]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe ffba 	bl	8001044 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe ffb6 	bl	8001044 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e212      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ef      	beq.n	80020d4 <HAL_RCC_OscConfig+0x3ec>
 80020f4:	e01b      	b.n	800212e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	4a3b      	ldr	r2, [pc, #236]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe ff9d 	bl	8001044 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210e:	f7fe ff99 	bl	8001044 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1f5      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002120:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ef      	bne.n	800210e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a6 	beq.w	8002288 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	4a26      	ldr	r2, [pc, #152]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	6593      	str	r3, [r2, #88]	; 0x58
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCC_OscConfig+0x508>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d118      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_RCC_OscConfig+0x508>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_RCC_OscConfig+0x508>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002180:	f7fe ff60 	bl	8001044 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002188:	f7fe ff5c 	bl	8001044 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1b8      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_RCC_OscConfig+0x508>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4d8>
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021be:	e029      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d115      	bne.n	80021f4 <HAL_RCC_OscConfig+0x50c>
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_RCC_OscConfig+0x504>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x52c>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
 80021f4:	4b9d      	ldr	r3, [pc, #628]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	4a9c      	ldr	r2, [pc, #624]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80021fc:	f023 0301 	bic.w	r3, r3, #1
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002204:	4b99      	ldr	r3, [pc, #612]	; (800246c <HAL_RCC_OscConfig+0x784>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a98      	ldr	r2, [pc, #608]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d016      	beq.n	800224a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7fe ff12 	bl	8001044 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe ff0e 	bl	8001044 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e168      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b8c      	ldr	r3, [pc, #560]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ed      	beq.n	8002224 <HAL_RCC_OscConfig+0x53c>
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7fe fefb 	bl	8001044 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fef7 	bl	8001044 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e151      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002268:	4b80      	ldr	r3, [pc, #512]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ed      	bne.n	8002252 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002276:	7ffb      	ldrb	r3, [r7, #31]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227c:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a7a      	ldr	r2, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x784>)
 8002282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03c      	beq.n	800230e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800229c:	4b73      	ldr	r3, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800229e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022a2:	4a72      	ldr	r2, [pc, #456]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7fe feca 	bl	8001044 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b4:	f7fe fec6 	bl	8001044 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e122      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022c6:	4b69      	ldr	r3, [pc, #420]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80022c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCC_OscConfig+0x5cc>
 80022d4:	e01b      	b.n	800230e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80022d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022dc:	4a63      	ldr	r2, [pc, #396]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fead 	bl	8001044 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ee:	f7fe fea9 	bl	8001044 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e105      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002300:	4b5a      	ldr	r3, [pc, #360]	; (800246c <HAL_RCC_OscConfig+0x784>)
 8002302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80f9 	beq.w	800250a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	2b02      	cmp	r3, #2
 800231e:	f040 80cf 	bne.w	80024c0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002322:	4b52      	ldr	r3, [pc, #328]	; (800246c <HAL_RCC_OscConfig+0x784>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0203 	and.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	429a      	cmp	r2, r3
 8002334:	d12c      	bne.n	8002390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	3b01      	subs	r3, #1
 8002342:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d123      	bne.n	8002390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d11b      	bne.n	8002390 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d113      	bne.n	8002390 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d109      	bne.n	8002390 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	3b01      	subs	r3, #1
 800238a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d071      	beq.n	8002474 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d068      	beq.n	8002468 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002396:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_RCC_OscConfig+0x784>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023a2:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0ac      	b.n	800250c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023b2:	4b2e      	ldr	r3, [pc, #184]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2d      	ldr	r2, [pc, #180]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80023b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023be:	f7fe fe41 	bl	8001044 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe fe3d 	bl	8001044 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e099      	b.n	800250c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f0      	bne.n	80023c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e4:	4b21      	ldr	r3, [pc, #132]	; (800246c <HAL_RCC_OscConfig+0x784>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_RCC_OscConfig+0x788>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023f4:	3a01      	subs	r2, #1
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023fe:	0212      	lsls	r2, r2, #8
 8002400:	4311      	orrs	r1, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002406:	0852      	lsrs	r2, r2, #1
 8002408:	3a01      	subs	r2, #1
 800240a:	0552      	lsls	r2, r2, #21
 800240c:	4311      	orrs	r1, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002412:	0852      	lsrs	r2, r2, #1
 8002414:	3a01      	subs	r2, #1
 8002416:	0652      	lsls	r2, r2, #25
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800241e:	06d2      	lsls	r2, r2, #27
 8002420:	430a      	orrs	r2, r1
 8002422:	4912      	ldr	r1, [pc, #72]	; (800246c <HAL_RCC_OscConfig+0x784>)
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800242e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002432:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_RCC_OscConfig+0x784>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a0c      	ldr	r2, [pc, #48]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002440:	f7fe fe00 	bl	8001044 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fdfc 	bl	8001044 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e058      	b.n	800250c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_RCC_OscConfig+0x784>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002466:	e050      	b.n	800250a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e04f      	b.n	800250c <HAL_RCC_OscConfig+0x824>
 800246c:	40021000 	.word	0x40021000
 8002470:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d144      	bne.n	800250a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002498:	f7fe fdd4 	bl	8001044 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fdd0 	bl	8001044 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e02c      	b.n	800250c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x7b8>
 80024be:	e024      	b.n	800250a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d01f      	beq.n	8002506 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 80024cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe fdb7 	bl	8001044 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe fdb3 	bl	8001044 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e00f      	b.n	800250c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4905      	ldr	r1, [pc, #20]	; (8002514 <HAL_RCC_OscConfig+0x82c>)
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_OscConfig+0x830>)
 8002500:	4013      	ands	r3, r2
 8002502:	60cb      	str	r3, [r1, #12]
 8002504:	e001      	b.n	800250a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	feeefffc 	.word	0xfeeefffc

0800251c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0e7      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4970      	ldr	r1, [pc, #448]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0cf      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002578:	429a      	cmp	r2, r3
 800257a:	d908      	bls.n	800258e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b63      	ldr	r3, [pc, #396]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4960      	ldr	r1, [pc, #384]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d04c      	beq.n	8002634 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d121      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0a6      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	4b54      	ldr	r3, [pc, #336]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d115      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e09a      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d2:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e08e      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e086      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	4b46      	ldr	r3, [pc, #280]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 0203 	bic.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4943      	ldr	r1, [pc, #268]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fd1e 	bl	8001044 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fd1a 	bl	8001044 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e06e      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1eb      	bne.n	800260c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264c:	429a      	cmp	r2, r3
 800264e:	d208      	bcs.n	8002662 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	492b      	ldr	r1, [pc, #172]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d210      	bcs.n	8002692 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 0207 	bic.w	r2, r3, #7
 8002678:	4923      	ldr	r1, [pc, #140]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e036      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4918      	ldr	r1, [pc, #96]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4910      	ldr	r1, [pc, #64]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d0:	f000 f824 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	490b      	ldr	r1, [pc, #44]	; (8002710 <HAL_RCC_ClockConfig+0x1f4>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80026ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1fc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fb9b 	bl	8000e30 <HAL_InitTick>
 80026fa:	4603      	mov	r3, r0
 80026fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
 8002710:	0800c884 	.word	0x0800c884
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272a:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d121      	bne.n	800278e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d11e      	bne.n	800278e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e005      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002778:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <HAL_RCC_GetSysClockFreq+0x10c>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d102      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_GetSysClockFreq+0x110>)
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	e004      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_RCC_GetSysClockFreq+0x114>)
 80027a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d134      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d003      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0xac>
 80027c0:	e005      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_RCC_GetSysClockFreq+0x110>)
 80027c4:	617b      	str	r3, [r7, #20]
      break;
 80027c6:	e005      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_GetSysClockFreq+0x114>)
 80027ca:	617b      	str	r3, [r7, #20]
      break;
 80027cc:	e002      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	617b      	str	r3, [r7, #20]
      break;
 80027d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	3301      	adds	r3, #1
 80027e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	fb03 f202 	mul.w	r2, r3, r2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	0e5b      	lsrs	r3, r3, #25
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	3301      	adds	r3, #1
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002814:	69bb      	ldr	r3, [r7, #24]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	0800c89c 	.word	0x0800c89c
 800282c:	00f42400 	.word	0x00f42400
 8002830:	007a1200 	.word	0x007a1200

08002834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_RCC_GetHCLKFreq+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002850:	f7ff fff0 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4904      	ldr	r1, [pc, #16]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	0800c894 	.word	0x0800c894

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800287c:	f7ff ffda 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0adb      	lsrs	r3, r3, #11
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	0800c894 	.word	0x0800c894

080028a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	220f      	movs	r2, #15
 80028b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_GetClockConfig+0x5c>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <HAL_RCC_GetClockConfig+0x60>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0207 	and.w	r2, r3, #7
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40022000 	.word	0x40022000

08002908 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002920:	f7ff f96e 	bl	8001c00 <HAL_PWREx_GetVoltageRange>
 8002924:	6178      	str	r0, [r7, #20]
 8002926:	e014      	b.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002940:	f7ff f95e 	bl	8001c00 <HAL_PWREx_GetVoltageRange>
 8002944:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002958:	d10b      	bne.n	8002972 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d919      	bls.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2ba0      	cmp	r3, #160	; 0xa0
 8002964:	d902      	bls.n	800296c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002966:	2302      	movs	r3, #2
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e013      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800296c:	2301      	movs	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e010      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d902      	bls.n	800297e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002978:	2303      	movs	r3, #3
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	e00a      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d102      	bne.n	800298a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002984:	2302      	movs	r3, #2
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	e004      	b.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b70      	cmp	r3, #112	; 0x70
 800298e:	d101      	bne.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002990:	2301      	movs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 0207 	bic.w	r2, r3, #7
 800299c:	4909      	ldr	r1, [pc, #36]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40022000 	.word	0x40022000

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d0:	2300      	movs	r3, #0
 80029d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d4:	2300      	movs	r3, #0
 80029d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d041      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ec:	d02a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029f2:	d824      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029f8:	d008      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029fe:	d81e      	bhi.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a08:	d010      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a0a:	e018      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a0c:	4b86      	ldr	r3, [pc, #536]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a85      	ldr	r2, [pc, #532]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a18:	e015      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 f885 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a2a:	e00c      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3320      	adds	r3, #32
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 f96e 	bl	8003d14 <RCCEx_PLLSAI2_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a3c:	e003      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	74fb      	strb	r3, [r7, #19]
      break;
 8002a42:	e000      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10b      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4c:	4b76      	ldr	r3, [pc, #472]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5a:	4973      	ldr	r1, [pc, #460]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a62:	e001      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d041      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a7c:	d02a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a82:	d824      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a8e:	d81e      	bhi.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a98:	d010      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a9a:	e018      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a9c:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a61      	ldr	r2, [pc, #388]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aa8:	e015      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f83d 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aba:	e00c      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3320      	adds	r3, #32
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f001 f926 	bl	8003d14 <RCCEx_PLLSAI2_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002acc:	e003      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	494f      	ldr	r1, [pc, #316]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002af2:	e001      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af4:	7cfb      	ldrb	r3, [r7, #19]
 8002af6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80a0 	beq.w	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	4a40      	ldr	r2, [pc, #256]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b3c:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a3a      	ldr	r2, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b48:	f7fe fa7c 	bl	8001044 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b4e:	e009      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7fe fa78 	bl	8001044 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	74fb      	strb	r3, [r7, #19]
        break;
 8002b62:	e005      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ef      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d15c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01f      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d019      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bc0:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d016      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd2:	f7fe fa37 	bl	8001044 <HAL_GetTick>
 8002bd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fa33 	bl	8001044 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	74fb      	strb	r3, [r7, #19]
            break;
 8002bf0:	e006      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ec      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	4904      	ldr	r1, [pc, #16]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c1e:	e009      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
 8002c24:	e006      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c34:	7c7b      	ldrb	r3, [r7, #17]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3a:	4ba6      	ldr	r3, [pc, #664]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	4aa5      	ldr	r2, [pc, #660]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c52:	4ba0      	ldr	r3, [pc, #640]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f023 0203 	bic.w	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	499c      	ldr	r1, [pc, #624]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c74:	4b97      	ldr	r3, [pc, #604]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f023 020c 	bic.w	r2, r3, #12
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	4994      	ldr	r1, [pc, #592]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c96:	4b8f      	ldr	r3, [pc, #572]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	498b      	ldr	r1, [pc, #556]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb8:	4b86      	ldr	r3, [pc, #536]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4983      	ldr	r1, [pc, #524]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cda:	4b7e      	ldr	r3, [pc, #504]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce8:	497a      	ldr	r1, [pc, #488]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfc:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	4972      	ldr	r1, [pc, #456]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1e:	4b6d      	ldr	r3, [pc, #436]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	4969      	ldr	r1, [pc, #420]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d40:	4b64      	ldr	r3, [pc, #400]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d4e:	4961      	ldr	r1, [pc, #388]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d70:	4958      	ldr	r1, [pc, #352]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d84:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	4950      	ldr	r1, [pc, #320]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002da6:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	4947      	ldr	r1, [pc, #284]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dc8:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	493f      	ldr	r1, [pc, #252]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d028      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dea:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4936      	ldr	r1, [pc, #216]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e14:	60d3      	str	r3, [r2, #12]
 8002e16:	e011      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2101      	movs	r1, #1
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fe81 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d028      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e56:	491f      	ldr	r1, [pc, #124]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e66:	d106      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e72:	60d3      	str	r3, [r2, #12]
 8002e74:	e011      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fe52 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d02a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb4:	4907      	ldr	r1, [pc, #28]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec4:	d108      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec6:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a02      	ldr	r2, [pc, #8]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed0:	60d3      	str	r3, [r2, #12]
 8002ed2:	e013      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002ed4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002edc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fe21 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02f      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f08:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f16:	4929      	ldr	r1, [pc, #164]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f26:	d10d      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fdfe 	bl	8003b30 <RCCEx_PLLSAI1_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d014      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
 8002f42:	e011      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3320      	adds	r3, #32
 8002f52:	2102      	movs	r1, #2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fedd 	bl	8003d14 <RCCEx_PLLSAI2_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5e:	7cfb      	ldrb	r3, [r7, #19]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f84:	490d      	ldr	r1, [pc, #52]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fd2:	d13e      	bne.n	8003052 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002fd4:	4bb4      	ldr	r3, [pc, #720]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe6:	d028      	beq.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fee:	f200 858c 	bhi.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff8:	d005      	beq.n	8003006 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d00e      	beq.n	8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003002:	f000 bd82 	b.w	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003006:	4ba8      	ldr	r3, [pc, #672]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	f040 857c 	bne.w	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8003016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301a:	61fb      	str	r3, [r7, #28]
      break;
 800301c:	f000 bd77 	b.w	8003b0e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003020:	4ba1      	ldr	r3, [pc, #644]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	f040 8571 	bne.w	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8003030:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003034:	61fb      	str	r3, [r7, #28]
      break;
 8003036:	f000 bd6c 	b.w	8003b12 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800303a:	4b9b      	ldr	r3, [pc, #620]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003046:	f040 8566 	bne.w	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 800304a:	4b98      	ldr	r3, [pc, #608]	; (80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 800304c:	61fb      	str	r3, [r7, #28]
      break;
 800304e:	f000 bd62 	b.w	8003b16 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003052:	4b95      	ldr	r3, [pc, #596]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d036      	beq.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d840      	bhi.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d003      	beq.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d020      	beq.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003074:	e039      	b.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003076:	4b8c      	ldr	r3, [pc, #560]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d116      	bne.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003082:	4b89      	ldr	r3, [pc, #548]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800308e:	4b86      	ldr	r3, [pc, #536]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	e005      	b.n	80030a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800309a:	4b83      	ldr	r3, [pc, #524]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4a82      	ldr	r2, [pc, #520]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030ae:	e01f      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
      break;
 80030b4:	e01c      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030b6:	4b7c      	ldr	r3, [pc, #496]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d102      	bne.n	80030ca <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80030c4:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80030c6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030c8:	e012      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
      break;
 80030ce:	e00f      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80030d0:	4b75      	ldr	r3, [pc, #468]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030dc:	d102      	bne.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80030e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80030e2:	e005      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
      break;
 80030e8:	e002      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
      break;
 80030ee:	bf00      	nop
    }

    switch(PeriphClk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f6:	f000 842a 	beq.w	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003100:	f200 850b 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800310a:	f000 80df 	beq.w	80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003114:	f200 8501 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800311e:	f000 80d5 	beq.w	80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003128:	f200 84f7 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003132:	f000 8377 	beq.w	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	f200 84ed 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003146:	f000 84c3 	beq.w	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003150:	f200 84e3 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800315a:	f000 82e6 	beq.w	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003164:	f200 84d9 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316e:	f000 80ad 	beq.w	80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003178:	f200 84cf 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003182:	f000 809b 	beq.w	80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318c:	f200 84c5 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003196:	d07f      	beq.n	8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319e:	f200 84bc 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	f000 8448 	beq.w	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	f200 84b2 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031bc:	f000 83f0 	beq.w	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c6:	f200 84a8 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d0:	f000 8391 	beq.w	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031da:	f200 849e 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	f000 835c 	beq.w	800389e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b80      	cmp	r3, #128	; 0x80
 80031ea:	f200 8496 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d84b      	bhi.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 848f 	beq.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	2b1f      	cmp	r3, #31
 8003202:	f200 848a 	bhi.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8003206:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003423 	.word	0x08003423
 8003210:	08003493 	.word	0x08003493
 8003214:	08003b1b 	.word	0x08003b1b
 8003218:	08003527 	.word	0x08003527
 800321c:	08003b1b 	.word	0x08003b1b
 8003220:	08003b1b 	.word	0x08003b1b
 8003224:	08003b1b 	.word	0x08003b1b
 8003228:	080035af 	.word	0x080035af
 800322c:	08003b1b 	.word	0x08003b1b
 8003230:	08003b1b 	.word	0x08003b1b
 8003234:	08003b1b 	.word	0x08003b1b
 8003238:	08003b1b 	.word	0x08003b1b
 800323c:	08003b1b 	.word	0x08003b1b
 8003240:	08003b1b 	.word	0x08003b1b
 8003244:	08003b1b 	.word	0x08003b1b
 8003248:	08003627 	.word	0x08003627
 800324c:	08003b1b 	.word	0x08003b1b
 8003250:	08003b1b 	.word	0x08003b1b
 8003254:	08003b1b 	.word	0x08003b1b
 8003258:	08003b1b 	.word	0x08003b1b
 800325c:	08003b1b 	.word	0x08003b1b
 8003260:	08003b1b 	.word	0x08003b1b
 8003264:	08003b1b 	.word	0x08003b1b
 8003268:	08003b1b 	.word	0x08003b1b
 800326c:	08003b1b 	.word	0x08003b1b
 8003270:	08003b1b 	.word	0x08003b1b
 8003274:	08003b1b 	.word	0x08003b1b
 8003278:	08003b1b 	.word	0x08003b1b
 800327c:	08003b1b 	.word	0x08003b1b
 8003280:	08003b1b 	.word	0x08003b1b
 8003284:	08003b1b 	.word	0x08003b1b
 8003288:	080036a9 	.word	0x080036a9
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	f000 82d9 	beq.w	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003294:	f000 bc41 	b.w	8003b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003298:	69b9      	ldr	r1, [r7, #24]
 800329a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800329e:	f000 fe15 	bl	8003ecc <RCCEx_GetSAIxPeriphCLKFreq>
 80032a2:	61f8      	str	r0, [r7, #28]
      break;
 80032a4:	f000 bc3a 	b.w	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	0003d090 	.word	0x0003d090
 80032b0:	0800c89c 	.word	0x0800c89c
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032c2:	f000 fe03 	bl	8003ecc <RCCEx_GetSAIxPeriphCLKFreq>
 80032c6:	61f8      	str	r0, [r7, #28]
      break;
 80032c8:	f000 bc28 	b.w	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80032cc:	4ba6      	ldr	r3, [pc, #664]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032de:	d015      	beq.n	800330c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80032e6:	f200 8092 	bhi.w	800340e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f0:	d029      	beq.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f8:	f200 8089 	bhi.w	800340e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d07b      	beq.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003308:	d04a      	beq.n	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 800330a:	e080      	b.n	800340e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800330c:	4b96      	ldr	r3, [pc, #600]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d17c      	bne.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003318:	4b93      	ldr	r3, [pc, #588]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8003324:	4b90      	ldr	r3, [pc, #576]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	e005      	b.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8003330:	4b8d      	ldr	r3, [pc, #564]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	4a8b      	ldr	r2, [pc, #556]	; (800356c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	61fb      	str	r3, [r7, #28]
          break;
 8003344:	e065      	b.n	8003412 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003352:	d160      	bne.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003354:	4b84      	ldr	r3, [pc, #528]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003360:	d159      	bne.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003362:	4b81      	ldr	r3, [pc, #516]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800336c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	fb03 f202 	mul.w	r2, r3, r2
 8003376:	4b7c      	ldr	r3, [pc, #496]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	3301      	adds	r3, #1
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003388:	4b77      	ldr	r3, [pc, #476]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0d5b      	lsrs	r3, r3, #21
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	3301      	adds	r3, #1
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	61fb      	str	r3, [r7, #28]
          break;
 800339e:	e03a      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80033a0:	4b71      	ldr	r3, [pc, #452]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d135      	bne.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80033ae:	4b6e      	ldr	r3, [pc, #440]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ba:	d12e      	bne.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	fb03 f202 	mul.w	r2, r3, r2
 80033d0:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	3301      	adds	r3, #1
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	0d5b      	lsrs	r3, r3, #21
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	3301      	adds	r3, #1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	61fb      	str	r3, [r7, #28]
          break;
 80033f8:	e00f      	b.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80033fa:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80033fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d10a      	bne.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8003408:	4b59      	ldr	r3, [pc, #356]	; (8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 800340a:	61fb      	str	r3, [r7, #28]
          break;
 800340c:	e007      	b.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 800340e:	bf00      	nop
 8003410:	e384      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003412:	bf00      	nop
 8003414:	e382      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003416:	bf00      	nop
 8003418:	e380      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800341a:	bf00      	nop
 800341c:	e37e      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800341e:	bf00      	nop
        break;
 8003420:	e37c      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d828      	bhi.n	8003486 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	08003455 	.word	0x08003455
 8003444:	0800345d 	.word	0x0800345d
 8003448:	08003471 	.word	0x08003471
          frequency = HAL_RCC_GetPCLK2Freq();
 800344c:	f7ff fa14 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003450:	61f8      	str	r0, [r7, #28]
          break;
 8003452:	e01d      	b.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003454:	f7ff f962 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003458:	61f8      	str	r0, [r7, #28]
          break;
 800345a:	e019      	b.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800345c:	4b42      	ldr	r3, [pc, #264]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d10f      	bne.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 800346a:	4b42      	ldr	r3, [pc, #264]	; (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 800346c:	61fb      	str	r3, [r7, #28]
          break;
 800346e:	e00c      	b.n	800348a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003470:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d107      	bne.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 800347e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003482:	61fb      	str	r3, [r7, #28]
          break;
 8003484:	e003      	b.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8003486:	bf00      	nop
 8003488:	e348      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800348a:	bf00      	nop
 800348c:	e346      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800348e:	bf00      	nop
        break;
 8003490:	e344      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003492:	4b35      	ldr	r3, [pc, #212]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d83a      	bhi.n	800351a <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 80034a4:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034e1 	.word	0x080034e1
 80034b0:	0800351b 	.word	0x0800351b
 80034b4:	0800351b 	.word	0x0800351b
 80034b8:	0800351b 	.word	0x0800351b
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	0800351b 	.word	0x0800351b
 80034c4:	0800351b 	.word	0x0800351b
 80034c8:	0800351b 	.word	0x0800351b
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	0800351b 	.word	0x0800351b
 80034d4:	0800351b 	.word	0x0800351b
 80034d8:	0800351b 	.word	0x0800351b
 80034dc:	08003505 	.word	0x08003505
          frequency = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7ff f9b4 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 80034e4:	61f8      	str	r0, [r7, #28]
          break;
 80034e6:	e01d      	b.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 80034e8:	f7ff f918 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80034ec:	61f8      	str	r0, [r7, #28]
          break;
 80034ee:	e019      	b.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fc:	d10f      	bne.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 80034fe:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8003500:	61fb      	str	r3, [r7, #28]
          break;
 8003502:	e00c      	b.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b02      	cmp	r3, #2
 8003510:	d107      	bne.n	8003522 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8003512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003516:	61fb      	str	r3, [r7, #28]
          break;
 8003518:	e003      	b.n	8003522 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 800351a:	bf00      	nop
 800351c:	e2fe      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800351e:	bf00      	nop
 8003520:	e2fc      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003522:	bf00      	nop
        break;
 8003524:	e2fa      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b30      	cmp	r3, #48	; 0x30
 8003536:	d029      	beq.n	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b30      	cmp	r3, #48	; 0x30
 800353c:	d831      	bhi.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b20      	cmp	r3, #32
 8003542:	d019      	beq.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b20      	cmp	r3, #32
 8003548:	d82b      	bhi.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b10      	cmp	r3, #16
 8003554:	d004      	beq.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8003556:	e024      	b.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003558:	f7ff f978 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 800355c:	61f8      	str	r0, [r7, #28]
          break;
 800355e:	e025      	b.n	80035ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8003560:	f7ff f8dc 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003564:	61f8      	str	r0, [r7, #28]
          break;
 8003566:	e021      	b.n	80035ac <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8003568:	40021000 	.word	0x40021000
 800356c:	0800c89c 	.word	0x0800c89c
 8003570:	02dc6c00 	.word	0x02dc6c00
 8003574:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003578:	4b8f      	ldr	r3, [pc, #572]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003584:	d10f      	bne.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8003586:	4b8d      	ldr	r3, [pc, #564]	; (80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003588:	61fb      	str	r3, [r7, #28]
          break;
 800358a:	e00c      	b.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800358c:	4b8a      	ldr	r3, [pc, #552]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d107      	bne.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 800359a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359e:	61fb      	str	r3, [r7, #28]
          break;
 80035a0:	e003      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 80035a2:	bf00      	nop
 80035a4:	e2ba      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80035a6:	bf00      	nop
 80035a8:	e2b8      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80035aa:	bf00      	nop
        break;
 80035ac:	e2b6      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80035ae:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2bc0      	cmp	r3, #192	; 0xc0
 80035be:	d021      	beq.n	8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2bc0      	cmp	r3, #192	; 0xc0
 80035c4:	d829      	bhi.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b80      	cmp	r3, #128	; 0x80
 80035ca:	d011      	beq.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d823      	bhi.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d004      	beq.n	80035e8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 80035de:	e01c      	b.n	800361a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7ff f934 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 80035e4:	61f8      	str	r0, [r7, #28]
          break;
 80035e6:	e01d      	b.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 80035e8:	f7ff f898 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80035ec:	61f8      	str	r0, [r7, #28]
          break;
 80035ee:	e019      	b.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80035f0:	4b71      	ldr	r3, [pc, #452]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fc:	d10f      	bne.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003600:	61fb      	str	r3, [r7, #28]
          break;
 8003602:	e00c      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003604:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d107      	bne.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8003612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003616:	61fb      	str	r3, [r7, #28]
          break;
 8003618:	e003      	b.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 800361a:	bf00      	nop
 800361c:	e27e      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800361e:	bf00      	nop
 8003620:	e27c      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003622:	bf00      	nop
        break;
 8003624:	e27a      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003626:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003638:	d025      	beq.n	8003686 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003640:	d82c      	bhi.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d013      	beq.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003650:	d824      	bhi.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d004      	beq.n	800366a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8003660:	e01c      	b.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003662:	f7ff f8f3 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003666:	61f8      	str	r0, [r7, #28]
          break;
 8003668:	e01d      	b.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 800366a:	f7ff f857 	bl	800271c <HAL_RCC_GetSysClockFreq>
 800366e:	61f8      	str	r0, [r7, #28]
          break;
 8003670:	e019      	b.n	80036a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003672:	4b51      	ldr	r3, [pc, #324]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367e:	d10f      	bne.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8003680:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003682:	61fb      	str	r3, [r7, #28]
          break;
 8003684:	e00c      	b.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003686:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d107      	bne.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8003694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003698:	61fb      	str	r3, [r7, #28]
          break;
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 800369c:	bf00      	nop
 800369e:	e23d      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80036a0:	bf00      	nop
 80036a2:	e23b      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80036a4:	bf00      	nop
        break;
 80036a6:	e239      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ba:	d025      	beq.n	8003708 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036c2:	d82c      	bhi.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ca:	d013      	beq.n	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d2:	d824      	bhi.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e0:	d004      	beq.n	80036ec <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 80036e2:	e01c      	b.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7ff f8b2 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 80036e8:	61f8      	str	r0, [r7, #28]
          break;
 80036ea:	e01d      	b.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 80036ec:	f7ff f816 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80036f0:	61f8      	str	r0, [r7, #28]
          break;
 80036f2:	e019      	b.n	8003728 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80036f4:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003700:	d10f      	bne.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8003702:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8003704:	61fb      	str	r3, [r7, #28]
          break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d107      	bne.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8003716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371a:	61fb      	str	r3, [r7, #28]
          break;
 800371c:	e003      	b.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 800371e:	bf00      	nop
 8003720:	e1fc      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003722:	bf00      	nop
 8003724:	e1fa      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003726:	bf00      	nop
        break;
 8003728:	e1f8      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800372a:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800373c:	d00c      	beq.n	8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003744:	d868      	bhi.n	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800374c:	d008      	beq.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003754:	d034      	beq.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8003756:	e05f      	b.n	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8003758:	f7fe ffe0 	bl	800271c <HAL_RCC_GetSysClockFreq>
 800375c:	61f8      	str	r0, [r7, #28]
          break;
 800375e:	e060      	b.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376c:	d156      	bne.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d050      	beq.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003784:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	fb03 f202 	mul.w	r2, r3, r2
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	3301      	adds	r3, #1
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	0e5b      	lsrs	r3, r3, #25
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	3301      	adds	r3, #1
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	61fb      	str	r3, [r7, #28]
          break;
 80037b6:	e031      	b.n	800381c <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80037b8:	40021000 	.word	0x40021000
 80037bc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80037c0:	4b9c      	ldr	r3, [pc, #624]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037cc:	d128      	bne.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80037ce:	4b99      	ldr	r3, [pc, #612]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d022      	beq.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80037da:	4b96      	ldr	r3, [pc, #600]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	fb03 f202 	mul.w	r2, r3, r2
 80037ee:	4b91      	ldr	r3, [pc, #580]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	3301      	adds	r3, #1
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003800:	4b8c      	ldr	r3, [pc, #560]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	0e5b      	lsrs	r3, r3, #25
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	61fb      	str	r3, [r7, #28]
          break;
 8003816:	e003      	b.n	8003820 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8003818:	bf00      	nop
 800381a:	e17f      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800381c:	bf00      	nop
 800381e:	e17d      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003820:	bf00      	nop
        break;
 8003822:	e17b      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003824:	4b83      	ldr	r3, [pc, #524]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800382e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003836:	f7ff f81f 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 800383a:	61f8      	str	r0, [r7, #28]
        break;
 800383c:	e16e      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe ff6d 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003842:	61f8      	str	r0, [r7, #28]
        break;
 8003844:	e16a      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003846:	4b7b      	ldr	r3, [pc, #492]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003858:	d013      	beq.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003860:	d819      	bhi.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d004      	beq.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8003870:	e011      	b.n	8003896 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003872:	f7fe ffeb 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003876:	61f8      	str	r0, [r7, #28]
          break;
 8003878:	e010      	b.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800387a:	f7fe ff4f 	bl	800271c <HAL_RCC_GetSysClockFreq>
 800387e:	61f8      	str	r0, [r7, #28]
          break;
 8003880:	e00c      	b.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003882:	4b6c      	ldr	r3, [pc, #432]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388e:	d104      	bne.n	800389a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8003890:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003892:	61fb      	str	r3, [r7, #28]
          break;
 8003894:	e001      	b.n	800389a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8003896:	bf00      	nop
 8003898:	e140      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800389a:	bf00      	nop
        break;
 800389c:	e13e      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b0:	d013      	beq.n	80038da <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b8:	d819      	bhi.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c6:	d004      	beq.n	80038d2 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 80038c8:	e011      	b.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80038ca:	f7fe ffbf 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 80038ce:	61f8      	str	r0, [r7, #28]
          break;
 80038d0:	e010      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 80038d2:	f7fe ff23 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80038d6:	61f8      	str	r0, [r7, #28]
          break;
 80038d8:	e00c      	b.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038da:	4b56      	ldr	r3, [pc, #344]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d104      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 80038e8:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80038ea:	61fb      	str	r3, [r7, #28]
          break;
 80038ec:	e001      	b.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 80038ee:	bf00      	nop
 80038f0:	e114      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80038f2:	bf00      	nop
        break;
 80038f4:	e112      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80038f6:	4b4f      	ldr	r3, [pc, #316]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003908:	d013      	beq.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003910:	d819      	bhi.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d004      	beq.n	8003922 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d004      	beq.n	800392a <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8003920:	e011      	b.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003922:	f7fe ff93 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003926:	61f8      	str	r0, [r7, #28]
          break;
 8003928:	e010      	b.n	800394c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 800392a:	f7fe fef7 	bl	800271c <HAL_RCC_GetSysClockFreq>
 800392e:	61f8      	str	r0, [r7, #28]
          break;
 8003930:	e00c      	b.n	800394c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003932:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d104      	bne.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8003940:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003942:	61fb      	str	r3, [r7, #28]
          break;
 8003944:	e001      	b.n	800394a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8003946:	bf00      	nop
 8003948:	e0e8      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800394a:	bf00      	nop
        break;
 800394c:	e0e6      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800394e:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d011      	beq.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d818      	bhi.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d004      	beq.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8003972:	e011      	b.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003974:	f7fe ff6a 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003978:	61f8      	str	r0, [r7, #28]
          break;
 800397a:	e010      	b.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 800397c:	f7fe fece 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003980:	61f8      	str	r0, [r7, #28]
          break;
 8003982:	e00c      	b.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003984:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003990:	d104      	bne.n	800399c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003994:	61fb      	str	r3, [r7, #28]
          break;
 8003996:	e001      	b.n	800399c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8003998:	bf00      	nop
 800399a:	e0bf      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800399c:	bf00      	nop
        break;
 800399e:	e0bd      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80039a0:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039b2:	d02c      	beq.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039ba:	d833      	bhi.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039c2:	d01a      	beq.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039ca:	d82b      	bhi.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d004      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d8:	d004      	beq.n	80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80039da:	e023      	b.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe ff36 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 80039e0:	61f8      	str	r0, [r7, #28]
          break;
 80039e2:	e026      	b.n	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80039e4:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d11a      	bne.n	8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80039f2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80039f6:	61fb      	str	r3, [r7, #28]
          break;
 80039f8:	e016      	b.n	8003a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d111      	bne.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8003a0a:	61fb      	str	r3, [r7, #28]
          break;
 8003a0c:	e00e      	b.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8003a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a20:	61fb      	str	r3, [r7, #28]
          break;
 8003a22:	e005      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8003a24:	bf00      	nop
 8003a26:	e079      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003a28:	bf00      	nop
 8003a2a:	e077      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003a2c:	bf00      	nop
 8003a2e:	e075      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003a30:	bf00      	nop
        break;
 8003a32:	e073      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8003a34:	40021000 	.word	0x40021000
 8003a38:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a4e:	d02c      	beq.n	8003aaa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a56:	d833      	bhi.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a5e:	d01a      	beq.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a66:	d82b      	bhi.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a74:	d004      	beq.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8003a76:	e023      	b.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a78:	f7fe fee8 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003a7c:	61f8      	str	r0, [r7, #28]
          break;
 8003a7e:	e026      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d11a      	bne.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8003a8e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003a92:	61fb      	str	r3, [r7, #28]
          break;
 8003a94:	e016      	b.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a96:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d111      	bne.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8003aa4:	4b21      	ldr	r3, [pc, #132]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8003aa6:	61fb      	str	r3, [r7, #28]
          break;
 8003aa8:	e00e      	b.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d109      	bne.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8003ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003abc:	61fb      	str	r3, [r7, #28]
          break;
 8003abe:	e005      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8003ac0:	bf00      	nop
 8003ac2:	e02b      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003ac4:	bf00      	nop
 8003ac6:	e029      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003ac8:	bf00      	nop
 8003aca:	e027      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8003acc:	bf00      	nop
        break;
 8003ace:	e025      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003ad0:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8003aea:	e00d      	b.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe feae 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003af0:	61f8      	str	r0, [r7, #28]
          break;
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b00:	d101      	bne.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8003b04:	61fb      	str	r3, [r7, #28]
          break;
 8003b06:	bf00      	nop
        break;
 8003b08:	e008      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8003b1a:	bf00      	nop
    }
  }

  return(frequency);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	00f42400 	.word	0x00f42400

08003b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b3e:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d018      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b4a:	4b71      	ldr	r3, [pc, #452]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d10d      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b62:	4b6b      	ldr	r3, [pc, #428]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
       ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d047      	beq.n	8003c06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e044      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d018      	beq.n	8003bb6 <RCCEx_PLLSAI1_Config+0x86>
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d825      	bhi.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa4>
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <RCCEx_PLLSAI1_Config+0x62>
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d009      	beq.n	8003ba4 <RCCEx_PLLSAI1_Config+0x74>
 8003b90:	e020      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b92:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11d      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba2:	e01a      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ba4:	4b5a      	ldr	r3, [pc, #360]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d116      	bne.n	8003bde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e013      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bb6:	4b56      	ldr	r3, [pc, #344]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bd2:	e006      	b.n	8003be2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e004      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003be2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bea:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	4943      	ldr	r1, [pc, #268]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d17c      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c0c:	4b40      	ldr	r3, [pc, #256]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a3f      	ldr	r2, [pc, #252]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c18:	f7fd fa14 	bl	8001044 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c1e:	e009      	b.n	8003c34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c20:	f7fd fa10 	bl	8001044 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	73fb      	strb	r3, [r7, #15]
        break;
 8003c32:	e005      	b.n	8003c40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ef      	bne.n	8003c20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d15f      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d110      	bne.n	8003c6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4c:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6892      	ldr	r2, [r2, #8]
 8003c5c:	0211      	lsls	r1, r2, #8
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	06d2      	lsls	r2, r2, #27
 8003c64:	430a      	orrs	r2, r1
 8003c66:	492a      	ldr	r1, [pc, #168]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	610b      	str	r3, [r1, #16]
 8003c6c:	e027      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d112      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6912      	ldr	r2, [r2, #16]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0552      	lsls	r2, r2, #21
 8003c90:	430a      	orrs	r2, r1
 8003c92:	491f      	ldr	r1, [pc, #124]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
 8003c98:	e011      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ca2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6892      	ldr	r2, [r2, #8]
 8003caa:	0211      	lsls	r1, r2, #8
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6952      	ldr	r2, [r2, #20]
 8003cb0:	0852      	lsrs	r2, r2, #1
 8003cb2:	3a01      	subs	r2, #1
 8003cb4:	0652      	lsls	r2, r2, #25
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	4915      	ldr	r1, [pc, #84]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd f9bb 	bl	8001044 <HAL_GetTick>
 8003cce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cd0:	e009      	b.n	8003ce6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd2:	f7fd f9b7 	bl	8001044 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d902      	bls.n	8003ce6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ce4:	e005      	b.n	8003cf2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ef      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000

08003d14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d22:	4b69      	ldr	r3, [pc, #420]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d018      	beq.n	8003d60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d2e:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0203 	and.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d10d      	bne.n	8003d5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
       ||
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d46:	4b60      	ldr	r3, [pc, #384]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
       ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d047      	beq.n	8003dea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	e044      	b.n	8003dea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d018      	beq.n	8003d9a <RCCEx_PLLSAI2_Config+0x86>
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d825      	bhi.n	8003db8 <RCCEx_PLLSAI2_Config+0xa4>
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d002      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x62>
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d009      	beq.n	8003d88 <RCCEx_PLLSAI2_Config+0x74>
 8003d74:	e020      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d76:	4b54      	ldr	r3, [pc, #336]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11d      	bne.n	8003dbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d86:	e01a      	b.n	8003dbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d88:	4b4f      	ldr	r3, [pc, #316]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d98:	e013      	b.n	8003dc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003da6:	4b48      	ldr	r3, [pc, #288]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003db6:	e006      	b.n	8003dc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e004      	b.n	8003dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e002      	b.n	8003dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10d      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dce:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	430b      	orrs	r3, r1
 8003de4:	4938      	ldr	r1, [pc, #224]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d166      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003df0:	4b35      	ldr	r3, [pc, #212]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a34      	ldr	r2, [pc, #208]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dfc:	f7fd f922 	bl	8001044 <HAL_GetTick>
 8003e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e02:	e009      	b.n	8003e18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e04:	f7fd f91e 	bl	8001044 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d902      	bls.n	8003e18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	73fb      	strb	r3, [r7, #15]
        break;
 8003e16:	e005      	b.n	8003e24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ef      	bne.n	8003e04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d149      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d110      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6892      	ldr	r2, [r2, #8]
 8003e40:	0211      	lsls	r1, r2, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68d2      	ldr	r2, [r2, #12]
 8003e46:	06d2      	lsls	r2, r2, #27
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	491f      	ldr	r1, [pc, #124]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	614b      	str	r3, [r1, #20]
 8003e50:	e011      	b.n	8003e76 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	0211      	lsls	r1, r2, #8
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6912      	ldr	r2, [r2, #16]
 8003e68:	0852      	lsrs	r2, r2, #1
 8003e6a:	3a01      	subs	r2, #1
 8003e6c:	0652      	lsls	r2, r2, #25
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	4915      	ldr	r1, [pc, #84]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7fd f8df 	bl	8001044 <HAL_GetTick>
 8003e86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e88:	e009      	b.n	8003e9e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e8a:	f7fd f8db 	bl	8001044 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d902      	bls.n	8003e9e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e9c:	e005      	b.n	8003eaa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0ef      	beq.n	8003e8a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000

08003ecc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d10c      	bne.n	8003f04 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003eea:	4b77      	ldr	r3, [pc, #476]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003ef4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003efc:	d112      	bne.n	8003f24 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003efe:	4b73      	ldr	r3, [pc, #460]	; (80040cc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	e00f      	b.n	8003f24 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	d10b      	bne.n	8003f24 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003f0c:	4b6e      	ldr	r3, [pc, #440]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8003f16:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f1e:	d101      	bne.n	8003f24 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8003f20:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8003f22:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80c6 	bne.w	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f36:	d003      	beq.n	8003f40 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f3e:	d13b      	bne.n	8003fb8 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003f40:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4c:	f040 80b3 	bne.w	80040b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8003f50:	4b5d      	ldr	r3, [pc, #372]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80ac 	beq.w	80040b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003f5e:	4b5a      	ldr	r3, [pc, #360]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	3301      	adds	r3, #1
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003f72:	4b55      	ldr	r3, [pc, #340]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f7c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003f7e:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	0edb      	lsrs	r3, r3, #27
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003f90:	4b4d      	ldr	r3, [pc, #308]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8003f9c:	2311      	movs	r3, #17
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	e001      	b.n	8003fa6 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	fb03 f202 	mul.w	r2, r3, r2
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8003fb6:	e07e      	b.n	80040b6 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d139      	bne.n	8004032 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8003fbe:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fca:	d175      	bne.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8003fcc:	4b3e      	ldr	r3, [pc, #248]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d06f      	beq.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	0a1b      	lsrs	r3, r3, #8
 8003ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	0edb      	lsrs	r3, r3, #27
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8004016:	2311      	movs	r3, #17
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e001      	b.n	8004020 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 800401c:	2307      	movs	r3, #7
 800401e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	fb03 f202 	mul.w	r2, r3, r2
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	fbb2 f3f3 	udiv	r3, r2, r3
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e042      	b.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004038:	d003      	beq.n	8004042 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004040:	d13a      	bne.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004042:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404e:	d133      	bne.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02d      	beq.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	3301      	adds	r3, #1
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004070:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	0edb      	lsrs	r3, r3, #27
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 800409a:	2311      	movs	r3, #17
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e001      	b.n	80040a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80040a0:	2307      	movs	r3, #7
 80040a2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	fb03 f202 	mul.w	r2, r3, r2
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	e000      	b.n	80040b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80040b6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80040b8:	69fb      	ldr	r3, [r7, #28]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3724      	adds	r7, #36	; 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	001fff68 	.word	0x001fff68

080040d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e022      	b.n	8004128 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fc fdb1 	bl	8000c5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f814 	bl	8004130 <HAL_SD_InitCard>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e00a      	b.n	8004128 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004130:	b5b0      	push	{r4, r5, r7, lr}
 8004132:	b08e      	sub	sp, #56	; 0x38
 8004134:	af04      	add	r7, sp, #16
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800414c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004150:	f7fe ff36 	bl	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004154:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e07b      	b.n	8004268 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	09db      	lsrs	r3, r3, #7
 8004174:	4a3e      	ldr	r2, [pc, #248]	; (8004270 <HAL_SD_InitCard+0x140>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	3b02      	subs	r3, #2
 800417e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681d      	ldr	r5, [r3, #0]
 8004184:	466c      	mov	r4, sp
 8004186:	f107 0314 	add.w	r3, r7, #20
 800418a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800418e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004198:	4628      	mov	r0, r5
 800419a:	f001 fd93 	bl	8005cc4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ac:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fdd1 	bl	8005d5a <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c6:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	3302      	adds	r3, #2
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80041d4:	4a27      	ldr	r2, [pc, #156]	; (8004274 <HAL_SD_InitCard+0x144>)
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fc ff3c 	bl	800105c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 ffdf 	bl	80051a8 <SD_PowerON>
 80041ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e02e      	b.n	8004268 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fefe 	bl	800500c <SD_InitCard>
 8004210:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e01b      	b.n	8004268 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fe21 	bl	8005e80 <SDMMC_CmdBlockLength>
 800423e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00f      	beq.n	8004266 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a0b      	ldr	r2, [pc, #44]	; (8004278 <HAL_SD_InitCard+0x148>)
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3728      	adds	r7, #40	; 0x28
 800426c:	46bd      	mov	sp, r7
 800426e:	bdb0      	pop	{r4, r5, r7, pc}
 8004270:	014f8b59 	.word	0x014f8b59
 8004274:	00012110 	.word	0x00012110
 8004278:	004005ff 	.word	0x004005ff

0800427c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08c      	sub	sp, #48	; 0x30
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0a9      	b.n	80043f8 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	f040 80a2 	bne.w	80043f6 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80042b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	441a      	add	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d907      	bls.n	80042d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e090      	b.n	80043f8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a45      	ldr	r2, [pc, #276]	; (8004400 <HAL_SD_ReadBlocks_DMA+0x184>)
 80042ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a44      	ldr	r2, [pc, #272]	; (8004404 <HAL_SD_ReadBlocks_DMA+0x188>)
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2200      	movs	r2, #0
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3380      	adds	r3, #128	; 0x80
 8004308:	4619      	mov	r1, r3
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	f7fd f8f3 	bl	80014fc <HAL_DMA_Start_IT>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00f      	beq.n	800433c <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a39      	ldr	r2, [pc, #228]	; (8004408 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8004322:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e05d      	b.n	80043f8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0208 	orr.w	r2, r2, #8
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	2b01      	cmp	r3, #1
 8004352:	d002      	beq.n	800435a <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	025b      	lsls	r3, r3, #9
 8004358:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	025b      	lsls	r3, r3, #9
 8004364:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004366:	2390      	movs	r3, #144	; 0x90
 8004368:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800436a:	2302      	movs	r3, #2
 800436c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004372:	2301      	movs	r3, #1
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f107 0210 	add.w	r2, r7, #16
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fd51 	bl	8005e28 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d90a      	bls.n	80043a2 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2282      	movs	r2, #130	; 0x82
 8004390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004398:	4618      	mov	r0, r3
 800439a:	f001 fdb5 	bl	8005f08 <SDMMC_CmdReadMultiBlock>
 800439e:	62f8      	str	r0, [r7, #44]	; 0x2c
 80043a0:	e009      	b.n	80043b6 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2281      	movs	r2, #129	; 0x81
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ae:	4618      	mov	r0, r3
 80043b0:	f001 fd88 	bl	8005ec4 <SDMMC_CmdReadSingleBlock>
 80043b4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d012      	beq.n	80043e2 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a11      	ldr	r2, [pc, #68]	; (8004408 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e00a      	b.n	80043f8 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80043f0:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3730      	adds	r7, #48	; 0x30
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	08004e27 	.word	0x08004e27
 8004404:	08004e99 	.word	0x08004e99
 8004408:	004005ff 	.word	0x004005ff

0800440c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	; 0x30
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d107      	bne.n	8004434 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0ac      	b.n	800458e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 80a5 	bne.w	800458c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	441a      	add	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	429a      	cmp	r2, r3
 8004454:	d907      	bls.n	8004466 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e093      	b.n	800458e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2203      	movs	r2, #3
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2200      	movs	r2, #0
 8004474:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	4a47      	ldr	r2, [pc, #284]	; (8004598 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800447c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	4a46      	ldr	r2, [pc, #280]	; (800459c <HAL_SD_WriteBlocks_DMA+0x190>)
 8004484:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	2200      	movs	r2, #0
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	2b01      	cmp	r3, #1
 8004494:	d002      	beq.n	800449c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	025b      	lsls	r3, r3, #9
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d90a      	bls.n	80044b8 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22a0      	movs	r2, #160	; 0xa0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fd6e 	bl	8005f90 <SDMMC_CmdWriteMultiBlock>
 80044b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80044b6:	e009      	b.n	80044cc <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2290      	movs	r2, #144	; 0x90
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 fd41 	bl	8005f4c <SDMMC_CmdWriteSingleBlock>
 80044ca:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d012      	beq.n	80044f8 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a32      	ldr	r2, [pc, #200]	; (80045a0 <HAL_SD_WriteBlocks_DMA+0x194>)
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	431a      	orrs	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e04a      	b.n	800458e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0208 	orr.w	r2, r2, #8
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3380      	adds	r3, #128	; 0x80
 8004514:	461a      	mov	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	025b      	lsls	r3, r3, #9
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	f7fc ffee 	bl	80014fc <HAL_DMA_Start_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d012      	beq.n	800454c <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <HAL_SD_WriteBlocks_DMA+0x194>)
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e020      	b.n	800458e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800454c:	f04f 33ff 	mov.w	r3, #4294967295
 8004550:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	025b      	lsls	r3, r3, #9
 8004556:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004558:	2390      	movs	r3, #144	; 0x90
 800455a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004560:	2300      	movs	r3, #0
 8004562:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004564:	2301      	movs	r3, #1
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f107 0210 	add.w	r2, r7, #16
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fc58 	bl	8005e28 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 021a 	orr.w	r2, r2, #26
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3730      	adds	r7, #48	; 0x30
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	08004dfd 	.word	0x08004dfd
 800459c:	08004e99 	.word	0x08004e99
 80045a0:	004005ff 	.word	0x004005ff

080045a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_SD_IRQHandler+0x2e>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f001 f802 	bl	80055d4 <SD_Read_IT>
 80045d0:	e155      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 808f 	beq.w	8004700 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80045fa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80045fe:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d039      	beq.n	800468e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_SD_IRQHandler+0x8a>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d011      	beq.n	8004652 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f001 fcce 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004638:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f91f 	bl	8004890 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f240 523a 	movw	r2, #1338	; 0x53a
 800465a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_SD_IRQHandler+0xda>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f002 f974 	bl	800696c <HAL_SD_RxCpltCallback>
 8004684:	e0fb      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f002 f966 	bl	8006958 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800468c:	e0f7      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80f2 	beq.w	800487e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fc93 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 80046ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f8e4 	bl	8004890 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 80d5 	bne.w	800487e <HAL_SD_IRQHandler+0x2da>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f040 80cf 	bne.w	800487e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0208 	bic.w	r2, r2, #8
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f002 f92d 	bl	8006958 <HAL_SD_TxCpltCallback>
}
 80046fe:	e0be      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_SD_IRQHandler+0x17c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 ffac 	bl	8005676 <SD_Write_IT>
 800471e:	e0ae      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a7 	beq.w	800487e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	f043 0202 	orr.w	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	f043 0208 	orr.w	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	f043 0210 	orr.w	r2, r3, #16
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f240 523a 	movw	r2, #1338	; 0x53a
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fc0c 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f855 	bl	8004890 <HAL_SD_ErrorCallback>
}
 80047e6:	e04a      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d045      	beq.n	800487e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_SD_IRQHandler+0x262>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d011      	beq.n	800482a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <HAL_SD_IRQHandler+0x2e4>)
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc ff10 	bl	8001638 <HAL_DMA_Abort_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d02f      	beq.n	800487e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fb84 	bl	8004f30 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004828:	e029      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <HAL_SD_IRQHandler+0x29a>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d011      	beq.n	8004862 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <HAL_SD_IRQHandler+0x2e8>)
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f7fc fef4 	bl	8001638 <HAL_DMA_Abort_IT>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d013      	beq.n	800487e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb9f 	bl	8004f9e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004860:	e00d      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f002 f864 	bl	8006944 <HAL_SD_AbortCallback>
}
 800487c:	e7ff      	b.n	800487e <HAL_SD_IRQHandler+0x2da>
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	08004f31 	.word	0x08004f31
 800488c:	08004f9f 	.word	0x08004f9f

08004890 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b2:	0f9b      	lsrs	r3, r3, #30
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	b29a      	uxth	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	b2da      	uxtb	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004922:	0bdb      	lsrs	r3, r3, #15
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004934:	0b9b      	lsrs	r3, r3, #14
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004946:	0b5b      	lsrs	r3, r3, #13
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004958:	0b1b      	lsrs	r3, r3, #12
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	b2da      	uxtb	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2200      	movs	r2, #0
 800496a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	2b00      	cmp	r3, #0
 8004972:	d163      	bne.n	8004a3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004978:	009a      	lsls	r2, r3, #2
 800497a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800497e:	4013      	ands	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004984:	0f92      	lsrs	r2, r2, #30
 8004986:	431a      	orrs	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004990:	0edb      	lsrs	r3, r3, #27
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	b2da      	uxtb	r2, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a2:	0e1b      	lsrs	r3, r3, #24
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b4:	0d5b      	lsrs	r3, r3, #21
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c6:	0c9b      	lsrs	r3, r3, #18
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d8:	0bdb      	lsrs	r3, r3, #15
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	7e1b      	ldrb	r3, [r3, #24]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	3302      	adds	r3, #2
 80049fc:	2201      	movs	r2, #1
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a06:	fb03 f202 	mul.w	r2, r3, r2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	7a1b      	ldrb	r3, [r3, #8]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	2201      	movs	r2, #1
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004a28:	0a52      	lsrs	r2, r2, #9
 8004a2a:	fb03 f202 	mul.w	r2, r3, r2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60
 8004a3a:	e031      	b.n	8004aa0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d11d      	bne.n	8004a80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a52:	0c1b      	lsrs	r3, r3, #16
 8004a54:	431a      	orrs	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	029a      	lsls	r2, r3, #10
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	661a      	str	r2, [r3, #96]	; 0x60
 8004a7e:	e00f      	b.n	8004aa0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a58      	ldr	r2, [pc, #352]	; (8004be8 <HAL_SD_GetCardCSD+0x344>)
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e09d      	b.n	8004bdc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa4:	0b9b      	lsrs	r3, r3, #14
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab6:	09db      	lsrs	r3, r3, #7
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	0fdb      	lsrs	r3, r3, #31
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	0f5b      	lsrs	r3, r3, #29
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	0e9b      	lsrs	r3, r3, #26
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	0d9b      	lsrs	r3, r3, #22
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	0d5b      	lsrs	r3, r3, #21
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	0bdb      	lsrs	r3, r3, #15
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	0b9b      	lsrs	r3, r3, #14
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	0b5b      	lsrs	r3, r3, #13
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	0b1b      	lsrs	r3, r3, #12
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	0a9b      	lsrs	r3, r3, #10
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	004005ff 	.word	0x004005ff

08004bec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b090      	sub	sp, #64	; 0x40
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2203      	movs	r2, #3
 8004c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d02e      	beq.n	8004cc2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6a:	d106      	bne.n	8004c7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
 8004c78:	e029      	b.n	8004cce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c80:	d10a      	bne.n	8004c98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fb46 	bl	8005314 <SD_WideBus_Enable>
 8004c88:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
 8004c96:	e01a      	b.n	8004cce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb83 	bl	80053aa <SD_WideBus_Disable>
 8004ca4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8004cb2:	e00c      	b.n	8004cce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc0:	e005      	b.n	8004cce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004ce4:	e042      	b.n	8004d6c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004ce6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004cea:	f7fe f969 	bl	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cee:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d031      	beq.n	8004d5a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	3302      	adds	r3, #2
 8004d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	4a25      	ldr	r2, [pc, #148]	; (8004db4 <HAL_SD_ConfigWideBusOperation+0x170>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d907      	bls.n	8004d34 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	4a24      	ldr	r2, [pc, #144]	; (8004db8 <HAL_SD_ConfigWideBusOperation+0x174>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	0ddb      	lsrs	r3, r3, #23
 8004d2e:	3b02      	subs	r3, #2
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	e002      	b.n	8004d3a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	466c      	mov	r4, sp
 8004d40:	f107 0318 	add.w	r3, r7, #24
 8004d44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d4c:	f107 030c 	add.w	r3, r7, #12
 8004d50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 ffb6 	bl	8005cc4 <SDMMC_Init>
 8004d58:	e008      	b.n	8004d6c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 f883 	bl	8005e80 <SDMMC_CmdBlockLength>
 8004d7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3730      	adds	r7, #48	; 0x30
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bdb0      	pop	{r4, r5, r7, pc}
 8004db0:	004005ff 	.word	0x004005ff
 8004db4:	017d7840 	.word	0x017d7840
 8004db8:	55e63b89 	.word	0x55e63b89

08004dbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa78 	bl	80052c4 <SD_SendStatus>
 8004dd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	0a5b      	lsrs	r3, r3, #9
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004df2:	693b      	ldr	r3, [r7, #16]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	2b82      	cmp	r3, #130	; 0x82
 8004e3a:	d111      	bne.n	8004e60 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f001 f8c7 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004e46:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fd18 	bl	8004890 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0208 	bic.w	r2, r2, #8
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e78:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f001 fd6f 	bl	800696c <HAL_SD_RxCpltCallback>
#endif
}
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <SD_DMAError+0x2a>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d12d      	bne.n	8004f1e <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <SD_DMAError+0x94>)
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8004ee6:	6978      	ldr	r0, [r7, #20]
 8004ee8:	f7ff ff68 	bl	8004dbc <HAL_SD_GetCardState>
 8004eec:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d002      	beq.n	8004efa <SD_DMAError+0x62>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10a      	bne.n	8004f10 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 f868 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004f04:	4602      	mov	r2, r0
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8004f1e:	6978      	ldr	r0, [r7, #20]
 8004f20:	f7ff fcb6 	bl	8004890 <HAL_SD_ErrorCallback>
#endif
}
 8004f24:	bf00      	nop
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	004005ff 	.word	0x004005ff

08004f30 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f46:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff ff37 	bl	8004dbc <HAL_SD_GetCardState>
 8004f4e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b06      	cmp	r3, #6
 8004f62:	d002      	beq.n	8004f6a <SD_DMATxAbort+0x3a>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	d10a      	bne.n	8004f80 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 f830 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f001 fcdb 	bl	8006944 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004f8e:	e002      	b.n	8004f96 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff fc7d 	bl	8004890 <HAL_SD_ErrorCallback>
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f240 523a 	movw	r2, #1338	; 0x53a
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff ff00 	bl	8004dbc <HAL_SD_GetCardState>
 8004fbc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b06      	cmp	r3, #6
 8004fd0:	d002      	beq.n	8004fd8 <SD_DMARxAbort+0x3a>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d10a      	bne.n	8004fee <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fff9 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f001 fca4 	bl	8006944 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004ffc:	e002      	b.n	8005004 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f7ff fc46 	bl	8004890 <HAL_SD_ErrorCallback>
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b094      	sub	sp, #80	; 0x50
 8005010:	af04      	add	r7, sp, #16
 8005012:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005014:	2301      	movs	r3, #1
 8005016:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 feab 	bl	8005d78 <SDMMC_GetPowerState>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005028:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800502c:	e0b8      	b.n	80051a0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005032:	2b03      	cmp	r3, #3
 8005034:	d02f      	beq.n	8005096 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f001 f8d4 	bl	80061e8 <SDMMC_CmdSendCID>
 8005040:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <SD_InitCard+0x40>
    {
      return errorstate;
 8005048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504a:	e0a9      	b.n	80051a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fed5 	bl	8005e02 <SDMMC_GetResponse>
 8005058:	4602      	mov	r2, r0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2104      	movs	r1, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fecc 	bl	8005e02 <SDMMC_GetResponse>
 800506a:	4602      	mov	r2, r0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2108      	movs	r1, #8
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fec3 	bl	8005e02 <SDMMC_GetResponse>
 800507c:	4602      	mov	r2, r0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	210c      	movs	r1, #12
 8005088:	4618      	mov	r0, r3
 800508a:	f000 feba 	bl	8005e02 <SDMMC_GetResponse>
 800508e:	4602      	mov	r2, r0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	2b03      	cmp	r3, #3
 800509c:	d00d      	beq.n	80050ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f107 020e 	add.w	r2, r7, #14
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 f8da 	bl	8006262 <SDMMC_CmdSetRelAdd>
 80050ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <SD_InitCard+0xae>
    {
      return errorstate;
 80050b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b8:	e072      	b.n	80051a0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d036      	beq.n	8005130 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80050c2:	89fb      	ldrh	r3, [r7, #14]
 80050c4:	461a      	mov	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d2:	041b      	lsls	r3, r3, #16
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f001 f8a4 	bl	8006224 <SDMMC_CmdSendCSD>
 80050dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80050e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e6:	e05b      	b.n	80051a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2100      	movs	r1, #0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fe87 	bl	8005e02 <SDMMC_GetResponse>
 80050f4:	4602      	mov	r2, r0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2104      	movs	r1, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fe7e 	bl	8005e02 <SDMMC_GetResponse>
 8005106:	4602      	mov	r2, r0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2108      	movs	r1, #8
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fe75 	bl	8005e02 <SDMMC_GetResponse>
 8005118:	4602      	mov	r2, r0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	210c      	movs	r1, #12
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fe6c 	bl	8005e02 <SDMMC_GetResponse>
 800512a:	4602      	mov	r2, r0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2104      	movs	r1, #4
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fe63 	bl	8005e02 <SDMMC_GetResponse>
 800513c:	4603      	mov	r3, r0
 800513e:	0d1a      	lsrs	r2, r3, #20
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fbaa 	bl	80048a4 <HAL_SD_GetCardCSD>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800515a:	e021      	b.n	80051a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	2200      	movs	r2, #0
 8005168:	461c      	mov	r4, r3
 800516a:	4615      	mov	r5, r2
 800516c:	4622      	mov	r2, r4
 800516e:	462b      	mov	r3, r5
 8005170:	4608      	mov	r0, r1
 8005172:	f000 ff51 	bl	8006018 <SDMMC_CmdSelDesel>
 8005176:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <SD_InitCard+0x176>
  {
    return errorstate;
 800517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005180:	e00e      	b.n	80051a0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681d      	ldr	r5, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	466c      	mov	r4, sp
 800518a:	f103 0210 	add.w	r2, r3, #16
 800518e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005194:	3304      	adds	r3, #4
 8005196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005198:	4628      	mov	r0, r5
 800519a:	f000 fd93 	bl	8005cc4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3740      	adds	r7, #64	; 0x40
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bdb0      	pop	{r4, r5, r7, pc}

080051a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 ff4c 	bl	800605e <SDMMC_CmdGoIdleState>
 80051c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	e072      	b.n	80052b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 ff5f 	bl	800609a <SDMMC_CmdOperCond>
 80051dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00d      	beq.n	8005200 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 ff35 	bl	800605e <SDMMC_CmdGoIdleState>
 80051f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <SD_PowerON+0x5e>
    {
      return errorstate;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	e05b      	b.n	80052b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	2b01      	cmp	r3, #1
 800520c:	d137      	bne.n	800527e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f000 ff5f 	bl	80060d8 <SDMMC_CmdAppCommand>
 800521a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d02d      	beq.n	800527e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005222:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005226:	e047      	b.n	80052b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f000 ff52 	bl	80060d8 <SDMMC_CmdAppCommand>
 8005234:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <SD_PowerON+0x98>
    {
      return errorstate;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	e03b      	b.n	80052b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	491e      	ldr	r1, [pc, #120]	; (80052c0 <SD_PowerON+0x118>)
 8005246:	4618      	mov	r0, r3
 8005248:	f000 ff68 	bl	800611c <SDMMC_CmdAppOperCommand>
 800524c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005254:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005258:	e02e      	b.n	80052b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fdce 	bl	8005e02 <SDMMC_GetResponse>
 8005266:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	0fdb      	lsrs	r3, r3, #31
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <SD_PowerON+0xcc>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <SD_PowerON+0xce>
 8005274:	2300      	movs	r3, #0
 8005276:	613b      	str	r3, [r7, #16]

    count++;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	3301      	adds	r3, #1
 800527c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005284:	4293      	cmp	r3, r2
 8005286:	d802      	bhi.n	800528e <SD_PowerON+0xe6>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0cc      	beq.n	8005228 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005294:	4293      	cmp	r3, r2
 8005296:	d902      	bls.n	800529e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800529c:	e00c      	b.n	80052b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
 80052ae:	e002      	b.n	80052b6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	c1100000 	.word	0xc1100000

080052c4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80052d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052d8:	e018      	b.n	800530c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 ffdc 	bl	80062a4 <SDMMC_CmdSendStatus>
 80052ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	e009      	b.n	800530c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd7f 	bl	8005e02 <SDMMC_GetResponse>
 8005304:	4602      	mov	r2, r0
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2100      	movs	r1, #0
 800532a:	4618      	mov	r0, r3
 800532c:	f000 fd69 	bl	8005e02 <SDMMC_GetResponse>
 8005330:	4603      	mov	r3, r0
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800533a:	d102      	bne.n	8005342 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800533c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005340:	e02f      	b.n	80053a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005342:	f107 030c 	add.w	r3, r7, #12
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f879 	bl	8005440 <SD_FindSCR>
 800534e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	e023      	b.n	80053a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01c      	beq.n	800539e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536c:	041b      	lsls	r3, r3, #16
 800536e:	4619      	mov	r1, r3
 8005370:	4610      	mov	r0, r2
 8005372:	f000 feb1 	bl	80060d8 <SDMMC_CmdAppCommand>
 8005376:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	e00f      	b.n	80053a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2102      	movs	r1, #2
 8005388:	4618      	mov	r0, r3
 800538a:	f000 feea 	bl	8006162 <SDMMC_CmdBusWidth>
 800538e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	e003      	b.n	80053a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800539a:	2300      	movs	r3, #0
 800539c:	e001      	b.n	80053a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800539e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b086      	sub	sp, #24
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2100      	movs	r1, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fd1e 	bl	8005e02 <SDMMC_GetResponse>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053d0:	d102      	bne.n	80053d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053d6:	e02f      	b.n	8005438 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80053d8:	f107 030c 	add.w	r3, r7, #12
 80053dc:	4619      	mov	r1, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f82e 	bl	8005440 <SD_FindSCR>
 80053e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	e023      	b.n	8005438 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01c      	beq.n	8005434 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f000 fe66 	bl	80060d8 <SDMMC_CmdAppCommand>
 800540c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	e00f      	b.n	8005438 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fe9f 	bl	8006162 <SDMMC_CmdBusWidth>
 8005424:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	e003      	b.n	8005438 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005430:	2300      	movs	r3, #0
 8005432:	e001      	b.n	8005438 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005434:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b08f      	sub	sp, #60	; 0x3c
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800544a:	f7fb fdfb 	bl	8001044 <HAL_GetTick>
 800544e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005454:	2300      	movs	r3, #0
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2108      	movs	r1, #8
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fd0a 	bl	8005e80 <SDMMC_CmdBlockLength>
 800546c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	e0a9      	b.n	80055cc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	4619      	mov	r1, r3
 8005484:	4610      	mov	r0, r2
 8005486:	f000 fe27 	bl	80060d8 <SDMMC_CmdAppCommand>
 800548a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005494:	e09a      	b.n	80055cc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800549c:	2308      	movs	r3, #8
 800549e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80054a0:	2330      	movs	r3, #48	; 0x30
 80054a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80054a4:	2302      	movs	r3, #2
 80054a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f107 0210 	add.w	r2, r7, #16
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fcb4 	bl	8005e28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fe6e 	bl	80061a6 <SDMMC_CmdSendSCR>
 80054ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d022      	beq.n	8005518 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	e07a      	b.n	80055cc <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00e      	beq.n	8005502 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	f107 0208 	add.w	r2, r7, #8
 80054f0:	18d4      	adds	r4, r2, r3
 80054f2:	4608      	mov	r0, r1
 80054f4:	f000 fc13 	bl	8005d1e <SDMMC_ReadFIFO>
 80054f8:	4603      	mov	r3, r0
 80054fa:	6023      	str	r3, [r4, #0]
      index++;
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	3301      	adds	r3, #1
 8005500:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005502:	f7fb fd9f 	bl	8001044 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d102      	bne.n	8005518 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005512:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005516:	e059      	b.n	80055cc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551e:	f240 432a 	movw	r3, #1066	; 0x42a
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0d6      	beq.n	80054d6 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2208      	movs	r2, #8
 800553c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800553e:	2308      	movs	r3, #8
 8005540:	e044      	b.n	80055cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2202      	movs	r2, #2
 8005556:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005558:	2302      	movs	r3, #2
 800555a:	e037      	b.n	80055cc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2220      	movs	r2, #32
 8005570:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005572:	2320      	movs	r3, #32
 8005574:	e02a      	b.n	80055cc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f240 523a 	movw	r2, #1338	; 0x53a
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	061a      	lsls	r2, r3, #24
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800558c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005596:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	601a      	str	r2, [r3, #0]
    scr++;
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	3304      	adds	r3, #4
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	061a      	lsls	r2, r3, #24
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80055be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	373c      	adds	r7, #60	; 0x3c
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd90      	pop	{r4, r7, pc}

080055d4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d03f      	beq.n	800566e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e033      	b.n	800565c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fb90 	bl	8005d1e <SDMMC_ReadFIFO>
 80055fe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3301      	adds	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	3b01      	subs	r3, #1
 8005612:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	0a1b      	lsrs	r3, r3, #8
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	3b01      	subs	r3, #1
 8005628:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	0c1b      	lsrs	r3, r3, #16
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3b01      	subs	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	0e1b      	lsrs	r3, r3, #24
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	701a      	strb	r2, [r3, #0]
      tmp++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	3b01      	subs	r3, #1
 8005654:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	3301      	adds	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b07      	cmp	r3, #7
 8005660:	d9c8      	bls.n	80055f4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800566e:	bf00      	nop
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b086      	sub	sp, #24
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d043      	beq.n	8005718 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e037      	b.n	8005706 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	021a      	lsls	r2, r3, #8
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3301      	adds	r3, #1
 80056b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3b01      	subs	r3, #1
 80056be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	041a      	lsls	r2, r3, #16
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	061a      	lsls	r2, r3, #24
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f107 0208 	add.w	r2, r7, #8
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fb1c 	bl	8005d38 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	3301      	adds	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b07      	cmp	r3, #7
 800570a:	d9c4      	bls.n	8005696 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e049      	b.n	80057c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f841 	bl	80057ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f000 f9f8 	bl	8005b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e04f      	b.n	800589c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a23      	ldr	r2, [pc, #140]	; (80058a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01d      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x76>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005826:	d018      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x76>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <HAL_TIM_Base_Start_IT+0xc8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x76>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1e      	ldr	r2, [pc, #120]	; (80058b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x76>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x76>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_TIM_Base_Start_IT+0x76>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d115      	bne.n	8005886 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005862:	4013      	ands	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b06      	cmp	r3, #6
 800586a:	d015      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xb4>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005872:	d011      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	e008      	b.n	8005898 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	e000      	b.n	800589a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005898:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40013400 	.word	0x40013400
 80058bc:	40014000 	.word	0x40014000
 80058c0:	00010007 	.word	0x00010007

080058c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d122      	bne.n	8005920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d11b      	bne.n	8005920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0202 	mvn.w	r2, #2
 80058f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f905 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8f7 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f908 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b04      	cmp	r3, #4
 800592c:	d122      	bne.n	8005974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d11b      	bne.n	8005974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0204 	mvn.w	r2, #4
 8005944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f8db 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 8005960:	e005      	b.n	800596e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8cd 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8de 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	2b08      	cmp	r3, #8
 8005980:	d122      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b08      	cmp	r3, #8
 800598e:	d11b      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0208 	mvn.w	r2, #8
 8005998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2204      	movs	r2, #4
 800599e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f8b1 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 80059b4:	e005      	b.n	80059c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8a3 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f8b4 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0210 	mvn.w	r2, #16
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2208      	movs	r2, #8
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f887 	bl	8005b16 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f879 	bl	8005b02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f88a 	bl	8005b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0201 	mvn.w	r2, #1
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fb f8d2 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b80      	cmp	r3, #128	; 0x80
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f914 	bl	8005c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a82:	d10e      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d107      	bne.n	8005aa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f907 	bl	8005cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d10e      	bne.n	8005ace <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d107      	bne.n	8005ace <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f838 	bl	8005b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d10e      	bne.n	8005afa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d107      	bne.n	8005afa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0220 	mvn.w	r2, #32
 8005af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8c7 	bl	8005c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a40      	ldr	r2, [pc, #256]	; (8005c68 <TIM_Base_SetConfig+0x114>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b72:	d00f      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3d      	ldr	r2, [pc, #244]	; (8005c6c <TIM_Base_SetConfig+0x118>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3c      	ldr	r2, [pc, #240]	; (8005c70 <TIM_Base_SetConfig+0x11c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3b      	ldr	r2, [pc, #236]	; (8005c74 <TIM_Base_SetConfig+0x120>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3a      	ldr	r2, [pc, #232]	; (8005c78 <TIM_Base_SetConfig+0x124>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d108      	bne.n	8005ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a2f      	ldr	r2, [pc, #188]	; (8005c68 <TIM_Base_SetConfig+0x114>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d01f      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb4:	d01b      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	; (8005c6c <TIM_Base_SetConfig+0x118>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d017      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2b      	ldr	r2, [pc, #172]	; (8005c70 <TIM_Base_SetConfig+0x11c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2a      	ldr	r2, [pc, #168]	; (8005c74 <TIM_Base_SetConfig+0x120>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a29      	ldr	r2, [pc, #164]	; (8005c78 <TIM_Base_SetConfig+0x124>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a28      	ldr	r2, [pc, #160]	; (8005c7c <TIM_Base_SetConfig+0x128>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a27      	ldr	r2, [pc, #156]	; (8005c80 <TIM_Base_SetConfig+0x12c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_Base_SetConfig+0x9a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <TIM_Base_SetConfig+0x130>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a10      	ldr	r2, [pc, #64]	; (8005c68 <TIM_Base_SetConfig+0x114>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00f      	beq.n	8005c4c <TIM_Base_SetConfig+0xf8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <TIM_Base_SetConfig+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_Base_SetConfig+0xf8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a11      	ldr	r2, [pc, #68]	; (8005c7c <TIM_Base_SetConfig+0x128>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_Base_SetConfig+0xf8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a10      	ldr	r2, [pc, #64]	; (8005c80 <TIM_Base_SetConfig+0x12c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_Base_SetConfig+0xf8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a0f      	ldr	r2, [pc, #60]	; (8005c84 <TIM_Base_SetConfig+0x130>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d103      	bne.n	8005c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	615a      	str	r2, [r3, #20]
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40000c00 	.word	0x40000c00
 8005c78:	40013400 	.word	0x40013400
 8005c7c:	40014000 	.word	0x40014000
 8005c80:	40014400 	.word	0x40014400
 8005c84:	40014800 	.word	0x40014800

08005c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	f107 001c 	add.w	r0, r7, #28
 8005cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8005ce2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8005ce6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005cea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005cee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005cf2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	b004      	add	sp, #16
 8005d1c:	4770      	bx	lr

08005d1e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2203      	movs	r2, #3
 8005d66:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005d68:	2002      	movs	r0, #2
 8005d6a:	f7fb f977 	bl	800105c <HAL_Delay>

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0303 	and.w	r3, r3, #3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005db2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005db8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005dbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005dce:	f023 030f 	bic.w	r3, r3, #15
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	b2db      	uxtb	r3, r3
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	461a      	mov	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0

}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005e8e:	2310      	movs	r3, #16
 8005e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ea0:	f107 0308 	add.w	r3, r7, #8
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ff74 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb0:	2110      	movs	r1, #16
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa18 	bl	80062e8 <SDMMC_GetCmdResp1>
 8005eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eba:	69fb      	ldr	r3, [r7, #28]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ed2:	2311      	movs	r3, #17
 8005ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ff52 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef4:	2111      	movs	r1, #17
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9f6 	bl	80062e8 <SDMMC_GetCmdResp1>
 8005efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005efe:	69fb      	ldr	r3, [r7, #28]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3720      	adds	r7, #32
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f16:	2312      	movs	r3, #18
 8005f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f28:	f107 0308 	add.w	r3, r7, #8
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ff30 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f38:	2112      	movs	r1, #18
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9d4 	bl	80062e8 <SDMMC_GetCmdResp1>
 8005f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f42:	69fb      	ldr	r3, [r7, #28]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f5a:	2318      	movs	r3, #24
 8005f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f6c:	f107 0308 	add.w	r3, r7, #8
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ff0e 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7c:	2118      	movs	r1, #24
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9b2 	bl	80062e8 <SDMMC_GetCmdResp1>
 8005f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f86:	69fb      	ldr	r3, [r7, #28]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005f9e:	2319      	movs	r3, #25
 8005fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff feec 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc0:	2119      	movs	r1, #25
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f990 	bl	80062e8 <SDMMC_GetCmdResp1>
 8005fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fca:	69fb      	ldr	r3, [r7, #28]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3720      	adds	r7, #32
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005fe0:	230c      	movs	r3, #12
 8005fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fecb 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <SDMMC_CmdStopTransfer+0x40>)
 8006000:	210c      	movs	r1, #12
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f970 	bl	80062e8 <SDMMC_GetCmdResp1>
 8006008:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800600a:	69fb      	ldr	r3, [r7, #28]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	05f5e100 	.word	0x05f5e100

08006018 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006028:	2307      	movs	r3, #7
 800602a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006038:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800603a:	f107 0310 	add.w	r3, r7, #16
 800603e:	4619      	mov	r1, r3
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff fea7 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	2107      	movs	r1, #7
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f94b 	bl	80062e8 <SDMMC_GetCmdResp1>
 8006052:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006056:	4618      	mov	r0, r3
 8006058:	3728      	adds	r7, #40	; 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fe86 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fb65 	bl	8006758 <SDMMC_GetCmdError>
 800608e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006090:	69fb      	ldr	r3, [r7, #28]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b088      	sub	sp, #32
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80060a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80060a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80060a8:	2308      	movs	r3, #8
 80060aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fe67 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 faf8 	bl	80066bc <SDMMC_GetCmdResp7>
 80060cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ce:	69fb      	ldr	r3, [r7, #28]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80060e6:	2337      	movs	r3, #55	; 0x37
 80060e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fe48 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	2137      	movs	r1, #55	; 0x37
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8ec 	bl	80062e8 <SDMMC_GetCmdResp1>
 8006110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006112:	69fb      	ldr	r3, [r7, #28]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800612c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006130:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006132:	2329      	movs	r3, #41	; 0x29
 8006134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006136:	2340      	movs	r3, #64	; 0x40
 8006138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800613e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006142:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fe22 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9ff 	bl	8006554 <SDMMC_GetCmdResp3>
 8006156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006158:	69fb      	ldr	r3, [r7, #28]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b088      	sub	sp, #32
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006170:	2306      	movs	r3, #6
 8006172:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800617c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006180:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fe03 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	2106      	movs	r1, #6
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f8a7 	bl	80062e8 <SDMMC_GetCmdResp1>
 800619a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800619c:	69fb      	ldr	r3, [r7, #28]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b088      	sub	sp, #32
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80061b2:	2333      	movs	r3, #51	; 0x33
 80061b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061b6:	2340      	movs	r3, #64	; 0x40
 80061b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061c4:	f107 0308 	add.w	r3, r7, #8
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7ff fde2 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80061d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d4:	2133      	movs	r1, #51	; 0x33
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f886 	bl	80062e8 <SDMMC_GetCmdResp1>
 80061dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061de:	69fb      	ldr	r3, [r7, #28]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3720      	adds	r7, #32
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061f4:	2302      	movs	r3, #2
 80061f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80061f8:	23c0      	movs	r3, #192	; 0xc0
 80061fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fdc1 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f956 	bl	80064c4 <SDMMC_GetCmdResp2>
 8006218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800621a:	69fb      	ldr	r3, [r7, #28]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006232:	2309      	movs	r3, #9
 8006234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006236:	23c0      	movs	r3, #192	; 0xc0
 8006238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800623e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006244:	f107 0308 	add.w	r3, r7, #8
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fda2 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f937 	bl	80064c4 <SDMMC_GetCmdResp2>
 8006256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006258:	69fb      	ldr	r3, [r7, #28]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b088      	sub	sp, #32
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006270:	2303      	movs	r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006274:	2340      	movs	r3, #64	; 0x40
 8006276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800627c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fd83 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	2103      	movs	r1, #3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f99c 	bl	80065d0 <SDMMC_GetCmdResp6>
 8006298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800629a:	69fb      	ldr	r3, [r7, #28]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80062b2:	230d      	movs	r3, #13
 80062b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062c4:	f107 0308 	add.w	r3, r7, #8
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff fd62 	bl	8005d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80062d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d4:	210d      	movs	r1, #13
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f806 	bl	80062e8 <SDMMC_GetCmdResp1>
 80062dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062de:	69fb      	ldr	r3, [r7, #28]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3720      	adds	r7, #32
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	460b      	mov	r3, r1
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80062f6:	4b70      	ldr	r3, [pc, #448]	; (80064b8 <SDMMC_GetCmdResp1+0x1d0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a70      	ldr	r2, [pc, #448]	; (80064bc <SDMMC_GetCmdResp1+0x1d4>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	0a5a      	lsrs	r2, r3, #9
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	fb02 f303 	mul.w	r3, r2, r3
 8006308:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	1e5a      	subs	r2, r3, #1
 800630e:	61fa      	str	r2, [r7, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d102      	bne.n	800631a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006318:	e0c9      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ef      	beq.n	800630a <SDMMC_GetCmdResp1+0x22>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ea      	bne.n	800630a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d004      	beq.n	800634a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2204      	movs	r2, #4
 8006344:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006346:	2304      	movs	r3, #4
 8006348:	e0b1      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800635c:	2301      	movs	r3, #1
 800635e:	e0a6      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	22c5      	movs	r2, #197	; 0xc5
 8006364:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fd3e 	bl	8005de8 <SDMMC_GetCommandResponse>
 800636c:	4603      	mov	r3, r0
 800636e:	461a      	mov	r2, r3
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	4293      	cmp	r3, r2
 8006374:	d001      	beq.n	800637a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006376:	2301      	movs	r3, #1
 8006378:	e099      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800637a:	2100      	movs	r1, #0
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fd40 	bl	8005e02 <SDMMC_GetResponse>
 8006382:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4b4e      	ldr	r3, [pc, #312]	; (80064c0 <SDMMC_GetCmdResp1+0x1d8>)
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800638e:	2300      	movs	r3, #0
 8006390:	e08d      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	da02      	bge.n	800639e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800639c:	e087      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80063a8:	2340      	movs	r3, #64	; 0x40
 80063aa:	e080      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	e079      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063c8:	e071      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d8:	e069      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e8:	e061      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80063f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063f8:	e059      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006408:	e051      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006418:	e049      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006428:	e041      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006438:	e039      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006448:	e031      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006454:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006458:	e029      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006464:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006468:	e021      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006474:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006478:	e019      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006488:	e011      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006498:	e009      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80064a8:	e001      	b.n	80064ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000000 	.word	0x20000000
 80064bc:	10624dd3 	.word	0x10624dd3
 80064c0:	fdffe008 	.word	0xfdffe008

080064c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064cc:	4b1f      	ldr	r3, [pc, #124]	; (800654c <SDMMC_GetCmdResp2+0x88>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <SDMMC_GetCmdResp2+0x8c>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	0a5b      	lsrs	r3, r3, #9
 80064d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064dc:	fb02 f303 	mul.w	r3, r2, r3
 80064e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	60fa      	str	r2, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064f0:	e026      	b.n	8006540 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0ef      	beq.n	80064e2 <SDMMC_GetCmdResp2+0x1e>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1ea      	bne.n	80064e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2204      	movs	r2, #4
 800651c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800651e:	2304      	movs	r3, #4
 8006520:	e00e      	b.n	8006540 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d004      	beq.n	8006538 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006534:	2301      	movs	r3, #1
 8006536:	e003      	b.n	8006540 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	22c5      	movs	r2, #197	; 0xc5
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	20000000 	.word	0x20000000
 8006550:	10624dd3 	.word	0x10624dd3

08006554 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800655c:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <SDMMC_GetCmdResp3+0x74>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <SDMMC_GetCmdResp3+0x78>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	0a5b      	lsrs	r3, r3, #9
 8006568:	f241 3288 	movw	r2, #5000	; 0x1388
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	60fa      	str	r2, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800657c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006580:	e01b      	b.n	80065ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0ef      	beq.n	8006572 <SDMMC_GetCmdResp3+0x1e>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1ea      	bne.n	8006572 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2204      	movs	r2, #4
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065ae:	2304      	movs	r3, #4
 80065b0:	e003      	b.n	80065ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	22c5      	movs	r2, #197	; 0xc5
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000000 	.word	0x20000000
 80065cc:	10624dd3 	.word	0x10624dd3

080065d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	460b      	mov	r3, r1
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065de:	4b35      	ldr	r3, [pc, #212]	; (80066b4 <SDMMC_GetCmdResp6+0xe4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a35      	ldr	r2, [pc, #212]	; (80066b8 <SDMMC_GetCmdResp6+0xe8>)
 80065e4:	fba2 2303 	umull	r2, r3, r2, r3
 80065e8:	0a5b      	lsrs	r3, r3, #9
 80065ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	61fa      	str	r2, [r7, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d102      	bne.n	8006604 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006602:	e052      	b.n	80066aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006608:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0ef      	beq.n	80065f4 <SDMMC_GetCmdResp6+0x24>
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1ea      	bne.n	80065f4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2204      	movs	r2, #4
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006630:	2304      	movs	r3, #4
 8006632:	e03a      	b.n	80066aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006646:	2301      	movs	r3, #1
 8006648:	e02f      	b.n	80066aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fbcc 	bl	8005de8 <SDMMC_GetCommandResponse>
 8006650:	4603      	mov	r3, r0
 8006652:	461a      	mov	r2, r3
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	4293      	cmp	r3, r2
 8006658:	d001      	beq.n	800665e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800665a:	2301      	movs	r3, #1
 800665c:	e025      	b.n	80066aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22c5      	movs	r2, #197	; 0xc5
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f7ff fbcb 	bl	8005e02 <SDMMC_GetResponse>
 800666c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	b29a      	uxth	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006682:	2300      	movs	r3, #0
 8006684:	e011      	b.n	80066aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006694:	e009      	b.n	80066aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066a4:	e001      	b.n	80066aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000000 	.word	0x20000000
 80066b8:	10624dd3 	.word	0x10624dd3

080066bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066c4:	4b22      	ldr	r3, [pc, #136]	; (8006750 <SDMMC_GetCmdResp7+0x94>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a22      	ldr	r2, [pc, #136]	; (8006754 <SDMMC_GetCmdResp7+0x98>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	0a5b      	lsrs	r3, r3, #9
 80066d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d4:	fb02 f303 	mul.w	r3, r2, r3
 80066d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	1e5a      	subs	r2, r3, #1
 80066de:	60fa      	str	r2, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066e8:	e02c      	b.n	8006744 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0ef      	beq.n	80066da <SDMMC_GetCmdResp7+0x1e>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ea      	bne.n	80066da <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2204      	movs	r2, #4
 8006714:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006716:	2304      	movs	r3, #4
 8006718:	e014      	b.n	8006744 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800672c:	2301      	movs	r3, #1
 800672e:	e009      	b.n	8006744 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006742:	2300      	movs	r3, #0

}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000000 	.word	0x20000000
 8006754:	10624dd3 	.word	0x10624dd3

08006758 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006760:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <SDMMC_GetCmdError+0x50>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <SDMMC_GetCmdError+0x54>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	0a5b      	lsrs	r3, r3, #9
 800676c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006770:	fb02 f303 	mul.w	r3, r2, r3
 8006774:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	60fa      	str	r2, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006784:	e009      	b.n	800679a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0f1      	beq.n	8006776 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	22c5      	movs	r2, #197	; 0xc5
 8006796:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000000 	.word	0x20000000
 80067ac:	10624dd3 	.word	0x10624dd3

080067b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80067b4:	4904      	ldr	r1, [pc, #16]	; (80067c8 <MX_FATFS_Init+0x18>)
 80067b6:	4805      	ldr	r0, [pc, #20]	; (80067cc <MX_FATFS_Init+0x1c>)
 80067b8:	f002 ff38 	bl	800962c <FATFS_LinkDriver>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <MX_FATFS_Init+0x20>)
 80067c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80067c4:	bf00      	nop
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	2000046c 	.word	0x2000046c
 80067cc:	0800c8cc 	.word	0x0800c8cc
 80067d0:	20000468 	.word	0x20000468

080067d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80067d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80067da:	4618      	mov	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <SD_DMAConfig>:
 *         only one channel for TX/RX, see MX_SDMMC1_SD_Init
 * @param  direction: Channel direction
 * @retval Status
 * ==================================================================== */
HAL_StatusTypeDef SD_DMAConfig( uint32_t direction )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

  // Set transmit direction
  hdma_sdmmc1.Init.Direction = direction;
 80067ec:	4a08      	ldr	r2, [pc, #32]	; (8006810 <SD_DMAConfig+0x2c>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6093      	str	r3, [r2, #8]

  // Stop any DMA activity
  HAL_DMA_Abort( &hdma_sdmmc1 );
 80067f2:	4807      	ldr	r0, [pc, #28]	; (8006810 <SD_DMAConfig+0x2c>)
 80067f4:	f7fa fee2 	bl	80015bc <HAL_DMA_Abort>

  // Deinit DMA
  HAL_DMA_DeInit( &hdma_sdmmc1 );
 80067f8:	4805      	ldr	r0, [pc, #20]	; (8006810 <SD_DMAConfig+0x2c>)
 80067fa:	f7fa fded 	bl	80013d8 <HAL_DMA_DeInit>

  // Initialize DMA
  return HAL_DMA_Init( &hdma_sdmmc1 );
 80067fe:	4804      	ldr	r0, [pc, #16]	; (8006810 <SD_DMAConfig+0x2c>)
 8006800:	f7fa fd32 	bl	8001268 <HAL_DMA_Init>
 8006804:	4603      	mov	r3, r0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	200003d0 	.word	0x200003d0

08006814 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA( uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_PERIPH_TO_MEMORY;
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to receive
  if ( hsd1.hdmarx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 8006828:	4b0e      	ldr	r3, [pc, #56]	; (8006864 <BSP_SD_ReadBlocks_DMA+0x50>)
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	429a      	cmp	r2, r3
 8006832:	d004      	beq.n	800683e <BSP_SD_ReadBlocks_DMA+0x2a>
 8006834:	6938      	ldr	r0, [r7, #16]
 8006836:	f7ff ffd5 	bl	80067e4 <SD_DMAConfig>
 800683a:	4603      	mov	r3, r0
 800683c:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_ReadBlocks_DMA( &hsd1, (uint8_t *) pData, ReadAddr, NumOfBlocks ) != HAL_OK ) {
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d108      	bne.n	8006856 <BSP_SD_ReadBlocks_DMA+0x42>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	68f9      	ldr	r1, [r7, #12]
 800684a:	4806      	ldr	r0, [pc, #24]	; (8006864 <BSP_SD_ReadBlocks_DMA+0x50>)
 800684c:	f7fd fd16 	bl	800427c <HAL_SD_ReadBlocks_DMA>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <BSP_SD_ReadBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	2000034c 	.word	0x2000034c

08006868 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA( uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
  uint32_t direction = DMA_MEMORY_TO_PERIPH;
 8006878:	2310      	movs	r3, #16
 800687a:	613b      	str	r3, [r7, #16]

  // Set DMA channel direction to transmit
  if ( hsd1.hdmatx->Init.Direction != direction ) sd_state = SD_DMAConfig( direction );
 800687c:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <BSP_SD_WriteBlocks_DMA+0x50>)
 800687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	429a      	cmp	r2, r3
 8006886:	d004      	beq.n	8006892 <BSP_SD_WriteBlocks_DMA+0x2a>
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7ff ffab 	bl	80067e4 <SD_DMAConfig>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]

  // Read block(s) in DMA transfer mode
  if ( sd_state != HAL_OK || HAL_SD_WriteBlocks_DMA( &hsd1, (uint8_t *) pData, WriteAddr, NumOfBlocks ) != HAL_OK ) {
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d108      	bne.n	80068aa <BSP_SD_WriteBlocks_DMA+0x42>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	4806      	ldr	r0, [pc, #24]	; (80068b8 <BSP_SD_WriteBlocks_DMA+0x50>)
 80068a0:	f7fd fdb4 	bl	800440c <HAL_SD_WriteBlocks_DMA>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <BSP_SD_WriteBlocks_DMA+0x46>
    sd_state = MSD_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	2000034c 	.word	0x2000034c

080068bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80068c6:	f000 f862 	bl	800698e <BSP_SD_IsDetected>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d001      	beq.n	80068d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80068d0:	2302      	movs	r3, #2
 80068d2:	e012      	b.n	80068fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80068d4:	480b      	ldr	r0, [pc, #44]	; (8006904 <BSP_SD_Init+0x48>)
 80068d6:	f7fd fbfb 	bl	80040d0 <HAL_SD_Init>
 80068da:	4603      	mov	r3, r0
 80068dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80068e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068e8:	4806      	ldr	r0, [pc, #24]	; (8006904 <BSP_SD_Init+0x48>)
 80068ea:	f7fe f9ab 	bl	8004c44 <HAL_SD_ConfigWideBusOperation>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80068f8:	79fb      	ldrb	r3, [r7, #7]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	2000034c 	.word	0x2000034c

08006908 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800690c:	4805      	ldr	r0, [pc, #20]	; (8006924 <BSP_SD_GetCardState+0x1c>)
 800690e:	f7fe fa55 	bl	8004dbc <HAL_SD_GetCardState>
 8006912:	4603      	mov	r3, r0
 8006914:	2b04      	cmp	r3, #4
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
}
 800691e:	4618      	mov	r0, r3
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	2000034c 	.word	0x2000034c

08006928 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4803      	ldr	r0, [pc, #12]	; (8006940 <BSP_SD_GetCardInfo+0x18>)
 8006934:	f7fe f95a 	bl	8004bec <HAL_SD_GetCardInfo>
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	2000034c 	.word	0x2000034c

08006944 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800694c:	f000 f818 	bl	8006980 <BSP_SD_AbortCallback>
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006960:	f000 fa7e 	bl	8006e60 <BSP_SD_WriteCpltCallback>
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006974:	f000 fa82 	bl	8006e7c <BSP_SD_ReadCpltCallback>
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0

}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006994:	2301      	movs	r3, #1
 8006996:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	b2db      	uxtb	r3, r3
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80069b0:	f002 fed4 	bl	800975c <osKernelSysTick>
 80069b4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80069b6:	e006      	b.n	80069c6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80069b8:	f7ff ffa6 	bl	8006908 <BSP_SD_GetCardState>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e009      	b.n	80069da <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80069c6:	f002 fec9 	bl	800975c <osKernelSysTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d8f0      	bhi.n	80069b8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <SD_CheckStatus+0x38>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80069f4:	f7ff ff88 	bl	8006908 <BSP_SD_GetCardState>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <SD_CheckStatus+0x38>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <SD_CheckStatus+0x38>)
 8006a0c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006a0e:	4b03      	ldr	r3, [pc, #12]	; (8006a1c <SD_CheckStatus+0x38>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b2db      	uxtb	r3, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20000009 	.word	0x20000009

08006a20 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006a2a:	4b20      	ldr	r3, [pc, #128]	; (8006aac <SD_initialize+0x8c>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006a30:	f002 fe88 	bl	8009744 <osKernelRunning>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d030      	beq.n	8006a9c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006a3a:	f7ff ff3f 	bl	80068bc <BSP_SD_Init>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d107      	bne.n	8006a54 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff ffcc 	bl	80069e4 <SD_CheckStatus>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4b16      	ldr	r3, [pc, #88]	; (8006aac <SD_initialize+0x8c>)
 8006a52:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006a54:	4b15      	ldr	r3, [pc, #84]	; (8006aac <SD_initialize+0x8c>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d01e      	beq.n	8006a9c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8006a5e:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <SD_initialize+0x90>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10e      	bne.n	8006a84 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <SD_initialize+0x94>)
 8006a68:	f107 0408 	add.w	r4, r7, #8
 8006a6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8006a72:	f107 0308 	add.w	r3, r7, #8
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f002 ffa8 	bl	80099ce <osMessageCreate>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4a0b      	ldr	r2, [pc, #44]	; (8006ab0 <SD_initialize+0x90>)
 8006a82:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <SD_initialize+0x90>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d107      	bne.n	8006a9c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8006a8c:	4b07      	ldr	r3, [pc, #28]	; (8006aac <SD_initialize+0x8c>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	4b04      	ldr	r3, [pc, #16]	; (8006aac <SD_initialize+0x8c>)
 8006a9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	; (8006aac <SD_initialize+0x8c>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	b2db      	uxtb	r3, r3
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd90      	pop	{r4, r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000009 	.word	0x20000009
 8006ab0:	20000ad4 	.word	0x20000ad4
 8006ab4:	0800c828 	.word	0x0800c828

08006ab8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff ff8d 	bl	80069e4 <SD_CheckStatus>
 8006aca:	4603      	mov	r3, r0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08e      	sub	sp, #56	; 0x38
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	61b9      	str	r1, [r7, #24]
 8006adc:	617a      	str	r2, [r7, #20]
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	77fb      	strb	r3, [r7, #31]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006aea:	f247 5030 	movw	r0, #30000	; 0x7530
 8006aee:	f7ff ff5b 	bl	80069a8 <SD_CheckStatusWithTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da02      	bge.n	8006afe <SD_read+0x2a>
  {
    return res;
 8006af8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006afc:	e09e      	b.n	8006c3c <SD_read+0x168>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d132      	bne.n	8006b6e <SD_read+0x9a>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	6979      	ldr	r1, [r7, #20]
 8006b0c:	69b8      	ldr	r0, [r7, #24]
 8006b0e:	f7ff fe81 	bl	8006814 <BSP_SD_ReadBlocks_DMA>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (ret == MSD_OK) {
 8006b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 808b 	bne.w	8006c38 <SD_read+0x164>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006b22:	4b48      	ldr	r3, [pc, #288]	; (8006c44 <SD_read+0x170>)
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	f107 0320 	add.w	r3, r7, #32
 8006b2a:	f247 5230 	movw	r2, #30000	; 0x7530
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f002 ffb6 	bl	8009aa0 <osMessageGet>

    if (event.status == osEventMessage)
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d17e      	bne.n	8006c38 <SD_read+0x164>
    {
      if (event.value.v == READ_CPLT_MSG)
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d17b      	bne.n	8006c38 <SD_read+0x164>
      {
        timer = osKernelSysTick();
 8006b40:	f002 fe0c 	bl	800975c <osKernelSysTick>
 8006b44:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006b46:	e008      	b.n	8006b5a <SD_read+0x86>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b48:	f7ff fede 	bl	8006908 <BSP_SD_GetCardState>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <SD_read+0x86>
              {
                res = RES_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006b58:	e06e      	b.n	8006c38 <SD_read+0x164>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006b5a:	f002 fdff 	bl	800975c <osKernelSysTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d9ed      	bls.n	8006b48 <SD_read+0x74>
 8006b6c:	e064      	b.n	8006c38 <SD_read+0x164>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	633b      	str	r3, [r7, #48]	; 0x30
 8006b72:	e04e      	b.n	8006c12 <SD_read+0x13e>
      {
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	617a      	str	r2, [r7, #20]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4832      	ldr	r0, [pc, #200]	; (8006c48 <SD_read+0x174>)
 8006b80:	f7ff fe48 	bl	8006814 <BSP_SD_ReadBlocks_DMA>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (ret == MSD_OK )
 8006b8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d144      	bne.n	8006c1c <SD_read+0x148>
        {
          /* wait until the read is successful or a timeout occurs */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006b92:	4b2c      	ldr	r3, [pc, #176]	; (8006c44 <SD_read+0x170>)
 8006b94:	6819      	ldr	r1, [r3, #0]
 8006b96:	463b      	mov	r3, r7
 8006b98:	f247 5230 	movw	r2, #30000	; 0x7530
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f002 ff7f 	bl	8009aa0 <osMessageGet>
 8006ba2:	f107 0320 	add.w	r3, r7, #32
 8006ba6:	463a      	mov	r2, r7
 8006ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8006baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

          if (event.status == osEventMessage)
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d11e      	bne.n	8006bf2 <SD_read+0x11e>
          {
            if (event.value.v == READ_CPLT_MSG)
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d11b      	bne.n	8006bf2 <SD_read+0x11e>
            {
              timer = osKernelSysTick();
 8006bba:	f002 fdcf 	bl	800975c <osKernelSysTick>
 8006bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006bc0:	e008      	b.n	8006bd4 <SD_read+0x100>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 8006bc2:	f7ff fea1 	bl	8006908 <BSP_SD_GetCardState>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

                  if (ret == MSD_OK)
 8006bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <SD_read+0x114>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006bd4:	f002 fdc2 	bl	800975c <osKernelSysTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	f247 522f 	movw	r2, #29999	; 0x752f
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d9ed      	bls.n	8006bc2 <SD_read+0xee>
 8006be6:	e000      	b.n	8006bea <SD_read+0x116>
                  {
                    break;
 8006be8:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 8006bea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d116      	bne.n	8006c20 <SD_read+0x14c>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <SD_read+0x174>)
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f005 fcda 	bl	800c5b8 <memcpy>
          buff += BLOCKSIZE;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c0a:	61bb      	str	r3, [r7, #24]
      for (i = 0; i < count; i++)
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	3301      	adds	r3, #1
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d8ac      	bhi.n	8006b74 <SD_read+0xa0>
 8006c1a:	e002      	b.n	8006c22 <SD_read+0x14e>
        }
        else
        {
          break;
 8006c1c:	bf00      	nop
 8006c1e:	e000      	b.n	8006c22 <SD_read+0x14e>
                  break;
 8006c20:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d106      	bne.n	8006c38 <SD_read+0x164>
 8006c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <SD_read+0x164>
        res = RES_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }
#endif
  return res;
 8006c38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3738      	adds	r7, #56	; 0x38
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000ad4 	.word	0x20000ad4
 8006c48:	200008d4 	.word	0x200008d4

08006c4c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b090      	sub	sp, #64	; 0x40
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	61b9      	str	r1, [r7, #24]
 8006c54:	617a      	str	r2, [r7, #20]
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	4603      	mov	r3, r0
 8006c5a:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006c62:	f247 5030 	movw	r0, #30000	; 0x7530
 8006c66:	f7ff fe9f 	bl	80069a8 <SD_CheckStatusWithTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	da02      	bge.n	8006c76 <SD_write+0x2a>
  {
    return res;
 8006c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c74:	e094      	b.n	8006da0 <SD_write+0x154>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f040 808d 	bne.w	8006d9c <SD_write+0x150>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	6979      	ldr	r1, [r7, #20]
 8006c86:	69b8      	ldr	r0, [r7, #24]
 8006c88:	f7ff fdee 	bl	8006868 <BSP_SD_WriteBlocks_DMA>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d125      	bne.n	8006cde <SD_write+0x92>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006c92:	4b45      	ldr	r3, [pc, #276]	; (8006da8 <SD_write+0x15c>)
 8006c94:	6819      	ldr	r1, [r3, #0]
 8006c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c9a:	f247 5230 	movw	r2, #30000	; 0x7530
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f002 fefe 	bl	8009aa0 <osMessageGet>

    if (event.status == osEventMessage)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	2b10      	cmp	r3, #16
 8006ca8:	d178      	bne.n	8006d9c <SD_write+0x150>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d175      	bne.n	8006d9c <SD_write+0x150>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8006cb0:	f002 fd54 	bl	800975c <osKernelSysTick>
 8006cb4:	6338      	str	r0, [r7, #48]	; 0x30
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006cb6:	e008      	b.n	8006cca <SD_write+0x7e>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006cb8:	f7ff fe26 	bl	8006908 <BSP_SD_GetCardState>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <SD_write+0x7e>
          {
            res = RES_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8006cc8:	e068      	b.n	8006d9c <SD_write+0x150>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006cca:	f002 fd47 	bl	800975c <osKernelSysTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	f247 522f 	movw	r2, #29999	; 0x752f
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d9ed      	bls.n	8006cb8 <SD_write+0x6c>
 8006cdc:	e05e      	b.n	8006d9c <SD_write+0x150>
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
      for (i = 0; i < count; i++)
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce2:	e049      	b.n	8006d78 <SD_write+0x12c>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8006ce4:	4a31      	ldr	r2, [pc, #196]	; (8006dac <SD_write+0x160>)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4619      	mov	r1, r3
 8006cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f005 fc61 	bl	800c5b8 <memcpy>
        buff += BLOCKSIZE;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006cfc:	61bb      	str	r3, [r7, #24]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	617a      	str	r2, [r7, #20]
 8006d04:	2201      	movs	r2, #1
 8006d06:	4619      	mov	r1, r3
 8006d08:	4828      	ldr	r0, [pc, #160]	; (8006dac <SD_write+0x160>)
 8006d0a:	f7ff fdad 	bl	8006868 <BSP_SD_WriteBlocks_DMA>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	63bb      	str	r3, [r7, #56]	; 0x38
        if (ret == MSD_OK )
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d134      	bne.n	8006d82 <SD_write+0x136>
        {
          /* wait until the read is successful or a timeout occurs */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006d18:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <SD_write+0x15c>)
 8006d1a:	6819      	ldr	r1, [r3, #0]
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	f247 5230 	movw	r2, #30000	; 0x7530
 8006d22:	4618      	mov	r0, r3
 8006d24:	f002 febc 	bl	8009aa0 <osMessageGet>
 8006d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d2c:	463a      	mov	r2, r7
 8006d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}

          if (event.status == osEventMessage)
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	2b10      	cmp	r3, #16
 8006d38:	d11b      	bne.n	8006d72 <SD_write+0x126>
          {
            if (event.value.v == READ_CPLT_MSG)
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d118      	bne.n	8006d72 <SD_write+0x126>
            {
              timer = osKernelSysTick();
 8006d40:	f002 fd0c 	bl	800975c <osKernelSysTick>
 8006d44:	6338      	str	r0, [r7, #48]	; 0x30
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006d46:	e006      	b.n	8006d56 <SD_write+0x10a>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 8006d48:	f7ff fdde 	bl	8006908 <BSP_SD_GetCardState>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	63bb      	str	r3, [r7, #56]	; 0x38

                  if (ret == MSD_OK)
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <SD_write+0x11e>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006d56:	f002 fd01 	bl	800975c <osKernelSysTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f247 522f 	movw	r2, #29999	; 0x752f
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d9ef      	bls.n	8006d48 <SD_write+0xfc>
 8006d68:	e000      	b.n	8006d6c <SD_write+0x120>
                  {
                    break;
 8006d6a:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <SD_write+0x13a>
      for (i = 0; i < count; i++)
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	3301      	adds	r3, #1
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d8b1      	bhi.n	8006ce4 <SD_write+0x98>
 8006d80:	e002      	b.n	8006d88 <SD_write+0x13c>
          }
#endif
        }
        else
        {
          break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <SD_write+0x13c>
                  break;
 8006d86:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8006d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d105      	bne.n	8006d9c <SD_write+0x150>
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <SD_write+0x150>
        res = RES_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

  }
#endif

  return res;
 8006d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3740      	adds	r7, #64	; 0x40
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000ad4 	.word	0x20000ad4
 8006dac:	200008d4 	.word	0x200008d4

08006db0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	4603      	mov	r3, r0
 8006db8:	603a      	str	r2, [r7, #0]
 8006dba:	71fb      	strb	r3, [r7, #7]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006dc6:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <SD_ioctl+0xac>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <SD_ioctl+0x28>
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e03c      	b.n	8006e52 <SD_ioctl+0xa2>

  switch (cmd)
 8006dd8:	79bb      	ldrb	r3, [r7, #6]
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d834      	bhi.n	8006e48 <SD_ioctl+0x98>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <SD_ioctl+0x34>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006dfd 	.word	0x08006dfd
 8006dec:	08006e15 	.word	0x08006e15
 8006df0:	08006e2f 	.word	0x08006e2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006dfa:	e028      	b.n	8006e4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006dfc:	f107 030c 	add.w	r3, r7, #12
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fd91 	bl	8006928 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e12:	e01c      	b.n	8006e4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e14:	f107 030c 	add.w	r3, r7, #12
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fd85 	bl	8006928 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e2c:	e00f      	b.n	8006e4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e2e:	f107 030c 	add.w	r3, r7, #12
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fd78 	bl	8006928 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	0a5a      	lsrs	r2, r3, #9
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e46:	e002      	b.n	8006e4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006e48:	2304      	movs	r3, #4
 8006e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3730      	adds	r7, #48	; 0x30
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000009 	.word	0x20000009

08006e60 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <BSP_SD_WriteCpltCallback+0x18>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2102      	movs	r1, #2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f002 fdd7 	bl	8009a20 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000ad4 	.word	0x20000ad4

08006e7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006e80:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <BSP_SD_ReadCpltCallback+0x18>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2101      	movs	r1, #1
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f002 fdc9 	bl	8009a20 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000ad4 	.word	0x20000ad4

08006e98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <disk_status+0x30>)
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	79fa      	ldrb	r2, [r7, #7]
 8006eb0:	4905      	ldr	r1, [pc, #20]	; (8006ec8 <disk_status+0x30>)
 8006eb2:	440a      	add	r2, r1
 8006eb4:	7a12      	ldrb	r2, [r2, #8]
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	20000b00 	.word	0x20000b00

08006ecc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	4a0d      	ldr	r2, [pc, #52]	; (8006f14 <disk_initialize+0x48>)
 8006ede:	5cd3      	ldrb	r3, [r2, r3]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d111      	bne.n	8006f08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	4a0b      	ldr	r2, [pc, #44]	; (8006f14 <disk_initialize+0x48>)
 8006ee8:	2101      	movs	r1, #1
 8006eea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <disk_initialize+0x48>)
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	79fa      	ldrb	r2, [r7, #7]
 8006efa:	4906      	ldr	r1, [pc, #24]	; (8006f14 <disk_initialize+0x48>)
 8006efc:	440a      	add	r2, r1
 8006efe:	7a12      	ldrb	r2, [r2, #8]
 8006f00:	4610      	mov	r0, r2
 8006f02:	4798      	blx	r3
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000b00 	.word	0x20000b00

08006f18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <disk_read+0x3c>)
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	689c      	ldr	r4, [r3, #8]
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <disk_read+0x3c>)
 8006f38:	4413      	add	r3, r2
 8006f3a:	7a18      	ldrb	r0, [r3, #8]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	47a0      	blx	r4
 8006f44:	4603      	mov	r3, r0
 8006f46:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd90      	pop	{r4, r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000b00 	.word	0x20000b00

08006f58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <disk_write+0x3c>)
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	68dc      	ldr	r4, [r3, #12]
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	4a07      	ldr	r2, [pc, #28]	; (8006f94 <disk_write+0x3c>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	7a18      	ldrb	r0, [r3, #8]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	47a0      	blx	r4
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd90      	pop	{r4, r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000b00 	.word	0x20000b00

08006f98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	603a      	str	r2, [r7, #0]
 8006fa2:	71fb      	strb	r3, [r7, #7]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	4a09      	ldr	r2, [pc, #36]	; (8006fd0 <disk_ioctl+0x38>)
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	79fa      	ldrb	r2, [r7, #7]
 8006fb6:	4906      	ldr	r1, [pc, #24]	; (8006fd0 <disk_ioctl+0x38>)
 8006fb8:	440a      	add	r2, r1
 8006fba:	7a10      	ldrb	r0, [r2, #8]
 8006fbc:	79b9      	ldrb	r1, [r7, #6]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	4798      	blx	r3
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  return res;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000b00 	.word	0x20000b00

08006fd4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006fe4:	89fb      	ldrh	r3, [r7, #14]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	b21a      	sxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	b21b      	sxth	r3, r3
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	b21b      	sxth	r3, r3
 8006ff4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3303      	adds	r3, #3
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	3202      	adds	r2, #2
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	4313      	orrs	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	021b      	lsls	r3, r3, #8
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	3201      	adds	r2, #1
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
	return rv;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	460b      	mov	r3, r1
 8007054:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	887a      	ldrh	r2, [r7, #2]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	887b      	ldrh	r3, [r7, #2]
 8007064:	0a1b      	lsrs	r3, r3, #8
 8007066:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	b2d2      	uxtb	r2, r2
 8007072:	701a      	strb	r2, [r3, #0]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	0a1b      	lsrs	r3, r3, #8
 800709a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	607a      	str	r2, [r7, #4]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00d      	beq.n	800710e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	1c53      	adds	r3, r2, #1
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	1c59      	adds	r1, r3, #1
 80070fc:	6179      	str	r1, [r7, #20]
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3b01      	subs	r3, #1
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f1      	bne.n	80070f2 <mem_cpy+0x1a>
	}
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800711a:	b480      	push	{r7}
 800711c:	b087      	sub	sp, #28
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	617a      	str	r2, [r7, #20]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	b2d2      	uxtb	r2, r2
 8007134:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3b01      	subs	r3, #1
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f3      	bne.n	800712a <mem_set+0x10>
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007150:	b480      	push	{r7}
 8007152:	b089      	sub	sp, #36	; 0x24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	61fb      	str	r3, [r7, #28]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	61fa      	str	r2, [r7, #28]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4619      	mov	r1, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	61ba      	str	r2, [r7, #24]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	1acb      	subs	r3, r1, r3
 800717c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3b01      	subs	r3, #1
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <mem_cmp+0x40>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0eb      	beq.n	8007168 <mem_cmp+0x18>

	return r;
 8007190:	697b      	ldr	r3, [r7, #20]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3724      	adds	r7, #36	; 0x24
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80071a8:	e002      	b.n	80071b0 <chk_chr+0x12>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3301      	adds	r3, #1
 80071ae:	607b      	str	r3, [r7, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <chk_chr+0x26>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	461a      	mov	r2, r3
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d1f2      	bne.n	80071aa <chk_chr+0xc>
	return *str;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	781b      	ldrb	r3, [r3, #0]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <lock_fs+0x22>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f002 fa5b 	bl	80096a2 <ff_req_grant>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <lock_fs+0x22>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <lock_fs+0x24>
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00d      	beq.n	800722e <unlock_fs+0x2e>
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	2b0c      	cmp	r3, #12
 8007216:	d00a      	beq.n	800722e <unlock_fs+0x2e>
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	2b0b      	cmp	r3, #11
 800721c:	d007      	beq.n	800722e <unlock_fs+0x2e>
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	2b0f      	cmp	r3, #15
 8007222:	d004      	beq.n	800722e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4618      	mov	r0, r3
 800722a:	f002 fa4f 	bl	80096cc <ff_rel_grant>
	}
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007242:	2300      	movs	r3, #0
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	e029      	b.n	80072a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800724c:	4a27      	ldr	r2, [pc, #156]	; (80072ec <chk_lock+0xb4>)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	4413      	add	r3, r2
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01d      	beq.n	8007296 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800725a:	4a24      	ldr	r2, [pc, #144]	; (80072ec <chk_lock+0xb4>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	4413      	add	r3, r2
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d116      	bne.n	800729a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800726c:	4a1f      	ldr	r2, [pc, #124]	; (80072ec <chk_lock+0xb4>)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	4413      	add	r3, r2
 8007274:	3304      	adds	r3, #4
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800727c:	429a      	cmp	r2, r3
 800727e:	d10c      	bne.n	800729a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007280:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <chk_lock+0xb4>)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	4413      	add	r3, r2
 8007288:	3308      	adds	r3, #8
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007290:	429a      	cmp	r2, r3
 8007292:	d102      	bne.n	800729a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007294:	e007      	b.n	80072a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007296:	2301      	movs	r3, #1
 8007298:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3301      	adds	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d9d2      	bls.n	800724c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d109      	bne.n	80072c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <chk_lock+0x80>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d101      	bne.n	80072bc <chk_lock+0x84>
 80072b8:	2300      	movs	r3, #0
 80072ba:	e010      	b.n	80072de <chk_lock+0xa6>
 80072bc:	2312      	movs	r3, #18
 80072be:	e00e      	b.n	80072de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <chk_lock+0xa0>
 80072c6:	4a09      	ldr	r2, [pc, #36]	; (80072ec <chk_lock+0xb4>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	4413      	add	r3, r2
 80072ce:	330c      	adds	r3, #12
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d6:	d101      	bne.n	80072dc <chk_lock+0xa4>
 80072d8:	2310      	movs	r3, #16
 80072da:	e000      	b.n	80072de <chk_lock+0xa6>
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000ae0 	.word	0x20000ae0

080072f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072f6:	2300      	movs	r3, #0
 80072f8:	607b      	str	r3, [r7, #4]
 80072fa:	e002      	b.n	8007302 <enq_lock+0x12>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3301      	adds	r3, #1
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d806      	bhi.n	8007316 <enq_lock+0x26>
 8007308:	4a09      	ldr	r2, [pc, #36]	; (8007330 <enq_lock+0x40>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	4413      	add	r3, r2
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1f2      	bne.n	80072fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b02      	cmp	r3, #2
 800731a:	bf14      	ite	ne
 800731c:	2301      	movne	r3, #1
 800731e:	2300      	moveq	r3, #0
 8007320:	b2db      	uxtb	r3, r3
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000ae0 	.word	0x20000ae0

08007334 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e01f      	b.n	8007384 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007344:	4a41      	ldr	r2, [pc, #260]	; (800744c <inc_lock+0x118>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	4413      	add	r3, r2
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d113      	bne.n	800737e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007356:	4a3d      	ldr	r2, [pc, #244]	; (800744c <inc_lock+0x118>)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	4413      	add	r3, r2
 800735e:	3304      	adds	r3, #4
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007366:	429a      	cmp	r2, r3
 8007368:	d109      	bne.n	800737e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800736a:	4a38      	ldr	r2, [pc, #224]	; (800744c <inc_lock+0x118>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	4413      	add	r3, r2
 8007372:	3308      	adds	r3, #8
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800737a:	429a      	cmp	r2, r3
 800737c:	d006      	beq.n	800738c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d9dc      	bls.n	8007344 <inc_lock+0x10>
 800738a:	e000      	b.n	800738e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800738c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d132      	bne.n	80073fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	e002      	b.n	80073a0 <inc_lock+0x6c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d806      	bhi.n	80073b4 <inc_lock+0x80>
 80073a6:	4a29      	ldr	r2, [pc, #164]	; (800744c <inc_lock+0x118>)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	4413      	add	r3, r2
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f2      	bne.n	800739a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d101      	bne.n	80073be <inc_lock+0x8a>
 80073ba:	2300      	movs	r3, #0
 80073bc:	e040      	b.n	8007440 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4922      	ldr	r1, [pc, #136]	; (800744c <inc_lock+0x118>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	440b      	add	r3, r1
 80073ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	491e      	ldr	r1, [pc, #120]	; (800744c <inc_lock+0x118>)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	440b      	add	r3, r1
 80073d8:	3304      	adds	r3, #4
 80073da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695a      	ldr	r2, [r3, #20]
 80073e0:	491a      	ldr	r1, [pc, #104]	; (800744c <inc_lock+0x118>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	440b      	add	r3, r1
 80073e8:	3308      	adds	r3, #8
 80073ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80073ec:	4a17      	ldr	r2, [pc, #92]	; (800744c <inc_lock+0x118>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	4413      	add	r3, r2
 80073f4:	330c      	adds	r3, #12
 80073f6:	2200      	movs	r2, #0
 80073f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d009      	beq.n	8007414 <inc_lock+0xe0>
 8007400:	4a12      	ldr	r2, [pc, #72]	; (800744c <inc_lock+0x118>)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	4413      	add	r3, r2
 8007408:	330c      	adds	r3, #12
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <inc_lock+0xe0>
 8007410:	2300      	movs	r3, #0
 8007412:	e015      	b.n	8007440 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <inc_lock+0xf8>
 800741a:	4a0c      	ldr	r2, [pc, #48]	; (800744c <inc_lock+0x118>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	4413      	add	r3, r2
 8007422:	330c      	adds	r3, #12
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	e001      	b.n	8007430 <inc_lock+0xfc>
 800742c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007430:	4906      	ldr	r1, [pc, #24]	; (800744c <inc_lock+0x118>)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	440b      	add	r3, r1
 8007438:	330c      	adds	r3, #12
 800743a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3301      	adds	r3, #1
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000ae0 	.word	0x20000ae0

08007450 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3b01      	subs	r3, #1
 800745c:	607b      	str	r3, [r7, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d825      	bhi.n	80074b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007464:	4a17      	ldr	r2, [pc, #92]	; (80074c4 <dec_lock+0x74>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	4413      	add	r3, r2
 800746c:	330c      	adds	r3, #12
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007472:	89fb      	ldrh	r3, [r7, #14]
 8007474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007478:	d101      	bne.n	800747e <dec_lock+0x2e>
 800747a:	2300      	movs	r3, #0
 800747c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <dec_lock+0x3a>
 8007484:	89fb      	ldrh	r3, [r7, #14]
 8007486:	3b01      	subs	r3, #1
 8007488:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800748a:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <dec_lock+0x74>)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	4413      	add	r3, r2
 8007492:	330c      	adds	r3, #12
 8007494:	89fa      	ldrh	r2, [r7, #14]
 8007496:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007498:	89fb      	ldrh	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d105      	bne.n	80074aa <dec_lock+0x5a>
 800749e:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <dec_lock+0x74>)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	4413      	add	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	737b      	strb	r3, [r7, #13]
 80074ae:	e001      	b.n	80074b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80074b0:	2302      	movs	r3, #2
 80074b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80074b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	20000ae0 	.word	0x20000ae0

080074c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e010      	b.n	80074f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80074d6:	4a0d      	ldr	r2, [pc, #52]	; (800750c <clear_lock+0x44>)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	4413      	add	r3, r2
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d105      	bne.n	80074f2 <clear_lock+0x2a>
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <clear_lock+0x44>)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	4413      	add	r3, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d9eb      	bls.n	80074d6 <clear_lock+0xe>
	}
}
 80074fe:	bf00      	nop
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	20000ae0 	.word	0x20000ae0

08007510 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	78db      	ldrb	r3, [r3, #3]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d034      	beq.n	800758e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007528:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7858      	ldrb	r0, [r3, #1]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007534:	2301      	movs	r3, #1
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	f7ff fd0e 	bl	8006f58 <disk_write>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007542:	2301      	movs	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
 8007546:	e022      	b.n	800758e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	1ad2      	subs	r2, r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	429a      	cmp	r2, r3
 800755c:	d217      	bcs.n	800758e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	789b      	ldrb	r3, [r3, #2]
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	e010      	b.n	8007588 <sync_window+0x78>
					wsect += fs->fsize;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4413      	add	r3, r2
 800756e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	7858      	ldrb	r0, [r3, #1]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800757a:	2301      	movs	r3, #1
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	f7ff fceb 	bl	8006f58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3b01      	subs	r3, #1
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d8eb      	bhi.n	8007566 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d01b      	beq.n	80075e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff ffad 	bl	8007510 <sync_window>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d113      	bne.n	80075e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	7858      	ldrb	r0, [r3, #1]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80075ca:	2301      	movs	r3, #1
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	f7ff fca3 	bl	8006f18 <disk_read>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295
 80075dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80075de:	2301      	movs	r3, #1
 80075e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ff87 	bl	8007510 <sync_window>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d158      	bne.n	80076be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b03      	cmp	r3, #3
 8007612:	d148      	bne.n	80076a6 <sync_fs+0xb2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	791b      	ldrb	r3, [r3, #4]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d144      	bne.n	80076a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3334      	adds	r3, #52	; 0x34
 8007620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fd77 	bl	800711a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3334      	adds	r3, #52	; 0x34
 8007630:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007634:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fd06 	bl	800704a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3334      	adds	r3, #52	; 0x34
 8007642:	4921      	ldr	r1, [pc, #132]	; (80076c8 <sync_fs+0xd4>)
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fd1b 	bl	8007080 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3334      	adds	r3, #52	; 0x34
 800764e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007652:	491e      	ldr	r1, [pc, #120]	; (80076cc <sync_fs+0xd8>)
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fd13 	bl	8007080 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3334      	adds	r3, #52	; 0x34
 800765e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f7ff fd09 	bl	8007080 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3334      	adds	r3, #52	; 0x34
 8007672:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	4619      	mov	r1, r3
 800767c:	4610      	mov	r0, r2
 800767e:	f7ff fcff 	bl	8007080 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7858      	ldrb	r0, [r3, #1]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800769a:	2301      	movs	r3, #1
 800769c:	f7ff fc5c 	bl	8006f58 <disk_write>
			fs->fsi_flag = 0;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2100      	movs	r1, #0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff fc72 	bl	8006f98 <disk_ioctl>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <sync_fs+0xca>
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	41615252 	.word	0x41615252
 80076cc:	61417272 	.word	0x61417272

080076d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	3b02      	subs	r3, #2
 80076de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	3b02      	subs	r3, #2
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d301      	bcc.n	80076f0 <clust2sect+0x20>
 80076ec:	2300      	movs	r3, #0
 80076ee:	e008      	b.n	8007702 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	895b      	ldrh	r3, [r3, #10]
 80076f4:	461a      	mov	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	fb03 f202 	mul.w	r2, r3, r2
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	4413      	add	r3, r2
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d904      	bls.n	800772e <get_fat+0x20>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <get_fat+0x26>
		val = 1;	/* Internal error */
 800772e:	2301      	movs	r3, #1
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e08f      	b.n	8007854 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007734:	f04f 33ff 	mov.w	r3, #4294967295
 8007738:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d062      	beq.n	8007808 <get_fat+0xfa>
 8007742:	2b03      	cmp	r3, #3
 8007744:	dc7c      	bgt.n	8007840 <get_fat+0x132>
 8007746:	2b01      	cmp	r3, #1
 8007748:	d002      	beq.n	8007750 <get_fat+0x42>
 800774a:	2b02      	cmp	r3, #2
 800774c:	d042      	beq.n	80077d4 <get_fat+0xc6>
 800774e:	e077      	b.n	8007840 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	0a5b      	lsrs	r3, r3, #9
 8007766:	4413      	add	r3, r2
 8007768:	4619      	mov	r1, r3
 800776a:	6938      	ldr	r0, [r7, #16]
 800776c:	f7ff ff14 	bl	8007598 <move_window>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d167      	bne.n	8007846 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	60fa      	str	r2, [r7, #12]
 800777c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4413      	add	r3, r2
 8007784:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007788:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	0a5b      	lsrs	r3, r3, #9
 8007792:	4413      	add	r3, r2
 8007794:	4619      	mov	r1, r3
 8007796:	6938      	ldr	r0, [r7, #16]
 8007798:	f7ff fefe 	bl	8007598 <move_window>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d153      	bne.n	800784a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4413      	add	r3, r2
 80077ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	461a      	mov	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <get_fat+0xbc>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	091b      	lsrs	r3, r3, #4
 80077c8:	e002      	b.n	80077d0 <get_fat+0xc2>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d0:	617b      	str	r3, [r7, #20]
			break;
 80077d2:	e03f      	b.n	8007854 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	0a1b      	lsrs	r3, r3, #8
 80077dc:	4413      	add	r3, r2
 80077de:	4619      	mov	r1, r3
 80077e0:	6938      	ldr	r0, [r7, #16]
 80077e2:	f7ff fed9 	bl	8007598 <move_window>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d130      	bne.n	800784e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80077fa:	4413      	add	r3, r2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fbe9 	bl	8006fd4 <ld_word>
 8007802:	4603      	mov	r3, r0
 8007804:	617b      	str	r3, [r7, #20]
			break;
 8007806:	e025      	b.n	8007854 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	09db      	lsrs	r3, r3, #7
 8007810:	4413      	add	r3, r2
 8007812:	4619      	mov	r1, r3
 8007814:	6938      	ldr	r0, [r7, #16]
 8007816:	f7ff febf 	bl	8007598 <move_window>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d118      	bne.n	8007852 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800782e:	4413      	add	r3, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff fbe7 	bl	8007004 <ld_dword>
 8007836:	4603      	mov	r3, r0
 8007838:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800783c:	617b      	str	r3, [r7, #20]
			break;
 800783e:	e009      	b.n	8007854 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007840:	2301      	movs	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e006      	b.n	8007854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007846:	bf00      	nop
 8007848:	e004      	b.n	8007854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800784a:	bf00      	nop
 800784c:	e002      	b.n	8007854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007852:	bf00      	nop
		}
	}

	return val;
 8007854:	697b      	ldr	r3, [r7, #20]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800785e:	b590      	push	{r4, r7, lr}
 8007860:	b089      	sub	sp, #36	; 0x24
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800786a:	2302      	movs	r3, #2
 800786c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b01      	cmp	r3, #1
 8007872:	f240 80d2 	bls.w	8007a1a <put_fat+0x1bc>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	429a      	cmp	r2, r3
 800787e:	f080 80cc 	bcs.w	8007a1a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b03      	cmp	r3, #3
 8007888:	f000 8096 	beq.w	80079b8 <put_fat+0x15a>
 800788c:	2b03      	cmp	r3, #3
 800788e:	f300 80cd 	bgt.w	8007a2c <put_fat+0x1ce>
 8007892:	2b01      	cmp	r3, #1
 8007894:	d002      	beq.n	800789c <put_fat+0x3e>
 8007896:	2b02      	cmp	r3, #2
 8007898:	d06e      	beq.n	8007978 <put_fat+0x11a>
 800789a:	e0c7      	b.n	8007a2c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	4413      	add	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	0a5b      	lsrs	r3, r3, #9
 80078b2:	4413      	add	r3, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fe6e 	bl	8007598 <move_window>
 80078bc:	4603      	mov	r3, r0
 80078be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078c0:	7ffb      	ldrb	r3, [r7, #31]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f040 80ab 	bne.w	8007a1e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	1c59      	adds	r1, r3, #1
 80078d2:	61b9      	str	r1, [r7, #24]
 80078d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d8:	4413      	add	r3, r2
 80078da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00d      	beq.n	8007902 <put_fat+0xa4>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b25b      	sxtb	r3, r3
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	b25a      	sxtb	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	b25b      	sxtb	r3, r3
 80078fa:	4313      	orrs	r3, r2
 80078fc:	b25b      	sxtb	r3, r3
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	e001      	b.n	8007906 <put_fat+0xa8>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	0a5b      	lsrs	r3, r3, #9
 8007918:	4413      	add	r3, r2
 800791a:	4619      	mov	r1, r3
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff fe3b 	bl	8007598 <move_window>
 8007922:	4603      	mov	r3, r0
 8007924:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007926:	7ffb      	ldrb	r3, [r7, #31]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d17a      	bne.n	8007a22 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007938:	4413      	add	r3, r2
 800793a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <put_fat+0xf0>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	091b      	lsrs	r3, r3, #4
 800794a:	b2db      	uxtb	r3, r3
 800794c:	e00e      	b.n	800796c <put_fat+0x10e>
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	b25b      	sxtb	r3, r3
 8007954:	f023 030f 	bic.w	r3, r3, #15
 8007958:	b25a      	sxtb	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0a1b      	lsrs	r3, r3, #8
 800795e:	b25b      	sxtb	r3, r3
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	b25b      	sxtb	r3, r3
 8007966:	4313      	orrs	r3, r2
 8007968:	b25b      	sxtb	r3, r3
 800796a:	b2db      	uxtb	r3, r3
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	70da      	strb	r2, [r3, #3]
			break;
 8007976:	e059      	b.n	8007a2c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	0a1b      	lsrs	r3, r3, #8
 8007980:	4413      	add	r3, r2
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fe07 	bl	8007598 <move_window>
 800798a:	4603      	mov	r3, r0
 800798c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800798e:	7ffb      	ldrb	r3, [r7, #31]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d148      	bne.n	8007a26 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80079a2:	4413      	add	r3, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	b292      	uxth	r2, r2
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fb4d 	bl	800704a <st_word>
			fs->wflag = 1;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	70da      	strb	r2, [r3, #3]
			break;
 80079b6:	e039      	b.n	8007a2c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	09db      	lsrs	r3, r3, #7
 80079c0:	4413      	add	r3, r2
 80079c2:	4619      	mov	r1, r3
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff fde7 	bl	8007598 <move_window>
 80079ca:	4603      	mov	r3, r0
 80079cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079ce:	7ffb      	ldrb	r3, [r7, #31]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d12a      	bne.n	8007a2a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80079e8:	4413      	add	r3, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff fb0a 	bl	8007004 <ld_dword>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80079f6:	4323      	orrs	r3, r4
 80079f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a08:	4413      	add	r3, r2
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff fb37 	bl	8007080 <st_dword>
			fs->wflag = 1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	70da      	strb	r2, [r3, #3]
			break;
 8007a18:	e008      	b.n	8007a2c <put_fat+0x1ce>
		}
	}
 8007a1a:	bf00      	nop
 8007a1c:	e006      	b.n	8007a2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a1e:	bf00      	nop
 8007a20:	e004      	b.n	8007a2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a22:	bf00      	nop
 8007a24:	e002      	b.n	8007a2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a26:	bf00      	nop
 8007a28:	e000      	b.n	8007a2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a2a:	bf00      	nop
	return res;
 8007a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3724      	adds	r7, #36	; 0x24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd90      	pop	{r4, r7, pc}

08007a36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b088      	sub	sp, #32
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d904      	bls.n	8007a5c <remove_chain+0x26>
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d301      	bcc.n	8007a60 <remove_chain+0x2a>
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e04b      	b.n	8007af8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00c      	beq.n	8007a80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007a66:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	69b8      	ldr	r0, [r7, #24]
 8007a6e:	f7ff fef6 	bl	800785e <put_fat>
 8007a72:	4603      	mov	r3, r0
 8007a74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007a76:	7ffb      	ldrb	r3, [r7, #31]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <remove_chain+0x4a>
 8007a7c:	7ffb      	ldrb	r3, [r7, #31]
 8007a7e:	e03b      	b.n	8007af8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007a80:	68b9      	ldr	r1, [r7, #8]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7ff fe43 	bl	800770e <get_fat>
 8007a88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d031      	beq.n	8007af4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <remove_chain+0x64>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e02e      	b.n	8007af8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d101      	bne.n	8007aa6 <remove_chain+0x70>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e028      	b.n	8007af8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	69b8      	ldr	r0, [r7, #24]
 8007aac:	f7ff fed7 	bl	800785e <put_fat>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007ab4:	7ffb      	ldrb	r3, [r7, #31]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <remove_chain+0x88>
 8007aba:	7ffb      	ldrb	r3, [r7, #31]
 8007abc:	e01c      	b.n	8007af8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	695a      	ldr	r2, [r3, #20]
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	3b02      	subs	r3, #2
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d20b      	bcs.n	8007ae4 <remove_chain+0xae>
			fs->free_clst++;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	791b      	ldrb	r3, [r3, #4]
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d3c6      	bcc.n	8007a80 <remove_chain+0x4a>
 8007af2:	e000      	b.n	8007af6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007af4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10d      	bne.n	8007b32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <create_chain+0x2c>
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d31b      	bcc.n	8007b64 <create_chain+0x64>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e018      	b.n	8007b64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff fdea 	bl	800770e <get_fat>
 8007b3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d801      	bhi.n	8007b46 <create_chain+0x46>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e070      	b.n	8007c28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d101      	bne.n	8007b52 <create_chain+0x52>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	e06a      	b.n	8007c28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d201      	bcs.n	8007b60 <create_chain+0x60>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	e063      	b.n	8007c28 <create_chain+0x128>
		scl = clst;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d307      	bcc.n	8007b88 <create_chain+0x88>
				ncl = 2;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d901      	bls.n	8007b88 <create_chain+0x88>
 8007b84:	2300      	movs	r3, #0
 8007b86:	e04f      	b.n	8007c28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007b88:	69f9      	ldr	r1, [r7, #28]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff fdbf 	bl	800770e <get_fat>
 8007b90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00e      	beq.n	8007bb6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d003      	beq.n	8007ba6 <create_chain+0xa6>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d101      	bne.n	8007baa <create_chain+0xaa>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	e03e      	b.n	8007c28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d1da      	bne.n	8007b68 <create_chain+0x68>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e038      	b.n	8007c28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007bb6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbc:	69f9      	ldr	r1, [r7, #28]
 8007bbe:	6938      	ldr	r0, [r7, #16]
 8007bc0:	f7ff fe4d 	bl	800785e <put_fat>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <create_chain+0xe2>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d006      	beq.n	8007be2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6938      	ldr	r0, [r7, #16]
 8007bda:	f7ff fe40 	bl	800785e <put_fat>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d116      	bne.n	8007c16 <create_chain+0x116>
		fs->last_clst = ncl;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	3b02      	subs	r3, #2
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d804      	bhi.n	8007c06 <create_chain+0x106>
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	1e5a      	subs	r2, r3, #1
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	791b      	ldrb	r3, [r3, #4]
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	711a      	strb	r2, [r3, #4]
 8007c14:	e007      	b.n	8007c26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d102      	bne.n	8007c22 <create_chain+0x122>
 8007c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c20:	e000      	b.n	8007c24 <create_chain+0x124>
 8007c22:	2301      	movs	r3, #1
 8007c24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007c26:	69fb      	ldr	r3, [r7, #28]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3720      	adds	r7, #32
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	3304      	adds	r3, #4
 8007c46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	0a5b      	lsrs	r3, r3, #9
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	8952      	ldrh	r2, [r2, #10]
 8007c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1d1a      	adds	r2, r3, #4
 8007c5a:	613a      	str	r2, [r7, #16]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <clmt_clust+0x3a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e010      	b.n	8007c8c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d307      	bcc.n	8007c82 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c80:	e7e9      	b.n	8007c56 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007c82:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	4413      	add	r3, r2
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cae:	d204      	bcs.n	8007cba <dir_sdi+0x22>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <dir_sdi+0x26>
		return FR_INT_ERR;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e063      	b.n	8007d86 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <dir_sdi+0x46>
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d902      	bls.n	8007cde <dir_sdi+0x46>
		clst = fs->dirbase;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10c      	bne.n	8007cfe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	8912      	ldrh	r2, [r2, #8]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d301      	bcc.n	8007cf4 <dir_sdi+0x5c>
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e048      	b.n	8007d86 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	61da      	str	r2, [r3, #28]
 8007cfc:	e029      	b.n	8007d52 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	895b      	ldrh	r3, [r3, #10]
 8007d02:	025b      	lsls	r3, r3, #9
 8007d04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d06:	e019      	b.n	8007d3c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fcfe 	bl	800770e <get_fat>
 8007d12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d101      	bne.n	8007d20 <dir_sdi+0x88>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e032      	b.n	8007d86 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d904      	bls.n	8007d30 <dir_sdi+0x98>
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d301      	bcc.n	8007d34 <dir_sdi+0x9c>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e028      	b.n	8007d86 <dir_sdi+0xee>
			ofs -= csz;
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d2e1      	bcs.n	8007d08 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007d44:	6979      	ldr	r1, [r7, #20]
 8007d46:	6938      	ldr	r0, [r7, #16]
 8007d48:	f7ff fcc2 	bl	80076d0 <clust2sect>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <dir_sdi+0xcc>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e010      	b.n	8007d86 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69da      	ldr	r2, [r3, #28]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	0a5b      	lsrs	r3, r3, #9
 8007d6c:	441a      	add	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	441a      	add	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	3320      	adds	r3, #32
 8007da4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <dir_next+0x28>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007db4:	d301      	bcc.n	8007dba <dir_next+0x2c>
 8007db6:	2304      	movs	r3, #4
 8007db8:	e0aa      	b.n	8007f10 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f040 8098 	bne.w	8007ef6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10b      	bne.n	8007df0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	8912      	ldrh	r2, [r2, #8]
 8007de0:	4293      	cmp	r3, r2
 8007de2:	f0c0 8088 	bcc.w	8007ef6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	61da      	str	r2, [r3, #28]
 8007dec:	2304      	movs	r3, #4
 8007dee:	e08f      	b.n	8007f10 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	0a5b      	lsrs	r3, r3, #9
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	8952      	ldrh	r2, [r2, #10]
 8007df8:	3a01      	subs	r2, #1
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d17a      	bne.n	8007ef6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	4619      	mov	r1, r3
 8007e08:	4610      	mov	r0, r2
 8007e0a:	f7ff fc80 	bl	800770e <get_fat>
 8007e0e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d801      	bhi.n	8007e1a <dir_next+0x8c>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e07a      	b.n	8007f10 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d101      	bne.n	8007e26 <dir_next+0x98>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e074      	b.n	8007f10 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d358      	bcc.n	8007ee2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d104      	bne.n	8007e40 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	61da      	str	r2, [r3, #28]
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	e067      	b.n	8007f10 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f7ff fe59 	bl	8007b00 <create_chain>
 8007e4e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <dir_next+0xcc>
 8007e56:	2307      	movs	r3, #7
 8007e58:	e05a      	b.n	8007f10 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d101      	bne.n	8007e64 <dir_next+0xd6>
 8007e60:	2302      	movs	r3, #2
 8007e62:	e055      	b.n	8007f10 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d101      	bne.n	8007e70 <dir_next+0xe2>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e04f      	b.n	8007f10 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7ff fb4d 	bl	8007510 <sync_window>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <dir_next+0xf2>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e047      	b.n	8007f10 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3334      	adds	r3, #52	; 0x34
 8007e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff f945 	bl	800711a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007e90:	2300      	movs	r3, #0
 8007e92:	613b      	str	r3, [r7, #16]
 8007e94:	6979      	ldr	r1, [r7, #20]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff fc1a 	bl	80076d0 <clust2sect>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ea2:	e012      	b.n	8007eca <dir_next+0x13c>
						fs->wflag = 1;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff fb30 	bl	8007510 <sync_window>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <dir_next+0x12c>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e02a      	b.n	8007f10 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	613b      	str	r3, [r7, #16]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	895b      	ldrh	r3, [r3, #10]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d3e6      	bcc.n	8007ea4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	1ad2      	subs	r2, r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007ee8:	6979      	ldr	r1, [r7, #20]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7ff fbf0 	bl	80076d0 <clust2sect>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f08:	441a      	add	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff feb4 	bl	8007c98 <dir_sdi>
 8007f30:	4603      	mov	r3, r0
 8007f32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d12b      	bne.n	8007f92 <dir_alloc+0x7a>
		n = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	4619      	mov	r1, r3
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff fb27 	bl	8007598 <move_window>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11d      	bne.n	8007f90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2be5      	cmp	r3, #229	; 0xe5
 8007f5c:	d004      	beq.n	8007f68 <dir_alloc+0x50>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d107      	bne.n	8007f78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d102      	bne.n	8007f7c <dir_alloc+0x64>
 8007f76:	e00c      	b.n	8007f92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f78:	2300      	movs	r3, #0
 8007f7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff ff05 	bl	8007d8e <dir_next>
 8007f84:	4603      	mov	r3, r0
 8007f86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0d7      	beq.n	8007f3e <dir_alloc+0x26>
 8007f8e:	e000      	b.n	8007f92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007f90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d101      	bne.n	8007f9c <dir_alloc+0x84>
 8007f98:	2307      	movs	r3, #7
 8007f9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	331a      	adds	r3, #26
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f80d 	bl	8006fd4 <ld_word>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d109      	bne.n	8007fda <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	3314      	adds	r3, #20
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff f802 	bl	8006fd4 <ld_word>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	041b      	lsls	r3, r3, #16
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	331a      	adds	r3, #26
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff f825 	bl	800704a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d109      	bne.n	800801c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f103 0214 	add.w	r2, r3, #20
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	0c1b      	lsrs	r3, r3, #16
 8008012:	b29b      	uxth	r3, r3
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7ff f817 	bl	800704a <st_word>
	}
}
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7ff fe2f 	bl	8007c98 <dir_sdi>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <dir_find+0x24>
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	e03e      	b.n	80080c6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	4619      	mov	r1, r3
 800804e:	6938      	ldr	r0, [r7, #16]
 8008050:	f7ff faa2 	bl	8007598 <move_window>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d12f      	bne.n	80080be <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d102      	bne.n	8008072 <dir_find+0x4e>
 800806c:	2304      	movs	r3, #4
 800806e:	75fb      	strb	r3, [r7, #23]
 8008070:	e028      	b.n	80080c4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	330b      	adds	r3, #11
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800807e:	b2da      	uxtb	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	330b      	adds	r3, #11
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <dir_find+0x86>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a18      	ldr	r0, [r3, #32]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3324      	adds	r3, #36	; 0x24
 800809c:	220b      	movs	r2, #11
 800809e:	4619      	mov	r1, r3
 80080a0:	f7ff f856 	bl	8007150 <mem_cmp>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80080aa:	2100      	movs	r1, #0
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff fe6e 	bl	8007d8e <dir_next>
 80080b2:	4603      	mov	r3, r0
 80080b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0c5      	beq.n	8008048 <dir_find+0x24>
 80080bc:	e002      	b.n	80080c4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80080be:	bf00      	nop
 80080c0:	e000      	b.n	80080c4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80080c2:	bf00      	nop

	return res;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff ff1a 	bl	8007f18 <dir_alloc>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d11c      	bne.n	8008128 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4619      	mov	r1, r3
 80080f4:	68b8      	ldr	r0, [r7, #8]
 80080f6:	f7ff fa4f 	bl	8007598 <move_window>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d111      	bne.n	8008128 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	2220      	movs	r2, #32
 800810a:	2100      	movs	r1, #0
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff f804 	bl	800711a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a18      	ldr	r0, [r3, #32]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3324      	adds	r3, #36	; 0x24
 800811a:	220b      	movs	r2, #11
 800811c:	4619      	mov	r1, r3
 800811e:	f7fe ffdb 	bl	80070d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2201      	movs	r2, #1
 8008126:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3324      	adds	r3, #36	; 0x24
 8008148:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800814a:	220b      	movs	r2, #11
 800814c:	2120      	movs	r1, #32
 800814e:	68b8      	ldr	r0, [r7, #8]
 8008150:	f7fe ffe3 	bl	800711a <mem_set>
	si = i = 0; ni = 8;
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	61fb      	str	r3, [r7, #28]
 800815c:	2308      	movs	r3, #8
 800815e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	61fa      	str	r2, [r7, #28]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800816e:	7efb      	ldrb	r3, [r7, #27]
 8008170:	2b20      	cmp	r3, #32
 8008172:	d94e      	bls.n	8008212 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008174:	7efb      	ldrb	r3, [r7, #27]
 8008176:	2b2f      	cmp	r3, #47	; 0x2f
 8008178:	d006      	beq.n	8008188 <create_name+0x54>
 800817a:	7efb      	ldrb	r3, [r7, #27]
 800817c:	2b5c      	cmp	r3, #92	; 0x5c
 800817e:	d110      	bne.n	80081a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008180:	e002      	b.n	8008188 <create_name+0x54>
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3301      	adds	r3, #1
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	4413      	add	r3, r2
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b2f      	cmp	r3, #47	; 0x2f
 8008192:	d0f6      	beq.n	8008182 <create_name+0x4e>
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b5c      	cmp	r3, #92	; 0x5c
 800819e:	d0f0      	beq.n	8008182 <create_name+0x4e>
			break;
 80081a0:	e038      	b.n	8008214 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80081a2:	7efb      	ldrb	r3, [r7, #27]
 80081a4:	2b2e      	cmp	r3, #46	; 0x2e
 80081a6:	d003      	beq.n	80081b0 <create_name+0x7c>
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d30c      	bcc.n	80081ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	2b0b      	cmp	r3, #11
 80081b4:	d002      	beq.n	80081bc <create_name+0x88>
 80081b6:	7efb      	ldrb	r3, [r7, #27]
 80081b8:	2b2e      	cmp	r3, #46	; 0x2e
 80081ba:	d001      	beq.n	80081c0 <create_name+0x8c>
 80081bc:	2306      	movs	r3, #6
 80081be:	e044      	b.n	800824a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80081c0:	2308      	movs	r3, #8
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	230b      	movs	r3, #11
 80081c6:	617b      	str	r3, [r7, #20]
			continue;
 80081c8:	e022      	b.n	8008210 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80081ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da04      	bge.n	80081dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80081d2:	7efb      	ldrb	r3, [r7, #27]
 80081d4:	3b80      	subs	r3, #128	; 0x80
 80081d6:	4a1f      	ldr	r2, [pc, #124]	; (8008254 <create_name+0x120>)
 80081d8:	5cd3      	ldrb	r3, [r2, r3]
 80081da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80081dc:	7efb      	ldrb	r3, [r7, #27]
 80081de:	4619      	mov	r1, r3
 80081e0:	481d      	ldr	r0, [pc, #116]	; (8008258 <create_name+0x124>)
 80081e2:	f7fe ffdc 	bl	800719e <chk_chr>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <create_name+0xbc>
 80081ec:	2306      	movs	r3, #6
 80081ee:	e02c      	b.n	800824a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80081f0:	7efb      	ldrb	r3, [r7, #27]
 80081f2:	2b60      	cmp	r3, #96	; 0x60
 80081f4:	d905      	bls.n	8008202 <create_name+0xce>
 80081f6:	7efb      	ldrb	r3, [r7, #27]
 80081f8:	2b7a      	cmp	r3, #122	; 0x7a
 80081fa:	d802      	bhi.n	8008202 <create_name+0xce>
 80081fc:	7efb      	ldrb	r3, [r7, #27]
 80081fe:	3b20      	subs	r3, #32
 8008200:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	613a      	str	r2, [r7, #16]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	4413      	add	r3, r2
 800820c:	7efa      	ldrb	r2, [r7, #27]
 800820e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008210:	e7a6      	b.n	8008160 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008212:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	441a      	add	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <create_name+0xf4>
 8008224:	2306      	movs	r3, #6
 8008226:	e010      	b.n	800824a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2be5      	cmp	r3, #229	; 0xe5
 800822e:	d102      	bne.n	8008236 <create_name+0x102>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2205      	movs	r2, #5
 8008234:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008236:	7efb      	ldrb	r3, [r7, #27]
 8008238:	2b20      	cmp	r3, #32
 800823a:	d801      	bhi.n	8008240 <create_name+0x10c>
 800823c:	2204      	movs	r2, #4
 800823e:	e000      	b.n	8008242 <create_name+0x10e>
 8008240:	2200      	movs	r2, #0
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	330b      	adds	r3, #11
 8008246:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008248:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800824a:	4618      	mov	r0, r3
 800824c:	3720      	adds	r7, #32
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	0800c8e0 	.word	0x0800c8e0
 8008258:	0800c838 	.word	0x0800c838

0800825c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008270:	e002      	b.n	8008278 <follow_path+0x1c>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	3301      	adds	r3, #1
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b2f      	cmp	r3, #47	; 0x2f
 800827e:	d0f8      	beq.n	8008272 <follow_path+0x16>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	2b5c      	cmp	r3, #92	; 0x5c
 8008286:	d0f4      	beq.n	8008272 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2200      	movs	r2, #0
 800828c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b1f      	cmp	r3, #31
 8008294:	d80a      	bhi.n	80082ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2280      	movs	r2, #128	; 0x80
 800829a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff fcf9 	bl	8007c98 <dir_sdi>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	e043      	b.n	8008334 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80082ac:	463b      	mov	r3, r7
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff ff3f 	bl	8008134 <create_name>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d134      	bne.n	800832a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff feaf 	bl	8008024 <dir_find>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80082d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d127      	bne.n	800832e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d122      	bne.n	800832e <follow_path+0xd2>
 80082e8:	2305      	movs	r3, #5
 80082ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80082ec:	e01f      	b.n	800832e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80082ee:	7afb      	ldrb	r3, [r7, #11]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d11c      	bne.n	8008332 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	799b      	ldrb	r3, [r3, #6]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008304:	2305      	movs	r3, #5
 8008306:	75fb      	strb	r3, [r7, #23]
 8008308:	e014      	b.n	8008334 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008318:	4413      	add	r3, r2
 800831a:	4619      	mov	r1, r3
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fe42 	bl	8007fa6 <ld_clust>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008328:	e7c0      	b.n	80082ac <follow_path+0x50>
			if (res != FR_OK) break;
 800832a:	bf00      	nop
 800832c:	e002      	b.n	8008334 <follow_path+0xd8>
				break;
 800832e:	bf00      	nop
 8008330:	e000      	b.n	8008334 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008332:	bf00      	nop
			}
		}
	}

	return res;
 8008334:	7dfb      	ldrb	r3, [r7, #23]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800833e:	b480      	push	{r7}
 8008340:	b087      	sub	sp, #28
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295
 800834a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d031      	beq.n	80083b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	e002      	b.n	8008362 <get_ldnumber+0x24>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	3301      	adds	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b20      	cmp	r3, #32
 8008368:	d903      	bls.n	8008372 <get_ldnumber+0x34>
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b3a      	cmp	r3, #58	; 0x3a
 8008370:	d1f4      	bne.n	800835c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b3a      	cmp	r3, #58	; 0x3a
 8008378:	d11c      	bne.n	80083b4 <get_ldnumber+0x76>
			tp = *path;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	60fa      	str	r2, [r7, #12]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	3b30      	subs	r3, #48	; 0x30
 800838a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b09      	cmp	r3, #9
 8008390:	d80e      	bhi.n	80083b0 <get_ldnumber+0x72>
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	429a      	cmp	r2, r3
 8008398:	d10a      	bne.n	80083b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d107      	bne.n	80083b0 <get_ldnumber+0x72>
					vol = (int)i;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3301      	adds	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	e002      	b.n	80083ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80083b4:	2300      	movs	r3, #0
 80083b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80083b8:	693b      	ldr	r3, [r7, #16]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	70da      	strb	r2, [r3, #3]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff f8d8 	bl	8007598 <move_window>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <check_fs+0x2a>
 80083ee:	2304      	movs	r3, #4
 80083f0:	e038      	b.n	8008464 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3334      	adds	r3, #52	; 0x34
 80083f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe fdea 	bl	8006fd4 <ld_word>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008408:	429a      	cmp	r2, r3
 800840a:	d001      	beq.n	8008410 <check_fs+0x48>
 800840c:	2303      	movs	r3, #3
 800840e:	e029      	b.n	8008464 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008416:	2be9      	cmp	r3, #233	; 0xe9
 8008418:	d009      	beq.n	800842e <check_fs+0x66>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008420:	2beb      	cmp	r3, #235	; 0xeb
 8008422:	d11e      	bne.n	8008462 <check_fs+0x9a>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800842a:	2b90      	cmp	r3, #144	; 0x90
 800842c:	d119      	bne.n	8008462 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3334      	adds	r3, #52	; 0x34
 8008432:	3336      	adds	r3, #54	; 0x36
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fde5 	bl	8007004 <ld_dword>
 800843a:	4603      	mov	r3, r0
 800843c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008440:	4a0a      	ldr	r2, [pc, #40]	; (800846c <check_fs+0xa4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d101      	bne.n	800844a <check_fs+0x82>
 8008446:	2300      	movs	r3, #0
 8008448:	e00c      	b.n	8008464 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3334      	adds	r3, #52	; 0x34
 800844e:	3352      	adds	r3, #82	; 0x52
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fdd7 	bl	8007004 <ld_dword>
 8008456:	4603      	mov	r3, r0
 8008458:	4a05      	ldr	r2, [pc, #20]	; (8008470 <check_fs+0xa8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <check_fs+0x9a>
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008462:	2302      	movs	r3, #2
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	00544146 	.word	0x00544146
 8008470:	33544146 	.word	0x33544146

08008474 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b096      	sub	sp, #88	; 0x58
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7ff ff58 	bl	800833e <get_ldnumber>
 800848e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008492:	2b00      	cmp	r3, #0
 8008494:	da01      	bge.n	800849a <find_volume+0x26>
 8008496:	230b      	movs	r3, #11
 8008498:	e235      	b.n	8008906 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800849a:	4aa5      	ldr	r2, [pc, #660]	; (8008730 <find_volume+0x2bc>)
 800849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <find_volume+0x3a>
 80084aa:	230c      	movs	r3, #12
 80084ac:	e22b      	b.n	8008906 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80084ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084b0:	f7fe fe90 	bl	80071d4 <lock_fs>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <find_volume+0x4a>
 80084ba:	230f      	movs	r3, #15
 80084bc:	e223      	b.n	8008906 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	f023 0301 	bic.w	r3, r3, #1
 80084ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01a      	beq.n	800850a <find_volume+0x96>
		stat = disk_status(fs->drv);
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	785b      	ldrb	r3, [r3, #1]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fcdd 	bl	8006e98 <disk_status>
 80084de:	4603      	mov	r3, r0
 80084e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80084e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10c      	bne.n	800850a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d007      	beq.n	8008506 <find_volume+0x92>
 80084f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084fa:	f003 0304 	and.w	r3, r3, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008502:	230a      	movs	r3, #10
 8008504:	e1ff      	b.n	8008906 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8008506:	2300      	movs	r3, #0
 8008508:	e1fd      	b.n	8008906 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008512:	b2da      	uxtb	r2, r3
 8008514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008516:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	785b      	ldrb	r3, [r3, #1]
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe fcd5 	bl	8006ecc <disk_initialize>
 8008522:	4603      	mov	r3, r0
 8008524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008534:	2303      	movs	r3, #3
 8008536:	e1e6      	b.n	8008906 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d007      	beq.n	800854e <find_volume+0xda>
 800853e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800854a:	230a      	movs	r3, #10
 800854c:	e1db      	b.n	8008906 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008556:	f7ff ff37 	bl	80083c8 <check_fs>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008564:	2b02      	cmp	r3, #2
 8008566:	d149      	bne.n	80085fc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008568:	2300      	movs	r3, #0
 800856a:	643b      	str	r3, [r7, #64]	; 0x40
 800856c:	e01e      	b.n	80085ac <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800857c:	4413      	add	r3, r2
 800857e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	3304      	adds	r3, #4
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d006      	beq.n	8008598 <find_volume+0x124>
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	3308      	adds	r3, #8
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fd38 	bl	8007004 <ld_dword>
 8008594:	4602      	mov	r2, r0
 8008596:	e000      	b.n	800859a <find_volume+0x126>
 8008598:	2200      	movs	r2, #0
 800859a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	3358      	adds	r3, #88	; 0x58
 80085a0:	443b      	add	r3, r7
 80085a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80085a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a8:	3301      	adds	r3, #1
 80085aa:	643b      	str	r3, [r7, #64]	; 0x40
 80085ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d9dd      	bls.n	800856e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80085b2:	2300      	movs	r3, #0
 80085b4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80085b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <find_volume+0x14e>
 80085bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085be:	3b01      	subs	r3, #1
 80085c0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80085c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	3358      	adds	r3, #88	; 0x58
 80085c8:	443b      	add	r3, r7
 80085ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80085ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80085d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <find_volume+0x16e>
 80085d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085da:	f7ff fef5 	bl	80083c8 <check_fs>
 80085de:	4603      	mov	r3, r0
 80085e0:	e000      	b.n	80085e4 <find_volume+0x170>
 80085e2:	2303      	movs	r3, #3
 80085e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80085e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d905      	bls.n	80085fc <find_volume+0x188>
 80085f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f2:	3301      	adds	r3, #1
 80085f4:	643b      	str	r3, [r7, #64]	; 0x40
 80085f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d9e2      	bls.n	80085c2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80085fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008600:	2b04      	cmp	r3, #4
 8008602:	d101      	bne.n	8008608 <find_volume+0x194>
 8008604:	2301      	movs	r3, #1
 8008606:	e17e      	b.n	8008906 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800860c:	2b01      	cmp	r3, #1
 800860e:	d901      	bls.n	8008614 <find_volume+0x1a0>
 8008610:	230d      	movs	r3, #13
 8008612:	e178      	b.n	8008906 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	3334      	adds	r3, #52	; 0x34
 8008618:	330b      	adds	r3, #11
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe fcda 	bl	8006fd4 <ld_word>
 8008620:	4603      	mov	r3, r0
 8008622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008626:	d001      	beq.n	800862c <find_volume+0x1b8>
 8008628:	230d      	movs	r3, #13
 800862a:	e16c      	b.n	8008906 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	3334      	adds	r3, #52	; 0x34
 8008630:	3316      	adds	r3, #22
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fcce 	bl	8006fd4 <ld_word>
 8008638:	4603      	mov	r3, r0
 800863a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800863c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d106      	bne.n	8008650 <find_volume+0x1dc>
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	3334      	adds	r3, #52	; 0x34
 8008646:	3324      	adds	r3, #36	; 0x24
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe fcdb 	bl	8007004 <ld_dword>
 800864e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008654:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	789b      	ldrb	r3, [r3, #2]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d005      	beq.n	8008674 <find_volume+0x200>
 8008668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866a:	789b      	ldrb	r3, [r3, #2]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d001      	beq.n	8008674 <find_volume+0x200>
 8008670:	230d      	movs	r3, #13
 8008672:	e148      	b.n	8008906 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	789b      	ldrb	r3, [r3, #2]
 8008678:	461a      	mov	r2, r3
 800867a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008688:	b29a      	uxth	r2, r3
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	895b      	ldrh	r3, [r3, #10]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d008      	beq.n	80086a8 <find_volume+0x234>
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	895b      	ldrh	r3, [r3, #10]
 800869a:	461a      	mov	r2, r3
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	895b      	ldrh	r3, [r3, #10]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <find_volume+0x238>
 80086a8:	230d      	movs	r3, #13
 80086aa:	e12c      	b.n	8008906 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	3334      	adds	r3, #52	; 0x34
 80086b0:	3311      	adds	r3, #17
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fc8e 	bl	8006fd4 <ld_word>
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80086c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c2:	891b      	ldrh	r3, [r3, #8]
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <find_volume+0x25e>
 80086ce:	230d      	movs	r3, #13
 80086d0:	e119      	b.n	8008906 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	3334      	adds	r3, #52	; 0x34
 80086d6:	3313      	adds	r3, #19
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fc7b 	bl	8006fd4 <ld_word>
 80086de:	4603      	mov	r3, r0
 80086e0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80086e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d106      	bne.n	80086f6 <find_volume+0x282>
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	3334      	adds	r3, #52	; 0x34
 80086ec:	3320      	adds	r3, #32
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fc88 	bl	8007004 <ld_dword>
 80086f4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	3334      	adds	r3, #52	; 0x34
 80086fa:	330e      	adds	r3, #14
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fc69 	bl	8006fd4 <ld_word>
 8008702:	4603      	mov	r3, r0
 8008704:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <find_volume+0x29c>
 800870c:	230d      	movs	r3, #13
 800870e:	e0fa      	b.n	8008906 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008710:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008714:	4413      	add	r3, r2
 8008716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008718:	8912      	ldrh	r2, [r2, #8]
 800871a:	0912      	lsrs	r2, r2, #4
 800871c:	b292      	uxth	r2, r2
 800871e:	4413      	add	r3, r2
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008726:	429a      	cmp	r2, r3
 8008728:	d204      	bcs.n	8008734 <find_volume+0x2c0>
 800872a:	230d      	movs	r3, #13
 800872c:	e0eb      	b.n	8008906 <find_volume+0x492>
 800872e:	bf00      	nop
 8008730:	20000ad8 	.word	0x20000ad8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800873c:	8952      	ldrh	r2, [r2, #10]
 800873e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	2b00      	cmp	r3, #0
 8008748:	d101      	bne.n	800874e <find_volume+0x2da>
 800874a:	230d      	movs	r3, #13
 800874c:	e0db      	b.n	8008906 <find_volume+0x492>
		fmt = FS_FAT32;
 800874e:	2303      	movs	r3, #3
 8008750:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800875a:	4293      	cmp	r3, r2
 800875c:	d802      	bhi.n	8008764 <find_volume+0x2f0>
 800875e:	2302      	movs	r3, #2
 8008760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	f640 72f5 	movw	r2, #4085	; 0xff5
 800876a:	4293      	cmp	r3, r2
 800876c:	d802      	bhi.n	8008774 <find_volume+0x300>
 800876e:	2301      	movs	r3, #1
 8008770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	1c9a      	adds	r2, r3, #2
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008780:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008782:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008786:	441a      	add	r2, r3
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800878c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	441a      	add	r2, r3
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800879a:	2b03      	cmp	r3, #3
 800879c:	d11e      	bne.n	80087dc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	3334      	adds	r3, #52	; 0x34
 80087a2:	332a      	adds	r3, #42	; 0x2a
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fc15 	bl	8006fd4 <ld_word>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <find_volume+0x340>
 80087b0:	230d      	movs	r3, #13
 80087b2:	e0a8      	b.n	8008906 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	891b      	ldrh	r3, [r3, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <find_volume+0x34c>
 80087bc:	230d      	movs	r3, #13
 80087be:	e0a2      	b.n	8008906 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	3334      	adds	r3, #52	; 0x34
 80087c4:	332c      	adds	r3, #44	; 0x2c
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fc1c 	bl	8007004 <ld_dword>
 80087cc:	4602      	mov	r2, r0
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	647b      	str	r3, [r7, #68]	; 0x44
 80087da:	e01f      	b.n	800881c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	891b      	ldrh	r3, [r3, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <find_volume+0x374>
 80087e4:	230d      	movs	r3, #13
 80087e6:	e08e      	b.n	8008906 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ee:	441a      	add	r2, r3
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80087f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d103      	bne.n	8008804 <find_volume+0x390>
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	e00a      	b.n	800881a <find_volume+0x3a6>
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	4613      	mov	r3, r2
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	4413      	add	r3, r2
 800880e:	085a      	lsrs	r2, r3, #1
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800881a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008822:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008826:	0a5b      	lsrs	r3, r3, #9
 8008828:	429a      	cmp	r2, r3
 800882a:	d201      	bcs.n	8008830 <find_volume+0x3bc>
 800882c:	230d      	movs	r3, #13
 800882e:	e06a      	b.n	8008906 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	f04f 32ff 	mov.w	r2, #4294967295
 8008836:	615a      	str	r2, [r3, #20]
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	695a      	ldr	r2, [r3, #20]
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008842:	2280      	movs	r2, #128	; 0x80
 8008844:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800884a:	2b03      	cmp	r3, #3
 800884c:	d149      	bne.n	80088e2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	3334      	adds	r3, #52	; 0x34
 8008852:	3330      	adds	r3, #48	; 0x30
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fbbd 	bl	8006fd4 <ld_word>
 800885a:	4603      	mov	r3, r0
 800885c:	2b01      	cmp	r3, #1
 800885e:	d140      	bne.n	80088e2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008862:	3301      	adds	r3, #1
 8008864:	4619      	mov	r1, r3
 8008866:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008868:	f7fe fe96 	bl	8007598 <move_window>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d137      	bne.n	80088e2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	2200      	movs	r2, #0
 8008876:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	3334      	adds	r3, #52	; 0x34
 800887c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe fba7 	bl	8006fd4 <ld_word>
 8008886:	4603      	mov	r3, r0
 8008888:	461a      	mov	r2, r3
 800888a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800888e:	429a      	cmp	r2, r3
 8008890:	d127      	bne.n	80088e2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	3334      	adds	r3, #52	; 0x34
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fbb4 	bl	8007004 <ld_dword>
 800889c:	4603      	mov	r3, r0
 800889e:	4a1c      	ldr	r2, [pc, #112]	; (8008910 <find_volume+0x49c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d11e      	bne.n	80088e2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	3334      	adds	r3, #52	; 0x34
 80088a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fba9 	bl	8007004 <ld_dword>
 80088b2:	4603      	mov	r3, r0
 80088b4:	4a17      	ldr	r2, [pc, #92]	; (8008914 <find_volume+0x4a0>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d113      	bne.n	80088e2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	3334      	adds	r3, #52	; 0x34
 80088be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fb9e 	bl	8007004 <ld_dword>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	3334      	adds	r3, #52	; 0x34
 80088d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fb94 	bl	8007004 <ld_dword>
 80088dc:	4602      	mov	r2, r0
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80088e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80088ea:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <find_volume+0x4a4>)
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	3301      	adds	r3, #1
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	4b09      	ldr	r3, [pc, #36]	; (8008918 <find_volume+0x4a4>)
 80088f4:	801a      	strh	r2, [r3, #0]
 80088f6:	4b08      	ldr	r3, [pc, #32]	; (8008918 <find_volume+0x4a4>)
 80088f8:	881a      	ldrh	r2, [r3, #0]
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80088fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008900:	f7fe fde2 	bl	80074c8 <clear_lock>
#endif
	return FR_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3758      	adds	r7, #88	; 0x58
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	41615252 	.word	0x41615252
 8008914:	61417272 	.word	0x61417272
 8008918:	20000adc 	.word	0x20000adc

0800891c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008926:	2309      	movs	r3, #9
 8008928:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d02e      	beq.n	800898e <validate+0x72>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d02a      	beq.n	800898e <validate+0x72>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d025      	beq.n	800898e <validate+0x72>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	889a      	ldrh	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	88db      	ldrh	r3, [r3, #6]
 800894c:	429a      	cmp	r2, r3
 800894e:	d11e      	bne.n	800898e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f7fe fc3d 	bl	80071d4 <lock_fs>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d014      	beq.n	800898a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fa96 	bl	8006e98 <disk_status>
 800896c:	4603      	mov	r3, r0
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <validate+0x60>
				res = FR_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
 800897a:	e008      	b.n	800898e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fc3c 	bl	8007200 <unlock_fs>
 8008988:	e001      	b.n	800898e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800898a:	230f      	movs	r3, #15
 800898c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d102      	bne.n	800899a <validate+0x7e>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	e000      	b.n	800899c <validate+0x80>
 800899a:	2300      	movs	r3, #0
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	6013      	str	r3, [r2, #0]
	return res;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	4613      	mov	r3, r2
 80089b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80089be:	f107 0310 	add.w	r3, r7, #16
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff fcbb 	bl	800833e <get_ldnumber>
 80089c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da01      	bge.n	80089d4 <f_mount+0x28>
 80089d0:	230b      	movs	r3, #11
 80089d2:	e048      	b.n	8008a66 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80089d4:	4a26      	ldr	r2, [pc, #152]	; (8008a70 <f_mount+0xc4>)
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00f      	beq.n	8008a04 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80089e4:	69b8      	ldr	r0, [r7, #24]
 80089e6:	f7fe fd6f 	bl	80074c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fe4b 	bl	800968a <ff_del_syncobj>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <f_mount+0x52>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e033      	b.n	8008a66 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2200      	movs	r2, #0
 8008a02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00f      	beq.n	8008a2a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	330c      	adds	r3, #12
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f000 fe15 	bl	800964a <ff_cre_syncobj>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <f_mount+0x7e>
 8008a26:	2302      	movs	r3, #2
 8008a28:	e01d      	b.n	8008a66 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4910      	ldr	r1, [pc, #64]	; (8008a70 <f_mount+0xc4>)
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <f_mount+0x94>
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d001      	beq.n	8008a44 <f_mount+0x98>
 8008a40:	2300      	movs	r3, #0
 8008a42:	e010      	b.n	8008a66 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008a44:	f107 010c 	add.w	r1, r7, #12
 8008a48:	f107 0308 	add.w	r3, r7, #8
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fd10 	bl	8008474 <find_volume>
 8008a54:	4603      	mov	r3, r0
 8008a56:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7dfa      	ldrb	r2, [r7, #23]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fbce 	bl	8007200 <unlock_fs>
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20000ad8 	.word	0x20000ad8

08008a74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b098      	sub	sp, #96	; 0x60
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <f_open+0x18>
 8008a88:	2309      	movs	r3, #9
 8008a8a:	e1b4      	b.n	8008df6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008a94:	79fa      	ldrb	r2, [r7, #7]
 8008a96:	f107 0110 	add.w	r1, r7, #16
 8008a9a:	f107 0308 	add.w	r3, r7, #8
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff fce8 	bl	8008474 <find_volume>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f040 8191 	bne.w	8008dd6 <f_open+0x362>
		dj.obj.fs = fs;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	f107 0314 	add.w	r3, r7, #20
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7ff fbcb 	bl	800825c <follow_path>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008acc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d11a      	bne.n	8008b0a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ad4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ad8:	b25b      	sxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	da03      	bge.n	8008ae6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008ade:	2306      	movs	r3, #6
 8008ae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ae4:	e011      	b.n	8008b0a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bf14      	ite	ne
 8008af0:	2301      	movne	r3, #1
 8008af2:	2300      	moveq	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fb9a 	bl	8007238 <chk_lock>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	f003 031c 	and.w	r3, r3, #28
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d07f      	beq.n	8008c14 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d017      	beq.n	8008b4c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d10e      	bne.n	8008b42 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b24:	f7fe fbe4 	bl	80072f0 <enq_lock>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d006      	beq.n	8008b3c <f_open+0xc8>
 8008b2e:	f107 0314 	add.w	r3, r7, #20
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff facb 	bl	80080ce <dir_register>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	e000      	b.n	8008b3e <f_open+0xca>
 8008b3c:	2312      	movs	r3, #18
 8008b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	f043 0308 	orr.w	r3, r3, #8
 8008b48:	71fb      	strb	r3, [r7, #7]
 8008b4a:	e010      	b.n	8008b6e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008b4c:	7ebb      	ldrb	r3, [r7, #26]
 8008b4e:	f003 0311 	and.w	r3, r3, #17
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <f_open+0xea>
					res = FR_DENIED;
 8008b56:	2307      	movs	r3, #7
 8008b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b5c:	e007      	b.n	8008b6e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <f_open+0xfa>
 8008b68:	2308      	movs	r3, #8
 8008b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d168      	bne.n	8008c48 <f_open+0x1d4>
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d063      	beq.n	8008c48 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008b80:	f7fd fe28 	bl	80067d4 <get_fattime>
 8008b84:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b88:	330e      	adds	r3, #14
 8008b8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe fa77 	bl	8007080 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	3316      	adds	r3, #22
 8008b96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fe fa71 	bl	8007080 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba0:	330b      	adds	r3, #11
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff f9fa 	bl	8007fa6 <ld_clust>
 8008bb2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fa12 	bl	8007fe4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc2:	331c      	adds	r3, #28
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fa5a 	bl	8007080 <st_dword>
					fs->wflag = 1;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d037      	beq.n	8008c48 <f_open+0x1d4>
						dw = fs->winsect;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bdc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008bde:	f107 0314 	add.w	r3, r7, #20
 8008be2:	2200      	movs	r2, #0
 8008be4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe ff25 	bl	8007a36 <remove_chain>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008bf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d126      	bne.n	8008c48 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fcca 	bl	8007598 <move_window>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c0e:	3a01      	subs	r2, #1
 8008c10:	611a      	str	r2, [r3, #16]
 8008c12:	e019      	b.n	8008c48 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d115      	bne.n	8008c48 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008c1c:	7ebb      	ldrb	r3, [r7, #26]
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008c26:	2304      	movs	r3, #4
 8008c28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c2c:	e00c      	b.n	8008c48 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <f_open+0x1d4>
 8008c38:	7ebb      	ldrb	r3, [r7, #26]
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <f_open+0x1d4>
						res = FR_DENIED;
 8008c42:	2307      	movs	r3, #7
 8008c44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008c48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d128      	bne.n	8008ca2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008c5a:	79fb      	ldrb	r3, [r7, #7]
 8008c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c60:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	f023 0301 	bic.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	bf14      	ite	ne
 8008c7a:	2301      	movne	r3, #1
 8008c7c:	2300      	moveq	r3, #0
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	461a      	mov	r2, r3
 8008c82:	f107 0314 	add.w	r3, r7, #20
 8008c86:	4611      	mov	r1, r2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fb53 	bl	8007334 <inc_lock>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <f_open+0x22e>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 8095 	bne.w	8008dd6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff f977 	bl	8007fa6 <ld_clust>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc0:	331c      	adds	r3, #28
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe f99e 	bl	8007004 <ld_dword>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	88da      	ldrh	r2, [r3, #6]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	79fa      	ldrb	r2, [r7, #7]
 8008ce6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3330      	adds	r3, #48	; 0x30
 8008cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fe fa08 	bl	800711a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d060      	beq.n	8008dd6 <f_open+0x362>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d05c      	beq.n	8008dd6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	895b      	ldrh	r3, [r3, #10]
 8008d28:	025b      	lsls	r3, r3, #9
 8008d2a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	657b      	str	r3, [r7, #84]	; 0x54
 8008d38:	e016      	b.n	8008d68 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fce5 	bl	800770e <get_fat>
 8008d44:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d802      	bhi.n	8008d52 <f_open+0x2de>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d102      	bne.n	8008d60 <f_open+0x2ec>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	657b      	str	r3, [r7, #84]	; 0x54
 8008d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d103      	bne.n	8008d78 <f_open+0x304>
 8008d70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d8e0      	bhi.n	8008d3a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d127      	bne.n	8008dd6 <f_open+0x362>
 8008d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d022      	beq.n	8008dd6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe fc9b 	bl	80076d0 <clust2sect>
 8008d9a:	6478      	str	r0, [r7, #68]	; 0x44
 8008d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d103      	bne.n	8008daa <f_open+0x336>
						res = FR_INT_ERR;
 8008da2:	2302      	movs	r3, #2
 8008da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008da8:	e015      	b.n	8008dd6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dac:	0a5a      	lsrs	r2, r3, #9
 8008dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db0:	441a      	add	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	7858      	ldrb	r0, [r3, #1]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a1a      	ldr	r2, [r3, #32]
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f7fe f8a7 	bl	8006f18 <disk_read>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <f_open+0x362>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <f_open+0x370>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe fa07 	bl	8007200 <unlock_fs>
 8008df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3760      	adds	r7, #96	; 0x60
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b08e      	sub	sp, #56	; 0x38
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
 8008e0a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f107 0214 	add.w	r2, r7, #20
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fd7c 	bl	800891c <validate>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d107      	bne.n	8008e42 <f_read+0x44>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	7d5b      	ldrb	r3, [r3, #21]
 8008e36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <f_read+0x58>
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008e48:	4611      	mov	r1, r2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe f9d8 	bl	8007200 <unlock_fs>
 8008e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e54:	e13d      	b.n	80090d2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	7d1b      	ldrb	r3, [r3, #20]
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <f_read+0x72>
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2107      	movs	r1, #7
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe f9ca 	bl	8007200 <unlock_fs>
 8008e6c:	2307      	movs	r3, #7
 8008e6e:	e130      	b.n	80090d2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	68da      	ldr	r2, [r3, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	f240 811c 	bls.w	80090be <f_read+0x2c0>
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008e8a:	e118      	b.n	80090be <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 80e4 	bne.w	8009062 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	0a5b      	lsrs	r3, r3, #9
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	8952      	ldrh	r2, [r2, #10]
 8008ea4:	3a01      	subs	r2, #1
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d139      	bne.n	8008f24 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ebe:	e013      	b.n	8008ee8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d007      	beq.n	8008ed8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7fe feae 	bl	8007c30 <clmt_clust>
 8008ed4:	6338      	str	r0, [r7, #48]	; 0x30
 8008ed6:	e007      	b.n	8008ee8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	f7fe fc14 	bl	800770e <get_fat>
 8008ee6:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d809      	bhi.n	8008f02 <f_read+0x104>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	755a      	strb	r2, [r3, #21]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2102      	movs	r1, #2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe f981 	bl	8007200 <unlock_fs>
 8008efe:	2302      	movs	r3, #2
 8008f00:	e0e7      	b.n	80090d2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d109      	bne.n	8008f1e <f_read+0x120>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	755a      	strb	r2, [r3, #21]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	2101      	movs	r1, #1
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe f973 	bl	8007200 <unlock_fs>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0d9      	b.n	80090d2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f22:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fe fbcf 	bl	80076d0 <clust2sect>
 8008f32:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <f_read+0x150>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	755a      	strb	r2, [r3, #21]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2102      	movs	r1, #2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe f95b 	bl	8007200 <unlock_fs>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e0c1      	b.n	80090d2 <f_read+0x2d4>
			sect += csect;
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	0a5b      	lsrs	r3, r3, #9
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d03e      	beq.n	8008fe0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	4413      	add	r3, r2
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	8952      	ldrh	r2, [r2, #10]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d905      	bls.n	8008f7c <f_read+0x17e>
					cc = fs->csize - csect;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	895b      	ldrh	r3, [r3, #10]
 8008f74:	461a      	mov	r2, r3
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	7858      	ldrb	r0, [r3, #1]
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f86:	f7fd ffc7 	bl	8006f18 <disk_read>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d009      	beq.n	8008fa4 <f_read+0x1a6>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	755a      	strb	r2, [r3, #21]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2101      	movs	r1, #1
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe f930 	bl	8007200 <unlock_fs>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e096      	b.n	80090d2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
 8008fa8:	b25b      	sxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	da14      	bge.n	8008fd8 <f_read+0x1da>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a1a      	ldr	r2, [r3, #32]
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d90d      	bls.n	8008fd8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a1a      	ldr	r2, [r3, #32]
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	025b      	lsls	r3, r3, #9
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc8:	18d0      	adds	r0, r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3330      	adds	r3, #48	; 0x30
 8008fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	f7fe f880 	bl	80070d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	025b      	lsls	r3, r3, #9
 8008fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008fde:	e05a      	b.n	8009096 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d038      	beq.n	800905c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	7d1b      	ldrb	r3, [r3, #20]
 8008fee:	b25b      	sxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	da1d      	bge.n	8009030 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	7858      	ldrb	r0, [r3, #1]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6a1a      	ldr	r2, [r3, #32]
 8009002:	2301      	movs	r3, #1
 8009004:	f7fd ffa8 	bl	8006f58 <disk_write>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d009      	beq.n	8009022 <f_read+0x224>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	755a      	strb	r2, [r3, #21]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2101      	movs	r1, #1
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe f8f1 	bl	8007200 <unlock_fs>
 800901e:	2301      	movs	r3, #1
 8009020:	e057      	b.n	80090d2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	7d1b      	ldrb	r3, [r3, #20]
 8009026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800902a:	b2da      	uxtb	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	7858      	ldrb	r0, [r3, #1]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800903a:	2301      	movs	r3, #1
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	f7fd ff6b 	bl	8006f18 <disk_read>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d009      	beq.n	800905c <f_read+0x25e>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	755a      	strb	r2, [r3, #21]
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2101      	movs	r1, #1
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe f8d4 	bl	8007200 <unlock_fs>
 8009058:	2301      	movs	r3, #1
 800905a:	e03a      	b.n	80090d2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800906e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	429a      	cmp	r2, r3
 8009076:	d901      	bls.n	800907c <f_read+0x27e>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908a:	4413      	add	r3, r2
 800908c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800908e:	4619      	mov	r1, r3
 8009090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009092:	f7fe f821 	bl	80070d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	4413      	add	r3, r2
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	699a      	ldr	r2, [r3, #24]
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	441a      	add	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	619a      	str	r2, [r3, #24]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	441a      	add	r2, r3
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f47f aee3 	bne.w	8008e8c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe f898 	bl	8007200 <unlock_fs>
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3738      	adds	r7, #56	; 0x38
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b08c      	sub	sp, #48	; 0x30
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	607a      	str	r2, [r7, #4]
 80090e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f107 0210 	add.w	r2, r7, #16
 80090f8:	4611      	mov	r1, r2
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff fc0e 	bl	800891c <validate>
 8009100:	4603      	mov	r3, r0
 8009102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800910a:	2b00      	cmp	r3, #0
 800910c:	d107      	bne.n	800911e <f_write+0x44>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	7d5b      	ldrb	r3, [r3, #21]
 8009112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800911a:	2b00      	cmp	r3, #0
 800911c:	d009      	beq.n	8009132 <f_write+0x58>
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe f86a 	bl	8007200 <unlock_fs>
 800912c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009130:	e173      	b.n	800941a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	7d1b      	ldrb	r3, [r3, #20]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d106      	bne.n	800914c <f_write+0x72>
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2107      	movs	r1, #7
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe f85c 	bl	8007200 <unlock_fs>
 8009148:	2307      	movs	r3, #7
 800914a:	e166      	b.n	800941a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	441a      	add	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	429a      	cmp	r2, r3
 800915a:	f080 814b 	bcs.w	80093f4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	43db      	mvns	r3, r3
 8009164:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009166:	e145      	b.n	80093f4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009170:	2b00      	cmp	r3, #0
 8009172:	f040 8101 	bne.w	8009378 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	0a5b      	lsrs	r3, r3, #9
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	8952      	ldrh	r2, [r2, #10]
 8009180:	3a01      	subs	r2, #1
 8009182:	4013      	ands	r3, r2
 8009184:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d14d      	bne.n	8009228 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10c      	bne.n	80091ae <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	2b00      	cmp	r3, #0
 800919e:	d11a      	bne.n	80091d6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fcab 	bl	8007b00 <create_chain>
 80091aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80091ac:	e013      	b.n	80091d6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d007      	beq.n	80091c6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	4619      	mov	r1, r3
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f7fe fd37 	bl	8007c30 <clmt_clust>
 80091c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80091c4:	e007      	b.n	80091d6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fc96 	bl	8007b00 <create_chain>
 80091d4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8110 	beq.w	80093fe <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d109      	bne.n	80091f8 <f_write+0x11e>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2202      	movs	r2, #2
 80091e8:	755a      	strb	r2, [r3, #21]
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2102      	movs	r1, #2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe f806 	bl	8007200 <unlock_fs>
 80091f4:	2302      	movs	r3, #2
 80091f6:	e110      	b.n	800941a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fe:	d109      	bne.n	8009214 <f_write+0x13a>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2201      	movs	r2, #1
 8009204:	755a      	strb	r2, [r3, #21]
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2101      	movs	r1, #1
 800920a:	4618      	mov	r0, r3
 800920c:	f7fd fff8 	bl	8007200 <unlock_fs>
 8009210:	2301      	movs	r3, #1
 8009212:	e102      	b.n	800941a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009218:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d102      	bne.n	8009228 <f_write+0x14e>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009226:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	7d1b      	ldrb	r3, [r3, #20]
 800922c:	b25b      	sxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	da1d      	bge.n	800926e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	7858      	ldrb	r0, [r3, #1]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a1a      	ldr	r2, [r3, #32]
 8009240:	2301      	movs	r3, #1
 8009242:	f7fd fe89 	bl	8006f58 <disk_write>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d009      	beq.n	8009260 <f_write+0x186>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	755a      	strb	r2, [r3, #21]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2101      	movs	r1, #1
 8009256:	4618      	mov	r0, r3
 8009258:	f7fd ffd2 	bl	8007200 <unlock_fs>
 800925c:	2301      	movs	r3, #1
 800925e:	e0dc      	b.n	800941a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	7d1b      	ldrb	r3, [r3, #20]
 8009264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009268:	b2da      	uxtb	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fe fa2a 	bl	80076d0 <clust2sect>
 800927c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <f_write+0x1be>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2202      	movs	r2, #2
 8009288:	755a      	strb	r2, [r3, #21]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2102      	movs	r1, #2
 800928e:	4618      	mov	r0, r3
 8009290:	f7fd ffb6 	bl	8007200 <unlock_fs>
 8009294:	2302      	movs	r3, #2
 8009296:	e0c0      	b.n	800941a <f_write+0x340>
			sect += csect;
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	4413      	add	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	0a5b      	lsrs	r3, r3, #9
 80092a4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d041      	beq.n	8009330 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	4413      	add	r3, r2
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	8952      	ldrh	r2, [r2, #10]
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d905      	bls.n	80092c6 <f_write+0x1ec>
					cc = fs->csize - csect;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	895b      	ldrh	r3, [r3, #10]
 80092be:	461a      	mov	r2, r3
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	7858      	ldrb	r0, [r3, #1]
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	69f9      	ldr	r1, [r7, #28]
 80092d0:	f7fd fe42 	bl	8006f58 <disk_write>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d009      	beq.n	80092ee <f_write+0x214>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	755a      	strb	r2, [r3, #21]
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	2101      	movs	r1, #1
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7fd ff8b 	bl	8007200 <unlock_fs>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e095      	b.n	800941a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1a      	ldr	r2, [r3, #32]
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	6a3a      	ldr	r2, [r7, #32]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d915      	bls.n	8009328 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1a      	ldr	r2, [r3, #32]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	025b      	lsls	r3, r3, #9
 800930c:	69fa      	ldr	r2, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009314:	4619      	mov	r1, r3
 8009316:	f7fd fedf 	bl	80070d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	7d1b      	ldrb	r3, [r3, #20]
 800931e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009322:	b2da      	uxtb	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	025b      	lsls	r3, r3, #9
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800932e:	e044      	b.n	80093ba <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	429a      	cmp	r2, r3
 8009338:	d01b      	beq.n	8009372 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	699a      	ldr	r2, [r3, #24]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009342:	429a      	cmp	r2, r3
 8009344:	d215      	bcs.n	8009372 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	7858      	ldrb	r0, [r3, #1]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009350:	2301      	movs	r3, #1
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	f7fd fde0 	bl	8006f18 <disk_read>
 8009358:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2201      	movs	r2, #1
 8009362:	755a      	strb	r2, [r3, #21]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2101      	movs	r1, #1
 8009368:	4618      	mov	r0, r3
 800936a:	f7fd ff49 	bl	8007200 <unlock_fs>
 800936e:	2301      	movs	r3, #1
 8009370:	e053      	b.n	800941a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009380:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	d901      	bls.n	8009392 <f_write+0x2b8>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a0:	4413      	add	r3, r2
 80093a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a4:	69f9      	ldr	r1, [r7, #28]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fd fe96 	bl	80070d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	7d1b      	ldrb	r3, [r3, #20]
 80093b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80093ba:	69fa      	ldr	r2, [r7, #28]
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	4413      	add	r3, r2
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	441a      	add	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	619a      	str	r2, [r3, #24]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	bf38      	it	cc
 80093da:	461a      	movcc	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	60da      	str	r2, [r3, #12]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	441a      	add	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f47f aeb6 	bne.w	8009168 <f_write+0x8e>
 80093fc:	e000      	b.n	8009400 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	7d1b      	ldrb	r3, [r3, #20]
 8009404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009408:	b2da      	uxtb	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2100      	movs	r1, #0
 8009412:	4618      	mov	r0, r3
 8009414:	f7fd fef4 	bl	8007200 <unlock_fs>
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3730      	adds	r7, #48	; 0x30
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f107 0208 	add.w	r2, r7, #8
 8009430:	4611      	mov	r1, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fa72 	bl	800891c <validate>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d16d      	bne.n	800951e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7d1b      	ldrb	r3, [r3, #20]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b00      	cmp	r3, #0
 800944c:	d067      	beq.n	800951e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	7d1b      	ldrb	r3, [r3, #20]
 8009452:	b25b      	sxtb	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	da1a      	bge.n	800948e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	7858      	ldrb	r0, [r3, #1]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1a      	ldr	r2, [r3, #32]
 8009466:	2301      	movs	r3, #1
 8009468:	f7fd fd76 	bl	8006f58 <disk_write>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <f_sync+0x5e>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2101      	movs	r1, #1
 8009476:	4618      	mov	r0, r3
 8009478:	f7fd fec2 	bl	8007200 <unlock_fs>
 800947c:	2301      	movs	r3, #1
 800947e:	e055      	b.n	800952c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7d1b      	ldrb	r3, [r3, #20]
 8009484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009488:	b2da      	uxtb	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800948e:	f7fd f9a1 	bl	80067d4 <get_fattime>
 8009492:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	4619      	mov	r1, r3
 800949c:	4610      	mov	r0, r2
 800949e:	f7fe f87b 	bl	8007598 <move_window>
 80094a2:	4603      	mov	r3, r0
 80094a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d138      	bne.n	800951e <f_sync+0xfc>
					dir = fp->dir_ptr;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	330b      	adds	r3, #11
 80094b6:	781a      	ldrb	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	330b      	adds	r3, #11
 80094bc:	f042 0220 	orr.w	r2, r2, #32
 80094c0:	b2d2      	uxtb	r2, r2
 80094c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6818      	ldr	r0, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	461a      	mov	r2, r3
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	f7fe fd88 	bl	8007fe4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f103 021c 	add.w	r2, r3, #28
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7fd fdcd 	bl	8007080 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3316      	adds	r3, #22
 80094ea:	6939      	ldr	r1, [r7, #16]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fd fdc7 	bl	8007080 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3312      	adds	r3, #18
 80094f6:	2100      	movs	r1, #0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fd fda6 	bl	800704a <st_word>
					fs->wflag = 1;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2201      	movs	r2, #1
 8009502:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe f874 	bl	80075f4 <sync_fs>
 800950c:	4603      	mov	r3, r0
 800950e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7d1b      	ldrb	r3, [r3, #20]
 8009514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009518:	b2da      	uxtb	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	7dfa      	ldrb	r2, [r7, #23]
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f7fd fe6b 	bl	8007200 <unlock_fs>
 800952a:	7dfb      	ldrb	r3, [r7, #23]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ff70 	bl	8009422 <f_sync>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11d      	bne.n	8009588 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f107 0208 	add.w	r2, r7, #8
 8009552:	4611      	mov	r1, r2
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff f9e1 	bl	800891c <validate>
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d111      	bne.n	8009588 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	4618      	mov	r0, r3
 800956a:	f7fd ff71 	bl	8007450 <dec_lock>
 800956e:	4603      	mov	r3, r0
 8009570:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2100      	movs	r1, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f7fd fe3c 	bl	8007200 <unlock_fs>
#endif
		}
	}
	return res;
 8009588:	7bfb      	ldrb	r3, [r7, #15]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	4613      	mov	r3, r2
 80095a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80095a2:	2301      	movs	r3, #1
 80095a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80095aa:	4b1f      	ldr	r3, [pc, #124]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095ac:	7a5b      	ldrb	r3, [r3, #9]
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d131      	bne.n	8009618 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80095b4:	4b1c      	ldr	r3, [pc, #112]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095b6:	7a5b      	ldrb	r3, [r3, #9]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095be:	2100      	movs	r1, #0
 80095c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80095c2:	4b19      	ldr	r3, [pc, #100]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095c4:	7a5b      	ldrb	r3, [r3, #9]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	4a17      	ldr	r2, [pc, #92]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095d4:	7a5b      	ldrb	r3, [r3, #9]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	461a      	mov	r2, r3
 80095da:	4b13      	ldr	r3, [pc, #76]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095dc:	4413      	add	r3, r2
 80095de:	79fa      	ldrb	r2, [r7, #7]
 80095e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80095e2:	4b11      	ldr	r3, [pc, #68]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095e4:	7a5b      	ldrb	r3, [r3, #9]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	b2d1      	uxtb	r1, r2
 80095ec:	4a0e      	ldr	r2, [pc, #56]	; (8009628 <FATFS_LinkDriverEx+0x94>)
 80095ee:	7251      	strb	r1, [r2, #9]
 80095f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80095f2:	7dbb      	ldrb	r3, [r7, #22]
 80095f4:	3330      	adds	r3, #48	; 0x30
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	3301      	adds	r3, #1
 8009600:	223a      	movs	r2, #58	; 0x3a
 8009602:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	3302      	adds	r3, #2
 8009608:	222f      	movs	r2, #47	; 0x2f
 800960a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	3303      	adds	r3, #3
 8009610:	2200      	movs	r2, #0
 8009612:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009618:	7dfb      	ldrb	r3, [r7, #23]
}
 800961a:	4618      	mov	r0, r3
 800961c:	371c      	adds	r7, #28
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	20000b00 	.word	0x20000b00

0800962c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009636:	2200      	movs	r2, #0
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff ffaa 	bl	8009594 <FATFS_LinkDriverEx>
 8009640:	4603      	mov	r3, r0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	4603      	mov	r3, r0
 8009652:	6039      	str	r1, [r7, #0]
 8009654:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	2300      	movs	r3, #0
 800965c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800965e:	f107 030c 	add.w	r3, r7, #12
 8009662:	2101      	movs	r1, #1
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f8e9 	bl	800983c <osSemaphoreCreate>
 800966a:	4602      	mov	r2, r0
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	bf14      	ite	ne
 8009678:	2301      	movne	r3, #1
 800967a:	2300      	moveq	r3, #0
 800967c:	b2db      	uxtb	r3, r3
 800967e:	617b      	str	r3, [r7, #20]

    return ret;
 8009680:	697b      	ldr	r3, [r7, #20]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f988 	bl	80099a8 <osSemaphoreDelete>
#endif
    return 1;
 8009698:	2301      	movs	r3, #1
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80096ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f8f4 	bl	80098a0 <osSemaphoreWait>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80096be:	2301      	movs	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80096c2:	68fb      	ldr	r3, [r7, #12]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f931 	bl	800993c <osSemaphoreRelease>
#endif
}
 80096da:	bf00      	nop
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b085      	sub	sp, #20
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	4603      	mov	r3, r0
 80096ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80096f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096f4:	2b84      	cmp	r3, #132	; 0x84
 80096f6:	d005      	beq.n	8009704 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80096f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	3303      	adds	r3, #3
 8009702:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009704:	68fb      	ldr	r3, [r7, #12]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009718:	f3ef 8305 	mrs	r3, IPSR
 800971c:	607b      	str	r3, [r7, #4]
  return(result);
 800971e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009720:	2b00      	cmp	r3, #0
 8009722:	bf14      	ite	ne
 8009724:	2301      	movne	r3, #1
 8009726:	2300      	moveq	r3, #0
 8009728:	b2db      	uxtb	r3, r3
}
 800972a:	4618      	mov	r0, r3
 800972c:	370c      	adds	r7, #12
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800973a:	f001 fc89 	bl	800b050 <vTaskStartScheduler>
  
  return osOK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	bd80      	pop	{r7, pc}

08009744 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8009748:	f002 f8b6 	bl	800b8b8 <xTaskGetSchedulerState>
 800974c:	4603      	mov	r3, r0
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <osKernelRunning+0x12>
    return 0;
 8009752:	2300      	movs	r3, #0
 8009754:	e000      	b.n	8009758 <osKernelRunning+0x14>
  else
    return 1;
 8009756:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8009758:	4618      	mov	r0, r3
 800975a:	bd80      	pop	{r7, pc}

0800975c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009760:	f7ff ffd7 	bl	8009712 <inHandlerMode>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800976a:	f001 fd95 	bl	800b298 <xTaskGetTickCountFromISR>
 800976e:	4603      	mov	r3, r0
 8009770:	e002      	b.n	8009778 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009772:	f001 fd81 	bl	800b278 <xTaskGetTickCount>
 8009776:	4603      	mov	r3, r0
  }
}
 8009778:	4618      	mov	r0, r3
 800977a:	bd80      	pop	{r7, pc}

0800977c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800977c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977e:	b089      	sub	sp, #36	; 0x24
 8009780:	af04      	add	r7, sp, #16
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d020      	beq.n	80097d0 <osThreadCreate+0x54>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d01c      	beq.n	80097d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685c      	ldr	r4, [r3, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681d      	ldr	r5, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691e      	ldr	r6, [r3, #16]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff ff9a 	bl	80096e2 <makeFreeRtosPriority>
 80097ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	9100      	str	r1, [sp, #0]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	4632      	mov	r2, r6
 80097c2:	4629      	mov	r1, r5
 80097c4:	4620      	mov	r0, r4
 80097c6:	f001 f9d5 	bl	800ab74 <xTaskCreateStatic>
 80097ca:	4603      	mov	r3, r0
 80097cc:	60fb      	str	r3, [r7, #12]
 80097ce:	e01c      	b.n	800980a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685c      	ldr	r4, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097dc:	b29e      	uxth	r6, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff ff7c 	bl	80096e2 <makeFreeRtosPriority>
 80097ea:	4602      	mov	r2, r0
 80097ec:	f107 030c 	add.w	r3, r7, #12
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	9200      	str	r2, [sp, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	4632      	mov	r2, r6
 80097f8:	4629      	mov	r1, r5
 80097fa:	4620      	mov	r0, r4
 80097fc:	f001 fa17 	bl	800ac2e <xTaskCreate>
 8009800:	4603      	mov	r3, r0
 8009802:	2b01      	cmp	r3, #1
 8009804:	d001      	beq.n	800980a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	e000      	b.n	800980c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800980a:	68fb      	ldr	r3, [r7, #12]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009814 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <osDelay+0x16>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	e000      	b.n	800982c <osDelay+0x18>
 800982a:	2301      	movs	r3, #1
 800982c:	4618      	mov	r0, r3
 800982e:	f001 fbdb 	bl	800afe8 <vTaskDelay>
  
  return osOK;
 8009832:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af02      	add	r7, sp, #8
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00f      	beq.n	800986e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d10a      	bne.n	800986a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2203      	movs	r2, #3
 800985a:	9200      	str	r2, [sp, #0]
 800985c:	2200      	movs	r2, #0
 800985e:	2100      	movs	r1, #0
 8009860:	2001      	movs	r0, #1
 8009862:	f000 faad 	bl	8009dc0 <xQueueGenericCreateStatic>
 8009866:	4603      	mov	r3, r0
 8009868:	e016      	b.n	8009898 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	e014      	b.n	8009898 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d110      	bne.n	8009896 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009874:	2203      	movs	r2, #3
 8009876:	2100      	movs	r1, #0
 8009878:	2001      	movs	r0, #1
 800987a:	f000 fb19 	bl	8009eb0 <xQueueGenericCreate>
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d005      	beq.n	8009892 <osSemaphoreCreate+0x56>
 8009886:	2300      	movs	r3, #0
 8009888:	2200      	movs	r2, #0
 800988a:	2100      	movs	r1, #0
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fb69 	bl	8009f64 <xQueueGenericSend>
      return sema;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	e000      	b.n	8009898 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009896:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80098b4:	2380      	movs	r3, #128	; 0x80
 80098b6:	e03a      	b.n	800992e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c2:	d103      	bne.n	80098cc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80098c4:	f04f 33ff 	mov.w	r3, #4294967295
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	e009      	b.n	80098e0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d006      	beq.n	80098e0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <osSemaphoreWait+0x40>
      ticks = 1;
 80098dc:	2301      	movs	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80098e0:	f7ff ff17 	bl	8009712 <inHandlerMode>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d017      	beq.n	800991a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80098ea:	f107 0308 	add.w	r3, r7, #8
 80098ee:	461a      	mov	r2, r3
 80098f0:	2100      	movs	r1, #0
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 ff48 	bl	800a788 <xQueueReceiveFromISR>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d001      	beq.n	8009902 <osSemaphoreWait+0x62>
      return osErrorOS;
 80098fe:	23ff      	movs	r3, #255	; 0xff
 8009900:	e015      	b.n	800992e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d011      	beq.n	800992c <osSemaphoreWait+0x8c>
 8009908:	4b0b      	ldr	r3, [pc, #44]	; (8009938 <osSemaphoreWait+0x98>)
 800990a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	e008      	b.n	800992c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800991a:	68f9      	ldr	r1, [r7, #12]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fe27 	bl	800a570 <xQueueSemaphoreTake>
 8009922:	4603      	mov	r3, r0
 8009924:	2b01      	cmp	r3, #1
 8009926:	d001      	beq.n	800992c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009928:	23ff      	movs	r3, #255	; 0xff
 800992a:	e000      	b.n	800992e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009944:	2300      	movs	r3, #0
 8009946:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009948:	2300      	movs	r3, #0
 800994a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800994c:	f7ff fee1 	bl	8009712 <inHandlerMode>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d016      	beq.n	8009984 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fc9a 	bl	800a296 <xQueueGiveFromISR>
 8009962:	4603      	mov	r3, r0
 8009964:	2b01      	cmp	r3, #1
 8009966:	d001      	beq.n	800996c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009968:	23ff      	movs	r3, #255	; 0xff
 800996a:	e017      	b.n	800999c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d013      	beq.n	800999a <osSemaphoreRelease+0x5e>
 8009972:	4b0c      	ldr	r3, [pc, #48]	; (80099a4 <osSemaphoreRelease+0x68>)
 8009974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	e00a      	b.n	800999a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009984:	2300      	movs	r3, #0
 8009986:	2200      	movs	r2, #0
 8009988:	2100      	movs	r1, #0
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 faea 	bl	8009f64 <xQueueGenericSend>
 8009990:	4603      	mov	r3, r0
 8009992:	2b01      	cmp	r3, #1
 8009994:	d001      	beq.n	800999a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009996:	23ff      	movs	r3, #255	; 0xff
 8009998:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	e000ed04 	.word	0xe000ed04

080099a8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80099b0:	f7ff feaf 	bl	8009712 <inHandlerMode>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <osSemaphoreDelete+0x16>
    return osErrorISR;
 80099ba:	2382      	movs	r3, #130	; 0x82
 80099bc:	e003      	b.n	80099c6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 ff62 	bl	800a888 <vQueueDelete>

  return osOK; 
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80099ce:	b590      	push	{r4, r7, lr}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af02      	add	r7, sp, #8
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d011      	beq.n	8009a04 <osMessageCreate+0x36>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00d      	beq.n	8009a04 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6859      	ldr	r1, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2400      	movs	r4, #0
 80099fa:	9400      	str	r4, [sp, #0]
 80099fc:	f000 f9e0 	bl	8009dc0 <xQueueGenericCreateStatic>
 8009a00:	4603      	mov	r3, r0
 8009a02:	e008      	b.n	8009a16 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4619      	mov	r1, r3
 8009a10:	f000 fa4e 	bl	8009eb0 <xQueueGenericCreate>
 8009a14:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd90      	pop	{r4, r7, pc}
	...

08009a20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <osMessagePut+0x1e>
    ticks = 1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009a3e:	f7ff fe68 	bl	8009712 <inHandlerMode>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d018      	beq.n	8009a7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009a48:	f107 0210 	add.w	r2, r7, #16
 8009a4c:	f107 0108 	add.w	r1, r7, #8
 8009a50:	2300      	movs	r3, #0
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 fb84 	bl	800a160 <xQueueGenericSendFromISR>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d001      	beq.n	8009a62 <osMessagePut+0x42>
      return osErrorOS;
 8009a5e:	23ff      	movs	r3, #255	; 0xff
 8009a60:	e018      	b.n	8009a94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d014      	beq.n	8009a92 <osMessagePut+0x72>
 8009a68:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <osMessagePut+0x7c>)
 8009a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	e00b      	b.n	8009a92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009a7a:	f107 0108 	add.w	r1, r7, #8
 8009a7e:	2300      	movs	r3, #0
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 fa6e 	bl	8009f64 <xQueueGenericSend>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d001      	beq.n	8009a92 <osMessagePut+0x72>
      return osErrorOS;
 8009a8e:	23ff      	movs	r3, #255	; 0xff
 8009a90:	e000      	b.n	8009a94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	e000ed04 	.word	0xe000ed04

08009aa0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009aa0:	b590      	push	{r4, r7, lr}
 8009aa2:	b08b      	sub	sp, #44	; 0x2c
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10a      	bne.n	8009ad0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009aba:	2380      	movs	r3, #128	; 0x80
 8009abc:	617b      	str	r3, [r7, #20]
    return event;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	461c      	mov	r4, r3
 8009ac2:	f107 0314 	add.w	r3, r7, #20
 8009ac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ace:	e054      	b.n	8009b7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	d103      	bne.n	8009ae8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae6:	e009      	b.n	8009afc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d006      	beq.n	8009afc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <osMessageGet+0x5c>
      ticks = 1;
 8009af8:	2301      	movs	r3, #1
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009afc:	f7ff fe09 	bl	8009712 <inHandlerMode>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01c      	beq.n	8009b40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009b06:	f107 0220 	add.w	r2, r7, #32
 8009b0a:	f107 0314 	add.w	r3, r7, #20
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	68b8      	ldr	r0, [r7, #8]
 8009b14:	f000 fe38 	bl	800a788 <xQueueReceiveFromISR>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d102      	bne.n	8009b24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009b1e:	2310      	movs	r3, #16
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	e001      	b.n	8009b28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d01d      	beq.n	8009b6a <osMessageGet+0xca>
 8009b2e:	4b15      	ldr	r3, [pc, #84]	; (8009b84 <osMessageGet+0xe4>)
 8009b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	e014      	b.n	8009b6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009b40:	f107 0314 	add.w	r3, r7, #20
 8009b44:	3304      	adds	r3, #4
 8009b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b48:	4619      	mov	r1, r3
 8009b4a:	68b8      	ldr	r0, [r7, #8]
 8009b4c:	f000 fc30 	bl	800a3b0 <xQueueReceive>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d102      	bne.n	8009b5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009b56:	2310      	movs	r3, #16
 8009b58:	617b      	str	r3, [r7, #20]
 8009b5a:	e006      	b.n	8009b6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d101      	bne.n	8009b66 <osMessageGet+0xc6>
 8009b62:	2300      	movs	r3, #0
 8009b64:	e000      	b.n	8009b68 <osMessageGet+0xc8>
 8009b66:	2340      	movs	r3, #64	; 0x40
 8009b68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	461c      	mov	r4, r3
 8009b6e:	f107 0314 	add.w	r3, r7, #20
 8009b72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	372c      	adds	r7, #44	; 0x2c
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd90      	pop	{r4, r7, pc}
 8009b82:	bf00      	nop
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f103 0208 	add.w	r2, r3, #8
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f103 0208 	add.w	r2, r3, #8
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f103 0208 	add.w	r2, r3, #8
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009be2:	b480      	push	{r7}
 8009be4:	b085      	sub	sp, #20
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	601a      	str	r2, [r3, #0]
}
 8009c1e:	bf00      	nop
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b085      	sub	sp, #20
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d103      	bne.n	8009c4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	e00c      	b.n	8009c64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e002      	b.n	8009c58 <vListInsert+0x2e>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	60fb      	str	r3, [r7, #12]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d2f6      	bcs.n	8009c52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	683a      	ldr	r2, [r7, #0]
 8009c72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	601a      	str	r2, [r3, #0]
}
 8009c90:	bf00      	nop
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6892      	ldr	r2, [r2, #8]
 8009cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	6852      	ldr	r2, [r2, #4]
 8009cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d103      	bne.n	8009cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	1e5a      	subs	r2, r3, #1
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d1a:	f002 f91b 	bl	800bf54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d2a:	fb01 f303 	mul.w	r3, r1, r3
 8009d2e:	441a      	add	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	68f9      	ldr	r1, [r7, #12]
 8009d4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d50:	fb01 f303 	mul.w	r3, r1, r3
 8009d54:	441a      	add	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	22ff      	movs	r2, #255	; 0xff
 8009d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	22ff      	movs	r2, #255	; 0xff
 8009d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d114      	bne.n	8009d9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d01a      	beq.n	8009dae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3310      	adds	r3, #16
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 fbdb 	bl	800b538 <xTaskRemoveFromEventList>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d012      	beq.n	8009dae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <xQueueGenericReset+0xcc>)
 8009d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	e009      	b.n	8009dae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3310      	adds	r3, #16
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fef2 	bl	8009b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3324      	adds	r3, #36	; 0x24
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff feed 	bl	8009b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dae:	f002 f901 	bl	800bfb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009db2:	2301      	movs	r3, #1
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	e000ed04 	.word	0xe000ed04

08009dc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08e      	sub	sp, #56	; 0x38
 8009dc4:	af02      	add	r7, sp, #8
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009de6:	bf00      	nop
 8009de8:	e7fe      	b.n	8009de8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <xQueueGenericCreateStatic+0x52>
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <xQueueGenericCreateStatic+0x56>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <xQueueGenericCreateStatic+0x58>
 8009e16:	2300      	movs	r3, #0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10a      	bne.n	8009e32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	623b      	str	r3, [r7, #32]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <xQueueGenericCreateStatic+0x7e>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <xQueueGenericCreateStatic+0x82>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <xQueueGenericCreateStatic+0x84>
 8009e42:	2300      	movs	r3, #0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	61fb      	str	r3, [r7, #28]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e5e:	2348      	movs	r3, #72	; 0x48
 8009e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b48      	cmp	r3, #72	; 0x48
 8009e66:	d00a      	beq.n	8009e7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	61bb      	str	r3, [r7, #24]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00d      	beq.n	8009ea6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f000 f83f 	bl	8009f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3730      	adds	r7, #48	; 0x30
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08a      	sub	sp, #40	; 0x28
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	613b      	str	r3, [r7, #16]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	fb02 f303 	mul.w	r3, r2, r3
 8009ee2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	3348      	adds	r3, #72	; 0x48
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f002 f955 	bl	800c198 <pvPortMalloc>
 8009eee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d011      	beq.n	8009f1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	3348      	adds	r3, #72	; 0x48
 8009efe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f08:	79fa      	ldrb	r2, [r7, #7]
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 f805 	bl	8009f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3720      	adds	r7, #32
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d103      	bne.n	8009f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	e002      	b.n	8009f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f52:	2101      	movs	r1, #1
 8009f54:	69b8      	ldr	r0, [r7, #24]
 8009f56:	f7ff fecb 	bl	8009cf0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08e      	sub	sp, #56	; 0x38
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f72:	2300      	movs	r3, #0
 8009f74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <xQueueGenericSend+0x32>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d103      	bne.n	8009fa4 <xQueueGenericSend+0x40>
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <xQueueGenericSend+0x44>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e000      	b.n	8009faa <xQueueGenericSend+0x46>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <xQueueGenericSend+0x60>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d103      	bne.n	8009fd2 <xQueueGenericSend+0x6e>
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <xQueueGenericSend+0x72>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e000      	b.n	8009fd8 <xQueueGenericSend+0x74>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	623b      	str	r3, [r7, #32]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ff2:	f001 fc61 	bl	800b8b8 <xTaskGetSchedulerState>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d102      	bne.n	800a002 <xQueueGenericSend+0x9e>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <xQueueGenericSend+0xa2>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <xQueueGenericSend+0xa4>
 800a006:	2300      	movs	r3, #0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xQueueGenericSend+0xbe>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61fb      	str	r3, [r7, #28]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a022:	f001 ff97 	bl	800bf54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02e:	429a      	cmp	r2, r3
 800a030:	d302      	bcc.n	800a038 <xQueueGenericSend+0xd4>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b02      	cmp	r3, #2
 800a036:	d129      	bne.n	800a08c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	68b9      	ldr	r1, [r7, #8]
 800a03c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a03e:	f000 fc5e 	bl	800a8fe <prvCopyDataToQueue>
 800a042:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d010      	beq.n	800a06e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	3324      	adds	r3, #36	; 0x24
 800a050:	4618      	mov	r0, r3
 800a052:	f001 fa71 	bl	800b538 <xTaskRemoveFromEventList>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d013      	beq.n	800a084 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a05c:	4b3f      	ldr	r3, [pc, #252]	; (800a15c <xQueueGenericSend+0x1f8>)
 800a05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	e00a      	b.n	800a084 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d007      	beq.n	800a084 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a074:	4b39      	ldr	r3, [pc, #228]	; (800a15c <xQueueGenericSend+0x1f8>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a084:	f001 ff96 	bl	800bfb4 <vPortExitCritical>
				return pdPASS;
 800a088:	2301      	movs	r3, #1
 800a08a:	e063      	b.n	800a154 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d103      	bne.n	800a09a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a092:	f001 ff8f 	bl	800bfb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a096:	2300      	movs	r3, #0
 800a098:	e05c      	b.n	800a154 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0a0:	f107 0314 	add.w	r3, r7, #20
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f001 faa9 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0ae:	f001 ff81 	bl	800bfb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0b2:	f001 f837 	bl	800b124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0b6:	f001 ff4d 	bl	800bf54 <vPortEnterCritical>
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0c0:	b25b      	sxtb	r3, r3
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c6:	d103      	bne.n	800a0d0 <xQueueGenericSend+0x16c>
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0d6:	b25b      	sxtb	r3, r3
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0dc:	d103      	bne.n	800a0e6 <xQueueGenericSend+0x182>
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0e6:	f001 ff65 	bl	800bfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0ea:	1d3a      	adds	r2, r7, #4
 800a0ec:	f107 0314 	add.w	r3, r7, #20
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 fa98 	bl	800b628 <xTaskCheckForTimeOut>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d124      	bne.n	800a148 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a100:	f000 fcf5 	bl	800aaee <prvIsQueueFull>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d018      	beq.n	800a13c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	3310      	adds	r3, #16
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	4611      	mov	r1, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f001 f9ec 	bl	800b4f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a11a:	f000 fc80 	bl	800aa1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a11e:	f001 f80f 	bl	800b140 <xTaskResumeAll>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	f47f af7c 	bne.w	800a022 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <xQueueGenericSend+0x1f8>)
 800a12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	e772      	b.n	800a022 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a13c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a13e:	f000 fc6e 	bl	800aa1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a142:	f000 fffd 	bl	800b140 <xTaskResumeAll>
 800a146:	e76c      	b.n	800a022 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14a:	f000 fc68 	bl	800aa1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a14e:	f000 fff7 	bl	800b140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a152:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a154:	4618      	mov	r0, r3
 800a156:	3738      	adds	r7, #56	; 0x38
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b090      	sub	sp, #64	; 0x40
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10a      	bne.n	800a18e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a18a:	bf00      	nop
 800a18c:	e7fe      	b.n	800a18c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d103      	bne.n	800a19c <xQueueGenericSendFromISR+0x3c>
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <xQueueGenericSendFromISR+0x40>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e000      	b.n	800a1a2 <xQueueGenericSendFromISR+0x42>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d103      	bne.n	800a1ca <xQueueGenericSendFromISR+0x6a>
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d101      	bne.n	800a1ce <xQueueGenericSendFromISR+0x6e>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e000      	b.n	800a1d0 <xQueueGenericSendFromISR+0x70>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	623b      	str	r3, [r7, #32]
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ea:	f001 ff95 	bl	800c118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1ee:	f3ef 8211 	mrs	r2, BASEPRI
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	61fa      	str	r2, [r7, #28]
 800a204:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a206:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a208:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a212:	429a      	cmp	r2, r3
 800a214:	d302      	bcc.n	800a21c <xQueueGenericSendFromISR+0xbc>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b02      	cmp	r3, #2
 800a21a:	d12f      	bne.n	800a27c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a232:	f000 fb64 	bl	800a8fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a236:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d112      	bne.n	800a266 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d016      	beq.n	800a276 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	3324      	adds	r3, #36	; 0x24
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 f973 	bl	800b538 <xTaskRemoveFromEventList>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00e      	beq.n	800a276 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00b      	beq.n	800a276 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e007      	b.n	800a276 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a266:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a26a:	3301      	adds	r3, #1
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	b25a      	sxtb	r2, r3
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a276:	2301      	movs	r3, #1
 800a278:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a27a:	e001      	b.n	800a280 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a27c:	2300      	movs	r3, #0
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a28a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3740      	adds	r7, #64	; 0x40
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b08e      	sub	sp, #56	; 0x38
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10a      	bne.n	800a2c0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	623b      	str	r3, [r7, #32]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00a      	beq.n	800a2de <xQueueGiveFromISR+0x48>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	61fb      	str	r3, [r7, #28]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d103      	bne.n	800a2ee <xQueueGiveFromISR+0x58>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <xQueueGiveFromISR+0x5c>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e000      	b.n	800a2f4 <xQueueGiveFromISR+0x5e>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	61bb      	str	r3, [r7, #24]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a30e:	f001 ff03 	bl	800c118 <vPortValidateInterruptPriority>
	__asm volatile
 800a312:	f3ef 8211 	mrs	r2, BASEPRI
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	617a      	str	r2, [r7, #20]
 800a328:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a32a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a32c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a332:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d22b      	bcs.n	800a396 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a350:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d112      	bne.n	800a380 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d016      	beq.n	800a390 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	3324      	adds	r3, #36	; 0x24
 800a366:	4618      	mov	r0, r3
 800a368:	f001 f8e6 	bl	800b538 <xTaskRemoveFromEventList>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00e      	beq.n	800a390 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00b      	beq.n	800a390 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2201      	movs	r2, #1
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	e007      	b.n	800a390 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a384:	3301      	adds	r3, #1
 800a386:	b2db      	uxtb	r3, r3
 800a388:	b25a      	sxtb	r2, r3
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a390:	2301      	movs	r3, #1
 800a392:	637b      	str	r3, [r7, #52]	; 0x34
 800a394:	e001      	b.n	800a39a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a396:	2300      	movs	r3, #0
 800a398:	637b      	str	r3, [r7, #52]	; 0x34
 800a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f383 8811 	msr	BASEPRI, r3
}
 800a3a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3738      	adds	r7, #56	; 0x38
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08c      	sub	sp, #48	; 0x30
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10a      	bne.n	800a3e0 <xQueueReceive+0x30>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	623b      	str	r3, [r7, #32]
}
 800a3dc:	bf00      	nop
 800a3de:	e7fe      	b.n	800a3de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <xQueueReceive+0x3e>
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <xQueueReceive+0x42>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e000      	b.n	800a3f4 <xQueueReceive+0x44>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10a      	bne.n	800a40e <xQueueReceive+0x5e>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	61fb      	str	r3, [r7, #28]
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a40e:	f001 fa53 	bl	800b8b8 <xTaskGetSchedulerState>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <xQueueReceive+0x6e>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <xQueueReceive+0x72>
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <xQueueReceive+0x74>
 800a422:	2300      	movs	r3, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xQueueReceive+0x8e>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	61bb      	str	r3, [r7, #24]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a43e:	f001 fd89 	bl	800bf54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d01f      	beq.n	800a48e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a452:	f000 fabe 	bl	800a9d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	1e5a      	subs	r2, r3, #1
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00f      	beq.n	800a486 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a468:	3310      	adds	r3, #16
 800a46a:	4618      	mov	r0, r3
 800a46c:	f001 f864 	bl	800b538 <xTaskRemoveFromEventList>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d007      	beq.n	800a486 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a476:	4b3d      	ldr	r3, [pc, #244]	; (800a56c <xQueueReceive+0x1bc>)
 800a478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a486:	f001 fd95 	bl	800bfb4 <vPortExitCritical>
				return pdPASS;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e069      	b.n	800a562 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d103      	bne.n	800a49c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a494:	f001 fd8e 	bl	800bfb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a498:	2300      	movs	r3, #0
 800a49a:	e062      	b.n	800a562 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a2:	f107 0310 	add.w	r3, r7, #16
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f001 f8a8 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4b0:	f001 fd80 	bl	800bfb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4b4:	f000 fe36 	bl	800b124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4b8:	f001 fd4c 	bl	800bf54 <vPortEnterCritical>
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4c2:	b25b      	sxtb	r3, r3
 800a4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c8:	d103      	bne.n	800a4d2 <xQueueReceive+0x122>
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4d8:	b25b      	sxtb	r3, r3
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d103      	bne.n	800a4e8 <xQueueReceive+0x138>
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4e8:	f001 fd64 	bl	800bfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ec:	1d3a      	adds	r2, r7, #4
 800a4ee:	f107 0310 	add.w	r3, r7, #16
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f001 f897 	bl	800b628 <xTaskCheckForTimeOut>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d123      	bne.n	800a548 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a502:	f000 fade 	bl	800aac2 <prvIsQueueEmpty>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d017      	beq.n	800a53c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	3324      	adds	r3, #36	; 0x24
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	4611      	mov	r1, r2
 800a514:	4618      	mov	r0, r3
 800a516:	f000 ffeb 	bl	800b4f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a51a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a51c:	f000 fa7f 	bl	800aa1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a520:	f000 fe0e 	bl	800b140 <xTaskResumeAll>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d189      	bne.n	800a43e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a52a:	4b10      	ldr	r3, [pc, #64]	; (800a56c <xQueueReceive+0x1bc>)
 800a52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	e780      	b.n	800a43e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a53e:	f000 fa6e 	bl	800aa1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a542:	f000 fdfd 	bl	800b140 <xTaskResumeAll>
 800a546:	e77a      	b.n	800a43e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a54a:	f000 fa68 	bl	800aa1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a54e:	f000 fdf7 	bl	800b140 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a554:	f000 fab5 	bl	800aac2 <prvIsQueueEmpty>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f43f af6f 	beq.w	800a43e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a562:	4618      	mov	r0, r3
 800a564:	3730      	adds	r7, #48	; 0x30
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	e000ed04 	.word	0xe000ed04

0800a570 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08e      	sub	sp, #56	; 0x38
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a582:	2300      	movs	r3, #0
 800a584:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	61fb      	str	r3, [r7, #28]
}
 800a5bc:	bf00      	nop
 800a5be:	e7fe      	b.n	800a5be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5c0:	f001 f97a 	bl	800b8b8 <xTaskGetSchedulerState>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <xQueueSemaphoreTake+0x60>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <xQueueSemaphoreTake+0x64>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <xQueueSemaphoreTake+0x66>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	61bb      	str	r3, [r7, #24]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5f0:	f001 fcb0 	bl	800bf54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d024      	beq.n	800a64a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	1e5a      	subs	r2, r3, #1
 800a604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a606:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a610:	f001 fafa 	bl	800bc08 <pvTaskIncrementMutexHeldCount>
 800a614:	4602      	mov	r2, r0
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00f      	beq.n	800a642 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	3310      	adds	r3, #16
 800a626:	4618      	mov	r0, r3
 800a628:	f000 ff86 	bl	800b538 <xTaskRemoveFromEventList>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a632:	4b54      	ldr	r3, [pc, #336]	; (800a784 <xQueueSemaphoreTake+0x214>)
 800a634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a642:	f001 fcb7 	bl	800bfb4 <vPortExitCritical>
				return pdPASS;
 800a646:	2301      	movs	r3, #1
 800a648:	e097      	b.n	800a77a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d111      	bne.n	800a674 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	617b      	str	r3, [r7, #20]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a66c:	f001 fca2 	bl	800bfb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a670:	2300      	movs	r3, #0
 800a672:	e082      	b.n	800a77a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a67a:	f107 030c 	add.w	r3, r7, #12
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 ffbc 	bl	800b5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a684:	2301      	movs	r3, #1
 800a686:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a688:	f001 fc94 	bl	800bfb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a68c:	f000 fd4a 	bl	800b124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a690:	f001 fc60 	bl	800bf54 <vPortEnterCritical>
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a0:	d103      	bne.n	800a6aa <xQueueSemaphoreTake+0x13a>
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6b0:	b25b      	sxtb	r3, r3
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b6:	d103      	bne.n	800a6c0 <xQueueSemaphoreTake+0x150>
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6c0:	f001 fc78 	bl	800bfb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6c4:	463a      	mov	r2, r7
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 ffab 	bl	800b628 <xTaskCheckForTimeOut>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d132      	bne.n	800a73e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6da:	f000 f9f2 	bl	800aac2 <prvIsQueueEmpty>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d026      	beq.n	800a732 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d109      	bne.n	800a700 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a6ec:	f001 fc32 	bl	800bf54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f001 f8fd 	bl	800b8f4 <xTaskPriorityInherit>
 800a6fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a6fc:	f001 fc5a 	bl	800bfb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	3324      	adds	r3, #36	; 0x24
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	4611      	mov	r1, r2
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fef1 	bl	800b4f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a70e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a710:	f000 f985 	bl	800aa1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a714:	f000 fd14 	bl	800b140 <xTaskResumeAll>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f47f af68 	bne.w	800a5f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a720:	4b18      	ldr	r3, [pc, #96]	; (800a784 <xQueueSemaphoreTake+0x214>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	e75e      	b.n	800a5f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a734:	f000 f973 	bl	800aa1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a738:	f000 fd02 	bl	800b140 <xTaskResumeAll>
 800a73c:	e758      	b.n	800a5f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a73e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a740:	f000 f96d 	bl	800aa1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a744:	f000 fcfc 	bl	800b140 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a74a:	f000 f9ba 	bl	800aac2 <prvIsQueueEmpty>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	f43f af4d 	beq.w	800a5f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00d      	beq.n	800a778 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a75c:	f001 fbfa 	bl	800bf54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a762:	f000 f8b4 	bl	800a8ce <prvGetDisinheritPriorityAfterTimeout>
 800a766:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 f9bc 	bl	800baec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a774:	f001 fc1e 	bl	800bfb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3738      	adds	r7, #56	; 0x38
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	e000ed04 	.word	0xe000ed04

0800a788 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08e      	sub	sp, #56	; 0x38
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	623b      	str	r3, [r7, #32]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d103      	bne.n	800a7c2 <xQueueReceiveFromISR+0x3a>
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <xQueueReceiveFromISR+0x3e>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <xQueueReceiveFromISR+0x40>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	61fb      	str	r3, [r7, #28]
}
 800a7de:	bf00      	nop
 800a7e0:	e7fe      	b.n	800a7e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7e2:	f001 fc99 	bl	800c118 <vPortValidateInterruptPriority>
	__asm volatile
 800a7e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	61ba      	str	r2, [r7, #24]
 800a7fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a7fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d02f      	beq.n	800a86e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a81c:	f000 f8d9 	bl	800a9d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	1e5a      	subs	r2, r3, #1
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a830:	d112      	bne.n	800a858 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d016      	beq.n	800a868 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	3310      	adds	r3, #16
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fe7a 	bl	800b538 <xTaskRemoveFromEventList>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00e      	beq.n	800a868 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00b      	beq.n	800a868 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e007      	b.n	800a868 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a85c:	3301      	adds	r3, #1
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	b25a      	sxtb	r2, r3
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a868:	2301      	movs	r3, #1
 800a86a:	637b      	str	r3, [r7, #52]	; 0x34
 800a86c:	e001      	b.n	800a872 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a86e:	2300      	movs	r3, #0
 800a870:	637b      	str	r3, [r7, #52]	; 0x34
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f383 8811 	msr	BASEPRI, r3
}
 800a87c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a880:	4618      	mov	r0, r3
 800a882:	3738      	adds	r7, #56	; 0x38
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <vQueueDelete+0x28>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	60bb      	str	r3, [r7, #8]
}
 800a8ac:	bf00      	nop
 800a8ae:	e7fe      	b.n	800a8ae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 f935 	bl	800ab20 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d102      	bne.n	800a8c6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f001 fd35 	bl	800c330 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d006      	beq.n	800a8ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f1c3 0307 	rsb	r3, r3, #7
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	e001      	b.n	800a8f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
	}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	60f8      	str	r0, [r7, #12]
 800a906:	60b9      	str	r1, [r7, #8]
 800a908:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10d      	bne.n	800a938 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d14d      	bne.n	800a9c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 f859 	bl	800b9e0 <xTaskPriorityDisinherit>
 800a92e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	609a      	str	r2, [r3, #8]
 800a936:	e043      	b.n	800a9c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d119      	bne.n	800a972 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6858      	ldr	r0, [r3, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	461a      	mov	r2, r3
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	f001 fe35 	bl	800c5b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	441a      	add	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	429a      	cmp	r2, r3
 800a966:	d32b      	bcc.n	800a9c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	605a      	str	r2, [r3, #4]
 800a970:	e026      	b.n	800a9c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	68d8      	ldr	r0, [r3, #12]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97a:	461a      	mov	r2, r3
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	f001 fe1b 	bl	800c5b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	68da      	ldr	r2, [r3, #12]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98a:	425b      	negs	r3, r3
 800a98c:	441a      	add	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d207      	bcs.n	800a9ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	689a      	ldr	r2, [r3, #8]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	425b      	negs	r3, r3
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d105      	bne.n	800a9c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	1c5a      	adds	r2, r3, #1
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9c8:	697b      	ldr	r3, [r7, #20]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d018      	beq.n	800aa16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ec:	441a      	add	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d303      	bcc.n	800aa06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68d9      	ldr	r1, [r3, #12]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0e:	461a      	mov	r2, r3
 800aa10:	6838      	ldr	r0, [r7, #0]
 800aa12:	f001 fdd1 	bl	800c5b8 <memcpy>
	}
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa26:	f001 fa95 	bl	800bf54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa32:	e011      	b.n	800aa58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d012      	beq.n	800aa62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3324      	adds	r3, #36	; 0x24
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fd79 	bl	800b538 <xTaskRemoveFromEventList>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa4c:	f000 fe4e 	bl	800b6ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dce9      	bgt.n	800aa34 <prvUnlockQueue+0x16>
 800aa60:	e000      	b.n	800aa64 <prvUnlockQueue+0x46>
					break;
 800aa62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	22ff      	movs	r2, #255	; 0xff
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa6c:	f001 faa2 	bl	800bfb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa70:	f001 fa70 	bl	800bf54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa7c:	e011      	b.n	800aaa2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d012      	beq.n	800aaac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3310      	adds	r3, #16
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fd54 	bl	800b538 <xTaskRemoveFromEventList>
 800aa90:	4603      	mov	r3, r0
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa96:	f000 fe29 	bl	800b6ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	dce9      	bgt.n	800aa7e <prvUnlockQueue+0x60>
 800aaaa:	e000      	b.n	800aaae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aaac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	22ff      	movs	r2, #255	; 0xff
 800aab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aab6:	f001 fa7d 	bl	800bfb4 <vPortExitCritical>
}
 800aaba:	bf00      	nop
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaca:	f001 fa43 	bl	800bf54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aad6:	2301      	movs	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e001      	b.n	800aae0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aadc:	2300      	movs	r3, #0
 800aade:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aae0:	f001 fa68 	bl	800bfb4 <vPortExitCritical>

	return xReturn;
 800aae4:	68fb      	ldr	r3, [r7, #12]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaf6:	f001 fa2d 	bl	800bf54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d102      	bne.n	800ab0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab06:	2301      	movs	r3, #1
 800ab08:	60fb      	str	r3, [r7, #12]
 800ab0a:	e001      	b.n	800ab10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab10:	f001 fa50 	bl	800bfb4 <vPortExitCritical>

	return xReturn;
 800ab14:	68fb      	ldr	r3, [r7, #12]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	e016      	b.n	800ab5c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab2e:	4a10      	ldr	r2, [pc, #64]	; (800ab70 <vQueueUnregisterQueue+0x50>)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	4413      	add	r3, r2
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d10b      	bne.n	800ab56 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab3e:	4a0c      	ldr	r2, [pc, #48]	; (800ab70 <vQueueUnregisterQueue+0x50>)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2100      	movs	r1, #0
 800ab44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ab48:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <vQueueUnregisterQueue+0x50>)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	00db      	lsls	r3, r3, #3
 800ab4e:	4413      	add	r3, r2
 800ab50:	2200      	movs	r2, #0
 800ab52:	605a      	str	r2, [r3, #4]
				break;
 800ab54:	e006      	b.n	800ab64 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b07      	cmp	r3, #7
 800ab60:	d9e5      	bls.n	800ab2e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	20000b0c 	.word	0x20000b0c

0800ab74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08e      	sub	sp, #56	; 0x38
 800ab78:	af04      	add	r7, sp, #16
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d10a      	bne.n	800ab9e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8c:	f383 8811 	msr	BASEPRI, r3
 800ab90:	f3bf 8f6f 	isb	sy
 800ab94:	f3bf 8f4f 	dsb	sy
 800ab98:	623b      	str	r3, [r7, #32]
}
 800ab9a:	bf00      	nop
 800ab9c:	e7fe      	b.n	800ab9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <xTaskCreateStatic+0x46>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	61fb      	str	r3, [r7, #28]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abba:	23b4      	movs	r3, #180	; 0xb4
 800abbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	2bb4      	cmp	r3, #180	; 0xb4
 800abc2:	d00a      	beq.n	800abda <xTaskCreateStatic+0x66>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	61bb      	str	r3, [r7, #24]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800abda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800abdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d01e      	beq.n	800ac20 <xTaskCreateStatic+0xac>
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d01b      	beq.n	800ac20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf4:	2202      	movs	r2, #2
 800abf6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abfa:	2300      	movs	r3, #0
 800abfc:	9303      	str	r3, [sp, #12]
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	9302      	str	r3, [sp, #8]
 800ac02:	f107 0314 	add.w	r3, r7, #20
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f000 f850 	bl	800acb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac1a:	f000 f8eb 	bl	800adf4 <prvAddNewTaskToReadyList>
 800ac1e:	e001      	b.n	800ac24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac20:	2300      	movs	r3, #0
 800ac22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac24:	697b      	ldr	r3, [r7, #20]
	}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3728      	adds	r7, #40	; 0x28
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b08c      	sub	sp, #48	; 0x30
 800ac32:	af04      	add	r7, sp, #16
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	603b      	str	r3, [r7, #0]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac3e:	88fb      	ldrh	r3, [r7, #6]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f001 faa8 	bl	800c198 <pvPortMalloc>
 800ac48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00e      	beq.n	800ac6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac50:	20b4      	movs	r0, #180	; 0xb4
 800ac52:	f001 faa1 	bl	800c198 <pvPortMalloc>
 800ac56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	631a      	str	r2, [r3, #48]	; 0x30
 800ac64:	e005      	b.n	800ac72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac66:	6978      	ldr	r0, [r7, #20]
 800ac68:	f001 fb62 	bl	800c330 <vPortFree>
 800ac6c:	e001      	b.n	800ac72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d017      	beq.n	800aca8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac80:	88fa      	ldrh	r2, [r7, #6]
 800ac82:	2300      	movs	r3, #0
 800ac84:	9303      	str	r3, [sp, #12]
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	9302      	str	r3, [sp, #8]
 800ac8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	68b9      	ldr	r1, [r7, #8]
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f000 f80e 	bl	800acb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac9c:	69f8      	ldr	r0, [r7, #28]
 800ac9e:	f000 f8a9 	bl	800adf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aca2:	2301      	movs	r3, #1
 800aca4:	61bb      	str	r3, [r7, #24]
 800aca6:	e002      	b.n	800acae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aca8:	f04f 33ff 	mov.w	r3, #4294967295
 800acac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800acae:	69bb      	ldr	r3, [r7, #24]
	}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3720      	adds	r7, #32
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800acd0:	3b01      	subs	r3, #1
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	f023 0307 	bic.w	r3, r3, #7
 800acde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <prvInitialiseNewTask+0x48>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	617b      	str	r3, [r7, #20]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d01f      	beq.n	800ad46 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad06:	2300      	movs	r3, #0
 800ad08:	61fb      	str	r3, [r7, #28]
 800ad0a:	e012      	b.n	800ad32 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	7819      	ldrb	r1, [r3, #0]
 800ad14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	4413      	add	r3, r2
 800ad1a:	3334      	adds	r3, #52	; 0x34
 800ad1c:	460a      	mov	r2, r1
 800ad1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	4413      	add	r3, r2
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	61fb      	str	r3, [r7, #28]
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	2b0f      	cmp	r3, #15
 800ad36:	d9e9      	bls.n	800ad0c <prvInitialiseNewTask+0x54>
 800ad38:	e000      	b.n	800ad3c <prvInitialiseNewTask+0x84>
			{
				break;
 800ad3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad44:	e003      	b.n	800ad4e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad50:	2b06      	cmp	r3, #6
 800ad52:	d901      	bls.n	800ad58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad54:	2306      	movs	r3, #6
 800ad56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad66:	2200      	movs	r2, #0
 800ad68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe ff2a 	bl	8009bc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad76:	3318      	adds	r3, #24
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe ff25 	bl	8009bc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	f1c3 0207 	rsb	r2, r3, #7
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	2200      	movs	r2, #0
 800ad98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	334c      	adds	r3, #76	; 0x4c
 800ada8:	2260      	movs	r2, #96	; 0x60
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f001 fc11 	bl	800c5d4 <memset>
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	4a0c      	ldr	r2, [pc, #48]	; (800ade8 <prvInitialiseNewTask+0x130>)
 800adb6:	651a      	str	r2, [r3, #80]	; 0x50
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	4a0c      	ldr	r2, [pc, #48]	; (800adec <prvInitialiseNewTask+0x134>)
 800adbc:	655a      	str	r2, [r3, #84]	; 0x54
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	4a0b      	ldr	r2, [pc, #44]	; (800adf0 <prvInitialiseNewTask+0x138>)
 800adc2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	69b8      	ldr	r0, [r7, #24]
 800adca:	f000 ff97 	bl	800bcfc <pxPortInitialiseStack>
 800adce:	4602      	mov	r2, r0
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	2b00      	cmp	r3, #0
 800add8:	d002      	beq.n	800ade0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ade0:	bf00      	nop
 800ade2:	3720      	adds	r7, #32
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	0800c980 	.word	0x0800c980
 800adec:	0800c9a0 	.word	0x0800c9a0
 800adf0:	0800c960 	.word	0x0800c960

0800adf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800adfc:	f001 f8aa 	bl	800bf54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae00:	4b2a      	ldr	r3, [pc, #168]	; (800aeac <prvAddNewTaskToReadyList+0xb8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	4a29      	ldr	r2, [pc, #164]	; (800aeac <prvAddNewTaskToReadyList+0xb8>)
 800ae08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae0a:	4b29      	ldr	r3, [pc, #164]	; (800aeb0 <prvAddNewTaskToReadyList+0xbc>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d109      	bne.n	800ae26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae12:	4a27      	ldr	r2, [pc, #156]	; (800aeb0 <prvAddNewTaskToReadyList+0xbc>)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae18:	4b24      	ldr	r3, [pc, #144]	; (800aeac <prvAddNewTaskToReadyList+0xb8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d110      	bne.n	800ae42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae20:	f000 fc88 	bl	800b734 <prvInitialiseTaskLists>
 800ae24:	e00d      	b.n	800ae42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae26:	4b23      	ldr	r3, [pc, #140]	; (800aeb4 <prvAddNewTaskToReadyList+0xc0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae2e:	4b20      	ldr	r3, [pc, #128]	; (800aeb0 <prvAddNewTaskToReadyList+0xbc>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d802      	bhi.n	800ae42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae3c:	4a1c      	ldr	r2, [pc, #112]	; (800aeb0 <prvAddNewTaskToReadyList+0xbc>)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae42:	4b1d      	ldr	r3, [pc, #116]	; (800aeb8 <prvAddNewTaskToReadyList+0xc4>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3301      	adds	r3, #1
 800ae48:	4a1b      	ldr	r2, [pc, #108]	; (800aeb8 <prvAddNewTaskToReadyList+0xc4>)
 800ae4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae50:	2201      	movs	r2, #1
 800ae52:	409a      	lsls	r2, r3
 800ae54:	4b19      	ldr	r3, [pc, #100]	; (800aebc <prvAddNewTaskToReadyList+0xc8>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	4a18      	ldr	r2, [pc, #96]	; (800aebc <prvAddNewTaskToReadyList+0xc8>)
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae62:	4613      	mov	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4a15      	ldr	r2, [pc, #84]	; (800aec0 <prvAddNewTaskToReadyList+0xcc>)
 800ae6c:	441a      	add	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4619      	mov	r1, r3
 800ae74:	4610      	mov	r0, r2
 800ae76:	f7fe feb4 	bl	8009be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae7a:	f001 f89b 	bl	800bfb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <prvAddNewTaskToReadyList+0xc0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae86:	4b0a      	ldr	r3, [pc, #40]	; (800aeb0 <prvAddNewTaskToReadyList+0xbc>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d207      	bcs.n	800aea4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae94:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <prvAddNewTaskToReadyList+0xd0>)
 800ae96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae9a:	601a      	str	r2, [r3, #0]
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20000c4c 	.word	0x20000c4c
 800aeb0:	20000b4c 	.word	0x20000b4c
 800aeb4:	20000c58 	.word	0x20000c58
 800aeb8:	20000c68 	.word	0x20000c68
 800aebc:	20000c54 	.word	0x20000c54
 800aec0:	20000b50 	.word	0x20000b50
 800aec4:	e000ed04 	.word	0xe000ed04

0800aec8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800aed0:	f001 f840 	bl	800bf54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <vTaskDelete+0x18>
 800aeda:	4b39      	ldr	r3, [pc, #228]	; (800afc0 <vTaskDelete+0xf8>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	e000      	b.n	800aee2 <vTaskDelete+0x1a>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3304      	adds	r3, #4
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fed7 	bl	8009c9c <uxListRemove>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d115      	bne.n	800af20 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aef8:	4932      	ldr	r1, [pc, #200]	; (800afc4 <vTaskDelete+0xfc>)
 800aefa:	4613      	mov	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10a      	bne.n	800af20 <vTaskDelete+0x58>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0e:	2201      	movs	r2, #1
 800af10:	fa02 f303 	lsl.w	r3, r2, r3
 800af14:	43da      	mvns	r2, r3
 800af16:	4b2c      	ldr	r3, [pc, #176]	; (800afc8 <vTaskDelete+0x100>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4013      	ands	r3, r2
 800af1c:	4a2a      	ldr	r2, [pc, #168]	; (800afc8 <vTaskDelete+0x100>)
 800af1e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af24:	2b00      	cmp	r3, #0
 800af26:	d004      	beq.n	800af32 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	3318      	adds	r3, #24
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fe feb5 	bl	8009c9c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800af32:	4b26      	ldr	r3, [pc, #152]	; (800afcc <vTaskDelete+0x104>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3301      	adds	r3, #1
 800af38:	4a24      	ldr	r2, [pc, #144]	; (800afcc <vTaskDelete+0x104>)
 800af3a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800af3c:	4b20      	ldr	r3, [pc, #128]	; (800afc0 <vTaskDelete+0xf8>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	429a      	cmp	r2, r3
 800af44:	d10b      	bne.n	800af5e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3304      	adds	r3, #4
 800af4a:	4619      	mov	r1, r3
 800af4c:	4820      	ldr	r0, [pc, #128]	; (800afd0 <vTaskDelete+0x108>)
 800af4e:	f7fe fe48 	bl	8009be2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800af52:	4b20      	ldr	r3, [pc, #128]	; (800afd4 <vTaskDelete+0x10c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3301      	adds	r3, #1
 800af58:	4a1e      	ldr	r2, [pc, #120]	; (800afd4 <vTaskDelete+0x10c>)
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	e009      	b.n	800af72 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800af5e:	4b1e      	ldr	r3, [pc, #120]	; (800afd8 <vTaskDelete+0x110>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	3b01      	subs	r3, #1
 800af64:	4a1c      	ldr	r2, [pc, #112]	; (800afd8 <vTaskDelete+0x110>)
 800af66:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800af68:	68f8      	ldr	r0, [r7, #12]
 800af6a:	f000 fc51 	bl	800b810 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800af6e:	f000 fc83 	bl	800b878 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800af72:	f001 f81f 	bl	800bfb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800af76:	4b19      	ldr	r3, [pc, #100]	; (800afdc <vTaskDelete+0x114>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d01b      	beq.n	800afb6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800af7e:	4b10      	ldr	r3, [pc, #64]	; (800afc0 <vTaskDelete+0xf8>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	429a      	cmp	r2, r3
 800af86:	d116      	bne.n	800afb6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800af88:	4b15      	ldr	r3, [pc, #84]	; (800afe0 <vTaskDelete+0x118>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <vTaskDelete+0xde>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	60bb      	str	r3, [r7, #8]
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800afa6:	4b0f      	ldr	r3, [pc, #60]	; (800afe4 <vTaskDelete+0x11c>)
 800afa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000b4c 	.word	0x20000b4c
 800afc4:	20000b50 	.word	0x20000b50
 800afc8:	20000c54 	.word	0x20000c54
 800afcc:	20000c68 	.word	0x20000c68
 800afd0:	20000c20 	.word	0x20000c20
 800afd4:	20000c34 	.word	0x20000c34
 800afd8:	20000c4c 	.word	0x20000c4c
 800afdc:	20000c58 	.word	0x20000c58
 800afe0:	20000c74 	.word	0x20000c74
 800afe4:	e000ed04 	.word	0xe000ed04

0800afe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d017      	beq.n	800b02a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800affa:	4b13      	ldr	r3, [pc, #76]	; (800b048 <vTaskDelay+0x60>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00a      	beq.n	800b018 <vTaskDelay+0x30>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	60bb      	str	r3, [r7, #8]
}
 800b014:	bf00      	nop
 800b016:	e7fe      	b.n	800b016 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b018:	f000 f884 	bl	800b124 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b01c:	2100      	movs	r1, #0
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fe06 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b024:	f000 f88c 	bl	800b140 <xTaskResumeAll>
 800b028:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d107      	bne.n	800b040 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b030:	4b06      	ldr	r3, [pc, #24]	; (800b04c <vTaskDelay+0x64>)
 800b032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b040:	bf00      	nop
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000c74 	.word	0x20000c74
 800b04c:	e000ed04 	.word	0xe000ed04

0800b050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08a      	sub	sp, #40	; 0x28
 800b054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b056:	2300      	movs	r3, #0
 800b058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b05e:	463a      	mov	r2, r7
 800b060:	1d39      	adds	r1, r7, #4
 800b062:	f107 0308 	add.w	r3, r7, #8
 800b066:	4618      	mov	r0, r3
 800b068:	f7f5 f8e0 	bl	800022c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	9202      	str	r2, [sp, #8]
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	2300      	movs	r3, #0
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	2300      	movs	r3, #0
 800b07c:	460a      	mov	r2, r1
 800b07e:	4921      	ldr	r1, [pc, #132]	; (800b104 <vTaskStartScheduler+0xb4>)
 800b080:	4821      	ldr	r0, [pc, #132]	; (800b108 <vTaskStartScheduler+0xb8>)
 800b082:	f7ff fd77 	bl	800ab74 <xTaskCreateStatic>
 800b086:	4603      	mov	r3, r0
 800b088:	4a20      	ldr	r2, [pc, #128]	; (800b10c <vTaskStartScheduler+0xbc>)
 800b08a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b08c:	4b1f      	ldr	r3, [pc, #124]	; (800b10c <vTaskStartScheduler+0xbc>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b094:	2301      	movs	r3, #1
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	e001      	b.n	800b09e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d11b      	bne.n	800b0dc <vTaskStartScheduler+0x8c>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	613b      	str	r3, [r7, #16]
}
 800b0b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0b8:	4b15      	ldr	r3, [pc, #84]	; (800b110 <vTaskStartScheduler+0xc0>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	334c      	adds	r3, #76	; 0x4c
 800b0be:	4a15      	ldr	r2, [pc, #84]	; (800b114 <vTaskStartScheduler+0xc4>)
 800b0c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0c2:	4b15      	ldr	r3, [pc, #84]	; (800b118 <vTaskStartScheduler+0xc8>)
 800b0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b0c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0ca:	4b14      	ldr	r3, [pc, #80]	; (800b11c <vTaskStartScheduler+0xcc>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0d0:	4b13      	ldr	r3, [pc, #76]	; (800b120 <vTaskStartScheduler+0xd0>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0d6:	f000 fe9b 	bl	800be10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0da:	e00e      	b.n	800b0fa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e2:	d10a      	bne.n	800b0fa <vTaskStartScheduler+0xaa>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	60fb      	str	r3, [r7, #12]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <vTaskStartScheduler+0xa8>
}
 800b0fa:	bf00      	nop
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	0800c87c 	.word	0x0800c87c
 800b108:	0800b705 	.word	0x0800b705
 800b10c:	20000c70 	.word	0x20000c70
 800b110:	20000b4c 	.word	0x20000b4c
 800b114:	20000010 	.word	0x20000010
 800b118:	20000c6c 	.word	0x20000c6c
 800b11c:	20000c58 	.word	0x20000c58
 800b120:	20000c50 	.word	0x20000c50

0800b124 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b128:	4b04      	ldr	r3, [pc, #16]	; (800b13c <vTaskSuspendAll+0x18>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3301      	adds	r3, #1
 800b12e:	4a03      	ldr	r2, [pc, #12]	; (800b13c <vTaskSuspendAll+0x18>)
 800b130:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b132:	bf00      	nop
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	20000c74 	.word	0x20000c74

0800b140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b146:	2300      	movs	r3, #0
 800b148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b14e:	4b41      	ldr	r3, [pc, #260]	; (800b254 <xTaskResumeAll+0x114>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10a      	bne.n	800b16c <xTaskResumeAll+0x2c>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	603b      	str	r3, [r7, #0]
}
 800b168:	bf00      	nop
 800b16a:	e7fe      	b.n	800b16a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b16c:	f000 fef2 	bl	800bf54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b170:	4b38      	ldr	r3, [pc, #224]	; (800b254 <xTaskResumeAll+0x114>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3b01      	subs	r3, #1
 800b176:	4a37      	ldr	r2, [pc, #220]	; (800b254 <xTaskResumeAll+0x114>)
 800b178:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17a:	4b36      	ldr	r3, [pc, #216]	; (800b254 <xTaskResumeAll+0x114>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d161      	bne.n	800b246 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b182:	4b35      	ldr	r3, [pc, #212]	; (800b258 <xTaskResumeAll+0x118>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d05d      	beq.n	800b246 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b18a:	e02e      	b.n	800b1ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b18c:	4b33      	ldr	r3, [pc, #204]	; (800b25c <xTaskResumeAll+0x11c>)
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3318      	adds	r3, #24
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fe fd7f 	bl	8009c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fe fd7a 	bl	8009c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	409a      	lsls	r2, r3
 800b1b0:	4b2b      	ldr	r3, [pc, #172]	; (800b260 <xTaskResumeAll+0x120>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	4a2a      	ldr	r2, [pc, #168]	; (800b260 <xTaskResumeAll+0x120>)
 800b1b8:	6013      	str	r3, [r2, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1be:	4613      	mov	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4a27      	ldr	r2, [pc, #156]	; (800b264 <xTaskResumeAll+0x124>)
 800b1c8:	441a      	add	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	4610      	mov	r0, r2
 800b1d2:	f7fe fd06 	bl	8009be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1da:	4b23      	ldr	r3, [pc, #140]	; (800b268 <xTaskResumeAll+0x128>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d302      	bcc.n	800b1ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b1e4:	4b21      	ldr	r3, [pc, #132]	; (800b26c <xTaskResumeAll+0x12c>)
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1ea:	4b1c      	ldr	r3, [pc, #112]	; (800b25c <xTaskResumeAll+0x11c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1cc      	bne.n	800b18c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b1f8:	f000 fb3e 	bl	800b878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b1fc:	4b1c      	ldr	r3, [pc, #112]	; (800b270 <xTaskResumeAll+0x130>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d010      	beq.n	800b22a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b208:	f000 f858 	bl	800b2bc <xTaskIncrementTick>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b212:	4b16      	ldr	r3, [pc, #88]	; (800b26c <xTaskResumeAll+0x12c>)
 800b214:	2201      	movs	r2, #1
 800b216:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1f1      	bne.n	800b208 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b224:	4b12      	ldr	r3, [pc, #72]	; (800b270 <xTaskResumeAll+0x130>)
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b22a:	4b10      	ldr	r3, [pc, #64]	; (800b26c <xTaskResumeAll+0x12c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d009      	beq.n	800b246 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b232:	2301      	movs	r3, #1
 800b234:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b236:	4b0f      	ldr	r3, [pc, #60]	; (800b274 <xTaskResumeAll+0x134>)
 800b238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b246:	f000 feb5 	bl	800bfb4 <vPortExitCritical>

	return xAlreadyYielded;
 800b24a:	68bb      	ldr	r3, [r7, #8]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20000c74 	.word	0x20000c74
 800b258:	20000c4c 	.word	0x20000c4c
 800b25c:	20000c0c 	.word	0x20000c0c
 800b260:	20000c54 	.word	0x20000c54
 800b264:	20000b50 	.word	0x20000b50
 800b268:	20000b4c 	.word	0x20000b4c
 800b26c:	20000c60 	.word	0x20000c60
 800b270:	20000c5c 	.word	0x20000c5c
 800b274:	e000ed04 	.word	0xe000ed04

0800b278 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b27e:	4b05      	ldr	r3, [pc, #20]	; (800b294 <xTaskGetTickCount+0x1c>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b284:	687b      	ldr	r3, [r7, #4]
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	20000c50 	.word	0x20000c50

0800b298 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b29e:	f000 ff3b 	bl	800c118 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b2a6:	4b04      	ldr	r3, [pc, #16]	; (800b2b8 <xTaskGetTickCountFromISR+0x20>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ac:	683b      	ldr	r3, [r7, #0]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20000c50 	.word	0x20000c50

0800b2bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2c6:	4b4e      	ldr	r3, [pc, #312]	; (800b400 <xTaskIncrementTick+0x144>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f040 808e 	bne.w	800b3ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2d0:	4b4c      	ldr	r3, [pc, #304]	; (800b404 <xTaskIncrementTick+0x148>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2d8:	4a4a      	ldr	r2, [pc, #296]	; (800b404 <xTaskIncrementTick+0x148>)
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d120      	bne.n	800b326 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2e4:	4b48      	ldr	r3, [pc, #288]	; (800b408 <xTaskIncrementTick+0x14c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00a      	beq.n	800b304 <xTaskIncrementTick+0x48>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	603b      	str	r3, [r7, #0]
}
 800b300:	bf00      	nop
 800b302:	e7fe      	b.n	800b302 <xTaskIncrementTick+0x46>
 800b304:	4b40      	ldr	r3, [pc, #256]	; (800b408 <xTaskIncrementTick+0x14c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	60fb      	str	r3, [r7, #12]
 800b30a:	4b40      	ldr	r3, [pc, #256]	; (800b40c <xTaskIncrementTick+0x150>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a3e      	ldr	r2, [pc, #248]	; (800b408 <xTaskIncrementTick+0x14c>)
 800b310:	6013      	str	r3, [r2, #0]
 800b312:	4a3e      	ldr	r2, [pc, #248]	; (800b40c <xTaskIncrementTick+0x150>)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	4b3d      	ldr	r3, [pc, #244]	; (800b410 <xTaskIncrementTick+0x154>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3301      	adds	r3, #1
 800b31e:	4a3c      	ldr	r2, [pc, #240]	; (800b410 <xTaskIncrementTick+0x154>)
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	f000 faa9 	bl	800b878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b326:	4b3b      	ldr	r3, [pc, #236]	; (800b414 <xTaskIncrementTick+0x158>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d348      	bcc.n	800b3c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b330:	4b35      	ldr	r3, [pc, #212]	; (800b408 <xTaskIncrementTick+0x14c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b33a:	4b36      	ldr	r3, [pc, #216]	; (800b414 <xTaskIncrementTick+0x158>)
 800b33c:	f04f 32ff 	mov.w	r2, #4294967295
 800b340:	601a      	str	r2, [r3, #0]
					break;
 800b342:	e03e      	b.n	800b3c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b344:	4b30      	ldr	r3, [pc, #192]	; (800b408 <xTaskIncrementTick+0x14c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b354:	693a      	ldr	r2, [r7, #16]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d203      	bcs.n	800b364 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b35c:	4a2d      	ldr	r2, [pc, #180]	; (800b414 <xTaskIncrementTick+0x158>)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b362:	e02e      	b.n	800b3c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fe fc97 	bl	8009c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	2b00      	cmp	r3, #0
 800b374:	d004      	beq.n	800b380 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	3318      	adds	r3, #24
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fc8e 	bl	8009c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	2201      	movs	r2, #1
 800b386:	409a      	lsls	r2, r3
 800b388:	4b23      	ldr	r3, [pc, #140]	; (800b418 <xTaskIncrementTick+0x15c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	4a22      	ldr	r2, [pc, #136]	; (800b418 <xTaskIncrementTick+0x15c>)
 800b390:	6013      	str	r3, [r2, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b396:	4613      	mov	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4413      	add	r3, r2
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4a1f      	ldr	r2, [pc, #124]	; (800b41c <xTaskIncrementTick+0x160>)
 800b3a0:	441a      	add	r2, r3
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	f7fe fc1a 	bl	8009be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	; (800b420 <xTaskIncrementTick+0x164>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d3b9      	bcc.n	800b330 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3c0:	e7b6      	b.n	800b330 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3c2:	4b17      	ldr	r3, [pc, #92]	; (800b420 <xTaskIncrementTick+0x164>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c8:	4914      	ldr	r1, [pc, #80]	; (800b41c <xTaskIncrementTick+0x160>)
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	440b      	add	r3, r1
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d901      	bls.n	800b3de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3de:	4b11      	ldr	r3, [pc, #68]	; (800b424 <xTaskIncrementTick+0x168>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d007      	beq.n	800b3f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	617b      	str	r3, [r7, #20]
 800b3ea:	e004      	b.n	800b3f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3ec:	4b0e      	ldr	r3, [pc, #56]	; (800b428 <xTaskIncrementTick+0x16c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	4a0d      	ldr	r2, [pc, #52]	; (800b428 <xTaskIncrementTick+0x16c>)
 800b3f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b3f6:	697b      	ldr	r3, [r7, #20]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	20000c74 	.word	0x20000c74
 800b404:	20000c50 	.word	0x20000c50
 800b408:	20000c04 	.word	0x20000c04
 800b40c:	20000c08 	.word	0x20000c08
 800b410:	20000c64 	.word	0x20000c64
 800b414:	20000c6c 	.word	0x20000c6c
 800b418:	20000c54 	.word	0x20000c54
 800b41c:	20000b50 	.word	0x20000b50
 800b420:	20000b4c 	.word	0x20000b4c
 800b424:	20000c60 	.word	0x20000c60
 800b428:	20000c5c 	.word	0x20000c5c

0800b42c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b42c:	b480      	push	{r7}
 800b42e:	b087      	sub	sp, #28
 800b430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b432:	4b29      	ldr	r3, [pc, #164]	; (800b4d8 <vTaskSwitchContext+0xac>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b43a:	4b28      	ldr	r3, [pc, #160]	; (800b4dc <vTaskSwitchContext+0xb0>)
 800b43c:	2201      	movs	r2, #1
 800b43e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b440:	e044      	b.n	800b4cc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b442:	4b26      	ldr	r3, [pc, #152]	; (800b4dc <vTaskSwitchContext+0xb0>)
 800b444:	2200      	movs	r2, #0
 800b446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b448:	4b25      	ldr	r3, [pc, #148]	; (800b4e0 <vTaskSwitchContext+0xb4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	fab3 f383 	clz	r3, r3
 800b454:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	f1c3 031f 	rsb	r3, r3, #31
 800b45c:	617b      	str	r3, [r7, #20]
 800b45e:	4921      	ldr	r1, [pc, #132]	; (800b4e4 <vTaskSwitchContext+0xb8>)
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	4613      	mov	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	440b      	add	r3, r1
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	607b      	str	r3, [r7, #4]
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <vTaskSwitchContext+0x5a>
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4a14      	ldr	r2, [pc, #80]	; (800b4e4 <vTaskSwitchContext+0xb8>)
 800b494:	4413      	add	r3, r2
 800b496:	613b      	str	r3, [r7, #16]
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	605a      	str	r2, [r3, #4]
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d104      	bne.n	800b4b8 <vTaskSwitchContext+0x8c>
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	605a      	str	r2, [r3, #4]
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	4a0a      	ldr	r2, [pc, #40]	; (800b4e8 <vTaskSwitchContext+0xbc>)
 800b4c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4c2:	4b09      	ldr	r3, [pc, #36]	; (800b4e8 <vTaskSwitchContext+0xbc>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	334c      	adds	r3, #76	; 0x4c
 800b4c8:	4a08      	ldr	r2, [pc, #32]	; (800b4ec <vTaskSwitchContext+0xc0>)
 800b4ca:	6013      	str	r3, [r2, #0]
}
 800b4cc:	bf00      	nop
 800b4ce:	371c      	adds	r7, #28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr
 800b4d8:	20000c74 	.word	0x20000c74
 800b4dc:	20000c60 	.word	0x20000c60
 800b4e0:	20000c54 	.word	0x20000c54
 800b4e4:	20000b50 	.word	0x20000b50
 800b4e8:	20000b4c 	.word	0x20000b4c
 800b4ec:	20000010 	.word	0x20000010

0800b4f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10a      	bne.n	800b516 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b516:	4b07      	ldr	r3, [pc, #28]	; (800b534 <vTaskPlaceOnEventList+0x44>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3318      	adds	r3, #24
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7fe fb83 	bl	8009c2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b524:	2101      	movs	r1, #1
 800b526:	6838      	ldr	r0, [r7, #0]
 800b528:	f000 fb82 	bl	800bc30 <prvAddCurrentTaskToDelayedList>
}
 800b52c:	bf00      	nop
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20000b4c 	.word	0x20000b4c

0800b538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b086      	sub	sp, #24
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	60fb      	str	r3, [r7, #12]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	3318      	adds	r3, #24
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fb97 	bl	8009c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b56e:	4b1d      	ldr	r3, [pc, #116]	; (800b5e4 <xTaskRemoveFromEventList+0xac>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d11c      	bne.n	800b5b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	3304      	adds	r3, #4
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fb8e 	bl	8009c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	2201      	movs	r2, #1
 800b586:	409a      	lsls	r2, r3
 800b588:	4b17      	ldr	r3, [pc, #92]	; (800b5e8 <xTaskRemoveFromEventList+0xb0>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	4a16      	ldr	r2, [pc, #88]	; (800b5e8 <xTaskRemoveFromEventList+0xb0>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4a13      	ldr	r2, [pc, #76]	; (800b5ec <xTaskRemoveFromEventList+0xb4>)
 800b5a0:	441a      	add	r2, r3
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	f7fe fb1a 	bl	8009be2 <vListInsertEnd>
 800b5ae:	e005      	b.n	800b5bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	3318      	adds	r3, #24
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	480e      	ldr	r0, [pc, #56]	; (800b5f0 <xTaskRemoveFromEventList+0xb8>)
 800b5b8:	f7fe fb13 	bl	8009be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	; (800b5f4 <xTaskRemoveFromEventList+0xbc>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d905      	bls.n	800b5d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5ce:	4b0a      	ldr	r3, [pc, #40]	; (800b5f8 <xTaskRemoveFromEventList+0xc0>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	e001      	b.n	800b5da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5da:	697b      	ldr	r3, [r7, #20]
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3718      	adds	r7, #24
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20000c74 	.word	0x20000c74
 800b5e8:	20000c54 	.word	0x20000c54
 800b5ec:	20000b50 	.word	0x20000b50
 800b5f0:	20000c0c 	.word	0x20000c0c
 800b5f4:	20000b4c 	.word	0x20000b4c
 800b5f8:	20000c60 	.word	0x20000c60

0800b5fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b604:	4b06      	ldr	r3, [pc, #24]	; (800b620 <vTaskInternalSetTimeOutState+0x24>)
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b60c:	4b05      	ldr	r3, [pc, #20]	; (800b624 <vTaskInternalSetTimeOutState+0x28>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	605a      	str	r2, [r3, #4]
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	20000c64 	.word	0x20000c64
 800b624:	20000c50 	.word	0x20000c50

0800b628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	613b      	str	r3, [r7, #16]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	60fb      	str	r3, [r7, #12]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b66a:	f000 fc73 	bl	800bf54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b66e:	4b1d      	ldr	r3, [pc, #116]	; (800b6e4 <xTaskCheckForTimeOut+0xbc>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b686:	d102      	bne.n	800b68e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b688:	2300      	movs	r3, #0
 800b68a:	61fb      	str	r3, [r7, #28]
 800b68c:	e023      	b.n	800b6d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	4b15      	ldr	r3, [pc, #84]	; (800b6e8 <xTaskCheckForTimeOut+0xc0>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	429a      	cmp	r2, r3
 800b698:	d007      	beq.n	800b6aa <xTaskCheckForTimeOut+0x82>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d302      	bcc.n	800b6aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	61fb      	str	r3, [r7, #28]
 800b6a8:	e015      	b.n	800b6d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	697a      	ldr	r2, [r7, #20]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d20b      	bcs.n	800b6cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	1ad2      	subs	r2, r2, r3
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff ff9b 	bl	800b5fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61fb      	str	r3, [r7, #28]
 800b6ca:	e004      	b.n	800b6d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6d6:	f000 fc6d 	bl	800bfb4 <vPortExitCritical>

	return xReturn;
 800b6da:	69fb      	ldr	r3, [r7, #28]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3720      	adds	r7, #32
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	20000c50 	.word	0x20000c50
 800b6e8:	20000c64 	.word	0x20000c64

0800b6ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b6f0:	4b03      	ldr	r3, [pc, #12]	; (800b700 <vTaskMissedYield+0x14>)
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	601a      	str	r2, [r3, #0]
}
 800b6f6:	bf00      	nop
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20000c60 	.word	0x20000c60

0800b704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b70c:	f000 f852 	bl	800b7b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b710:	4b06      	ldr	r3, [pc, #24]	; (800b72c <prvIdleTask+0x28>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d9f9      	bls.n	800b70c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b718:	4b05      	ldr	r3, [pc, #20]	; (800b730 <prvIdleTask+0x2c>)
 800b71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b728:	e7f0      	b.n	800b70c <prvIdleTask+0x8>
 800b72a:	bf00      	nop
 800b72c:	20000b50 	.word	0x20000b50
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b73a:	2300      	movs	r3, #0
 800b73c:	607b      	str	r3, [r7, #4]
 800b73e:	e00c      	b.n	800b75a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4a12      	ldr	r2, [pc, #72]	; (800b794 <prvInitialiseTaskLists+0x60>)
 800b74c:	4413      	add	r3, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fa1a 	bl	8009b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3301      	adds	r3, #1
 800b758:	607b      	str	r3, [r7, #4]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b06      	cmp	r3, #6
 800b75e:	d9ef      	bls.n	800b740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b760:	480d      	ldr	r0, [pc, #52]	; (800b798 <prvInitialiseTaskLists+0x64>)
 800b762:	f7fe fa11 	bl	8009b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b766:	480d      	ldr	r0, [pc, #52]	; (800b79c <prvInitialiseTaskLists+0x68>)
 800b768:	f7fe fa0e 	bl	8009b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b76c:	480c      	ldr	r0, [pc, #48]	; (800b7a0 <prvInitialiseTaskLists+0x6c>)
 800b76e:	f7fe fa0b 	bl	8009b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b772:	480c      	ldr	r0, [pc, #48]	; (800b7a4 <prvInitialiseTaskLists+0x70>)
 800b774:	f7fe fa08 	bl	8009b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b778:	480b      	ldr	r0, [pc, #44]	; (800b7a8 <prvInitialiseTaskLists+0x74>)
 800b77a:	f7fe fa05 	bl	8009b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b77e:	4b0b      	ldr	r3, [pc, #44]	; (800b7ac <prvInitialiseTaskLists+0x78>)
 800b780:	4a05      	ldr	r2, [pc, #20]	; (800b798 <prvInitialiseTaskLists+0x64>)
 800b782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b784:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <prvInitialiseTaskLists+0x7c>)
 800b786:	4a05      	ldr	r2, [pc, #20]	; (800b79c <prvInitialiseTaskLists+0x68>)
 800b788:	601a      	str	r2, [r3, #0]
}
 800b78a:	bf00      	nop
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20000b50 	.word	0x20000b50
 800b798:	20000bdc 	.word	0x20000bdc
 800b79c:	20000bf0 	.word	0x20000bf0
 800b7a0:	20000c0c 	.word	0x20000c0c
 800b7a4:	20000c20 	.word	0x20000c20
 800b7a8:	20000c38 	.word	0x20000c38
 800b7ac:	20000c04 	.word	0x20000c04
 800b7b0:	20000c08 	.word	0x20000c08

0800b7b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7ba:	e019      	b.n	800b7f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7bc:	f000 fbca 	bl	800bf54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c0:	4b10      	ldr	r3, [pc, #64]	; (800b804 <prvCheckTasksWaitingTermination+0x50>)
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe fa65 	bl	8009c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7d2:	4b0d      	ldr	r3, [pc, #52]	; (800b808 <prvCheckTasksWaitingTermination+0x54>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	4a0b      	ldr	r2, [pc, #44]	; (800b808 <prvCheckTasksWaitingTermination+0x54>)
 800b7da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7dc:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <prvCheckTasksWaitingTermination+0x58>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	4a0a      	ldr	r2, [pc, #40]	; (800b80c <prvCheckTasksWaitingTermination+0x58>)
 800b7e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b7e6:	f000 fbe5 	bl	800bfb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f810 	bl	800b810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7f0:	4b06      	ldr	r3, [pc, #24]	; (800b80c <prvCheckTasksWaitingTermination+0x58>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1e1      	bne.n	800b7bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b7f8:	bf00      	nop
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	20000c20 	.word	0x20000c20
 800b808:	20000c4c 	.word	0x20000c4c
 800b80c:	20000c34 	.word	0x20000c34

0800b810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	334c      	adds	r3, #76	; 0x4c
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 feef 	bl	800c600 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d108      	bne.n	800b83e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b830:	4618      	mov	r0, r3
 800b832:	f000 fd7d 	bl	800c330 <vPortFree>
				vPortFree( pxTCB );
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fd7a 	bl	800c330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b83c:	e018      	b.n	800b870 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b844:	2b01      	cmp	r3, #1
 800b846:	d103      	bne.n	800b850 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fd71 	bl	800c330 <vPortFree>
	}
 800b84e:	e00f      	b.n	800b870 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b856:	2b02      	cmp	r3, #2
 800b858:	d00a      	beq.n	800b870 <prvDeleteTCB+0x60>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	60fb      	str	r3, [r7, #12]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <prvDeleteTCB+0x5e>
	}
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b87e:	4b0c      	ldr	r3, [pc, #48]	; (800b8b0 <prvResetNextTaskUnblockTime+0x38>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d104      	bne.n	800b892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b88a:	f04f 32ff 	mov.w	r2, #4294967295
 800b88e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b890:	e008      	b.n	800b8a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b892:	4b07      	ldr	r3, [pc, #28]	; (800b8b0 <prvResetNextTaskUnblockTime+0x38>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	4a04      	ldr	r2, [pc, #16]	; (800b8b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b8a2:	6013      	str	r3, [r2, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20000c04 	.word	0x20000c04
 800b8b4:	20000c6c 	.word	0x20000c6c

0800b8b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8be:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <xTaskGetSchedulerState+0x34>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d102      	bne.n	800b8cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	607b      	str	r3, [r7, #4]
 800b8ca:	e008      	b.n	800b8de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8cc:	4b08      	ldr	r3, [pc, #32]	; (800b8f0 <xTaskGetSchedulerState+0x38>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d102      	bne.n	800b8da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	607b      	str	r3, [r7, #4]
 800b8d8:	e001      	b.n	800b8de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8de:	687b      	ldr	r3, [r7, #4]
	}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	20000c58 	.word	0x20000c58
 800b8f0:	20000c74 	.word	0x20000c74

0800b8f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b900:	2300      	movs	r3, #0
 800b902:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d05e      	beq.n	800b9c8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90e:	4b31      	ldr	r3, [pc, #196]	; (800b9d4 <xTaskPriorityInherit+0xe0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b914:	429a      	cmp	r2, r3
 800b916:	d24e      	bcs.n	800b9b6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	db06      	blt.n	800b92e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b920:	4b2c      	ldr	r3, [pc, #176]	; (800b9d4 <xTaskPriorityInherit+0xe0>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b926:	f1c3 0207 	rsb	r2, r3, #7
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	6959      	ldr	r1, [r3, #20]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4a26      	ldr	r2, [pc, #152]	; (800b9d8 <xTaskPriorityInherit+0xe4>)
 800b940:	4413      	add	r3, r2
 800b942:	4299      	cmp	r1, r3
 800b944:	d12f      	bne.n	800b9a6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	3304      	adds	r3, #4
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fe f9a6 	bl	8009c9c <uxListRemove>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10a      	bne.n	800b96c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	2201      	movs	r2, #1
 800b95c:	fa02 f303 	lsl.w	r3, r2, r3
 800b960:	43da      	mvns	r2, r3
 800b962:	4b1e      	ldr	r3, [pc, #120]	; (800b9dc <xTaskPriorityInherit+0xe8>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4013      	ands	r3, r2
 800b968:	4a1c      	ldr	r2, [pc, #112]	; (800b9dc <xTaskPriorityInherit+0xe8>)
 800b96a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b96c:	4b19      	ldr	r3, [pc, #100]	; (800b9d4 <xTaskPriorityInherit+0xe0>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	2201      	movs	r2, #1
 800b97c:	409a      	lsls	r2, r3
 800b97e:	4b17      	ldr	r3, [pc, #92]	; (800b9dc <xTaskPriorityInherit+0xe8>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4313      	orrs	r3, r2
 800b984:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <xTaskPriorityInherit+0xe8>)
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98c:	4613      	mov	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4a10      	ldr	r2, [pc, #64]	; (800b9d8 <xTaskPriorityInherit+0xe4>)
 800b996:	441a      	add	r2, r3
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4619      	mov	r1, r3
 800b99e:	4610      	mov	r0, r2
 800b9a0:	f7fe f91f 	bl	8009be2 <vListInsertEnd>
 800b9a4:	e004      	b.n	800b9b0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9a6:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <xTaskPriorityInherit+0xe0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	e008      	b.n	800b9c8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9ba:	4b06      	ldr	r3, [pc, #24]	; (800b9d4 <xTaskPriorityInherit+0xe0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d201      	bcs.n	800b9c8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
	}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000b4c 	.word	0x20000b4c
 800b9d8:	20000b50 	.word	0x20000b50
 800b9dc:	20000c54 	.word	0x20000c54

0800b9e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d06e      	beq.n	800bad4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9f6:	4b3a      	ldr	r3, [pc, #232]	; (800bae0 <xTaskPriorityDisinherit+0x100>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d00a      	beq.n	800ba16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba22:	f383 8811 	msr	BASEPRI, r3
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	60bb      	str	r3, [r7, #8]
}
 800ba30:	bf00      	nop
 800ba32:	e7fe      	b.n	800ba32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba38:	1e5a      	subs	r2, r3, #1
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d044      	beq.n	800bad4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d140      	bne.n	800bad4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe f920 	bl	8009c9c <uxListRemove>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d115      	bne.n	800ba8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba66:	491f      	ldr	r1, [pc, #124]	; (800bae4 <xTaskPriorityDisinherit+0x104>)
 800ba68:	4613      	mov	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	440b      	add	r3, r1
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10a      	bne.n	800ba8e <xTaskPriorityDisinherit+0xae>
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba82:	43da      	mvns	r2, r3
 800ba84:	4b18      	ldr	r3, [pc, #96]	; (800bae8 <xTaskPriorityDisinherit+0x108>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4013      	ands	r3, r2
 800ba8a:	4a17      	ldr	r2, [pc, #92]	; (800bae8 <xTaskPriorityDisinherit+0x108>)
 800ba8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9a:	f1c3 0207 	rsb	r2, r3, #7
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa6:	2201      	movs	r2, #1
 800baa8:	409a      	lsls	r2, r3
 800baaa:	4b0f      	ldr	r3, [pc, #60]	; (800bae8 <xTaskPriorityDisinherit+0x108>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4313      	orrs	r3, r2
 800bab0:	4a0d      	ldr	r2, [pc, #52]	; (800bae8 <xTaskPriorityDisinherit+0x108>)
 800bab2:	6013      	str	r3, [r2, #0]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4a08      	ldr	r2, [pc, #32]	; (800bae4 <xTaskPriorityDisinherit+0x104>)
 800bac2:	441a      	add	r2, r3
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4619      	mov	r1, r3
 800baca:	4610      	mov	r0, r2
 800bacc:	f7fe f889 	bl	8009be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bad4:	697b      	ldr	r3, [r7, #20]
	}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	20000b4c 	.word	0x20000b4c
 800bae4:	20000b50 	.word	0x20000b50
 800bae8:	20000c54 	.word	0x20000c54

0800baec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bafa:	2301      	movs	r3, #1
 800bafc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d077      	beq.n	800bbf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10a      	bne.n	800bb22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	60fb      	str	r3, [r7, #12]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d902      	bls.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	61fb      	str	r3, [r7, #28]
 800bb30:	e002      	b.n	800bb38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3c:	69fa      	ldr	r2, [r7, #28]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d058      	beq.n	800bbf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d153      	bne.n	800bbf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb4c:	4b2b      	ldr	r3, [pc, #172]	; (800bbfc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d10a      	bne.n	800bb6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	60bb      	str	r3, [r7, #8]
}
 800bb68:	bf00      	nop
 800bb6a:	e7fe      	b.n	800bb6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	69fa      	ldr	r2, [r7, #28]
 800bb76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	699b      	ldr	r3, [r3, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	db04      	blt.n	800bb8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	f1c3 0207 	rsb	r2, r3, #7
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	6959      	ldr	r1, [r3, #20]
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	4613      	mov	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4a19      	ldr	r2, [pc, #100]	; (800bc00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bb9a:	4413      	add	r3, r2
 800bb9c:	4299      	cmp	r1, r3
 800bb9e:	d129      	bne.n	800bbf4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	3304      	adds	r3, #4
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe f879 	bl	8009c9c <uxListRemove>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10a      	bne.n	800bbc6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbba:	43da      	mvns	r2, r3
 800bbbc:	4b11      	ldr	r3, [pc, #68]	; (800bc04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	4a10      	ldr	r2, [pc, #64]	; (800bc04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bbc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbca:	2201      	movs	r2, #1
 800bbcc:	409a      	lsls	r2, r3
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	4a0b      	ldr	r2, [pc, #44]	; (800bc04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbdc:	4613      	mov	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4413      	add	r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4a06      	ldr	r2, [pc, #24]	; (800bc00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bbe6:	441a      	add	r2, r3
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	3304      	adds	r3, #4
 800bbec:	4619      	mov	r1, r3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	f7fd fff7 	bl	8009be2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbf4:	bf00      	nop
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20000b4c 	.word	0x20000b4c
 800bc00:	20000b50 	.word	0x20000b50
 800bc04:	20000c54 	.word	0x20000c54

0800bc08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc08:	b480      	push	{r7}
 800bc0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d004      	beq.n	800bc1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc14:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc1a:	3201      	adds	r2, #1
 800bc1c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bc1e:	4b03      	ldr	r3, [pc, #12]	; (800bc2c <pvTaskIncrementMutexHeldCount+0x24>)
 800bc20:	681b      	ldr	r3, [r3, #0]
	}
 800bc22:	4618      	mov	r0, r3
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr
 800bc2c:	20000b4c 	.word	0x20000b4c

0800bc30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc3a:	4b29      	ldr	r3, [pc, #164]	; (800bce0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc40:	4b28      	ldr	r3, [pc, #160]	; (800bce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe f828 	bl	8009c9c <uxListRemove>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10b      	bne.n	800bc6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bc52:	4b24      	ldr	r3, [pc, #144]	; (800bce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc58:	2201      	movs	r2, #1
 800bc5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc5e:	43da      	mvns	r2, r3
 800bc60:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4013      	ands	r3, r2
 800bc66:	4a20      	ldr	r2, [pc, #128]	; (800bce8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bc68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d10a      	bne.n	800bc88 <prvAddCurrentTaskToDelayedList+0x58>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d007      	beq.n	800bc88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc78:	4b1a      	ldr	r3, [pc, #104]	; (800bce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	4619      	mov	r1, r3
 800bc80:	481a      	ldr	r0, [pc, #104]	; (800bcec <prvAddCurrentTaskToDelayedList+0xbc>)
 800bc82:	f7fd ffae 	bl	8009be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc86:	e026      	b.n	800bcd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc90:	4b14      	ldr	r3, [pc, #80]	; (800bce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d209      	bcs.n	800bcb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bca0:	4b13      	ldr	r3, [pc, #76]	; (800bcf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4610      	mov	r0, r2
 800bcae:	f7fd ffbc 	bl	8009c2a <vListInsert>
}
 800bcb2:	e010      	b.n	800bcd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcb4:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f7fd ffb2 	bl	8009c2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d202      	bcs.n	800bcd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bcd0:	4a09      	ldr	r2, [pc, #36]	; (800bcf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	6013      	str	r3, [r2, #0]
}
 800bcd6:	bf00      	nop
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20000c50 	.word	0x20000c50
 800bce4:	20000b4c 	.word	0x20000b4c
 800bce8:	20000c54 	.word	0x20000c54
 800bcec:	20000c38 	.word	0x20000c38
 800bcf0:	20000c08 	.word	0x20000c08
 800bcf4:	20000c04 	.word	0x20000c04
 800bcf8:	20000c6c 	.word	0x20000c6c

0800bcfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3b04      	subs	r3, #4
 800bd0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bd14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3b04      	subs	r3, #4
 800bd1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f023 0201 	bic.w	r2, r3, #1
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3b04      	subs	r3, #4
 800bd2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd2c:	4a0c      	ldr	r2, [pc, #48]	; (800bd60 <pxPortInitialiseStack+0x64>)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3b14      	subs	r3, #20
 800bd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3b04      	subs	r3, #4
 800bd42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f06f 0202 	mvn.w	r2, #2
 800bd4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3b20      	subs	r3, #32
 800bd50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd52:	68fb      	ldr	r3, [r7, #12]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	0800bd65 	.word	0x0800bd65

0800bd64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd6e:	4b12      	ldr	r3, [pc, #72]	; (800bdb8 <prvTaskExitError+0x54>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd76:	d00a      	beq.n	800bd8e <prvTaskExitError+0x2a>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	60fb      	str	r3, [r7, #12]
}
 800bd8a:	bf00      	nop
 800bd8c:	e7fe      	b.n	800bd8c <prvTaskExitError+0x28>
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	60bb      	str	r3, [r7, #8]
}
 800bda0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bda2:	bf00      	nop
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0fc      	beq.n	800bda4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bdaa:	bf00      	nop
 800bdac:	bf00      	nop
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	2000000c 	.word	0x2000000c
 800bdbc:	00000000 	.word	0x00000000

0800bdc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bdc0:	4b07      	ldr	r3, [pc, #28]	; (800bde0 <pxCurrentTCBConst2>)
 800bdc2:	6819      	ldr	r1, [r3, #0]
 800bdc4:	6808      	ldr	r0, [r1, #0]
 800bdc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdca:	f380 8809 	msr	PSP, r0
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f04f 0000 	mov.w	r0, #0
 800bdd6:	f380 8811 	msr	BASEPRI, r0
 800bdda:	4770      	bx	lr
 800bddc:	f3af 8000 	nop.w

0800bde0 <pxCurrentTCBConst2>:
 800bde0:	20000b4c 	.word	0x20000b4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bde4:	bf00      	nop
 800bde6:	bf00      	nop

0800bde8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bde8:	4808      	ldr	r0, [pc, #32]	; (800be0c <prvPortStartFirstTask+0x24>)
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	6800      	ldr	r0, [r0, #0]
 800bdee:	f380 8808 	msr	MSP, r0
 800bdf2:	f04f 0000 	mov.w	r0, #0
 800bdf6:	f380 8814 	msr	CONTROL, r0
 800bdfa:	b662      	cpsie	i
 800bdfc:	b661      	cpsie	f
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	df00      	svc	0
 800be08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be0a:	bf00      	nop
 800be0c:	e000ed08 	.word	0xe000ed08

0800be10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be16:	4b46      	ldr	r3, [pc, #280]	; (800bf30 <xPortStartScheduler+0x120>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a46      	ldr	r2, [pc, #280]	; (800bf34 <xPortStartScheduler+0x124>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d10a      	bne.n	800be36 <xPortStartScheduler+0x26>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	613b      	str	r3, [r7, #16]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800be36:	4b3e      	ldr	r3, [pc, #248]	; (800bf30 <xPortStartScheduler+0x120>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a3f      	ldr	r2, [pc, #252]	; (800bf38 <xPortStartScheduler+0x128>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d10a      	bne.n	800be56 <xPortStartScheduler+0x46>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	60fb      	str	r3, [r7, #12]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be56:	4b39      	ldr	r3, [pc, #228]	; (800bf3c <xPortStartScheduler+0x12c>)
 800be58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	22ff      	movs	r2, #255	; 0xff
 800be66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be70:	78fb      	ldrb	r3, [r7, #3]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	4b31      	ldr	r3, [pc, #196]	; (800bf40 <xPortStartScheduler+0x130>)
 800be7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be7e:	4b31      	ldr	r3, [pc, #196]	; (800bf44 <xPortStartScheduler+0x134>)
 800be80:	2207      	movs	r2, #7
 800be82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be84:	e009      	b.n	800be9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800be86:	4b2f      	ldr	r3, [pc, #188]	; (800bf44 <xPortStartScheduler+0x134>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	4a2d      	ldr	r2, [pc, #180]	; (800bf44 <xPortStartScheduler+0x134>)
 800be8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be90:	78fb      	ldrb	r3, [r7, #3]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	b2db      	uxtb	r3, r3
 800be98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bea2:	2b80      	cmp	r3, #128	; 0x80
 800bea4:	d0ef      	beq.n	800be86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bea6:	4b27      	ldr	r3, [pc, #156]	; (800bf44 <xPortStartScheduler+0x134>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1c3 0307 	rsb	r3, r3, #7
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d00a      	beq.n	800bec8 <xPortStartScheduler+0xb8>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	60bb      	str	r3, [r7, #8]
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bec8:	4b1e      	ldr	r3, [pc, #120]	; (800bf44 <xPortStartScheduler+0x134>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	021b      	lsls	r3, r3, #8
 800bece:	4a1d      	ldr	r2, [pc, #116]	; (800bf44 <xPortStartScheduler+0x134>)
 800bed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bed2:	4b1c      	ldr	r3, [pc, #112]	; (800bf44 <xPortStartScheduler+0x134>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beda:	4a1a      	ldr	r2, [pc, #104]	; (800bf44 <xPortStartScheduler+0x134>)
 800bedc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bee6:	4b18      	ldr	r3, [pc, #96]	; (800bf48 <xPortStartScheduler+0x138>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a17      	ldr	r2, [pc, #92]	; (800bf48 <xPortStartScheduler+0x138>)
 800beec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bef2:	4b15      	ldr	r3, [pc, #84]	; (800bf48 <xPortStartScheduler+0x138>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a14      	ldr	r2, [pc, #80]	; (800bf48 <xPortStartScheduler+0x138>)
 800bef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800befc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800befe:	f000 f8dd 	bl	800c0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf02:	4b12      	ldr	r3, [pc, #72]	; (800bf4c <xPortStartScheduler+0x13c>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf08:	f000 f8fc 	bl	800c104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf0c:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <xPortStartScheduler+0x140>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a0f      	ldr	r2, [pc, #60]	; (800bf50 <xPortStartScheduler+0x140>)
 800bf12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bf16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf18:	f7ff ff66 	bl	800bde8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf1c:	f7ff fa86 	bl	800b42c <vTaskSwitchContext>
	prvTaskExitError();
 800bf20:	f7ff ff20 	bl	800bd64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	e000ed00 	.word	0xe000ed00
 800bf34:	410fc271 	.word	0x410fc271
 800bf38:	410fc270 	.word	0x410fc270
 800bf3c:	e000e400 	.word	0xe000e400
 800bf40:	20000c78 	.word	0x20000c78
 800bf44:	20000c7c 	.word	0x20000c7c
 800bf48:	e000ed20 	.word	0xe000ed20
 800bf4c:	2000000c 	.word	0x2000000c
 800bf50:	e000ef34 	.word	0xe000ef34

0800bf54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
	__asm volatile
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	607b      	str	r3, [r7, #4]
}
 800bf6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf6e:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <vPortEnterCritical+0x58>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3301      	adds	r3, #1
 800bf74:	4a0d      	ldr	r2, [pc, #52]	; (800bfac <vPortEnterCritical+0x58>)
 800bf76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <vPortEnterCritical+0x58>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d10f      	bne.n	800bfa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <vPortEnterCritical+0x5c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	603b      	str	r3, [r7, #0]
}
 800bf9c:	bf00      	nop
 800bf9e:	e7fe      	b.n	800bf9e <vPortEnterCritical+0x4a>
	}
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	2000000c 	.word	0x2000000c
 800bfb0:	e000ed04 	.word	0xe000ed04

0800bfb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfba:	4b12      	ldr	r3, [pc, #72]	; (800c004 <vPortExitCritical+0x50>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10a      	bne.n	800bfd8 <vPortExitCritical+0x24>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	607b      	str	r3, [r7, #4]
}
 800bfd4:	bf00      	nop
 800bfd6:	e7fe      	b.n	800bfd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bfd8:	4b0a      	ldr	r3, [pc, #40]	; (800c004 <vPortExitCritical+0x50>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	4a09      	ldr	r2, [pc, #36]	; (800c004 <vPortExitCritical+0x50>)
 800bfe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfe2:	4b08      	ldr	r3, [pc, #32]	; (800c004 <vPortExitCritical+0x50>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d105      	bne.n	800bff6 <vPortExitCritical+0x42>
 800bfea:	2300      	movs	r3, #0
 800bfec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	f383 8811 	msr	BASEPRI, r3
}
 800bff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bff6:	bf00      	nop
 800bff8:	370c      	adds	r7, #12
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	2000000c 	.word	0x2000000c
	...

0800c010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c010:	f3ef 8009 	mrs	r0, PSP
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	4b15      	ldr	r3, [pc, #84]	; (800c070 <pxCurrentTCBConst>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	f01e 0f10 	tst.w	lr, #16
 800c020:	bf08      	it	eq
 800c022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02a:	6010      	str	r0, [r2, #0]
 800c02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c034:	f380 8811 	msr	BASEPRI, r0
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f7ff f9f4 	bl	800b42c <vTaskSwitchContext>
 800c044:	f04f 0000 	mov.w	r0, #0
 800c048:	f380 8811 	msr	BASEPRI, r0
 800c04c:	bc09      	pop	{r0, r3}
 800c04e:	6819      	ldr	r1, [r3, #0]
 800c050:	6808      	ldr	r0, [r1, #0]
 800c052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c056:	f01e 0f10 	tst.w	lr, #16
 800c05a:	bf08      	it	eq
 800c05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c060:	f380 8809 	msr	PSP, r0
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	f3af 8000 	nop.w

0800c070 <pxCurrentTCBConst>:
 800c070:	20000b4c 	.word	0x20000b4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop

0800c078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	607b      	str	r3, [r7, #4]
}
 800c090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c092:	f7ff f913 	bl	800b2bc <xTaskIncrementTick>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d003      	beq.n	800c0a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c09c:	4b06      	ldr	r3, [pc, #24]	; (800c0b8 <SysTick_Handler+0x40>)
 800c09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	f383 8811 	msr	BASEPRI, r3
}
 800c0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0b0:	bf00      	nop
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0c0:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <vPortSetupTimerInterrupt+0x34>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0c6:	4b0b      	ldr	r3, [pc, #44]	; (800c0f4 <vPortSetupTimerInterrupt+0x38>)
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0cc:	4b0a      	ldr	r3, [pc, #40]	; (800c0f8 <vPortSetupTimerInterrupt+0x3c>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a0a      	ldr	r2, [pc, #40]	; (800c0fc <vPortSetupTimerInterrupt+0x40>)
 800c0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d6:	099b      	lsrs	r3, r3, #6
 800c0d8:	4a09      	ldr	r2, [pc, #36]	; (800c100 <vPortSetupTimerInterrupt+0x44>)
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0de:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <vPortSetupTimerInterrupt+0x34>)
 800c0e0:	2207      	movs	r2, #7
 800c0e2:	601a      	str	r2, [r3, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	e000e010 	.word	0xe000e010
 800c0f4:	e000e018 	.word	0xe000e018
 800c0f8:	20000000 	.word	0x20000000
 800c0fc:	10624dd3 	.word	0x10624dd3
 800c100:	e000e014 	.word	0xe000e014

0800c104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c114 <vPortEnableVFP+0x10>
 800c108:	6801      	ldr	r1, [r0, #0]
 800c10a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c10e:	6001      	str	r1, [r0, #0]
 800c110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c112:	bf00      	nop
 800c114:	e000ed88 	.word	0xe000ed88

0800c118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c11e:	f3ef 8305 	mrs	r3, IPSR
 800c122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b0f      	cmp	r3, #15
 800c128:	d914      	bls.n	800c154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c12a:	4a17      	ldr	r2, [pc, #92]	; (800c188 <vPortValidateInterruptPriority+0x70>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c134:	4b15      	ldr	r3, [pc, #84]	; (800c18c <vPortValidateInterruptPriority+0x74>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	7afa      	ldrb	r2, [r7, #11]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d20a      	bcs.n	800c154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	607b      	str	r3, [r7, #4]
}
 800c150:	bf00      	nop
 800c152:	e7fe      	b.n	800c152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c154:	4b0e      	ldr	r3, [pc, #56]	; (800c190 <vPortValidateInterruptPriority+0x78>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c15c:	4b0d      	ldr	r3, [pc, #52]	; (800c194 <vPortValidateInterruptPriority+0x7c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	429a      	cmp	r2, r3
 800c162:	d90a      	bls.n	800c17a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	603b      	str	r3, [r7, #0]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <vPortValidateInterruptPriority+0x60>
	}
 800c17a:	bf00      	nop
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	e000e3f0 	.word	0xe000e3f0
 800c18c:	20000c78 	.word	0x20000c78
 800c190:	e000ed0c 	.word	0xe000ed0c
 800c194:	20000c7c 	.word	0x20000c7c

0800c198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08a      	sub	sp, #40	; 0x28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1a4:	f7fe ffbe 	bl	800b124 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1a8:	4b5b      	ldr	r3, [pc, #364]	; (800c318 <pvPortMalloc+0x180>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1b0:	f000 f920 	bl	800c3f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1b4:	4b59      	ldr	r3, [pc, #356]	; (800c31c <pvPortMalloc+0x184>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f040 8093 	bne.w	800c2e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d01d      	beq.n	800c204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c1c8:	2208      	movs	r2, #8
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d014      	beq.n	800c204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f023 0307 	bic.w	r3, r3, #7
 800c1e0:	3308      	adds	r3, #8
 800c1e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f003 0307 	and.w	r3, r3, #7
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00a      	beq.n	800c204 <pvPortMalloc+0x6c>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	617b      	str	r3, [r7, #20]
}
 800c200:	bf00      	nop
 800c202:	e7fe      	b.n	800c202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d06e      	beq.n	800c2e8 <pvPortMalloc+0x150>
 800c20a:	4b45      	ldr	r3, [pc, #276]	; (800c320 <pvPortMalloc+0x188>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	429a      	cmp	r2, r3
 800c212:	d869      	bhi.n	800c2e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c214:	4b43      	ldr	r3, [pc, #268]	; (800c324 <pvPortMalloc+0x18c>)
 800c216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c218:	4b42      	ldr	r3, [pc, #264]	; (800c324 <pvPortMalloc+0x18c>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c21e:	e004      	b.n	800c22a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d903      	bls.n	800c23c <pvPortMalloc+0xa4>
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1f1      	bne.n	800c220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c23c:	4b36      	ldr	r3, [pc, #216]	; (800c318 <pvPortMalloc+0x180>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c242:	429a      	cmp	r2, r3
 800c244:	d050      	beq.n	800c2e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2208      	movs	r2, #8
 800c24c:	4413      	add	r3, r2
 800c24e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	1ad2      	subs	r2, r2, r3
 800c260:	2308      	movs	r3, #8
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	429a      	cmp	r2, r3
 800c266:	d91f      	bls.n	800c2a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4413      	add	r3, r2
 800c26e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	f003 0307 	and.w	r3, r3, #7
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <pvPortMalloc+0xf8>
	__asm volatile
 800c27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27e:	f383 8811 	msr	BASEPRI, r3
 800c282:	f3bf 8f6f 	isb	sy
 800c286:	f3bf 8f4f 	dsb	sy
 800c28a:	613b      	str	r3, [r7, #16]
}
 800c28c:	bf00      	nop
 800c28e:	e7fe      	b.n	800c28e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2a2:	69b8      	ldr	r0, [r7, #24]
 800c2a4:	f000 f908 	bl	800c4b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2a8:	4b1d      	ldr	r3, [pc, #116]	; (800c320 <pvPortMalloc+0x188>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	4a1b      	ldr	r2, [pc, #108]	; (800c320 <pvPortMalloc+0x188>)
 800c2b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2b6:	4b1a      	ldr	r3, [pc, #104]	; (800c320 <pvPortMalloc+0x188>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	4b1b      	ldr	r3, [pc, #108]	; (800c328 <pvPortMalloc+0x190>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d203      	bcs.n	800c2ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2c2:	4b17      	ldr	r3, [pc, #92]	; (800c320 <pvPortMalloc+0x188>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a18      	ldr	r2, [pc, #96]	; (800c328 <pvPortMalloc+0x190>)
 800c2c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	4b13      	ldr	r3, [pc, #76]	; (800c31c <pvPortMalloc+0x184>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	2200      	movs	r2, #0
 800c2dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2de:	4b13      	ldr	r3, [pc, #76]	; (800c32c <pvPortMalloc+0x194>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	4a11      	ldr	r2, [pc, #68]	; (800c32c <pvPortMalloc+0x194>)
 800c2e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2e8:	f7fe ff2a 	bl	800b140 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	f003 0307 	and.w	r3, r3, #7
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <pvPortMalloc+0x174>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	60fb      	str	r3, [r7, #12]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <pvPortMalloc+0x172>
	return pvReturn;
 800c30c:	69fb      	ldr	r3, [r7, #28]
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3728      	adds	r7, #40	; 0x28
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20003398 	.word	0x20003398
 800c31c:	200033ac 	.word	0x200033ac
 800c320:	2000339c 	.word	0x2000339c
 800c324:	20003390 	.word	0x20003390
 800c328:	200033a0 	.word	0x200033a0
 800c32c:	200033a4 	.word	0x200033a4

0800c330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d04d      	beq.n	800c3de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c342:	2308      	movs	r3, #8
 800c344:	425b      	negs	r3, r3
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	4413      	add	r3, r2
 800c34a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	4b24      	ldr	r3, [pc, #144]	; (800c3e8 <vPortFree+0xb8>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4013      	ands	r3, r2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10a      	bne.n	800c374 <vPortFree+0x44>
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	60fb      	str	r3, [r7, #12]
}
 800c370:	bf00      	nop
 800c372:	e7fe      	b.n	800c372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00a      	beq.n	800c392 <vPortFree+0x62>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	60bb      	str	r3, [r7, #8]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	4b14      	ldr	r3, [pc, #80]	; (800c3e8 <vPortFree+0xb8>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4013      	ands	r3, r2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01e      	beq.n	800c3de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d11a      	bne.n	800c3de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	4b0e      	ldr	r3, [pc, #56]	; (800c3e8 <vPortFree+0xb8>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	43db      	mvns	r3, r3
 800c3b2:	401a      	ands	r2, r3
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3b8:	f7fe feb4 	bl	800b124 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	685a      	ldr	r2, [r3, #4]
 800c3c0:	4b0a      	ldr	r3, [pc, #40]	; (800c3ec <vPortFree+0xbc>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	4a09      	ldr	r2, [pc, #36]	; (800c3ec <vPortFree+0xbc>)
 800c3c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3ca:	6938      	ldr	r0, [r7, #16]
 800c3cc:	f000 f874 	bl	800c4b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3d0:	4b07      	ldr	r3, [pc, #28]	; (800c3f0 <vPortFree+0xc0>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	4a06      	ldr	r2, [pc, #24]	; (800c3f0 <vPortFree+0xc0>)
 800c3d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3da:	f7fe feb1 	bl	800b140 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3de:	bf00      	nop
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	200033ac 	.word	0x200033ac
 800c3ec:	2000339c 	.word	0x2000339c
 800c3f0:	200033a8 	.word	0x200033a8

0800c3f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3fa:	f242 7310 	movw	r3, #10000	; 0x2710
 800c3fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c400:	4b27      	ldr	r3, [pc, #156]	; (800c4a0 <prvHeapInit+0xac>)
 800c402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00c      	beq.n	800c428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	3307      	adds	r3, #7
 800c412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f023 0307 	bic.w	r3, r3, #7
 800c41a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	4a1f      	ldr	r2, [pc, #124]	; (800c4a0 <prvHeapInit+0xac>)
 800c424:	4413      	add	r3, r2
 800c426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c42c:	4a1d      	ldr	r2, [pc, #116]	; (800c4a4 <prvHeapInit+0xb0>)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c432:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <prvHeapInit+0xb0>)
 800c434:	2200      	movs	r2, #0
 800c436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	4413      	add	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c440:	2208      	movs	r2, #8
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	1a9b      	subs	r3, r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 0307 	bic.w	r3, r3, #7
 800c44e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4a15      	ldr	r2, [pc, #84]	; (800c4a8 <prvHeapInit+0xb4>)
 800c454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c456:	4b14      	ldr	r3, [pc, #80]	; (800c4a8 <prvHeapInit+0xb4>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2200      	movs	r2, #0
 800c45c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c45e:	4b12      	ldr	r3, [pc, #72]	; (800c4a8 <prvHeapInit+0xb4>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2200      	movs	r2, #0
 800c464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c474:	4b0c      	ldr	r3, [pc, #48]	; (800c4a8 <prvHeapInit+0xb4>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	4a0a      	ldr	r2, [pc, #40]	; (800c4ac <prvHeapInit+0xb8>)
 800c482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	4a09      	ldr	r2, [pc, #36]	; (800c4b0 <prvHeapInit+0xbc>)
 800c48a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c48c:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <prvHeapInit+0xc0>)
 800c48e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c492:	601a      	str	r2, [r3, #0]
}
 800c494:	bf00      	nop
 800c496:	3714      	adds	r7, #20
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr
 800c4a0:	20000c80 	.word	0x20000c80
 800c4a4:	20003390 	.word	0x20003390
 800c4a8:	20003398 	.word	0x20003398
 800c4ac:	200033a0 	.word	0x200033a0
 800c4b0:	2000339c 	.word	0x2000339c
 800c4b4:	200033ac 	.word	0x200033ac

0800c4b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4c0:	4b28      	ldr	r3, [pc, #160]	; (800c564 <prvInsertBlockIntoFreeList+0xac>)
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	e002      	b.n	800c4cc <prvInsertBlockIntoFreeList+0x14>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d8f7      	bhi.n	800c4c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d108      	bne.n	800c4fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	441a      	add	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	441a      	add	r2, r3
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d118      	bne.n	800c540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b15      	ldr	r3, [pc, #84]	; (800c568 <prvInsertBlockIntoFreeList+0xb0>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d00d      	beq.n	800c536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	441a      	add	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	601a      	str	r2, [r3, #0]
 800c534:	e008      	b.n	800c548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c536:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <prvInsertBlockIntoFreeList+0xb0>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	e003      	b.n	800c548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d002      	beq.n	800c556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c556:	bf00      	nop
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	20003390 	.word	0x20003390
 800c568:	20003398 	.word	0x20003398

0800c56c <__libc_init_array>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	4d0d      	ldr	r5, [pc, #52]	; (800c5a4 <__libc_init_array+0x38>)
 800c570:	4c0d      	ldr	r4, [pc, #52]	; (800c5a8 <__libc_init_array+0x3c>)
 800c572:	1b64      	subs	r4, r4, r5
 800c574:	10a4      	asrs	r4, r4, #2
 800c576:	2600      	movs	r6, #0
 800c578:	42a6      	cmp	r6, r4
 800c57a:	d109      	bne.n	800c590 <__libc_init_array+0x24>
 800c57c:	4d0b      	ldr	r5, [pc, #44]	; (800c5ac <__libc_init_array+0x40>)
 800c57e:	4c0c      	ldr	r4, [pc, #48]	; (800c5b0 <__libc_init_array+0x44>)
 800c580:	f000 f8f2 	bl	800c768 <_init>
 800c584:	1b64      	subs	r4, r4, r5
 800c586:	10a4      	asrs	r4, r4, #2
 800c588:	2600      	movs	r6, #0
 800c58a:	42a6      	cmp	r6, r4
 800c58c:	d105      	bne.n	800c59a <__libc_init_array+0x2e>
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	f855 3b04 	ldr.w	r3, [r5], #4
 800c594:	4798      	blx	r3
 800c596:	3601      	adds	r6, #1
 800c598:	e7ee      	b.n	800c578 <__libc_init_array+0xc>
 800c59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c59e:	4798      	blx	r3
 800c5a0:	3601      	adds	r6, #1
 800c5a2:	e7f2      	b.n	800c58a <__libc_init_array+0x1e>
 800c5a4:	0800c9c0 	.word	0x0800c9c0
 800c5a8:	0800c9c0 	.word	0x0800c9c0
 800c5ac:	0800c9c0 	.word	0x0800c9c0
 800c5b0:	0800c9c4 	.word	0x0800c9c4

0800c5b4 <__retarget_lock_acquire_recursive>:
 800c5b4:	4770      	bx	lr

0800c5b6 <__retarget_lock_release_recursive>:
 800c5b6:	4770      	bx	lr

0800c5b8 <memcpy>:
 800c5b8:	440a      	add	r2, r1
 800c5ba:	4291      	cmp	r1, r2
 800c5bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5c0:	d100      	bne.n	800c5c4 <memcpy+0xc>
 800c5c2:	4770      	bx	lr
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ce:	4291      	cmp	r1, r2
 800c5d0:	d1f9      	bne.n	800c5c6 <memcpy+0xe>
 800c5d2:	bd10      	pop	{r4, pc}

0800c5d4 <memset>:
 800c5d4:	4402      	add	r2, r0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d100      	bne.n	800c5de <memset+0xa>
 800c5dc:	4770      	bx	lr
 800c5de:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e2:	e7f9      	b.n	800c5d8 <memset+0x4>

0800c5e4 <cleanup_glue>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	6809      	ldr	r1, [r1, #0]
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	b109      	cbz	r1, 800c5f2 <cleanup_glue+0xe>
 800c5ee:	f7ff fff9 	bl	800c5e4 <cleanup_glue>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5fa:	f000 b869 	b.w	800c6d0 <_free_r>
	...

0800c600 <_reclaim_reent>:
 800c600:	4b2c      	ldr	r3, [pc, #176]	; (800c6b4 <_reclaim_reent+0xb4>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4283      	cmp	r3, r0
 800c606:	b570      	push	{r4, r5, r6, lr}
 800c608:	4604      	mov	r4, r0
 800c60a:	d051      	beq.n	800c6b0 <_reclaim_reent+0xb0>
 800c60c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c60e:	b143      	cbz	r3, 800c622 <_reclaim_reent+0x22>
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d14a      	bne.n	800c6ac <_reclaim_reent+0xac>
 800c616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c618:	6819      	ldr	r1, [r3, #0]
 800c61a:	b111      	cbz	r1, 800c622 <_reclaim_reent+0x22>
 800c61c:	4620      	mov	r0, r4
 800c61e:	f000 f857 	bl	800c6d0 <_free_r>
 800c622:	6961      	ldr	r1, [r4, #20]
 800c624:	b111      	cbz	r1, 800c62c <_reclaim_reent+0x2c>
 800c626:	4620      	mov	r0, r4
 800c628:	f000 f852 	bl	800c6d0 <_free_r>
 800c62c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c62e:	b111      	cbz	r1, 800c636 <_reclaim_reent+0x36>
 800c630:	4620      	mov	r0, r4
 800c632:	f000 f84d 	bl	800c6d0 <_free_r>
 800c636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c638:	b111      	cbz	r1, 800c640 <_reclaim_reent+0x40>
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 f848 	bl	800c6d0 <_free_r>
 800c640:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c642:	b111      	cbz	r1, 800c64a <_reclaim_reent+0x4a>
 800c644:	4620      	mov	r0, r4
 800c646:	f000 f843 	bl	800c6d0 <_free_r>
 800c64a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c64c:	b111      	cbz	r1, 800c654 <_reclaim_reent+0x54>
 800c64e:	4620      	mov	r0, r4
 800c650:	f000 f83e 	bl	800c6d0 <_free_r>
 800c654:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c656:	b111      	cbz	r1, 800c65e <_reclaim_reent+0x5e>
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 f839 	bl	800c6d0 <_free_r>
 800c65e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c660:	b111      	cbz	r1, 800c668 <_reclaim_reent+0x68>
 800c662:	4620      	mov	r0, r4
 800c664:	f000 f834 	bl	800c6d0 <_free_r>
 800c668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c66a:	b111      	cbz	r1, 800c672 <_reclaim_reent+0x72>
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 f82f 	bl	800c6d0 <_free_r>
 800c672:	69a3      	ldr	r3, [r4, #24]
 800c674:	b1e3      	cbz	r3, 800c6b0 <_reclaim_reent+0xb0>
 800c676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c678:	4620      	mov	r0, r4
 800c67a:	4798      	blx	r3
 800c67c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c67e:	b1b9      	cbz	r1, 800c6b0 <_reclaim_reent+0xb0>
 800c680:	4620      	mov	r0, r4
 800c682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c686:	f7ff bfad 	b.w	800c5e4 <cleanup_glue>
 800c68a:	5949      	ldr	r1, [r1, r5]
 800c68c:	b941      	cbnz	r1, 800c6a0 <_reclaim_reent+0xa0>
 800c68e:	3504      	adds	r5, #4
 800c690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c692:	2d80      	cmp	r5, #128	; 0x80
 800c694:	68d9      	ldr	r1, [r3, #12]
 800c696:	d1f8      	bne.n	800c68a <_reclaim_reent+0x8a>
 800c698:	4620      	mov	r0, r4
 800c69a:	f000 f819 	bl	800c6d0 <_free_r>
 800c69e:	e7ba      	b.n	800c616 <_reclaim_reent+0x16>
 800c6a0:	680e      	ldr	r6, [r1, #0]
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 f814 	bl	800c6d0 <_free_r>
 800c6a8:	4631      	mov	r1, r6
 800c6aa:	e7ef      	b.n	800c68c <_reclaim_reent+0x8c>
 800c6ac:	2500      	movs	r5, #0
 800c6ae:	e7ef      	b.n	800c690 <_reclaim_reent+0x90>
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20000010 	.word	0x20000010

0800c6b8 <__malloc_lock>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	; (800c6c0 <__malloc_lock+0x8>)
 800c6ba:	f7ff bf7b 	b.w	800c5b4 <__retarget_lock_acquire_recursive>
 800c6be:	bf00      	nop
 800c6c0:	200033b0 	.word	0x200033b0

0800c6c4 <__malloc_unlock>:
 800c6c4:	4801      	ldr	r0, [pc, #4]	; (800c6cc <__malloc_unlock+0x8>)
 800c6c6:	f7ff bf76 	b.w	800c5b6 <__retarget_lock_release_recursive>
 800c6ca:	bf00      	nop
 800c6cc:	200033b0 	.word	0x200033b0

0800c6d0 <_free_r>:
 800c6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6d2:	2900      	cmp	r1, #0
 800c6d4:	d044      	beq.n	800c760 <_free_r+0x90>
 800c6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6da:	9001      	str	r0, [sp, #4]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f1a1 0404 	sub.w	r4, r1, #4
 800c6e2:	bfb8      	it	lt
 800c6e4:	18e4      	addlt	r4, r4, r3
 800c6e6:	f7ff ffe7 	bl	800c6b8 <__malloc_lock>
 800c6ea:	4a1e      	ldr	r2, [pc, #120]	; (800c764 <_free_r+0x94>)
 800c6ec:	9801      	ldr	r0, [sp, #4]
 800c6ee:	6813      	ldr	r3, [r2, #0]
 800c6f0:	b933      	cbnz	r3, 800c700 <_free_r+0x30>
 800c6f2:	6063      	str	r3, [r4, #4]
 800c6f4:	6014      	str	r4, [r2, #0]
 800c6f6:	b003      	add	sp, #12
 800c6f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6fc:	f7ff bfe2 	b.w	800c6c4 <__malloc_unlock>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d908      	bls.n	800c716 <_free_r+0x46>
 800c704:	6825      	ldr	r5, [r4, #0]
 800c706:	1961      	adds	r1, r4, r5
 800c708:	428b      	cmp	r3, r1
 800c70a:	bf01      	itttt	eq
 800c70c:	6819      	ldreq	r1, [r3, #0]
 800c70e:	685b      	ldreq	r3, [r3, #4]
 800c710:	1949      	addeq	r1, r1, r5
 800c712:	6021      	streq	r1, [r4, #0]
 800c714:	e7ed      	b.n	800c6f2 <_free_r+0x22>
 800c716:	461a      	mov	r2, r3
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	b10b      	cbz	r3, 800c720 <_free_r+0x50>
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	d9fa      	bls.n	800c716 <_free_r+0x46>
 800c720:	6811      	ldr	r1, [r2, #0]
 800c722:	1855      	adds	r5, r2, r1
 800c724:	42a5      	cmp	r5, r4
 800c726:	d10b      	bne.n	800c740 <_free_r+0x70>
 800c728:	6824      	ldr	r4, [r4, #0]
 800c72a:	4421      	add	r1, r4
 800c72c:	1854      	adds	r4, r2, r1
 800c72e:	42a3      	cmp	r3, r4
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	d1e0      	bne.n	800c6f6 <_free_r+0x26>
 800c734:	681c      	ldr	r4, [r3, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	6053      	str	r3, [r2, #4]
 800c73a:	4421      	add	r1, r4
 800c73c:	6011      	str	r1, [r2, #0]
 800c73e:	e7da      	b.n	800c6f6 <_free_r+0x26>
 800c740:	d902      	bls.n	800c748 <_free_r+0x78>
 800c742:	230c      	movs	r3, #12
 800c744:	6003      	str	r3, [r0, #0]
 800c746:	e7d6      	b.n	800c6f6 <_free_r+0x26>
 800c748:	6825      	ldr	r5, [r4, #0]
 800c74a:	1961      	adds	r1, r4, r5
 800c74c:	428b      	cmp	r3, r1
 800c74e:	bf04      	itt	eq
 800c750:	6819      	ldreq	r1, [r3, #0]
 800c752:	685b      	ldreq	r3, [r3, #4]
 800c754:	6063      	str	r3, [r4, #4]
 800c756:	bf04      	itt	eq
 800c758:	1949      	addeq	r1, r1, r5
 800c75a:	6021      	streq	r1, [r4, #0]
 800c75c:	6054      	str	r4, [r2, #4]
 800c75e:	e7ca      	b.n	800c6f6 <_free_r+0x26>
 800c760:	b003      	add	sp, #12
 800c762:	bd30      	pop	{r4, r5, pc}
 800c764:	200033b4 	.word	0x200033b4

0800c768 <_init>:
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76a:	bf00      	nop
 800c76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76e:	bc08      	pop	{r3}
 800c770:	469e      	mov	lr, r3
 800c772:	4770      	bx	lr

0800c774 <_fini>:
 800c774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c776:	bf00      	nop
 800c778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c77a:	bc08      	pop	{r3}
 800c77c:	469e      	mov	lr, r3
 800c77e:	4770      	bx	lr
